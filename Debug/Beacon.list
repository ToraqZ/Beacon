
Beacon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008670  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  080087ac  080087ac  000097ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008a7c  08008a7c  00009a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008a84  08008a84  00009a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008a88  08008a88  00009a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  20000008  08008a8c  0000a008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  2000001c  08008aa0  0000a01c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000054  08008ad5  0000a054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000594  20000068  08008ae6  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005fc  08008ae6  0000a5fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000aa67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0000b000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0000b000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08008ae6  0000a1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0002e6b1  00000000  00000000  0000aa97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006274  00000000  00000000  00039148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002920  00000000  00000000  0003f3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001f73  00000000  00000000  00041ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002b7e6  00000000  00000000  00043c53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002d324  00000000  00000000  0006f439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f9295  00000000  00000000  0009c75d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001959f2  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000ac38  00000000  00000000  00195a38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000042  00000000  00000000  001a0670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000068 	.word	0x20000068
 8000158:	00000000 	.word	0x00000000
 800015c:	08008794 	.word	0x08008794

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000006c 	.word	0x2000006c
 8000178:	08008794 	.word	0x08008794

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b96a 	b.w	8000478 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9d08      	ldr	r5, [sp, #32]
 80001c2:	460c      	mov	r4, r1
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d14e      	bne.n	8000266 <__udivmoddi4+0xaa>
 80001c8:	4694      	mov	ip, r2
 80001ca:	458c      	cmp	ip, r1
 80001cc:	4686      	mov	lr, r0
 80001ce:	fab2 f282 	clz	r2, r2
 80001d2:	d962      	bls.n	800029a <__udivmoddi4+0xde>
 80001d4:	b14a      	cbz	r2, 80001ea <__udivmoddi4+0x2e>
 80001d6:	f1c2 0320 	rsb	r3, r2, #32
 80001da:	4091      	lsls	r1, r2
 80001dc:	fa20 f303 	lsr.w	r3, r0, r3
 80001e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e4:	4319      	orrs	r1, r3
 80001e6:	fa00 fe02 	lsl.w	lr, r0, r2
 80001ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001ee:	fa1f f68c 	uxth.w	r6, ip
 80001f2:	fbb1 f4f7 	udiv	r4, r1, r7
 80001f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001fa:	fb07 1114 	mls	r1, r7, r4, r1
 80001fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000202:	fb04 f106 	mul.w	r1, r4, r6
 8000206:	4299      	cmp	r1, r3
 8000208:	d90a      	bls.n	8000220 <__udivmoddi4+0x64>
 800020a:	eb1c 0303 	adds.w	r3, ip, r3
 800020e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000212:	f080 8112 	bcs.w	800043a <__udivmoddi4+0x27e>
 8000216:	4299      	cmp	r1, r3
 8000218:	f240 810f 	bls.w	800043a <__udivmoddi4+0x27e>
 800021c:	3c02      	subs	r4, #2
 800021e:	4463      	add	r3, ip
 8000220:	1a59      	subs	r1, r3, r1
 8000222:	fa1f f38e 	uxth.w	r3, lr
 8000226:	fbb1 f0f7 	udiv	r0, r1, r7
 800022a:	fb07 1110 	mls	r1, r7, r0, r1
 800022e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000232:	fb00 f606 	mul.w	r6, r0, r6
 8000236:	429e      	cmp	r6, r3
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0303 	adds.w	r3, ip, r3
 800023e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000242:	f080 80fc 	bcs.w	800043e <__udivmoddi4+0x282>
 8000246:	429e      	cmp	r6, r3
 8000248:	f240 80f9 	bls.w	800043e <__udivmoddi4+0x282>
 800024c:	4463      	add	r3, ip
 800024e:	3802      	subs	r0, #2
 8000250:	1b9b      	subs	r3, r3, r6
 8000252:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000256:	2100      	movs	r1, #0
 8000258:	b11d      	cbz	r5, 8000262 <__udivmoddi4+0xa6>
 800025a:	40d3      	lsrs	r3, r2
 800025c:	2200      	movs	r2, #0
 800025e:	e9c5 3200 	strd	r3, r2, [r5]
 8000262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000266:	428b      	cmp	r3, r1
 8000268:	d905      	bls.n	8000276 <__udivmoddi4+0xba>
 800026a:	b10d      	cbz	r5, 8000270 <__udivmoddi4+0xb4>
 800026c:	e9c5 0100 	strd	r0, r1, [r5]
 8000270:	2100      	movs	r1, #0
 8000272:	4608      	mov	r0, r1
 8000274:	e7f5      	b.n	8000262 <__udivmoddi4+0xa6>
 8000276:	fab3 f183 	clz	r1, r3
 800027a:	2900      	cmp	r1, #0
 800027c:	d146      	bne.n	800030c <__udivmoddi4+0x150>
 800027e:	42a3      	cmp	r3, r4
 8000280:	d302      	bcc.n	8000288 <__udivmoddi4+0xcc>
 8000282:	4290      	cmp	r0, r2
 8000284:	f0c0 80f0 	bcc.w	8000468 <__udivmoddi4+0x2ac>
 8000288:	1a86      	subs	r6, r0, r2
 800028a:	eb64 0303 	sbc.w	r3, r4, r3
 800028e:	2001      	movs	r0, #1
 8000290:	2d00      	cmp	r5, #0
 8000292:	d0e6      	beq.n	8000262 <__udivmoddi4+0xa6>
 8000294:	e9c5 6300 	strd	r6, r3, [r5]
 8000298:	e7e3      	b.n	8000262 <__udivmoddi4+0xa6>
 800029a:	2a00      	cmp	r2, #0
 800029c:	f040 8090 	bne.w	80003c0 <__udivmoddi4+0x204>
 80002a0:	eba1 040c 	sub.w	r4, r1, ip
 80002a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a8:	fa1f f78c 	uxth.w	r7, ip
 80002ac:	2101      	movs	r1, #1
 80002ae:	fbb4 f6f8 	udiv	r6, r4, r8
 80002b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002b6:	fb08 4416 	mls	r4, r8, r6, r4
 80002ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002be:	fb07 f006 	mul.w	r0, r7, r6
 80002c2:	4298      	cmp	r0, r3
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x11c>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 34ff 	add.w	r4, r6, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x11a>
 80002d0:	4298      	cmp	r0, r3
 80002d2:	f200 80cd 	bhi.w	8000470 <__udivmoddi4+0x2b4>
 80002d6:	4626      	mov	r6, r4
 80002d8:	1a1c      	subs	r4, r3, r0
 80002da:	fa1f f38e 	uxth.w	r3, lr
 80002de:	fbb4 f0f8 	udiv	r0, r4, r8
 80002e2:	fb08 4410 	mls	r4, r8, r0, r4
 80002e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002ea:	fb00 f707 	mul.w	r7, r0, r7
 80002ee:	429f      	cmp	r7, r3
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0x148>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f100 34ff 	add.w	r4, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x146>
 80002fc:	429f      	cmp	r7, r3
 80002fe:	f200 80b0 	bhi.w	8000462 <__udivmoddi4+0x2a6>
 8000302:	4620      	mov	r0, r4
 8000304:	1bdb      	subs	r3, r3, r7
 8000306:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030a:	e7a5      	b.n	8000258 <__udivmoddi4+0x9c>
 800030c:	f1c1 0620 	rsb	r6, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 f706 	lsr.w	r7, r2, r6
 8000316:	431f      	orrs	r7, r3
 8000318:	fa20 fc06 	lsr.w	ip, r0, r6
 800031c:	fa04 f301 	lsl.w	r3, r4, r1
 8000320:	ea43 030c 	orr.w	r3, r3, ip
 8000324:	40f4      	lsrs	r4, r6
 8000326:	fa00 f801 	lsl.w	r8, r0, r1
 800032a:	0c38      	lsrs	r0, r7, #16
 800032c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000330:	fbb4 fef0 	udiv	lr, r4, r0
 8000334:	fa1f fc87 	uxth.w	ip, r7
 8000338:	fb00 441e 	mls	r4, r0, lr, r4
 800033c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000340:	fb0e f90c 	mul.w	r9, lr, ip
 8000344:	45a1      	cmp	r9, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x1a6>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000352:	f080 8084 	bcs.w	800045e <__udivmoddi4+0x2a2>
 8000356:	45a1      	cmp	r9, r4
 8000358:	f240 8081 	bls.w	800045e <__udivmoddi4+0x2a2>
 800035c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000360:	443c      	add	r4, r7
 8000362:	eba4 0409 	sub.w	r4, r4, r9
 8000366:	fa1f f983 	uxth.w	r9, r3
 800036a:	fbb4 f3f0 	udiv	r3, r4, r0
 800036e:	fb00 4413 	mls	r4, r0, r3, r4
 8000372:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000376:	fb03 fc0c 	mul.w	ip, r3, ip
 800037a:	45a4      	cmp	ip, r4
 800037c:	d907      	bls.n	800038e <__udivmoddi4+0x1d2>
 800037e:	193c      	adds	r4, r7, r4
 8000380:	f103 30ff 	add.w	r0, r3, #4294967295
 8000384:	d267      	bcs.n	8000456 <__udivmoddi4+0x29a>
 8000386:	45a4      	cmp	ip, r4
 8000388:	d965      	bls.n	8000456 <__udivmoddi4+0x29a>
 800038a:	3b02      	subs	r3, #2
 800038c:	443c      	add	r4, r7
 800038e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000392:	fba0 9302 	umull	r9, r3, r0, r2
 8000396:	eba4 040c 	sub.w	r4, r4, ip
 800039a:	429c      	cmp	r4, r3
 800039c:	46ce      	mov	lr, r9
 800039e:	469c      	mov	ip, r3
 80003a0:	d351      	bcc.n	8000446 <__udivmoddi4+0x28a>
 80003a2:	d04e      	beq.n	8000442 <__udivmoddi4+0x286>
 80003a4:	b155      	cbz	r5, 80003bc <__udivmoddi4+0x200>
 80003a6:	ebb8 030e 	subs.w	r3, r8, lr
 80003aa:	eb64 040c 	sbc.w	r4, r4, ip
 80003ae:	fa04 f606 	lsl.w	r6, r4, r6
 80003b2:	40cb      	lsrs	r3, r1
 80003b4:	431e      	orrs	r6, r3
 80003b6:	40cc      	lsrs	r4, r1
 80003b8:	e9c5 6400 	strd	r6, r4, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	e750      	b.n	8000262 <__udivmoddi4+0xa6>
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f103 	lsr.w	r1, r0, r3
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	fa24 f303 	lsr.w	r3, r4, r3
 80003d0:	4094      	lsls	r4, r2
 80003d2:	430c      	orrs	r4, r1
 80003d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003d8:	fa00 fe02 	lsl.w	lr, r0, r2
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e4:	fb08 3110 	mls	r1, r8, r0, r3
 80003e8:	0c23      	lsrs	r3, r4, #16
 80003ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ee:	fb00 f107 	mul.w	r1, r0, r7
 80003f2:	4299      	cmp	r1, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x24c>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 36ff 	add.w	r6, r0, #4294967295
 80003fe:	d22c      	bcs.n	800045a <__udivmoddi4+0x29e>
 8000400:	4299      	cmp	r1, r3
 8000402:	d92a      	bls.n	800045a <__udivmoddi4+0x29e>
 8000404:	3802      	subs	r0, #2
 8000406:	4463      	add	r3, ip
 8000408:	1a5b      	subs	r3, r3, r1
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000410:	fb08 3311 	mls	r3, r8, r1, r3
 8000414:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000418:	fb01 f307 	mul.w	r3, r1, r7
 800041c:	42a3      	cmp	r3, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x276>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f101 36ff 	add.w	r6, r1, #4294967295
 8000428:	d213      	bcs.n	8000452 <__udivmoddi4+0x296>
 800042a:	42a3      	cmp	r3, r4
 800042c:	d911      	bls.n	8000452 <__udivmoddi4+0x296>
 800042e:	3902      	subs	r1, #2
 8000430:	4464      	add	r4, ip
 8000432:	1ae4      	subs	r4, r4, r3
 8000434:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000438:	e739      	b.n	80002ae <__udivmoddi4+0xf2>
 800043a:	4604      	mov	r4, r0
 800043c:	e6f0      	b.n	8000220 <__udivmoddi4+0x64>
 800043e:	4608      	mov	r0, r1
 8000440:	e706      	b.n	8000250 <__udivmoddi4+0x94>
 8000442:	45c8      	cmp	r8, r9
 8000444:	d2ae      	bcs.n	80003a4 <__udivmoddi4+0x1e8>
 8000446:	ebb9 0e02 	subs.w	lr, r9, r2
 800044a:	eb63 0c07 	sbc.w	ip, r3, r7
 800044e:	3801      	subs	r0, #1
 8000450:	e7a8      	b.n	80003a4 <__udivmoddi4+0x1e8>
 8000452:	4631      	mov	r1, r6
 8000454:	e7ed      	b.n	8000432 <__udivmoddi4+0x276>
 8000456:	4603      	mov	r3, r0
 8000458:	e799      	b.n	800038e <__udivmoddi4+0x1d2>
 800045a:	4630      	mov	r0, r6
 800045c:	e7d4      	b.n	8000408 <__udivmoddi4+0x24c>
 800045e:	46d6      	mov	lr, sl
 8000460:	e77f      	b.n	8000362 <__udivmoddi4+0x1a6>
 8000462:	4463      	add	r3, ip
 8000464:	3802      	subs	r0, #2
 8000466:	e74d      	b.n	8000304 <__udivmoddi4+0x148>
 8000468:	4606      	mov	r6, r0
 800046a:	4623      	mov	r3, r4
 800046c:	4608      	mov	r0, r1
 800046e:	e70f      	b.n	8000290 <__udivmoddi4+0xd4>
 8000470:	3e02      	subs	r6, #2
 8000472:	4463      	add	r3, ip
 8000474:	e730      	b.n	80002d8 <__udivmoddi4+0x11c>
 8000476:	bf00      	nop

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 800047c:	b5b0      	push	{r4, r5, r7, lr}
 800047e:	b088      	sub	sp, #32
 8000480:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000482:	4b0b      	ldr	r3, [pc, #44]	@ (80004b0 <APPD_EnableCPU2+0x34>)
 8000484:	1d3c      	adds	r4, r7, #4
 8000486:	461d      	mov	r5, r3
 8000488:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800048a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800048c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000490:	c403      	stmia	r4!, {r0, r1}
 8000492:	8022      	strh	r2, [r4, #0]
 8000494:	3402      	adds	r4, #2
 8000496:	0c13      	lsrs	r3, r2, #16
 8000498:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800049a:	f007 f809 	bl	80074b0 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	4618      	mov	r0, r3
 80004a2:	f006 fa9a 	bl	80069da <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80004a6:	bf00      	nop
}
 80004a8:	3720      	adds	r7, #32
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bdb0      	pop	{r4, r5, r7, pc}
 80004ae:	bf00      	nop
 80004b0:	080087ac 	.word	0x080087ac

080004b4 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80004bc:	4b07      	ldr	r3, [pc, #28]	@ (80004dc <LL_C2_PWR_SetPowerMode+0x28>)
 80004be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80004c2:	f023 0207 	bic.w	r2, r3, #7
 80004c6:	4905      	ldr	r1, [pc, #20]	@ (80004dc <LL_C2_PWR_SetPowerMode+0x28>)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4313      	orrs	r3, r2
 80004cc:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80004d0:	bf00      	nop
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr
 80004dc:	58000400 	.word	0x58000400

080004e0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80004e8:	4b06      	ldr	r3, [pc, #24]	@ (8000504 <LL_EXTI_EnableIT_32_63+0x24>)
 80004ea:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80004ee:	4905      	ldr	r1, [pc, #20]	@ (8000504 <LL_EXTI_EnableIT_32_63+0x24>)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4313      	orrs	r3, r2
 80004f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80004f8:	bf00      	nop
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr
 8000504:	58000800 	.word	0x58000800

08000508 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000510:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000514:	4a0a      	ldr	r2, [pc, #40]	@ (8000540 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000516:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800051a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800051e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000522:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	021b      	lsls	r3, r3, #8
 800052a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800052e:	4313      	orrs	r3, r2
 8000530:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	cafecafe 	.word	0xcafecafe

08000544 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800054c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000550:	689b      	ldr	r3, [r3, #8]
 8000552:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000556:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4313      	orrs	r3, r2
 800055e:	608b      	str	r3, [r1, #8]
}
 8000560:	bf00      	nop
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr

0800056c <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000570:	4b04      	ldr	r3, [pc, #16]	@ (8000584 <LL_DBGMCU_GetDeviceID+0x18>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000578:	4618      	mov	r0, r3
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	e0042000 	.word	0xe0042000

08000588 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 800058c:	4b04      	ldr	r3, [pc, #16]	@ (80005a0 <LL_DBGMCU_GetRevisionID+0x18>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	0c1b      	lsrs	r3, r3, #16
 8000592:	b29b      	uxth	r3, r3
}
 8000594:	4618      	mov	r0, r3
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	e0042000 	.word	0xe0042000

080005a4 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	22ff      	movs	r2, #255	@ 0xff
 80005b0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80005b2:	bf00      	nop
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	22ca      	movs	r2, #202	@ 0xca
 80005ca:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2253      	movs	r2, #83	@ 0x53
 80005d0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80005d2:	bf00      	nop
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr

080005de <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80005de:	b480      	push	{r7}
 80005e0:	b083      	sub	sp, #12
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
 80005e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	689b      	ldr	r3, [r3, #8]
 80005ec:	f023 0207 	bic.w	r2, r3, #7
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	431a      	orrs	r2, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	609a      	str	r2, [r3, #8]
}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000608:	4b04      	ldr	r3, [pc, #16]	@ (800061c <MX_APPE_Config+0x18>)
 800060a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800060e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000610:	f000 f824 	bl	800065c <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000614:	f000 f829 	bl	800066a <Config_HSE>

  return;
 8000618:	bf00      	nop
}
 800061a:	bd80      	pop	{r7, pc}
 800061c:	58004000 	.word	0x58004000

08000620 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000624:	f000 f835 	bl	8000692 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000628:	f000 f84e 	bl	80006c8 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800062c:	4903      	ldr	r1, [pc, #12]	@ (800063c <MX_APPE_Init+0x1c>)
 800062e:	2000      	movs	r0, #0
 8000630:	f000 fd76 	bl	8001120 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000634:	f000 f856 	bl	80006e4 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000638:	bf00      	nop
}
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000124 	.word	0x20000124

08000640 <Init_Smps>:

void Init_Smps(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000644:	bf00      	nop
}
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr

0800064e <Init_Exti>:

void Init_Exti(void)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000652:	2050      	movs	r0, #80	@ 0x50
 8000654:	f7ff ff44 	bl	80004e0 <LL_EXTI_EnableIT_32_63>

  return;
 8000658:	bf00      	nop
}
 800065a:	bd80      	pop	{r7, pc}

0800065c <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000660:	bf00      	nop
}
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr

0800066a <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	b082      	sub	sp, #8
 800066e:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000670:	2000      	movs	r0, #0
 8000672:	f006 ffa9 	bl	80075c8 <OTP_Read>
 8000676:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d005      	beq.n	800068a <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	799b      	ldrb	r3, [r3, #6]
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff ff40 	bl	8000508 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000688:	bf00      	nop
 800068a:	bf00      	nop
}
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <System_Init>:

static void System_Init(void)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	af00      	add	r7, sp, #0
  Init_Smps();
 8000696:	f7ff ffd3 	bl	8000640 <Init_Smps>

  Init_Exti();
 800069a:	f7ff ffd8 	bl	800064e <Init_Exti>

  Init_Rtc();
 800069e:	f000 f803 	bl	80006a8 <Init_Rtc>

  return;
 80006a2:	bf00      	nop
}
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <Init_Rtc>:

static void Init_Rtc(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80006ac:	4805      	ldr	r0, [pc, #20]	@ (80006c4 <Init_Rtc+0x1c>)
 80006ae:	f7ff ff86 	bl	80005be <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80006b2:	2100      	movs	r1, #0
 80006b4:	4803      	ldr	r0, [pc, #12]	@ (80006c4 <Init_Rtc+0x1c>)
 80006b6:	f7ff ff92 	bl	80005de <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80006ba:	4802      	ldr	r0, [pc, #8]	@ (80006c4 <Init_Rtc+0x1c>)
 80006bc:	f7ff ff72 	bl	80005a4 <LL_RTC_EnableWriteProtection>

  return;
 80006c0:	bf00      	nop
}
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40002800 	.word	0x40002800

080006c8 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80006cc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80006d0:	f7ff ff38 	bl	8000544 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80006d4:	f007 fda8 	bl	8008228 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80006d8:	2004      	movs	r0, #4
 80006da:	f7ff feeb 	bl	80004b4 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80006de:	bf00      	nop
}
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80006ea:	f006 fd2b 	bl	8007144 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80006ee:	4a11      	ldr	r2, [pc, #68]	@ (8000734 <appe_Tl_Init+0x50>)
 80006f0:	2100      	movs	r1, #0
 80006f2:	2004      	movs	r0, #4
 80006f4:	f007 fed6 	bl	80084a4 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000738 <appe_Tl_Init+0x54>)
 80006fa:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	@ (800073c <appe_Tl_Init+0x58>)
 80006fe:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000700:	463b      	mov	r3, r7
 8000702:	4619      	mov	r1, r3
 8000704:	480e      	ldr	r0, [pc, #56]	@ (8000740 <appe_Tl_Init+0x5c>)
 8000706:	f006 fbdf 	bl	8006ec8 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800070a:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <appe_Tl_Init+0x60>)
 800070c:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800070e:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <appe_Tl_Init+0x64>)
 8000710:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000712:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <appe_Tl_Init+0x68>)
 8000714:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000716:	f240 533c 	movw	r3, #1340	@ 0x53c
 800071a:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 800071c:	f107 0308 	add.w	r3, r7, #8
 8000720:	4618      	mov	r0, r3
 8000722:	f006 fe51 	bl	80073c8 <TL_MM_Init>

  TL_Enable();
 8000726:	f006 fd07 	bl	8007138 <TL_Enable>

  return;
 800072a:	bf00      	nop
}
 800072c:	3720      	adds	r7, #32
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	08006f01 	.word	0x08006f01
 8000738:	20030734 	.word	0x20030734
 800073c:	08000751 	.word	0x08000751
 8000740:	08000769 	.word	0x08000769
 8000744:	2003094c 	.word	0x2003094c
 8000748:	20030840 	.word	0x20030840
 800074c:	200301f8 	.word	0x200301f8

08000750 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800075a:	bf00      	nop
}
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
	...

08000768 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	330b      	adds	r3, #11
 8000776:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	b29b      	uxth	r3, r3
 800077e:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8000782:	2b07      	cmp	r3, #7
 8000784:	d81f      	bhi.n	80007c6 <APPE_SysUserEvtRx+0x5e>
 8000786:	a201      	add	r2, pc, #4	@ (adr r2, 800078c <APPE_SysUserEvtRx+0x24>)
 8000788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800078c:	080007ad 	.word	0x080007ad
 8000790:	080007bf 	.word	0x080007bf
 8000794:	080007c7 	.word	0x080007c7
 8000798:	080007c7 	.word	0x080007c7
 800079c:	080007c7 	.word	0x080007c7
 80007a0:	080007c7 	.word	0x080007c7
 80007a4:	080007c7 	.word	0x080007c7
 80007a8:	080007c7 	.word	0x080007c7
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	4618      	mov	r0, r3
 80007b2:	f006 f93f 	bl	8006a34 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f000 f81b 	bl	80007f2 <APPE_SysEvtReadyProcessing>
    break;
 80007bc:	e004      	b.n	80007c8 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f000 f806 	bl	80007d0 <APPE_SysEvtError>
    break;
 80007c4:	e000      	b.n	80007c8 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 80007c6:	bf00      	nop
  }

  return;
 80007c8:	bf00      	nop
}
 80007ca:	3720      	adds	r7, #32
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	330b      	adds	r3, #11
 80007de:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	3302      	adds	r3, #2
 80007e4:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80007e6:	bf00      	nop
}
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b08a      	sub	sp, #40	@ 0x28
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80007fa:	f107 0308 	add.w	r3, r7, #8
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	330b      	adds	r3, #11
 8000816:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000818:	69fb      	ldr	r3, [r7, #28]
 800081a:	3302      	adds	r3, #2
 800081c:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800081e:	69bb      	ldr	r3, [r7, #24]
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d11d      	bne.n	8000862 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000826:	f7ff fe29 	bl	800047c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800082a:	230f      	movs	r3, #15
 800082c:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800082e:	237f      	movs	r3, #127	@ 0x7f
 8000830:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000832:	f7ff fea9 	bl	8000588 <LL_DBGMCU_GetRevisionID>
 8000836:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800083a:	b29b      	uxth	r3, r3
 800083c:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800083e:	f7ff fe95 	bl	800056c <LL_DBGMCU_GetDeviceID>
 8000842:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000844:	6a3b      	ldr	r3, [r7, #32]
 8000846:	b29b      	uxth	r3, r3
 8000848:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800084a:	f107 0308 	add.w	r3, r7, #8
 800084e:	4618      	mov	r0, r3
 8000850:	f006 f8da 	bl	8006a08 <SHCI_C2_Config>

    APP_BLE_Init();
 8000854:	f006 ffd8 	bl	8007808 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000858:	2100      	movs	r1, #0
 800085a:	2001      	movs	r0, #1
 800085c:	f007 fcf6 	bl	800824c <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000860:	e007      	b.n	8000872 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000862:	69bb      	ldr	r3, [r7, #24]
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d103      	bne.n	8000872 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2200      	movs	r2, #0
 800086e:	701a      	strb	r2, [r3, #0]
  return;
 8000870:	bf00      	nop
 8000872:	bf00      	nop
}
 8000874:	3728      	adds	r7, #40	@ 0x28
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800087e:	f04f 30ff 	mov.w	r0, #4294967295
 8000882:	f007 fd13 	bl	80082ac <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}

0800088a <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800088e:	bf00      	nop
}
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80008a2:	f04f 30ff 	mov.w	r0, #4294967295
 80008a6:	f007 fd01 	bl	80082ac <UTIL_SEQ_Run>
  return;
 80008aa:	bf00      	nop
}
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b082      	sub	sp, #8
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80008ba:	2100      	movs	r1, #0
 80008bc:	2004      	movs	r0, #4
 80008be:	f007 fe13 	bl	80084e8 <UTIL_SEQ_SetTask>
  return;
 80008c2:	bf00      	nop
}
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80008d2:	2002      	movs	r0, #2
 80008d4:	f007 fe74 	bl	80085c0 <UTIL_SEQ_SetEvt>
  return;
 80008d8:	bf00      	nop
}
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80008e8:	2002      	movs	r0, #2
 80008ea:	f007 fe89 	bl	8008600 <UTIL_SEQ_WaitEvt>
  return;
 80008ee:	bf00      	nop
}
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <LL_EXTI_EnableIT_0_31>:
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000900:	4b06      	ldr	r3, [pc, #24]	@ (800091c <LL_EXTI_EnableIT_0_31+0x24>)
 8000902:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8000906:	4905      	ldr	r1, [pc, #20]	@ (800091c <LL_EXTI_EnableIT_0_31+0x24>)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4313      	orrs	r3, r2
 800090c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	58000800 	.word	0x58000800

08000920 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000928:	4b05      	ldr	r3, [pc, #20]	@ (8000940 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	4904      	ldr	r1, [pc, #16]	@ (8000940 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4313      	orrs	r3, r2
 8000932:	600b      	str	r3, [r1, #0]

}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	58000800 	.word	0x58000800

08000944 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800094a:	4b0d      	ldr	r3, [pc, #52]	@ (8000980 <ReadRtcSsrValue+0x3c>)
 800094c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800094e:	b29b      	uxth	r3, r3
 8000950:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000952:	4b0b      	ldr	r3, [pc, #44]	@ (8000980 <ReadRtcSsrValue+0x3c>)
 8000954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000956:	b29b      	uxth	r3, r3
 8000958:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800095a:	e005      	b.n	8000968 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000960:	4b07      	ldr	r3, [pc, #28]	@ (8000980 <ReadRtcSsrValue+0x3c>)
 8000962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000964:	b29b      	uxth	r3, r3
 8000966:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	429a      	cmp	r2, r3
 800096e:	d1f5      	bne.n	800095c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000970:	683b      	ldr	r3, [r7, #0]
}
 8000972:	4618      	mov	r0, r3
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	40002800 	.word	0x40002800

08000984 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	460a      	mov	r2, r1
 800098e:	71fb      	strb	r3, [r7, #7]
 8000990:	4613      	mov	r3, r2
 8000992:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000994:	79ba      	ldrb	r2, [r7, #6]
 8000996:	491d      	ldr	r1, [pc, #116]	@ (8000a0c <LinkTimerAfter+0x88>)
 8000998:	4613      	mov	r3, r2
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	4413      	add	r3, r2
 800099e:	00db      	lsls	r3, r3, #3
 80009a0:	440b      	add	r3, r1
 80009a2:	3315      	adds	r3, #21
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80009a8:	7bfb      	ldrb	r3, [r7, #15]
 80009aa:	2b06      	cmp	r3, #6
 80009ac:	d009      	beq.n	80009c2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80009ae:	7bfa      	ldrb	r2, [r7, #15]
 80009b0:	4916      	ldr	r1, [pc, #88]	@ (8000a0c <LinkTimerAfter+0x88>)
 80009b2:	4613      	mov	r3, r2
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	4413      	add	r3, r2
 80009b8:	00db      	lsls	r3, r3, #3
 80009ba:	440b      	add	r3, r1
 80009bc:	3314      	adds	r3, #20
 80009be:	79fa      	ldrb	r2, [r7, #7]
 80009c0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80009c2:	79fa      	ldrb	r2, [r7, #7]
 80009c4:	4911      	ldr	r1, [pc, #68]	@ (8000a0c <LinkTimerAfter+0x88>)
 80009c6:	4613      	mov	r3, r2
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	4413      	add	r3, r2
 80009cc:	00db      	lsls	r3, r3, #3
 80009ce:	440b      	add	r3, r1
 80009d0:	3315      	adds	r3, #21
 80009d2:	7bfa      	ldrb	r2, [r7, #15]
 80009d4:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80009d6:	79fa      	ldrb	r2, [r7, #7]
 80009d8:	490c      	ldr	r1, [pc, #48]	@ (8000a0c <LinkTimerAfter+0x88>)
 80009da:	4613      	mov	r3, r2
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	4413      	add	r3, r2
 80009e0:	00db      	lsls	r3, r3, #3
 80009e2:	440b      	add	r3, r1
 80009e4:	3314      	adds	r3, #20
 80009e6:	79ba      	ldrb	r2, [r7, #6]
 80009e8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80009ea:	79ba      	ldrb	r2, [r7, #6]
 80009ec:	4907      	ldr	r1, [pc, #28]	@ (8000a0c <LinkTimerAfter+0x88>)
 80009ee:	4613      	mov	r3, r2
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	4413      	add	r3, r2
 80009f4:	00db      	lsls	r3, r3, #3
 80009f6:	440b      	add	r3, r1
 80009f8:	3315      	adds	r3, #21
 80009fa:	79fa      	ldrb	r2, [r7, #7]
 80009fc:	701a      	strb	r2, [r3, #0]

  return;
 80009fe:	bf00      	nop
}
 8000a00:	3714      	adds	r7, #20
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	20000084 	.word	0x20000084

08000a10 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	460a      	mov	r2, r1
 8000a1a:	71fb      	strb	r3, [r7, #7]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000a20:	4b29      	ldr	r3, [pc, #164]	@ (8000ac8 <LinkTimerBefore+0xb8>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	79ba      	ldrb	r2, [r7, #6]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d032      	beq.n	8000a92 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000a2c:	79ba      	ldrb	r2, [r7, #6]
 8000a2e:	4927      	ldr	r1, [pc, #156]	@ (8000acc <LinkTimerBefore+0xbc>)
 8000a30:	4613      	mov	r3, r2
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	4413      	add	r3, r2
 8000a36:	00db      	lsls	r3, r3, #3
 8000a38:	440b      	add	r3, r1
 8000a3a:	3314      	adds	r3, #20
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000a40:	7bfa      	ldrb	r2, [r7, #15]
 8000a42:	4922      	ldr	r1, [pc, #136]	@ (8000acc <LinkTimerBefore+0xbc>)
 8000a44:	4613      	mov	r3, r2
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	4413      	add	r3, r2
 8000a4a:	00db      	lsls	r3, r3, #3
 8000a4c:	440b      	add	r3, r1
 8000a4e:	3315      	adds	r3, #21
 8000a50:	79fa      	ldrb	r2, [r7, #7]
 8000a52:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000a54:	79fa      	ldrb	r2, [r7, #7]
 8000a56:	491d      	ldr	r1, [pc, #116]	@ (8000acc <LinkTimerBefore+0xbc>)
 8000a58:	4613      	mov	r3, r2
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	4413      	add	r3, r2
 8000a5e:	00db      	lsls	r3, r3, #3
 8000a60:	440b      	add	r3, r1
 8000a62:	3315      	adds	r3, #21
 8000a64:	79ba      	ldrb	r2, [r7, #6]
 8000a66:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000a68:	79fa      	ldrb	r2, [r7, #7]
 8000a6a:	4918      	ldr	r1, [pc, #96]	@ (8000acc <LinkTimerBefore+0xbc>)
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	4413      	add	r3, r2
 8000a72:	00db      	lsls	r3, r3, #3
 8000a74:	440b      	add	r3, r1
 8000a76:	3314      	adds	r3, #20
 8000a78:	7bfa      	ldrb	r2, [r7, #15]
 8000a7a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000a7c:	79ba      	ldrb	r2, [r7, #6]
 8000a7e:	4913      	ldr	r1, [pc, #76]	@ (8000acc <LinkTimerBefore+0xbc>)
 8000a80:	4613      	mov	r3, r2
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	4413      	add	r3, r2
 8000a86:	00db      	lsls	r3, r3, #3
 8000a88:	440b      	add	r3, r1
 8000a8a:	3314      	adds	r3, #20
 8000a8c:	79fa      	ldrb	r2, [r7, #7]
 8000a8e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000a90:	e014      	b.n	8000abc <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000a92:	79fa      	ldrb	r2, [r7, #7]
 8000a94:	490d      	ldr	r1, [pc, #52]	@ (8000acc <LinkTimerBefore+0xbc>)
 8000a96:	4613      	mov	r3, r2
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	4413      	add	r3, r2
 8000a9c:	00db      	lsls	r3, r3, #3
 8000a9e:	440b      	add	r3, r1
 8000aa0:	3315      	adds	r3, #21
 8000aa2:	79ba      	ldrb	r2, [r7, #6]
 8000aa4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000aa6:	79ba      	ldrb	r2, [r7, #6]
 8000aa8:	4908      	ldr	r1, [pc, #32]	@ (8000acc <LinkTimerBefore+0xbc>)
 8000aaa:	4613      	mov	r3, r2
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	4413      	add	r3, r2
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	440b      	add	r3, r1
 8000ab4:	3314      	adds	r3, #20
 8000ab6:	79fa      	ldrb	r2, [r7, #7]
 8000ab8:	701a      	strb	r2, [r3, #0]
  return;
 8000aba:	bf00      	nop
}
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	20000114 	.word	0x20000114
 8000acc:	20000084 	.word	0x20000084

08000ad0 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ada:	4b4e      	ldr	r3, [pc, #312]	@ (8000c14 <linkTimer+0x144>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	2b06      	cmp	r3, #6
 8000ae2:	d118      	bne.n	8000b16 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000ae4:	4b4b      	ldr	r3, [pc, #300]	@ (8000c14 <linkTimer+0x144>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	4b4b      	ldr	r3, [pc, #300]	@ (8000c18 <linkTimer+0x148>)
 8000aec:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000aee:	4a49      	ldr	r2, [pc, #292]	@ (8000c14 <linkTimer+0x144>)
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000af4:	79fa      	ldrb	r2, [r7, #7]
 8000af6:	4949      	ldr	r1, [pc, #292]	@ (8000c1c <linkTimer+0x14c>)
 8000af8:	4613      	mov	r3, r2
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	4413      	add	r3, r2
 8000afe:	00db      	lsls	r3, r3, #3
 8000b00:	440b      	add	r3, r1
 8000b02:	3315      	adds	r3, #21
 8000b04:	2206      	movs	r2, #6
 8000b06:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000b08:	4b45      	ldr	r3, [pc, #276]	@ (8000c20 <linkTimer+0x150>)
 8000b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8000b0e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	81fb      	strh	r3, [r7, #14]
 8000b14:	e078      	b.n	8000c08 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000b16:	f000 f909 	bl	8000d2c <ReturnTimeElapsed>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000b1e:	79fa      	ldrb	r2, [r7, #7]
 8000b20:	493e      	ldr	r1, [pc, #248]	@ (8000c1c <linkTimer+0x14c>)
 8000b22:	4613      	mov	r3, r2
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	4413      	add	r3, r2
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	440b      	add	r3, r1
 8000b2c:	3308      	adds	r3, #8
 8000b2e:	6819      	ldr	r1, [r3, #0]
 8000b30:	89fb      	ldrh	r3, [r7, #14]
 8000b32:	79fa      	ldrb	r2, [r7, #7]
 8000b34:	4419      	add	r1, r3
 8000b36:	4839      	ldr	r0, [pc, #228]	@ (8000c1c <linkTimer+0x14c>)
 8000b38:	4613      	mov	r3, r2
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	4413      	add	r3, r2
 8000b3e:	00db      	lsls	r3, r3, #3
 8000b40:	4403      	add	r3, r0
 8000b42:	3308      	adds	r3, #8
 8000b44:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000b46:	79fa      	ldrb	r2, [r7, #7]
 8000b48:	4934      	ldr	r1, [pc, #208]	@ (8000c1c <linkTimer+0x14c>)
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	4413      	add	r3, r2
 8000b50:	00db      	lsls	r3, r3, #3
 8000b52:	440b      	add	r3, r1
 8000b54:	3308      	adds	r3, #8
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000b5a:	4b2e      	ldr	r3, [pc, #184]	@ (8000c14 <linkTimer+0x144>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	4619      	mov	r1, r3
 8000b62:	4a2e      	ldr	r2, [pc, #184]	@ (8000c1c <linkTimer+0x14c>)
 8000b64:	460b      	mov	r3, r1
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	440b      	add	r3, r1
 8000b6a:	00db      	lsls	r3, r3, #3
 8000b6c:	4413      	add	r3, r2
 8000b6e:	3308      	adds	r3, #8
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	68ba      	ldr	r2, [r7, #8]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d337      	bcc.n	8000be8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000b78:	4b26      	ldr	r3, [pc, #152]	@ (8000c14 <linkTimer+0x144>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000b7e:	7b7a      	ldrb	r2, [r7, #13]
 8000b80:	4926      	ldr	r1, [pc, #152]	@ (8000c1c <linkTimer+0x14c>)
 8000b82:	4613      	mov	r3, r2
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	4413      	add	r3, r2
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	440b      	add	r3, r1
 8000b8c:	3315      	adds	r3, #21
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000b92:	e013      	b.n	8000bbc <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000b94:	7b7a      	ldrb	r2, [r7, #13]
 8000b96:	4921      	ldr	r1, [pc, #132]	@ (8000c1c <linkTimer+0x14c>)
 8000b98:	4613      	mov	r3, r2
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	4413      	add	r3, r2
 8000b9e:	00db      	lsls	r3, r3, #3
 8000ba0:	440b      	add	r3, r1
 8000ba2:	3315      	adds	r3, #21
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000ba8:	7b7a      	ldrb	r2, [r7, #13]
 8000baa:	491c      	ldr	r1, [pc, #112]	@ (8000c1c <linkTimer+0x14c>)
 8000bac:	4613      	mov	r3, r2
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	4413      	add	r3, r2
 8000bb2:	00db      	lsls	r3, r3, #3
 8000bb4:	440b      	add	r3, r1
 8000bb6:	3315      	adds	r3, #21
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000bbc:	7b3b      	ldrb	r3, [r7, #12]
 8000bbe:	2b06      	cmp	r3, #6
 8000bc0:	d00b      	beq.n	8000bda <linkTimer+0x10a>
 8000bc2:	7b3a      	ldrb	r2, [r7, #12]
 8000bc4:	4915      	ldr	r1, [pc, #84]	@ (8000c1c <linkTimer+0x14c>)
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	4413      	add	r3, r2
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	440b      	add	r3, r1
 8000bd0:	3308      	adds	r3, #8
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	68ba      	ldr	r2, [r7, #8]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d2dc      	bcs.n	8000b94 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000bda:	7b7a      	ldrb	r2, [r7, #13]
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	4611      	mov	r1, r2
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fecf 	bl	8000984 <LinkTimerAfter>
 8000be6:	e00f      	b.n	8000c08 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000be8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c14 <linkTimer+0x144>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	4611      	mov	r1, r2
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff ff0c 	bl	8000a10 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <linkTimer+0x144>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <linkTimer+0x148>)
 8000c00:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000c02:	4a04      	ldr	r2, [pc, #16]	@ (8000c14 <linkTimer+0x144>)
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000c08:	89fb      	ldrh	r3, [r7, #14]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000114 	.word	0x20000114
 8000c18:	20000115 	.word	0x20000115
 8000c1c:	20000084 	.word	0x20000084
 8000c20:	20000118 	.word	0x20000118

08000c24 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	460a      	mov	r2, r1
 8000c2e:	71fb      	strb	r3, [r7, #7]
 8000c30:	4613      	mov	r3, r2
 8000c32:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000c34:	4b39      	ldr	r3, [pc, #228]	@ (8000d1c <UnlinkTimer+0xf8>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	79fa      	ldrb	r2, [r7, #7]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d111      	bne.n	8000c64 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000c40:	4b36      	ldr	r3, [pc, #216]	@ (8000d1c <UnlinkTimer+0xf8>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4b36      	ldr	r3, [pc, #216]	@ (8000d20 <UnlinkTimer+0xfc>)
 8000c48:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000c4a:	79fa      	ldrb	r2, [r7, #7]
 8000c4c:	4935      	ldr	r1, [pc, #212]	@ (8000d24 <UnlinkTimer+0x100>)
 8000c4e:	4613      	mov	r3, r2
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	4413      	add	r3, r2
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	440b      	add	r3, r1
 8000c58:	3315      	adds	r3, #21
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d1c <UnlinkTimer+0xf8>)
 8000c60:	701a      	strb	r2, [r3, #0]
 8000c62:	e03e      	b.n	8000ce2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000c64:	79fa      	ldrb	r2, [r7, #7]
 8000c66:	492f      	ldr	r1, [pc, #188]	@ (8000d24 <UnlinkTimer+0x100>)
 8000c68:	4613      	mov	r3, r2
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	4413      	add	r3, r2
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	440b      	add	r3, r1
 8000c72:	3314      	adds	r3, #20
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000c78:	79fa      	ldrb	r2, [r7, #7]
 8000c7a:	492a      	ldr	r1, [pc, #168]	@ (8000d24 <UnlinkTimer+0x100>)
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	4413      	add	r3, r2
 8000c82:	00db      	lsls	r3, r3, #3
 8000c84:	440b      	add	r3, r1
 8000c86:	3315      	adds	r3, #21
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000c8c:	79f9      	ldrb	r1, [r7, #7]
 8000c8e:	7bfa      	ldrb	r2, [r7, #15]
 8000c90:	4824      	ldr	r0, [pc, #144]	@ (8000d24 <UnlinkTimer+0x100>)
 8000c92:	460b      	mov	r3, r1
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	440b      	add	r3, r1
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	4403      	add	r3, r0
 8000c9c:	3315      	adds	r3, #21
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	b2d8      	uxtb	r0, r3
 8000ca2:	4920      	ldr	r1, [pc, #128]	@ (8000d24 <UnlinkTimer+0x100>)
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	4413      	add	r3, r2
 8000caa:	00db      	lsls	r3, r3, #3
 8000cac:	440b      	add	r3, r1
 8000cae:	3315      	adds	r3, #21
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000cb4:	7bbb      	ldrb	r3, [r7, #14]
 8000cb6:	2b06      	cmp	r3, #6
 8000cb8:	d013      	beq.n	8000ce2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000cba:	79f9      	ldrb	r1, [r7, #7]
 8000cbc:	7bba      	ldrb	r2, [r7, #14]
 8000cbe:	4819      	ldr	r0, [pc, #100]	@ (8000d24 <UnlinkTimer+0x100>)
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	440b      	add	r3, r1
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	4403      	add	r3, r0
 8000cca:	3314      	adds	r3, #20
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	b2d8      	uxtb	r0, r3
 8000cd0:	4914      	ldr	r1, [pc, #80]	@ (8000d24 <UnlinkTimer+0x100>)
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	4413      	add	r3, r2
 8000cd8:	00db      	lsls	r3, r3, #3
 8000cda:	440b      	add	r3, r1
 8000cdc:	3314      	adds	r3, #20
 8000cde:	4602      	mov	r2, r0
 8000ce0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000ce2:	79fa      	ldrb	r2, [r7, #7]
 8000ce4:	490f      	ldr	r1, [pc, #60]	@ (8000d24 <UnlinkTimer+0x100>)
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	4413      	add	r3, r2
 8000cec:	00db      	lsls	r3, r3, #3
 8000cee:	440b      	add	r3, r1
 8000cf0:	330c      	adds	r3, #12
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000cf6:	4b09      	ldr	r3, [pc, #36]	@ (8000d1c <UnlinkTimer+0xf8>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	2b06      	cmp	r3, #6
 8000cfe:	d107      	bne.n	8000d10 <UnlinkTimer+0xec>
 8000d00:	79bb      	ldrb	r3, [r7, #6]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d104      	bne.n	8000d10 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000d06:	4b08      	ldr	r3, [pc, #32]	@ (8000d28 <UnlinkTimer+0x104>)
 8000d08:	f04f 32ff 	mov.w	r2, #4294967295
 8000d0c:	601a      	str	r2, [r3, #0]
  }

  return;
 8000d0e:	bf00      	nop
 8000d10:	bf00      	nop
}
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	20000114 	.word	0x20000114
 8000d20:	20000115 	.word	0x20000115
 8000d24:	20000084 	.word	0x20000084
 8000d28:	20000118 	.word	0x20000118

08000d2c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000d32:	4b1a      	ldr	r3, [pc, #104]	@ (8000d9c <ReturnTimeElapsed+0x70>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d3a:	d026      	beq.n	8000d8a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000d3c:	f7ff fe02 	bl	8000944 <ReadRtcSsrValue>
 8000d40:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000d42:	4b16      	ldr	r3, [pc, #88]	@ (8000d9c <ReturnTimeElapsed+0x70>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d805      	bhi.n	8000d58 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000d4c:	4b13      	ldr	r3, [pc, #76]	@ (8000d9c <ReturnTimeElapsed+0x70>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	e00a      	b.n	8000d6e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000d58:	4b11      	ldr	r3, [pc, #68]	@ (8000da0 <ReturnTimeElapsed+0x74>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000d64:	4b0d      	ldr	r3, [pc, #52]	@ (8000d9c <ReturnTimeElapsed+0x70>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	683a      	ldr	r2, [r7, #0]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000da4 <ReturnTimeElapsed+0x78>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	461a      	mov	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	fb02 f303 	mul.w	r3, r2, r3
 8000d7a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000da8 <ReturnTimeElapsed+0x7c>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	40d3      	lsrs	r3, r2
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	e001      	b.n	8000d8e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	b29b      	uxth	r3, r3
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000118 	.word	0x20000118
 8000da0:	20000120 	.word	0x20000120
 8000da4:	2000011e 	.word	0x2000011e
 8000da8:	2000011d 	.word	0x2000011d

08000dac <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d108      	bne.n	8000dce <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000dbc:	f7ff fdc2 	bl	8000944 <ReadRtcSsrValue>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	4a21      	ldr	r2, [pc, #132]	@ (8000e48 <RestartWakeupCounter+0x9c>)
 8000dc4:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000dc6:	2003      	movs	r0, #3
 8000dc8:	f001 f9cb 	bl	8002162 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000dcc:	e039      	b.n	8000e42 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000dce:	88fb      	ldrh	r3, [r7, #6]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d803      	bhi.n	8000ddc <RestartWakeupCounter+0x30>
 8000dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e4c <RestartWakeupCounter+0xa0>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d002      	beq.n	8000de2 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000ddc:	88fb      	ldrh	r3, [r7, #6]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000de2:	bf00      	nop
 8000de4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e50 <RestartWakeupCounter+0xa4>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	f003 0304 	and.w	r3, r3, #4
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d0f8      	beq.n	8000de4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000df2:	4b17      	ldr	r3, [pc, #92]	@ (8000e50 <RestartWakeupCounter+0xa4>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	4b15      	ldr	r3, [pc, #84]	@ (8000e50 <RestartWakeupCounter+0xa4>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8000e02:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000e04:	4b13      	ldr	r3, [pc, #76]	@ (8000e54 <RestartWakeupCounter+0xa8>)
 8000e06:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000e0a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000e0c:	2003      	movs	r0, #3
 8000e0e:	f001 f9b6 	bl	800217e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000e12:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <RestartWakeupCounter+0xac>)
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	0c1b      	lsrs	r3, r3, #16
 8000e18:	041b      	lsls	r3, r3, #16
 8000e1a:	88fa      	ldrh	r2, [r7, #6]
 8000e1c:	490e      	ldr	r1, [pc, #56]	@ (8000e58 <RestartWakeupCounter+0xac>)
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000e22:	f7ff fd8f 	bl	8000944 <ReadRtcSsrValue>
 8000e26:	4603      	mov	r3, r0
 8000e28:	4a07      	ldr	r2, [pc, #28]	@ (8000e48 <RestartWakeupCounter+0x9c>)
 8000e2a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8000e2c:	4b08      	ldr	r3, [pc, #32]	@ (8000e50 <RestartWakeupCounter+0xa4>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	689a      	ldr	r2, [r3, #8]
 8000e32:	4b07      	ldr	r3, [pc, #28]	@ (8000e50 <RestartWakeupCounter+0xa4>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000e3a:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000e3c:	f3af 8000 	nop.w
  return ;
 8000e40:	bf00      	nop
}
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000118 	.word	0x20000118
 8000e4c:	2000011d 	.word	0x2000011d
 8000e50:	20000124 	.word	0x20000124
 8000e54:	58000800 	.word	0x58000800
 8000e58:	40002800 	.word	0x40002800

08000e5c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000e62:	4b45      	ldr	r3, [pc, #276]	@ (8000f78 <RescheduleTimerList+0x11c>)
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e6e:	d107      	bne.n	8000e80 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8000e70:	bf00      	nop
 8000e72:	4b42      	ldr	r3, [pc, #264]	@ (8000f7c <RescheduleTimerList+0x120>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	f003 0304 	and.w	r3, r3, #4
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d1f8      	bne.n	8000e72 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8000e80:	4b3e      	ldr	r3, [pc, #248]	@ (8000f7c <RescheduleTimerList+0x120>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	689a      	ldr	r2, [r3, #8]
 8000e86:	4b3d      	ldr	r3, [pc, #244]	@ (8000f7c <RescheduleTimerList+0x120>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000e8e:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000e90:	4b3b      	ldr	r3, [pc, #236]	@ (8000f80 <RescheduleTimerList+0x124>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000e96:	7bfa      	ldrb	r2, [r7, #15]
 8000e98:	493a      	ldr	r1, [pc, #232]	@ (8000f84 <RescheduleTimerList+0x128>)
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	4413      	add	r3, r2
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	440b      	add	r3, r1
 8000ea4:	3308      	adds	r3, #8
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000eaa:	f7ff ff3f 	bl	8000d2c <ReturnTimeElapsed>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000eb2:	88fb      	ldrh	r3, [r7, #6]
 8000eb4:	68ba      	ldr	r2, [r7, #8]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d205      	bcs.n	8000ec6 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000ebe:	4b32      	ldr	r3, [pc, #200]	@ (8000f88 <RescheduleTimerList+0x12c>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	701a      	strb	r2, [r3, #0]
 8000ec4:	e04d      	b.n	8000f62 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	4a30      	ldr	r2, [pc, #192]	@ (8000f8c <RescheduleTimerList+0x130>)
 8000eca:	8812      	ldrh	r2, [r2, #0]
 8000ecc:	b292      	uxth	r2, r2
 8000ece:	4413      	add	r3, r2
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d906      	bls.n	8000ee6 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000ed8:	4b2c      	ldr	r3, [pc, #176]	@ (8000f8c <RescheduleTimerList+0x130>)
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000ede:	4b2a      	ldr	r3, [pc, #168]	@ (8000f88 <RescheduleTimerList+0x12c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
 8000ee4:	e03d      	b.n	8000f62 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	88fb      	ldrh	r3, [r7, #6]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000ef0:	4b25      	ldr	r3, [pc, #148]	@ (8000f88 <RescheduleTimerList+0x12c>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ef6:	e034      	b.n	8000f62 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000ef8:	7bfa      	ldrb	r2, [r7, #15]
 8000efa:	4922      	ldr	r1, [pc, #136]	@ (8000f84 <RescheduleTimerList+0x128>)
 8000efc:	4613      	mov	r3, r2
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	4413      	add	r3, r2
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	440b      	add	r3, r1
 8000f06:	3308      	adds	r3, #8
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d20a      	bcs.n	8000f26 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000f10:	7bfa      	ldrb	r2, [r7, #15]
 8000f12:	491c      	ldr	r1, [pc, #112]	@ (8000f84 <RescheduleTimerList+0x128>)
 8000f14:	4613      	mov	r3, r2
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	4413      	add	r3, r2
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	440b      	add	r3, r1
 8000f1e:	3308      	adds	r3, #8
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	e013      	b.n	8000f4e <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000f26:	7bfa      	ldrb	r2, [r7, #15]
 8000f28:	4916      	ldr	r1, [pc, #88]	@ (8000f84 <RescheduleTimerList+0x128>)
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	4413      	add	r3, r2
 8000f30:	00db      	lsls	r3, r3, #3
 8000f32:	440b      	add	r3, r1
 8000f34:	3308      	adds	r3, #8
 8000f36:	6819      	ldr	r1, [r3, #0]
 8000f38:	88fb      	ldrh	r3, [r7, #6]
 8000f3a:	7bfa      	ldrb	r2, [r7, #15]
 8000f3c:	1ac9      	subs	r1, r1, r3
 8000f3e:	4811      	ldr	r0, [pc, #68]	@ (8000f84 <RescheduleTimerList+0x128>)
 8000f40:	4613      	mov	r3, r2
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	4413      	add	r3, r2
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	4403      	add	r3, r0
 8000f4a:	3308      	adds	r3, #8
 8000f4c:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000f4e:	7bfa      	ldrb	r2, [r7, #15]
 8000f50:	490c      	ldr	r1, [pc, #48]	@ (8000f84 <RescheduleTimerList+0x128>)
 8000f52:	4613      	mov	r3, r2
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	4413      	add	r3, r2
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	440b      	add	r3, r1
 8000f5c:	3315      	adds	r3, #21
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	2b06      	cmp	r3, #6
 8000f66:	d1c7      	bne.n	8000ef8 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000f68:	89bb      	ldrh	r3, [r7, #12]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff ff1e 	bl	8000dac <RestartWakeupCounter>

  return ;
 8000f70:	bf00      	nop
}
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40002800 	.word	0x40002800
 8000f7c:	20000124 	.word	0x20000124
 8000f80:	20000114 	.word	0x20000114
 8000f84:	20000084 	.word	0x20000084
 8000f88:	2000011c 	.word	0x2000011c
 8000f8c:	20000122 	.word	0x20000122

08000f90 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	@ 0x28
 8000f94:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000f96:	f3ef 8310 	mrs	r3, PRIMASK
 8000f9a:	617b      	str	r3, [r7, #20]
  return(result);
 8000f9c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000f9e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa0:	b672      	cpsid	i
}
 8000fa2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000fa4:	4b59      	ldr	r3, [pc, #356]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	22ca      	movs	r2, #202	@ 0xca
 8000faa:	625a      	str	r2, [r3, #36]	@ 0x24
 8000fac:	4b57      	ldr	r3, [pc, #348]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2253      	movs	r2, #83	@ 0x53
 8000fb2:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8000fb4:	4b55      	ldr	r3, [pc, #340]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	689a      	ldr	r2, [r3, #8]
 8000fba:	4b54      	ldr	r3, [pc, #336]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000fc2:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000fc4:	4b52      	ldr	r3, [pc, #328]	@ (8001110 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000fcc:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000fd0:	4950      	ldr	r1, [pc, #320]	@ (8001114 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	4413      	add	r3, r2
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	440b      	add	r3, r1
 8000fdc:	330c      	adds	r3, #12
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d16e      	bne.n	80010c4 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000fe6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000fea:	494a      	ldr	r1, [pc, #296]	@ (8001114 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000fec:	4613      	mov	r3, r2
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	4413      	add	r3, r2
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	440b      	add	r3, r1
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000ffa:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000ffe:	4945      	ldr	r1, [pc, #276]	@ (8001114 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001000:	4613      	mov	r3, r2
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	4413      	add	r3, r2
 8001006:	00db      	lsls	r3, r3, #3
 8001008:	440b      	add	r3, r1
 800100a:	3310      	adds	r3, #16
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001010:	4b41      	ldr	r3, [pc, #260]	@ (8001118 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d04c      	beq.n	80010b4 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800101a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800101e:	493d      	ldr	r1, [pc, #244]	@ (8001114 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001020:	4613      	mov	r3, r2
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	4413      	add	r3, r2
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	440b      	add	r3, r1
 800102a:	330d      	adds	r3, #13
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	b2db      	uxtb	r3, r3
 8001030:	2b01      	cmp	r3, #1
 8001032:	d124      	bne.n	800107e <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001034:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001038:	2101      	movs	r1, #1
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fdf2 	bl	8000c24 <UnlinkTimer>
 8001040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001042:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	f383 8810 	msr	PRIMASK, r3
}
 800104a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 800104c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001050:	4930      	ldr	r1, [pc, #192]	@ (8001114 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001052:	4613      	mov	r3, r2
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	4413      	add	r3, r2
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	440b      	add	r3, r1
 800105c:	3304      	adds	r3, #4
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001064:	4611      	mov	r1, r2
 8001066:	4618      	mov	r0, r3
 8001068:	f000 f9b8 	bl	80013dc <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800106c:	4b27      	ldr	r3, [pc, #156]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	22ca      	movs	r2, #202	@ 0xca
 8001072:	625a      	str	r2, [r3, #36]	@ 0x24
 8001074:	4b25      	ldr	r3, [pc, #148]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2253      	movs	r2, #83	@ 0x53
 800107a:	625a      	str	r2, [r3, #36]	@ 0x24
 800107c:	e012      	b.n	80010a4 <HW_TS_RTC_Wakeup_Handler+0x114>
 800107e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001080:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	f383 8810 	msr	PRIMASK, r3
}
 8001088:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800108a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800108e:	4618      	mov	r0, r3
 8001090:	f000 f920 	bl	80012d4 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001094:	4b1d      	ldr	r3, [pc, #116]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	22ca      	movs	r2, #202	@ 0xca
 800109a:	625a      	str	r2, [r3, #36]	@ 0x24
 800109c:	4b1b      	ldr	r3, [pc, #108]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2253      	movs	r2, #83	@ 0x53
 80010a2:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80010a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80010a8:	69fa      	ldr	r2, [r7, #28]
 80010aa:	4619      	mov	r1, r3
 80010ac:	69b8      	ldr	r0, [r7, #24]
 80010ae:	f000 fa1b 	bl	80014e8 <HW_TS_RTC_Int_AppNot>
 80010b2:	e022      	b.n	80010fa <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80010b4:	f7ff fed2 	bl	8000e5c <RescheduleTimerList>
 80010b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ba:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	f383 8810 	msr	PRIMASK, r3
}
 80010c2:	e01a      	b.n	80010fa <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80010c4:	bf00      	nop
 80010c6:	4b11      	ldr	r3, [pc, #68]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	f003 0304 	and.w	r3, r3, #4
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d0f8      	beq.n	80010c6 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80010d4:	4b0d      	ldr	r3, [pc, #52]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	4b0b      	ldr	r3, [pc, #44]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80010e4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80010e6:	4b0d      	ldr	r3, [pc, #52]	@ (800111c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80010e8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f383 8810 	msr	PRIMASK, r3
}
 80010f8:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80010fa:	4b04      	ldr	r3, [pc, #16]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	22ff      	movs	r2, #255	@ 0xff
 8001100:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8001102:	bf00      	nop
}
 8001104:	3728      	adds	r7, #40	@ 0x28
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000124 	.word	0x20000124
 8001110:	20000114 	.word	0x20000114
 8001114:	20000084 	.word	0x20000084
 8001118:	2000011c 	.word	0x2000011c
 800111c:	58000800 	.word	0x58000800

08001120 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800112c:	4b5e      	ldr	r3, [pc, #376]	@ (80012a8 <HW_TS_Init+0x188>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	22ca      	movs	r2, #202	@ 0xca
 8001132:	625a      	str	r2, [r3, #36]	@ 0x24
 8001134:	4b5c      	ldr	r3, [pc, #368]	@ (80012a8 <HW_TS_Init+0x188>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2253      	movs	r2, #83	@ 0x53
 800113a:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800113c:	4b5b      	ldr	r3, [pc, #364]	@ (80012ac <HW_TS_Init+0x18c>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	4a5a      	ldr	r2, [pc, #360]	@ (80012ac <HW_TS_Init+0x18c>)
 8001142:	f043 0320 	orr.w	r3, r3, #32
 8001146:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001148:	4b58      	ldr	r3, [pc, #352]	@ (80012ac <HW_TS_Init+0x18c>)
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	b2db      	uxtb	r3, r3
 8001154:	f1c3 0304 	rsb	r3, r3, #4
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4b55      	ldr	r3, [pc, #340]	@ (80012b0 <HW_TS_Init+0x190>)
 800115c:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800115e:	4b53      	ldr	r3, [pc, #332]	@ (80012ac <HW_TS_Init+0x18c>)
 8001160:	691b      	ldr	r3, [r3, #16]
 8001162:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001166:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 800116a:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	fa92 f2a2 	rbit	r2, r2
 8001172:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001174:	68fa      	ldr	r2, [r7, #12]
 8001176:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001178:	697a      	ldr	r2, [r7, #20]
 800117a:	2a00      	cmp	r2, #0
 800117c:	d101      	bne.n	8001182 <HW_TS_Init+0x62>
  {
    return 32U;
 800117e:	2220      	movs	r2, #32
 8001180:	e003      	b.n	800118a <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	fab2 f282 	clz	r2, r2
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	40d3      	lsrs	r3, r2
 800118c:	b2db      	uxtb	r3, r3
 800118e:	3301      	adds	r3, #1
 8001190:	b2da      	uxtb	r2, r3
 8001192:	4b48      	ldr	r3, [pc, #288]	@ (80012b4 <HW_TS_Init+0x194>)
 8001194:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001196:	4b45      	ldr	r3, [pc, #276]	@ (80012ac <HW_TS_Init+0x18c>)
 8001198:	691b      	ldr	r3, [r3, #16]
 800119a:	b29b      	uxth	r3, r3
 800119c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	3301      	adds	r3, #1
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	4b44      	ldr	r3, [pc, #272]	@ (80012b8 <HW_TS_Init+0x198>)
 80011a8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80011aa:	4b43      	ldr	r3, [pc, #268]	@ (80012b8 <HW_TS_Init+0x198>)
 80011ac:	881b      	ldrh	r3, [r3, #0]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	4a40      	ldr	r2, [pc, #256]	@ (80012b4 <HW_TS_Init+0x194>)
 80011b2:	7812      	ldrb	r2, [r2, #0]
 80011b4:	fb02 f303 	mul.w	r3, r2, r3
 80011b8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80011bc:	4a3c      	ldr	r2, [pc, #240]	@ (80012b0 <HW_TS_Init+0x190>)
 80011be:	7812      	ldrb	r2, [r2, #0]
 80011c0:	40d3      	lsrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d904      	bls.n	80011d8 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80011ce:	4b3b      	ldr	r3, [pc, #236]	@ (80012bc <HW_TS_Init+0x19c>)
 80011d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011d4:	801a      	strh	r2, [r3, #0]
 80011d6:	e003      	b.n	80011e0 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	b29a      	uxth	r2, r3
 80011dc:	4b37      	ldr	r3, [pc, #220]	@ (80012bc <HW_TS_Init+0x19c>)
 80011de:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80011e0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80011e4:	f7ff fb9c 	bl	8000920 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80011e8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80011ec:	f7ff fb84 	bl	80008f8 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d13d      	bne.n	8001272 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80011f6:	4b32      	ldr	r3, [pc, #200]	@ (80012c0 <HW_TS_Init+0x1a0>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80011fc:	4b31      	ldr	r3, [pc, #196]	@ (80012c4 <HW_TS_Init+0x1a4>)
 80011fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001202:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001204:	2300      	movs	r3, #0
 8001206:	77fb      	strb	r3, [r7, #31]
 8001208:	e00c      	b.n	8001224 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800120a:	7ffa      	ldrb	r2, [r7, #31]
 800120c:	492e      	ldr	r1, [pc, #184]	@ (80012c8 <HW_TS_Init+0x1a8>)
 800120e:	4613      	mov	r3, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	4413      	add	r3, r2
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	440b      	add	r3, r1
 8001218:	330c      	adds	r3, #12
 800121a:	2200      	movs	r2, #0
 800121c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800121e:	7ffb      	ldrb	r3, [r7, #31]
 8001220:	3301      	adds	r3, #1
 8001222:	77fb      	strb	r3, [r7, #31]
 8001224:	7ffb      	ldrb	r3, [r7, #31]
 8001226:	2b05      	cmp	r3, #5
 8001228:	d9ef      	bls.n	800120a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800122a:	4b28      	ldr	r3, [pc, #160]	@ (80012cc <HW_TS_Init+0x1ac>)
 800122c:	2206      	movs	r2, #6
 800122e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001230:	4b1d      	ldr	r3, [pc, #116]	@ (80012a8 <HW_TS_Init+0x188>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	4b1c      	ldr	r3, [pc, #112]	@ (80012a8 <HW_TS_Init+0x188>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800123e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001240:	4b19      	ldr	r3, [pc, #100]	@ (80012a8 <HW_TS_Init+0x188>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	b2da      	uxtb	r2, r3
 8001248:	4b17      	ldr	r3, [pc, #92]	@ (80012a8 <HW_TS_Init+0x188>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001250:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001252:	4b1f      	ldr	r3, [pc, #124]	@ (80012d0 <HW_TS_Init+0x1b0>)
 8001254:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001258:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800125a:	2003      	movs	r0, #3
 800125c:	f000 ff8f 	bl	800217e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001260:	4b11      	ldr	r3, [pc, #68]	@ (80012a8 <HW_TS_Init+0x188>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689a      	ldr	r2, [r3, #8]
 8001266:	4b10      	ldr	r3, [pc, #64]	@ (80012a8 <HW_TS_Init+0x188>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	e009      	b.n	8001286 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001272:	4b0d      	ldr	r3, [pc, #52]	@ (80012a8 <HW_TS_Init+0x188>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800127c:	2b00      	cmp	r3, #0
 800127e:	d002      	beq.n	8001286 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001280:	2003      	movs	r0, #3
 8001282:	f000 ff6e 	bl	8002162 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001286:	4b08      	ldr	r3, [pc, #32]	@ (80012a8 <HW_TS_Init+0x188>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	22ff      	movs	r2, #255	@ 0xff
 800128c:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800128e:	2200      	movs	r2, #0
 8001290:	2103      	movs	r1, #3
 8001292:	2003      	movs	r0, #3
 8001294:	f000 ff23 	bl	80020de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001298:	2003      	movs	r0, #3
 800129a:	f000 ff3a 	bl	8002112 <HAL_NVIC_EnableIRQ>

  return;
 800129e:	bf00      	nop
}
 80012a0:	3720      	adds	r7, #32
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000124 	.word	0x20000124
 80012ac:	40002800 	.word	0x40002800
 80012b0:	2000011d 	.word	0x2000011d
 80012b4:	2000011e 	.word	0x2000011e
 80012b8:	20000120 	.word	0x20000120
 80012bc:	20000122 	.word	0x20000122
 80012c0:	2000011c 	.word	0x2000011c
 80012c4:	20000118 	.word	0x20000118
 80012c8:	20000084 	.word	0x20000084
 80012cc:	20000114 	.word	0x20000114
 80012d0:	58000800 	.word	0x58000800

080012d4 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80012de:	f3ef 8310 	mrs	r3, PRIMASK
 80012e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80012e4:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80012e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80012e8:	b672      	cpsid	i
}
 80012ea:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80012ec:	2003      	movs	r0, #3
 80012ee:	f000 ff1e 	bl	800212e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80012f2:	4b34      	ldr	r3, [pc, #208]	@ (80013c4 <HW_TS_Stop+0xf0>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	22ca      	movs	r2, #202	@ 0xca
 80012f8:	625a      	str	r2, [r3, #36]	@ 0x24
 80012fa:	4b32      	ldr	r3, [pc, #200]	@ (80013c4 <HW_TS_Stop+0xf0>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2253      	movs	r2, #83	@ 0x53
 8001300:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001302:	79fa      	ldrb	r2, [r7, #7]
 8001304:	4930      	ldr	r1, [pc, #192]	@ (80013c8 <HW_TS_Stop+0xf4>)
 8001306:	4613      	mov	r3, r2
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	4413      	add	r3, r2
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	440b      	add	r3, r1
 8001310:	330c      	adds	r3, #12
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d142      	bne.n	80013a0 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fc80 	bl	8000c24 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001324:	4b29      	ldr	r3, [pc, #164]	@ (80013cc <HW_TS_Stop+0xf8>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800132a:	7cfb      	ldrb	r3, [r7, #19]
 800132c:	2b06      	cmp	r3, #6
 800132e:	d12f      	bne.n	8001390 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001330:	4b27      	ldr	r3, [pc, #156]	@ (80013d0 <HW_TS_Stop+0xfc>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001338:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800133c:	d107      	bne.n	800134e <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800133e:	bf00      	nop
 8001340:	4b20      	ldr	r3, [pc, #128]	@ (80013c4 <HW_TS_Stop+0xf0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f8      	bne.n	8001340 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800134e:	4b1d      	ldr	r3, [pc, #116]	@ (80013c4 <HW_TS_Stop+0xf0>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	4b1b      	ldr	r3, [pc, #108]	@ (80013c4 <HW_TS_Stop+0xf0>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800135c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800135e:	bf00      	nop
 8001360:	4b18      	ldr	r3, [pc, #96]	@ (80013c4 <HW_TS_Stop+0xf0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f8      	beq.n	8001360 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800136e:	4b15      	ldr	r3, [pc, #84]	@ (80013c4 <HW_TS_Stop+0xf0>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4b13      	ldr	r3, [pc, #76]	@ (80013c4 <HW_TS_Stop+0xf0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800137e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001380:	4b14      	ldr	r3, [pc, #80]	@ (80013d4 <HW_TS_Stop+0x100>)
 8001382:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001386:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001388:	2003      	movs	r0, #3
 800138a:	f000 fef8 	bl	800217e <HAL_NVIC_ClearPendingIRQ>
 800138e:	e007      	b.n	80013a0 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001390:	4b11      	ldr	r3, [pc, #68]	@ (80013d8 <HW_TS_Stop+0x104>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	b2db      	uxtb	r3, r3
 8001396:	7cfa      	ldrb	r2, [r7, #19]
 8001398:	429a      	cmp	r2, r3
 800139a:	d001      	beq.n	80013a0 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 800139c:	f7ff fd5e 	bl	8000e5c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80013a0:	4b08      	ldr	r3, [pc, #32]	@ (80013c4 <HW_TS_Stop+0xf0>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	22ff      	movs	r2, #255	@ 0xff
 80013a6:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80013a8:	2003      	movs	r0, #3
 80013aa:	f000 feb2 	bl	8002112 <HAL_NVIC_EnableIRQ>
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	f383 8810 	msr	PRIMASK, r3
}
 80013b8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80013ba:	bf00      	nop
}
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000124 	.word	0x20000124
 80013c8:	20000084 	.word	0x20000084
 80013cc:	20000114 	.word	0x20000114
 80013d0:	40002800 	.word	0x40002800
 80013d4:	58000800 	.word	0x58000800
 80013d8:	20000115 	.word	0x20000115

080013dc <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	6039      	str	r1, [r7, #0]
 80013e6:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80013e8:	79fa      	ldrb	r2, [r7, #7]
 80013ea:	493b      	ldr	r1, [pc, #236]	@ (80014d8 <HW_TS_Start+0xfc>)
 80013ec:	4613      	mov	r3, r2
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	4413      	add	r3, r2
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	440b      	add	r3, r1
 80013f6:	330c      	adds	r3, #12
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d103      	bne.n	8001408 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff ff66 	bl	80012d4 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001408:	f3ef 8310 	mrs	r3, PRIMASK
 800140c:	60fb      	str	r3, [r7, #12]
  return(result);
 800140e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001410:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001412:	b672      	cpsid	i
}
 8001414:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001416:	2003      	movs	r0, #3
 8001418:	f000 fe89 	bl	800212e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800141c:	4b2f      	ldr	r3, [pc, #188]	@ (80014dc <HW_TS_Start+0x100>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	22ca      	movs	r2, #202	@ 0xca
 8001422:	625a      	str	r2, [r3, #36]	@ 0x24
 8001424:	4b2d      	ldr	r3, [pc, #180]	@ (80014dc <HW_TS_Start+0x100>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2253      	movs	r2, #83	@ 0x53
 800142a:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800142c:	79fa      	ldrb	r2, [r7, #7]
 800142e:	492a      	ldr	r1, [pc, #168]	@ (80014d8 <HW_TS_Start+0xfc>)
 8001430:	4613      	mov	r3, r2
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	4413      	add	r3, r2
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	440b      	add	r3, r1
 800143a:	330c      	adds	r3, #12
 800143c:	2202      	movs	r2, #2
 800143e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001440:	79fa      	ldrb	r2, [r7, #7]
 8001442:	4925      	ldr	r1, [pc, #148]	@ (80014d8 <HW_TS_Start+0xfc>)
 8001444:	4613      	mov	r3, r2
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	4413      	add	r3, r2
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	440b      	add	r3, r1
 800144e:	3308      	adds	r3, #8
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001454:	79fa      	ldrb	r2, [r7, #7]
 8001456:	4920      	ldr	r1, [pc, #128]	@ (80014d8 <HW_TS_Start+0xfc>)
 8001458:	4613      	mov	r3, r2
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	4413      	add	r3, r2
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	440b      	add	r3, r1
 8001462:	3304      	adds	r3, #4
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fb30 	bl	8000ad0 <linkTimer>
 8001470:	4603      	mov	r3, r0
 8001472:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001474:	4b1a      	ldr	r3, [pc, #104]	@ (80014e0 <HW_TS_Start+0x104>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800147a:	4b1a      	ldr	r3, [pc, #104]	@ (80014e4 <HW_TS_Start+0x108>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	b2db      	uxtb	r3, r3
 8001480:	7c7a      	ldrb	r2, [r7, #17]
 8001482:	429a      	cmp	r2, r3
 8001484:	d002      	beq.n	800148c <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8001486:	f7ff fce9 	bl	8000e5c <RescheduleTimerList>
 800148a:	e013      	b.n	80014b4 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800148c:	79fa      	ldrb	r2, [r7, #7]
 800148e:	4912      	ldr	r1, [pc, #72]	@ (80014d8 <HW_TS_Start+0xfc>)
 8001490:	4613      	mov	r3, r2
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	4413      	add	r3, r2
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	440b      	add	r3, r1
 800149a:	3308      	adds	r3, #8
 800149c:	6819      	ldr	r1, [r3, #0]
 800149e:	8a7b      	ldrh	r3, [r7, #18]
 80014a0:	79fa      	ldrb	r2, [r7, #7]
 80014a2:	1ac9      	subs	r1, r1, r3
 80014a4:	480c      	ldr	r0, [pc, #48]	@ (80014d8 <HW_TS_Start+0xfc>)
 80014a6:	4613      	mov	r3, r2
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	4413      	add	r3, r2
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	4403      	add	r3, r0
 80014b0:	3308      	adds	r3, #8
 80014b2:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80014b4:	4b09      	ldr	r3, [pc, #36]	@ (80014dc <HW_TS_Start+0x100>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	22ff      	movs	r2, #255	@ 0xff
 80014ba:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80014bc:	2003      	movs	r0, #3
 80014be:	f000 fe28 	bl	8002112 <HAL_NVIC_EnableIRQ>
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	f383 8810 	msr	PRIMASK, r3
}
 80014cc:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80014ce:	bf00      	nop
}
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000084 	.word	0x20000084
 80014dc:	20000124 	.word	0x20000124
 80014e0:	20000114 	.word	0x20000114
 80014e4:	20000115 	.word	0x20000115

080014e8 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	460b      	mov	r3, r1
 80014f2:	607a      	str	r2, [r7, #4]
 80014f4:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4798      	blx	r3

  return;
 80014fa:	bf00      	nop
}
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <LL_RCC_LSE_SetDriveCapability>:
{
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800150a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800150e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001512:	f023 0218 	bic.w	r2, r3, #24
 8001516:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4313      	orrs	r3, r2
 800151e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800152e:	b480      	push	{r7}
 8001530:	b085      	sub	sp, #20
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001536:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800153a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800153c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4313      	orrs	r3, r2
 8001544:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001546:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800154a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4013      	ands	r3, r2
 8001550:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001552:	68fb      	ldr	r3, [r7, #12]
}
 8001554:	bf00      	nop
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001564:	f000 fbfa 	bl	8001d5c <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001568:	f7ff f84c 	bl	8000604 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800156c:	f000 f816 	bl	800159c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001570:	f000 f88a 	bl	8001688 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001574:	f000 f958 	bl	8001828 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001578:	f000 f8e2 	bl	8001740 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 800157c:	f000 f92c 	bl	80017d8 <MX_USB_PCD_Init>
  MX_RTC_Init();
 8001580:	f000 f8aa 	bl	80016d8 <MX_RTC_Init>
  MX_RF_Init();
 8001584:	f000 f8a0 	bl	80016c8 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001588:	f7ff f84a 	bl	8000620 <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 800158c:	f04f 30ff 	mov.w	r0, #4294967295
 8001590:	f006 fe8c 	bl	80082ac <UTIL_SEQ_Run>
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001594:	f7ff f971 	bl	800087a <MX_APPE_Process>
	UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8001598:	bf00      	nop
 800159a:	e7f7      	b.n	800158c <main+0x2c>

0800159c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b09a      	sub	sp, #104	@ 0x68
 80015a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015a2:	f107 0320 	add.w	r3, r7, #32
 80015a6:	2248      	movs	r2, #72	@ 0x48
 80015a8:	2100      	movs	r1, #0
 80015aa:	4618      	mov	r0, r3
 80015ac:	f007 f8b8 	bl	8008720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	609a      	str	r2, [r3, #8]
 80015ba:	60da      	str	r2, [r3, #12]
 80015bc:	611a      	str	r2, [r3, #16]
 80015be:	615a      	str	r2, [r3, #20]
 80015c0:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80015c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80015d0:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80015d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	f023 0303 	bic.w	r3, r3, #3
 80015dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015e6:	f001 facd 	bl	8002b84 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80015ea:	2000      	movs	r0, #0
 80015ec:	f7ff ff89 	bl	8001502 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015f0:	4b24      	ldr	r3, [pc, #144]	@ (8001684 <SystemClock_Config+0xe8>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015f8:	4a22      	ldr	r2, [pc, #136]	@ (8001684 <SystemClock_Config+0xe8>)
 80015fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015fe:	6013      	str	r3, [r2, #0]
 8001600:	4b20      	ldr	r3, [pc, #128]	@ (8001684 <SystemClock_Config+0xe8>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001608:	603b      	str	r3, [r7, #0]
 800160a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800160c:	2327      	movs	r3, #39	@ 0x27
 800160e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001610:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001614:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001616:	2301      	movs	r3, #1
 8001618:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800161a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800161e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001620:	2301      	movs	r3, #1
 8001622:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001624:	2340      	movs	r3, #64	@ 0x40
 8001626:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001628:	2300      	movs	r3, #0
 800162a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800162c:	2360      	movs	r3, #96	@ 0x60
 800162e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001630:	2300      	movs	r3, #0
 8001632:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001634:	f107 0320 	add.w	r3, r7, #32
 8001638:	4618      	mov	r0, r3
 800163a:	f001 fe37 	bl	80032ac <HAL_RCC_OscConfig>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001644:	f000 f942 	bl	80018cc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001648:	236f      	movs	r3, #111	@ 0x6f
 800164a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800164c:	2302      	movs	r3, #2
 800164e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001654:	2300      	movs	r3, #0
 8001656:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800165c:	2300      	movs	r3, #0
 800165e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001660:	2300      	movs	r3, #0
 8001662:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	2101      	movs	r1, #1
 8001668:	4618      	mov	r0, r3
 800166a:	f002 f993 	bl	8003994 <HAL_RCC_ClockConfig>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8001674:	f000 f92a 	bl	80018cc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001678:	f002 ff4e 	bl	8004518 <HAL_RCCEx_EnableMSIPLLMode>
}
 800167c:	bf00      	nop
 800167e:	3768      	adds	r7, #104	@ 0x68
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	58000400 	.word	0x58000400

08001688 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b094      	sub	sp, #80	@ 0x50
 800168c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800168e:	463b      	mov	r3, r7
 8001690:	2250      	movs	r2, #80	@ 0x50
 8001692:	2100      	movs	r1, #0
 8001694:	4618      	mov	r0, r3
 8001696:	f007 f843 	bl	8008720 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800169a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800169e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80016a0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80016a4:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80016a6:	2300      	movs	r3, #0
 80016a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ae:	463b      	mov	r3, r7
 80016b0:	4618      	mov	r0, r3
 80016b2:	f002 fdbb 	bl	800422c <HAL_RCCEx_PeriphCLKConfig>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80016bc:	f000 f906 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80016c0:	bf00      	nop
 80016c2:	3750      	adds	r7, #80	@ 0x50
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
	...

080016d8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80016dc:	4b16      	ldr	r3, [pc, #88]	@ (8001738 <MX_RTC_Init+0x60>)
 80016de:	4a17      	ldr	r2, [pc, #92]	@ (800173c <MX_RTC_Init+0x64>)
 80016e0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80016e2:	4b15      	ldr	r3, [pc, #84]	@ (8001738 <MX_RTC_Init+0x60>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80016e8:	4b13      	ldr	r3, [pc, #76]	@ (8001738 <MX_RTC_Init+0x60>)
 80016ea:	220f      	movs	r2, #15
 80016ec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80016ee:	4b12      	ldr	r3, [pc, #72]	@ (8001738 <MX_RTC_Init+0x60>)
 80016f0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80016f4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016f6:	4b10      	ldr	r3, [pc, #64]	@ (8001738 <MX_RTC_Init+0x60>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001738 <MX_RTC_Init+0x60>)
 80016fe:	2200      	movs	r2, #0
 8001700:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001702:	4b0d      	ldr	r3, [pc, #52]	@ (8001738 <MX_RTC_Init+0x60>)
 8001704:	2200      	movs	r2, #0
 8001706:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001708:	4b0b      	ldr	r3, [pc, #44]	@ (8001738 <MX_RTC_Init+0x60>)
 800170a:	2200      	movs	r2, #0
 800170c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800170e:	480a      	ldr	r0, [pc, #40]	@ (8001738 <MX_RTC_Init+0x60>)
 8001710:	f003 f81a 	bl	8004748 <HAL_RTC_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800171a:	f000 f8d7 	bl	80018cc <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800171e:	2200      	movs	r2, #0
 8001720:	2100      	movs	r1, #0
 8001722:	4805      	ldr	r0, [pc, #20]	@ (8001738 <MX_RTC_Init+0x60>)
 8001724:	f003 f910 	bl	8004948 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800172e:	f000 f8cd 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000124 	.word	0x20000124
 800173c:	40002800 	.word	0x40002800

08001740 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001744:	4b22      	ldr	r3, [pc, #136]	@ (80017d0 <MX_USART1_UART_Init+0x90>)
 8001746:	4a23      	ldr	r2, [pc, #140]	@ (80017d4 <MX_USART1_UART_Init+0x94>)
 8001748:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800174a:	4b21      	ldr	r3, [pc, #132]	@ (80017d0 <MX_USART1_UART_Init+0x90>)
 800174c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001750:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001752:	4b1f      	ldr	r3, [pc, #124]	@ (80017d0 <MX_USART1_UART_Init+0x90>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001758:	4b1d      	ldr	r3, [pc, #116]	@ (80017d0 <MX_USART1_UART_Init+0x90>)
 800175a:	2200      	movs	r2, #0
 800175c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800175e:	4b1c      	ldr	r3, [pc, #112]	@ (80017d0 <MX_USART1_UART_Init+0x90>)
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001764:	4b1a      	ldr	r3, [pc, #104]	@ (80017d0 <MX_USART1_UART_Init+0x90>)
 8001766:	220c      	movs	r2, #12
 8001768:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800176a:	4b19      	ldr	r3, [pc, #100]	@ (80017d0 <MX_USART1_UART_Init+0x90>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001770:	4b17      	ldr	r3, [pc, #92]	@ (80017d0 <MX_USART1_UART_Init+0x90>)
 8001772:	2200      	movs	r2, #0
 8001774:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001776:	4b16      	ldr	r3, [pc, #88]	@ (80017d0 <MX_USART1_UART_Init+0x90>)
 8001778:	2200      	movs	r2, #0
 800177a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800177c:	4b14      	ldr	r3, [pc, #80]	@ (80017d0 <MX_USART1_UART_Init+0x90>)
 800177e:	2200      	movs	r2, #0
 8001780:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001782:	4b13      	ldr	r3, [pc, #76]	@ (80017d0 <MX_USART1_UART_Init+0x90>)
 8001784:	2200      	movs	r2, #0
 8001786:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001788:	4811      	ldr	r0, [pc, #68]	@ (80017d0 <MX_USART1_UART_Init+0x90>)
 800178a:	f003 f9b9 	bl	8004b00 <HAL_UART_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001794:	f000 f89a 	bl	80018cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001798:	2100      	movs	r1, #0
 800179a:	480d      	ldr	r0, [pc, #52]	@ (80017d0 <MX_USART1_UART_Init+0x90>)
 800179c:	f004 fa23 	bl	8005be6 <HAL_UARTEx_SetTxFifoThreshold>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80017a6:	f000 f891 	bl	80018cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017aa:	2100      	movs	r1, #0
 80017ac:	4808      	ldr	r0, [pc, #32]	@ (80017d0 <MX_USART1_UART_Init+0x90>)
 80017ae:	f004 fa58 	bl	8005c62 <HAL_UARTEx_SetRxFifoThreshold>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80017b8:	f000 f888 	bl	80018cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80017bc:	4804      	ldr	r0, [pc, #16]	@ (80017d0 <MX_USART1_UART_Init+0x90>)
 80017be:	f004 f9d9 	bl	8005b74 <HAL_UARTEx_DisableFifoMode>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80017c8:	f000 f880 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017cc:	bf00      	nop
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20000148 	.word	0x20000148
 80017d4:	40013800 	.word	0x40013800

080017d8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80017dc:	4b10      	ldr	r3, [pc, #64]	@ (8001820 <MX_USB_PCD_Init+0x48>)
 80017de:	4a11      	ldr	r2, [pc, #68]	@ (8001824 <MX_USB_PCD_Init+0x4c>)
 80017e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80017e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001820 <MX_USB_PCD_Init+0x48>)
 80017e4:	2208      	movs	r2, #8
 80017e6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80017e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001820 <MX_USB_PCD_Init+0x48>)
 80017ea:	2202      	movs	r2, #2
 80017ec:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80017ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001820 <MX_USB_PCD_Init+0x48>)
 80017f0:	2202      	movs	r2, #2
 80017f2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80017f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001820 <MX_USB_PCD_Init+0x48>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80017fa:	4b09      	ldr	r3, [pc, #36]	@ (8001820 <MX_USB_PCD_Init+0x48>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001800:	4b07      	ldr	r3, [pc, #28]	@ (8001820 <MX_USB_PCD_Init+0x48>)
 8001802:	2200      	movs	r2, #0
 8001804:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001806:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <MX_USB_PCD_Init+0x48>)
 8001808:	2200      	movs	r2, #0
 800180a:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800180c:	4804      	ldr	r0, [pc, #16]	@ (8001820 <MX_USB_PCD_Init+0x48>)
 800180e:	f001 f8c1 	bl	8002994 <HAL_PCD_Init>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001818:	f000 f858 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800181c:	bf00      	nop
 800181e:	bd80      	pop	{r7, pc}
 8001820:	200001dc 	.word	0x200001dc
 8001824:	40006800 	.word	0x40006800

08001828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800183c:	2004      	movs	r0, #4
 800183e:	f7ff fe76 	bl	800152e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001842:	2002      	movs	r0, #2
 8001844:	f7ff fe73 	bl	800152e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001848:	2001      	movs	r0, #1
 800184a:	f7ff fe70 	bl	800152e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800184e:	2008      	movs	r0, #8
 8001850:	f7ff fe6d 	bl	800152e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001854:	2200      	movs	r2, #0
 8001856:	2123      	movs	r1, #35	@ 0x23
 8001858:	4819      	ldr	r0, [pc, #100]	@ (80018c0 <MX_GPIO_Init+0x98>)
 800185a:	f001 f83b 	bl	80028d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Bouton_Pin */
  GPIO_InitStruct.Pin = Bouton_Pin;
 800185e:	2310      	movs	r3, #16
 8001860:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001862:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001866:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(Bouton_GPIO_Port, &GPIO_InitStruct);
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	4619      	mov	r1, r3
 8001870:	4814      	ldr	r0, [pc, #80]	@ (80018c4 <MX_GPIO_Init+0x9c>)
 8001872:	f000 febf 	bl	80025f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8001876:	2323      	movs	r3, #35	@ 0x23
 8001878:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187a:	2301      	movs	r3, #1
 800187c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001886:	1d3b      	adds	r3, r7, #4
 8001888:	4619      	mov	r1, r3
 800188a:	480d      	ldr	r0, [pc, #52]	@ (80018c0 <MX_GPIO_Init+0x98>)
 800188c:	f000 feb2 	bl	80025f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001890:	2303      	movs	r3, #3
 8001892:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001894:	2300      	movs	r3, #0
 8001896:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800189c:	1d3b      	adds	r3, r7, #4
 800189e:	4619      	mov	r1, r3
 80018a0:	4809      	ldr	r0, [pc, #36]	@ (80018c8 <MX_GPIO_Init+0xa0>)
 80018a2:	f000 fea7 	bl	80025f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2100      	movs	r1, #0
 80018aa:	200a      	movs	r0, #10
 80018ac:	f000 fc17 	bl	80020de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80018b0:	200a      	movs	r0, #10
 80018b2:	f000 fc2e 	bl	8002112 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018b6:	bf00      	nop
 80018b8:	3718      	adds	r7, #24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	48000400 	.word	0x48000400
 80018c4:	48000800 	.word	0x48000800
 80018c8:	48000c00 	.word	0x48000c00

080018cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80018d0:	b672      	cpsid	i
}
 80018d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018d4:	bf00      	nop
 80018d6:	e7fd      	b.n	80018d4 <Error_Handler+0x8>

080018d8 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80018dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <LL_AHB2_GRP1_EnableClock>:
{
 80018fa:	b480      	push	{r7}
 80018fc:	b085      	sub	sp, #20
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001902:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001906:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001908:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4313      	orrs	r3, r2
 8001910:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001912:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001916:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4013      	ands	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800191e:	68fb      	ldr	r3, [r7, #12]
}
 8001920:	bf00      	nop
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001934:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001938:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800193a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4313      	orrs	r3, r2
 8001942:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001944:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001948:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4013      	ands	r3, r2
 800194e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001950:	68fb      	ldr	r3, [r7, #12]
}
 8001952:	bf00      	nop
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800195e:	b480      	push	{r7}
 8001960:	b085      	sub	sp, #20
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001966:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800196a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800196c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4313      	orrs	r3, r2
 8001974:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001976:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800197a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4013      	ands	r3, r2
 8001980:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001982:	68fb      	ldr	r3, [r7, #12]
}
 8001984:	bf00      	nop
 8001986:	3714      	adds	r7, #20
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001998:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800199c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800199e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80019a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019ac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4013      	ands	r3, r2
 80019b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019b4:	68fb      	ldr	r3, [r7, #12]
}
 80019b6:	bf00      	nop
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80019c6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80019ca:	f7ff ffaf 	bl	800192c <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	2100      	movs	r1, #0
 80019d2:	202e      	movs	r0, #46	@ 0x2e
 80019d4:	f000 fb83 	bl	80020de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80019d8:	202e      	movs	r0, #46	@ 0x2e
 80019da:	f000 fb9a 	bl	8002112 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b096      	sub	sp, #88	@ 0x58
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019ec:	f107 0308 	add.w	r3, r7, #8
 80019f0:	2250      	movs	r2, #80	@ 0x50
 80019f2:	2100      	movs	r1, #0
 80019f4:	4618      	mov	r0, r3
 80019f6:	f006 fe93 	bl	8008720 <memset>
  if(hrtc->Instance==RTC)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a12      	ldr	r2, [pc, #72]	@ (8001a48 <HAL_RTC_MspInit+0x64>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d11d      	bne.n	8001a40 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a04:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001a08:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001a0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a0e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a10:	f107 0308 	add.w	r3, r7, #8
 8001a14:	4618      	mov	r0, r3
 8001a16:	f002 fc09 	bl	800422c <HAL_RCCEx_PeriphCLKConfig>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001a20:	f7ff ff54 	bl	80018cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a24:	f7ff ff58 	bl	80018d8 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001a28:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001a2c:	f7ff ff97 	bl	800195e <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001a30:	2200      	movs	r2, #0
 8001a32:	2100      	movs	r1, #0
 8001a34:	2003      	movs	r0, #3
 8001a36:	f000 fb52 	bl	80020de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001a3a:	2003      	movs	r0, #3
 8001a3c:	f000 fb69 	bl	8002112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001a40:	bf00      	nop
 8001a42:	3758      	adds	r7, #88	@ 0x58
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40002800 	.word	0x40002800

08001a4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b09c      	sub	sp, #112	@ 0x70
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a64:	f107 030c 	add.w	r3, r7, #12
 8001a68:	2250      	movs	r2, #80	@ 0x50
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f006 fe57 	bl	8008720 <memset>
  if(huart->Instance==USART1)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a1a      	ldr	r2, [pc, #104]	@ (8001ae0 <HAL_UART_MspInit+0x94>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d12c      	bne.n	8001ad6 <HAL_UART_MspInit+0x8a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001a80:	2300      	movs	r3, #0
 8001a82:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a84:	f107 030c 	add.w	r3, r7, #12
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f002 fbcf 	bl	800422c <HAL_RCCEx_PeriphCLKConfig>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a94:	f7ff ff1a 	bl	80018cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a98:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001a9c:	f7ff ff78 	bl	8001990 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa0:	2002      	movs	r0, #2
 8001aa2:	f7ff ff2a 	bl	80018fa <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001aa6:	23c0      	movs	r3, #192	@ 0xc0
 8001aa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ab6:	2307      	movs	r3, #7
 8001ab8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aba:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4808      	ldr	r0, [pc, #32]	@ (8001ae4 <HAL_UART_MspInit+0x98>)
 8001ac2:	f000 fd97 	bl	80025f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2100      	movs	r1, #0
 8001aca:	2024      	movs	r0, #36	@ 0x24
 8001acc:	f000 fb07 	bl	80020de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ad0:	2024      	movs	r0, #36	@ 0x24
 8001ad2:	f000 fb1e 	bl	8002112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ad6:	bf00      	nop
 8001ad8:	3770      	adds	r7, #112	@ 0x70
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40013800 	.word	0x40013800
 8001ae4:	48000400 	.word	0x48000400

08001ae8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b09c      	sub	sp, #112	@ 0x70
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b00:	f107 030c 	add.w	r3, r7, #12
 8001b04:	2250      	movs	r2, #80	@ 0x50
 8001b06:	2100      	movs	r1, #0
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f006 fe09 	bl	8008720 <memset>
  if(hpcd->Instance==USB)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a1f      	ldr	r2, [pc, #124]	@ (8001b90 <HAL_PCD_MspInit+0xa8>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d136      	bne.n	8001b86 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001b18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b1c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8001b1e:	2318      	movs	r3, #24
 8001b20:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001b22:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b26:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001b28:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b2c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001b2e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001b32:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8001b34:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b38:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001b3a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001b3e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b40:	f107 030c 	add.w	r3, r7, #12
 8001b44:	4618      	mov	r0, r3
 8001b46:	f002 fb71 	bl	800422c <HAL_RCCEx_PeriphCLKConfig>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8001b50:	f7ff febc 	bl	80018cc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b54:	2001      	movs	r0, #1
 8001b56:	f7ff fed0 	bl	80018fa <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b5a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001b5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b60:	2302      	movs	r3, #2
 8001b62:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001b6c:	230a      	movs	r3, #10
 8001b6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b70:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001b74:	4619      	mov	r1, r3
 8001b76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b7a:	f000 fd3b 	bl	80025f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001b7e:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8001b82:	f7ff feec 	bl	800195e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001b86:	bf00      	nop
 8001b88:	3770      	adds	r7, #112	@ 0x70
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40006800 	.word	0x40006800

08001b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b98:	bf00      	nop
 8001b9a:	e7fd      	b.n	8001b98 <NMI_Handler+0x4>

08001b9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba0:	bf00      	nop
 8001ba2:	e7fd      	b.n	8001ba0 <HardFault_Handler+0x4>

08001ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba8:	bf00      	nop
 8001baa:	e7fd      	b.n	8001ba8 <MemManage_Handler+0x4>

08001bac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bb0:	bf00      	nop
 8001bb2:	e7fd      	b.n	8001bb0 <BusFault_Handler+0x4>

08001bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb8:	bf00      	nop
 8001bba:	e7fd      	b.n	8001bb8 <UsageFault_Handler+0x4>

08001bbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bea:	f000 f911 	bl	8001e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001bf6:	f7ff f9cb 	bl	8000f90 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Bouton_Pin);
 8001c02:	2010      	movs	r0, #16
 8001c04:	f000 fe7e 	bl	8002904 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001c08:	bf00      	nop
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c10:	4802      	ldr	r0, [pc, #8]	@ (8001c1c <USART1_IRQHandler+0x10>)
 8001c12:	f002 ffc5 	bl	8004ba0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000148 	.word	0x20000148

08001c20 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001c24:	f000 fe92 	bl	800294c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001c28:	bf00      	nop
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <IPCC_C1_TX_IRQHandler>:

/* USER CODE BEGIN 1 */

void IPCC_C1_TX_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8001c30:	f006 f9f2 	bl	8008018 <HW_IPCC_Tx_Handler>
  return;
 8001c34:	bf00      	nop
}
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <IPCC_C1_RX_IRQHandler>:

void IPCC_C1_RX_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8001c3c:	f006 f9b6 	bl	8007fac <HW_IPCC_Rx_Handler>
  return;
 8001c40:	bf00      	nop
}
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001c48:	4b24      	ldr	r3, [pc, #144]	@ (8001cdc <SystemInit+0x98>)
 8001c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c4e:	4a23      	ldr	r2, [pc, #140]	@ (8001cdc <SystemInit+0x98>)
 8001c50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001c58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001c68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c6c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001c70:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001c72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c7c:	4b18      	ldr	r3, [pc, #96]	@ (8001ce0 <SystemInit+0x9c>)
 8001c7e:	4013      	ands	r3, r2
 8001c80:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001c82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c8e:	f023 0305 	bic.w	r3, r3, #5
 8001c92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001c96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ca2:	f023 0301 	bic.w	r3, r3, #1
 8001ca6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001caa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cae:	4a0d      	ldr	r2, [pc, #52]	@ (8001ce4 <SystemInit+0xa0>)
 8001cb0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001cb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cb6:	4a0b      	ldr	r2, [pc, #44]	@ (8001ce4 <SystemInit+0xa0>)
 8001cb8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001cba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001cc4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cc8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001cca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cce:	2200      	movs	r2, #0
 8001cd0:	619a      	str	r2, [r3, #24]
}
 8001cd2:	bf00      	nop
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	e000ed00 	.word	0xe000ed00
 8001ce0:	faf6fefb 	.word	0xfaf6fefb
 8001ce4:	22041000 	.word	0x22041000

08001ce8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001ce8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cea:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cec:	3304      	adds	r3, #4

08001cee <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cee:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cf0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001cf2:	d3f9      	bcc.n	8001ce8 <CopyDataInit>
  bx lr
 8001cf4:	4770      	bx	lr

08001cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001cf6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001cf8:	3004      	adds	r0, #4

08001cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001cfa:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001cfc:	d3fb      	bcc.n	8001cf6 <FillZerobss>
  bx lr
 8001cfe:	4770      	bx	lr

08001d00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d00:	480c      	ldr	r0, [pc, #48]	@ (8001d34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d02:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d04:	f7ff ff9e 	bl	8001c44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001d08:	480b      	ldr	r0, [pc, #44]	@ (8001d38 <LoopForever+0x6>)
 8001d0a:	490c      	ldr	r1, [pc, #48]	@ (8001d3c <LoopForever+0xa>)
 8001d0c:	4a0c      	ldr	r2, [pc, #48]	@ (8001d40 <LoopForever+0xe>)
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f7ff ffed 	bl	8001cee <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001d14:	480b      	ldr	r0, [pc, #44]	@ (8001d44 <LoopForever+0x12>)
 8001d16:	490c      	ldr	r1, [pc, #48]	@ (8001d48 <LoopForever+0x16>)
 8001d18:	4a0c      	ldr	r2, [pc, #48]	@ (8001d4c <LoopForever+0x1a>)
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f7ff ffe7 	bl	8001cee <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001d20:	480b      	ldr	r0, [pc, #44]	@ (8001d50 <LoopForever+0x1e>)
 8001d22:	490c      	ldr	r1, [pc, #48]	@ (8001d54 <LoopForever+0x22>)
 8001d24:	2300      	movs	r3, #0
 8001d26:	f7ff ffe8 	bl	8001cfa <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d2a:	f006 fd01 	bl	8008730 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001d2e:	f7ff fc17 	bl	8001560 <main>

08001d32 <LoopForever>:

LoopForever:
  b LoopForever
 8001d32:	e7fe      	b.n	8001d32 <LoopForever>
  ldr   r0, =_estack
 8001d34:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001d38:	20000008 	.word	0x20000008
 8001d3c:	2000001c 	.word	0x2000001c
 8001d40:	08008a8c 	.word	0x08008a8c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001d44:	200301e4 	.word	0x200301e4
 8001d48:	20030a67 	.word	0x20030a67
 8001d4c:	08008ae6 	.word	0x08008ae6
  INIT_BSS _sbss, _ebss
 8001d50:	20000068 	.word	0x20000068
 8001d54:	200005fc 	.word	0x200005fc

08001d58 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d58:	e7fe      	b.n	8001d58 <ADC1_IRQHandler>
	...

08001d5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d62:	2300      	movs	r3, #0
 8001d64:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d66:	4b0c      	ldr	r3, [pc, #48]	@ (8001d98 <HAL_Init+0x3c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a0b      	ldr	r2, [pc, #44]	@ (8001d98 <HAL_Init+0x3c>)
 8001d6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d70:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d72:	2003      	movs	r0, #3
 8001d74:	f000 f9a8 	bl	80020c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f000 f80f 	bl	8001d9c <HAL_InitTick>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d002      	beq.n	8001d8a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	71fb      	strb	r3, [r7, #7]
 8001d88:	e001      	b.n	8001d8e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d8a:	f7ff fe1a 	bl	80019c2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	58004000 	.word	0x58004000

08001d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001da4:	2300      	movs	r3, #0
 8001da6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001da8:	4b17      	ldr	r3, [pc, #92]	@ (8001e08 <HAL_InitTick+0x6c>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d024      	beq.n	8001dfa <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001db0:	f001 ff9c 	bl	8003cec <HAL_RCC_GetHCLKFreq>
 8001db4:	4602      	mov	r2, r0
 8001db6:	4b14      	ldr	r3, [pc, #80]	@ (8001e08 <HAL_InitTick+0x6c>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	4619      	mov	r1, r3
 8001dbc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dc0:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f000 f9be 	bl	800214a <HAL_SYSTICK_Config>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10f      	bne.n	8001df4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b0f      	cmp	r3, #15
 8001dd8:	d809      	bhi.n	8001dee <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	6879      	ldr	r1, [r7, #4]
 8001dde:	f04f 30ff 	mov.w	r0, #4294967295
 8001de2:	f000 f97c 	bl	80020de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001de6:	4a09      	ldr	r2, [pc, #36]	@ (8001e0c <HAL_InitTick+0x70>)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	e007      	b.n	8001dfe <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	73fb      	strb	r3, [r7, #15]
 8001df2:	e004      	b.n	8001dfe <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	73fb      	strb	r3, [r7, #15]
 8001df8:	e001      	b.n	8001dfe <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20000010 	.word	0x20000010
 8001e0c:	2000000c 	.word	0x2000000c

08001e10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e14:	4b06      	ldr	r3, [pc, #24]	@ (8001e30 <HAL_IncTick+0x20>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <HAL_IncTick+0x24>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4413      	add	r3, r2
 8001e20:	4a04      	ldr	r2, [pc, #16]	@ (8001e34 <HAL_IncTick+0x24>)
 8001e22:	6013      	str	r3, [r2, #0]
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20000010 	.word	0x20000010
 8001e34:	200004b8 	.word	0x200004b8

08001e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e3c:	4b03      	ldr	r3, [pc, #12]	@ (8001e4c <HAL_GetTick+0x14>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	200004b8 	.word	0x200004b8

08001e50 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001e54:	4b03      	ldr	r3, [pc, #12]	@ (8001e64 <HAL_GetTickPrio+0x14>)
 8001e56:	681b      	ldr	r3, [r3, #0]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	2000000c 	.word	0x2000000c

08001e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e78:	4b0c      	ldr	r3, [pc, #48]	@ (8001eac <__NVIC_SetPriorityGrouping+0x44>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e7e:	68ba      	ldr	r2, [r7, #8]
 8001e80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e84:	4013      	ands	r3, r2
 8001e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e9a:	4a04      	ldr	r2, [pc, #16]	@ (8001eac <__NVIC_SetPriorityGrouping+0x44>)
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	60d3      	str	r3, [r2, #12]
}
 8001ea0:	bf00      	nop
 8001ea2:	3714      	adds	r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb4:	4b04      	ldr	r3, [pc, #16]	@ (8001ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	0a1b      	lsrs	r3, r3, #8
 8001eba:	f003 0307 	and.w	r3, r3, #7
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	db0b      	blt.n	8001ef6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ede:	79fb      	ldrb	r3, [r7, #7]
 8001ee0:	f003 021f 	and.w	r2, r3, #31
 8001ee4:	4907      	ldr	r1, [pc, #28]	@ (8001f04 <__NVIC_EnableIRQ+0x38>)
 8001ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eea:	095b      	lsrs	r3, r3, #5
 8001eec:	2001      	movs	r0, #1
 8001eee:	fa00 f202 	lsl.w	r2, r0, r2
 8001ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	e000e100 	.word	0xe000e100

08001f08 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	db12      	blt.n	8001f40 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	f003 021f 	and.w	r2, r3, #31
 8001f20:	490a      	ldr	r1, [pc, #40]	@ (8001f4c <__NVIC_DisableIRQ+0x44>)
 8001f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f26:	095b      	lsrs	r3, r3, #5
 8001f28:	2001      	movs	r0, #1
 8001f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f2e:	3320      	adds	r3, #32
 8001f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f34:	f3bf 8f4f 	dsb	sy
}
 8001f38:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f3a:	f3bf 8f6f 	isb	sy
}
 8001f3e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	e000e100 	.word	0xe000e100

08001f50 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	db0c      	blt.n	8001f7c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	f003 021f 	and.w	r2, r3, #31
 8001f68:	4907      	ldr	r1, [pc, #28]	@ (8001f88 <__NVIC_SetPendingIRQ+0x38>)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	095b      	lsrs	r3, r3, #5
 8001f70:	2001      	movs	r0, #1
 8001f72:	fa00 f202 	lsl.w	r2, r0, r2
 8001f76:	3340      	adds	r3, #64	@ 0x40
 8001f78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	e000e100 	.word	0xe000e100

08001f8c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	db0c      	blt.n	8001fb8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
 8001fa0:	f003 021f 	and.w	r2, r3, #31
 8001fa4:	4907      	ldr	r1, [pc, #28]	@ (8001fc4 <__NVIC_ClearPendingIRQ+0x38>)
 8001fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001faa:	095b      	lsrs	r3, r3, #5
 8001fac:	2001      	movs	r0, #1
 8001fae:	fa00 f202 	lsl.w	r2, r0, r2
 8001fb2:	3360      	adds	r3, #96	@ 0x60
 8001fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	e000e100 	.word	0xe000e100

08001fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	6039      	str	r1, [r7, #0]
 8001fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	db0a      	blt.n	8001ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	490c      	ldr	r1, [pc, #48]	@ (8002014 <__NVIC_SetPriority+0x4c>)
 8001fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe6:	0112      	lsls	r2, r2, #4
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	440b      	add	r3, r1
 8001fec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ff0:	e00a      	b.n	8002008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	4908      	ldr	r1, [pc, #32]	@ (8002018 <__NVIC_SetPriority+0x50>)
 8001ff8:	79fb      	ldrb	r3, [r7, #7]
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	3b04      	subs	r3, #4
 8002000:	0112      	lsls	r2, r2, #4
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	440b      	add	r3, r1
 8002006:	761a      	strb	r2, [r3, #24]
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	e000e100 	.word	0xe000e100
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800201c:	b480      	push	{r7}
 800201e:	b089      	sub	sp, #36	@ 0x24
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	f1c3 0307 	rsb	r3, r3, #7
 8002036:	2b04      	cmp	r3, #4
 8002038:	bf28      	it	cs
 800203a:	2304      	movcs	r3, #4
 800203c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3304      	adds	r3, #4
 8002042:	2b06      	cmp	r3, #6
 8002044:	d902      	bls.n	800204c <NVIC_EncodePriority+0x30>
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3b03      	subs	r3, #3
 800204a:	e000      	b.n	800204e <NVIC_EncodePriority+0x32>
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002050:	f04f 32ff 	mov.w	r2, #4294967295
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43da      	mvns	r2, r3
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	401a      	ands	r2, r3
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002064:	f04f 31ff 	mov.w	r1, #4294967295
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	fa01 f303 	lsl.w	r3, r1, r3
 800206e:	43d9      	mvns	r1, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002074:	4313      	orrs	r3, r2
         );
}
 8002076:	4618      	mov	r0, r3
 8002078:	3724      	adds	r7, #36	@ 0x24
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
	...

08002084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3b01      	subs	r3, #1
 8002090:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002094:	d301      	bcc.n	800209a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002096:	2301      	movs	r3, #1
 8002098:	e00f      	b.n	80020ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800209a:	4a0a      	ldr	r2, [pc, #40]	@ (80020c4 <SysTick_Config+0x40>)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3b01      	subs	r3, #1
 80020a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020a2:	210f      	movs	r1, #15
 80020a4:	f04f 30ff 	mov.w	r0, #4294967295
 80020a8:	f7ff ff8e 	bl	8001fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020ac:	4b05      	ldr	r3, [pc, #20]	@ (80020c4 <SysTick_Config+0x40>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020b2:	4b04      	ldr	r3, [pc, #16]	@ (80020c4 <SysTick_Config+0x40>)
 80020b4:	2207      	movs	r2, #7
 80020b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	e000e010 	.word	0xe000e010

080020c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7ff fec9 	bl	8001e68 <__NVIC_SetPriorityGrouping>
}
 80020d6:	bf00      	nop
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b086      	sub	sp, #24
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	4603      	mov	r3, r0
 80020e6:	60b9      	str	r1, [r7, #8]
 80020e8:	607a      	str	r2, [r7, #4]
 80020ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020ec:	f7ff fee0 	bl	8001eb0 <__NVIC_GetPriorityGrouping>
 80020f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	68b9      	ldr	r1, [r7, #8]
 80020f6:	6978      	ldr	r0, [r7, #20]
 80020f8:	f7ff ff90 	bl	800201c <NVIC_EncodePriority>
 80020fc:	4602      	mov	r2, r0
 80020fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002102:	4611      	mov	r1, r2
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff ff5f 	bl	8001fc8 <__NVIC_SetPriority>
}
 800210a:	bf00      	nop
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b082      	sub	sp, #8
 8002116:	af00      	add	r7, sp, #0
 8002118:	4603      	mov	r3, r0
 800211a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800211c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff fed3 	bl	8001ecc <__NVIC_EnableIRQ>
}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	4603      	mov	r3, r0
 8002136:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff fee3 	bl	8001f08 <__NVIC_DisableIRQ>
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff ff96 	bl	8002084 <SysTick_Config>
 8002158:	4603      	mov	r3, r0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b082      	sub	sp, #8
 8002166:	af00      	add	r7, sp, #0
 8002168:	4603      	mov	r3, r0
 800216a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800216c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff feed 	bl	8001f50 <__NVIC_SetPendingIRQ>
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b082      	sub	sp, #8
 8002182:	af00      	add	r7, sp, #0
 8002184:	4603      	mov	r3, r0
 8002186:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff fefd 	bl	8001f8c <__NVIC_ClearPendingIRQ>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e04f      	b.n	800224c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d008      	beq.n	80021ca <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2204      	movs	r2, #4
 80021bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e040      	b.n	800224c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 020e 	bic.w	r2, r2, #14
 80021d8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0201 	bic.w	r2, r2, #1
 80021f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fe:	f003 021c 	and.w	r2, r3, #28
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002206:	2101      	movs	r1, #1
 8002208:	fa01 f202 	lsl.w	r2, r1, r2
 800220c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002216:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00c      	beq.n	800223a <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800222a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800222e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002238:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002260:	2300      	movs	r3, #0
 8002262:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d005      	beq.n	800227c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2204      	movs	r2, #4
 8002274:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	73fb      	strb	r3, [r7, #15]
 800227a:	e047      	b.n	800230c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 020e 	bic.w	r2, r2, #14
 800228a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0201 	bic.w	r2, r2, #1
 800229a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b0:	f003 021c 	and.w	r2, r3, #28
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b8:	2101      	movs	r1, #1
 80022ba:	fa01 f202 	lsl.w	r2, r1, r2
 80022be:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80022c8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00c      	beq.n	80022ec <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022e0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80022ea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	4798      	blx	r3
    }
  }
  return status;
 800230c:	7bfb      	ldrb	r3, [r7, #15]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
	...

08002318 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002322:	4b0b      	ldr	r3, [pc, #44]	@ (8002350 <HAL_FLASH_Unlock+0x38>)
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	2b00      	cmp	r3, #0
 8002328:	da0b      	bge.n	8002342 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800232a:	4b09      	ldr	r3, [pc, #36]	@ (8002350 <HAL_FLASH_Unlock+0x38>)
 800232c:	4a09      	ldr	r2, [pc, #36]	@ (8002354 <HAL_FLASH_Unlock+0x3c>)
 800232e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002330:	4b07      	ldr	r3, [pc, #28]	@ (8002350 <HAL_FLASH_Unlock+0x38>)
 8002332:	4a09      	ldr	r2, [pc, #36]	@ (8002358 <HAL_FLASH_Unlock+0x40>)
 8002334:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002336:	4b06      	ldr	r3, [pc, #24]	@ (8002350 <HAL_FLASH_Unlock+0x38>)
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	2b00      	cmp	r3, #0
 800233c:	da01      	bge.n	8002342 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002342:	79fb      	ldrb	r3, [r7, #7]
}
 8002344:	4618      	mov	r0, r3
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	58004000 	.word	0x58004000
 8002354:	45670123 	.word	0x45670123
 8002358:	cdef89ab 	.word	0xcdef89ab

0800235c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002362:	2300      	movs	r3, #0
 8002364:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002366:	4b09      	ldr	r3, [pc, #36]	@ (800238c <HAL_FLASH_Lock+0x30>)
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	4a08      	ldr	r2, [pc, #32]	@ (800238c <HAL_FLASH_Lock+0x30>)
 800236c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002370:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8002372:	4b06      	ldr	r3, [pc, #24]	@ (800238c <HAL_FLASH_Lock+0x30>)
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	2b00      	cmp	r3, #0
 8002378:	db01      	blt.n	800237e <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800237e:	79fb      	ldrb	r3, [r7, #7]
}
 8002380:	4618      	mov	r0, r3
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	58004000 	.word	0x58004000

08002390 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8002398:	f7ff fd4e 	bl	8001e38 <HAL_GetTick>
 800239c:	60b8      	str	r0, [r7, #8]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800239e:	e009      	b.n	80023b4 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80023a0:	f7ff fd4a 	bl	8001e38 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d801      	bhi.n	80023b4 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e053      	b.n	800245c <FLASH_WaitForLastOperation+0xcc>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80023b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002464 <FLASH_WaitForLastOperation+0xd4>)
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023c0:	d0ee      	beq.n	80023a0 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 80023c2:	4b28      	ldr	r3, [pc, #160]	@ (8002464 <FLASH_WaitForLastOperation+0xd4>)
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	60fb      	str	r3, [r7, #12]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d002      	beq.n	80023d8 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80023d2:	4b24      	ldr	r3, [pc, #144]	@ (8002464 <FLASH_WaitForLastOperation+0xd4>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	611a      	str	r2, [r3, #16]

  /* Workaround for BZ 70309 :
     - OPTVERR is always set at power-up due to failure of engi bytes checking
     - FLASH_WaitForLastOperation() is called at the beginning of erase or program
       operations, so the bit will be clear when performing first operation */
  if ((error & FLASH_FLAG_OPTVERR) != 0U)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d007      	beq.n	80023f2 <FLASH_WaitForLastOperation+0x62>
  {
    /* Clear FLASH OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80023e2:	4b20      	ldr	r3, [pc, #128]	@ (8002464 <FLASH_WaitForLastOperation+0xd4>)
 80023e4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80023e8:	611a      	str	r2, [r3, #16]

    /* Clear OPTVERR bit in "error" variable to not treat it as error */
    error &= ~FLASH_FLAG_OPTVERR;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80023f0:	60fb      	str	r3, [r7, #12]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 80023f8:	4013      	ands	r3, r2
 80023fa:	60fb      	str	r3, [r7, #12]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002402:	d307      	bcc.n	8002414 <FLASH_WaitForLastOperation+0x84>
 8002404:	4b17      	ldr	r3, [pc, #92]	@ (8002464 <FLASH_WaitForLastOperation+0xd4>)
 8002406:	699a      	ldr	r2, [r3, #24]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800240e:	4915      	ldr	r1, [pc, #84]	@ (8002464 <FLASH_WaitForLastOperation+0xd4>)
 8002410:	4313      	orrs	r3, r2
 8002412:	618b      	str	r3, [r1, #24]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d004      	beq.n	8002428 <FLASH_WaitForLastOperation+0x98>
 800241e:	4a11      	ldr	r2, [pc, #68]	@ (8002464 <FLASH_WaitForLastOperation+0xd4>)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002426:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00e      	beq.n	800244c <FLASH_WaitForLastOperation+0xbc>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800242e:	4a0e      	ldr	r2, [pc, #56]	@ (8002468 <FLASH_WaitForLastOperation+0xd8>)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e011      	b.n	800245c <FLASH_WaitForLastOperation+0xcc>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8002438:	f7ff fcfe 	bl	8001e38 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	429a      	cmp	r2, r3
 8002446:	d801      	bhi.n	800244c <FLASH_WaitForLastOperation+0xbc>
    {
      return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e007      	b.n	800245c <FLASH_WaitForLastOperation+0xcc>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 800244c:	4b05      	ldr	r3, [pc, #20]	@ (8002464 <FLASH_WaitForLastOperation+0xd4>)
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002454:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002458:	d0ee      	beq.n	8002438 <FLASH_WaitForLastOperation+0xa8>
    }
  }

  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	58004000 	.word	0x58004000
 8002468:	200004bc 	.word	0x200004bc

0800246c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002476:	4b24      	ldr	r3, [pc, #144]	@ (8002508 <HAL_FLASHEx_Erase+0x9c>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d101      	bne.n	8002482 <HAL_FLASHEx_Erase+0x16>
 800247e:	2302      	movs	r3, #2
 8002480:	e03d      	b.n	80024fe <HAL_FLASHEx_Erase+0x92>
 8002482:	4b21      	ldr	r3, [pc, #132]	@ (8002508 <HAL_FLASHEx_Erase+0x9c>)
 8002484:	2201      	movs	r2, #1
 8002486:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002488:	4b1f      	ldr	r3, [pc, #124]	@ (8002508 <HAL_FLASHEx_Erase+0x9c>)
 800248a:	2200      	movs	r2, #0
 800248c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800248e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002492:	f7ff ff7d 	bl	8002390 <FLASH_WaitForLastOperation>
 8002496:	4603      	mov	r3, r0
 8002498:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d12a      	bne.n	80024f6 <HAL_FLASHEx_Erase+0x8a>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d124      	bne.n	80024f2 <HAL_FLASHEx_Erase+0x86>
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	f04f 32ff 	mov.w	r2, #4294967295
 80024ae:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	e012      	b.n	80024de <HAL_FLASHEx_Erase+0x72>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 80024b8:	68b8      	ldr	r0, [r7, #8]
 80024ba:	f000 f827 	bl	800250c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80024be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80024c2:	f7ff ff65 	bl	8002390 <FLASH_WaitForLastOperation>
 80024c6:	4603      	mov	r3, r0
 80024c8:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <HAL_FLASHEx_Erase+0x6c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	68ba      	ldr	r2, [r7, #8]
 80024d4:	601a      	str	r2, [r3, #0]
          break;
 80024d6:	e00a      	b.n	80024ee <HAL_FLASHEx_Erase+0x82>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	3301      	adds	r3, #1
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	4413      	add	r3, r2
 80024e8:	68ba      	ldr	r2, [r7, #8]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d3e4      	bcc.n	80024b8 <HAL_FLASHEx_Erase+0x4c>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 80024ee:	f000 f86f 	bl	80025d0 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80024f2:	f000 f825 	bl	8002540 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80024f6:	4b04      	ldr	r3, [pc, #16]	@ (8002508 <HAL_FLASHEx_Erase+0x9c>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	701a      	strb	r2, [r3, #0]

  return status;
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	200004bc 	.word	0x200004bc

0800250c <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8002514:	4b09      	ldr	r3, [pc, #36]	@ (800253c <FLASH_PageErase+0x30>)
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	4313      	orrs	r3, r2
 8002522:	4a06      	ldr	r2, [pc, #24]	@ (800253c <FLASH_PageErase+0x30>)
 8002524:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002528:	f043 0302 	orr.w	r3, r3, #2
 800252c:	6153      	str	r3, [r2, #20]
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	58004000 	.word	0x58004000

08002540 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 8002544:	4b21      	ldr	r3, [pc, #132]	@ (80025cc <FLASH_FlushCaches+0x8c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800254c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002550:	d117      	bne.n	8002582 <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002552:	4b1e      	ldr	r3, [pc, #120]	@ (80025cc <FLASH_FlushCaches+0x8c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a1d      	ldr	r2, [pc, #116]	@ (80025cc <FLASH_FlushCaches+0x8c>)
 8002558:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800255c:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800255e:	4b1b      	ldr	r3, [pc, #108]	@ (80025cc <FLASH_FlushCaches+0x8c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a1a      	ldr	r2, [pc, #104]	@ (80025cc <FLASH_FlushCaches+0x8c>)
 8002564:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	4b18      	ldr	r3, [pc, #96]	@ (80025cc <FLASH_FlushCaches+0x8c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a17      	ldr	r2, [pc, #92]	@ (80025cc <FLASH_FlushCaches+0x8c>)
 8002570:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002574:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002576:	4b15      	ldr	r3, [pc, #84]	@ (80025cc <FLASH_FlushCaches+0x8c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a14      	ldr	r2, [pc, #80]	@ (80025cc <FLASH_FlushCaches+0x8c>)
 800257c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002580:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 8002582:	4b12      	ldr	r3, [pc, #72]	@ (80025cc <FLASH_FlushCaches+0x8c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800258a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800258e:	d117      	bne.n	80025c0 <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002590:	4b0e      	ldr	r3, [pc, #56]	@ (80025cc <FLASH_FlushCaches+0x8c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a0d      	ldr	r2, [pc, #52]	@ (80025cc <FLASH_FlushCaches+0x8c>)
 8002596:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800259a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800259c:	4b0b      	ldr	r3, [pc, #44]	@ (80025cc <FLASH_FlushCaches+0x8c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a0a      	ldr	r2, [pc, #40]	@ (80025cc <FLASH_FlushCaches+0x8c>)
 80025a2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80025a6:	6013      	str	r3, [r2, #0]
 80025a8:	4b08      	ldr	r3, [pc, #32]	@ (80025cc <FLASH_FlushCaches+0x8c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a07      	ldr	r2, [pc, #28]	@ (80025cc <FLASH_FlushCaches+0x8c>)
 80025ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80025b2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80025b4:	4b05      	ldr	r3, [pc, #20]	@ (80025cc <FLASH_FlushCaches+0x8c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a04      	ldr	r2, [pc, #16]	@ (80025cc <FLASH_FlushCaches+0x8c>)
 80025ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025be:	6013      	str	r3, [r2, #0]
  }
}
 80025c0:	bf00      	nop
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	58004000 	.word	0x58004000

080025d0 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80025d4:	4b06      	ldr	r3, [pc, #24]	@ (80025f0 <FLASH_AcknowledgePageErase+0x20>)
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	4a05      	ldr	r2, [pc, #20]	@ (80025f0 <FLASH_AcknowledgePageErase+0x20>)
 80025da:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80025de:	f023 0302 	bic.w	r3, r3, #2
 80025e2:	6153      	str	r3, [r2, #20]
}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	58004000 	.word	0x58004000

080025f4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b087      	sub	sp, #28
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002602:	e14c      	b.n	800289e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	2101      	movs	r1, #1
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	fa01 f303 	lsl.w	r3, r1, r3
 8002610:	4013      	ands	r3, r2
 8002612:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 813e 	beq.w	8002898 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f003 0303 	and.w	r3, r3, #3
 8002624:	2b01      	cmp	r3, #1
 8002626:	d005      	beq.n	8002634 <HAL_GPIO_Init+0x40>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d130      	bne.n	8002696 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	2203      	movs	r2, #3
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	4013      	ands	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	4313      	orrs	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800266a:	2201      	movs	r2, #1
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43db      	mvns	r3, r3
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	4013      	ands	r3, r2
 8002678:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	091b      	lsrs	r3, r3, #4
 8002680:	f003 0201 	and.w	r2, r3, #1
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	4313      	orrs	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	2b03      	cmp	r3, #3
 80026a0:	d017      	beq.n	80026d2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	2203      	movs	r2, #3
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43db      	mvns	r3, r3
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	4013      	ands	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d123      	bne.n	8002726 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	08da      	lsrs	r2, r3, #3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3208      	adds	r2, #8
 80026e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	220f      	movs	r2, #15
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43db      	mvns	r3, r3
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	4013      	ands	r3, r2
 8002700:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	691a      	ldr	r2, [r3, #16]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	4313      	orrs	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	08da      	lsrs	r2, r3, #3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3208      	adds	r2, #8
 8002720:	6939      	ldr	r1, [r7, #16]
 8002722:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	2203      	movs	r2, #3
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43db      	mvns	r3, r3
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	4013      	ands	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f003 0203 	and.w	r2, r3, #3
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 8098 	beq.w	8002898 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002768:	4a54      	ldr	r2, [pc, #336]	@ (80028bc <HAL_GPIO_Init+0x2c8>)
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	089b      	lsrs	r3, r3, #2
 800276e:	3302      	adds	r3, #2
 8002770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002774:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f003 0303 	and.w	r3, r3, #3
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	220f      	movs	r2, #15
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4013      	ands	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002792:	d019      	beq.n	80027c8 <HAL_GPIO_Init+0x1d4>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a4a      	ldr	r2, [pc, #296]	@ (80028c0 <HAL_GPIO_Init+0x2cc>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d013      	beq.n	80027c4 <HAL_GPIO_Init+0x1d0>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a49      	ldr	r2, [pc, #292]	@ (80028c4 <HAL_GPIO_Init+0x2d0>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d00d      	beq.n	80027c0 <HAL_GPIO_Init+0x1cc>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a48      	ldr	r2, [pc, #288]	@ (80028c8 <HAL_GPIO_Init+0x2d4>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d007      	beq.n	80027bc <HAL_GPIO_Init+0x1c8>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a47      	ldr	r2, [pc, #284]	@ (80028cc <HAL_GPIO_Init+0x2d8>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d101      	bne.n	80027b8 <HAL_GPIO_Init+0x1c4>
 80027b4:	2304      	movs	r3, #4
 80027b6:	e008      	b.n	80027ca <HAL_GPIO_Init+0x1d6>
 80027b8:	2307      	movs	r3, #7
 80027ba:	e006      	b.n	80027ca <HAL_GPIO_Init+0x1d6>
 80027bc:	2303      	movs	r3, #3
 80027be:	e004      	b.n	80027ca <HAL_GPIO_Init+0x1d6>
 80027c0:	2302      	movs	r3, #2
 80027c2:	e002      	b.n	80027ca <HAL_GPIO_Init+0x1d6>
 80027c4:	2301      	movs	r3, #1
 80027c6:	e000      	b.n	80027ca <HAL_GPIO_Init+0x1d6>
 80027c8:	2300      	movs	r3, #0
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	f002 0203 	and.w	r2, r2, #3
 80027d0:	0092      	lsls	r2, r2, #2
 80027d2:	4093      	lsls	r3, r2
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027da:	4938      	ldr	r1, [pc, #224]	@ (80028bc <HAL_GPIO_Init+0x2c8>)
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	089b      	lsrs	r3, r3, #2
 80027e0:	3302      	adds	r3, #2
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027e8:	4b39      	ldr	r3, [pc, #228]	@ (80028d0 <HAL_GPIO_Init+0x2dc>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	43db      	mvns	r3, r3
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4013      	ands	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	4313      	orrs	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800280c:	4a30      	ldr	r2, [pc, #192]	@ (80028d0 <HAL_GPIO_Init+0x2dc>)
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002812:	4b2f      	ldr	r3, [pc, #188]	@ (80028d0 <HAL_GPIO_Init+0x2dc>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	43db      	mvns	r3, r3
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	4013      	ands	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4313      	orrs	r3, r2
 8002834:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002836:	4a26      	ldr	r2, [pc, #152]	@ (80028d0 <HAL_GPIO_Init+0x2dc>)
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800283c:	4b24      	ldr	r3, [pc, #144]	@ (80028d0 <HAL_GPIO_Init+0x2dc>)
 800283e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002842:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	43db      	mvns	r3, r3
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4013      	ands	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4313      	orrs	r3, r2
 8002860:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002862:	4a1b      	ldr	r2, [pc, #108]	@ (80028d0 <HAL_GPIO_Init+0x2dc>)
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800286a:	4b19      	ldr	r3, [pc, #100]	@ (80028d0 <HAL_GPIO_Init+0x2dc>)
 800286c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002870:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	43db      	mvns	r3, r3
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	4013      	ands	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d003      	beq.n	8002890 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	4313      	orrs	r3, r2
 800288e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002890:	4a0f      	ldr	r2, [pc, #60]	@ (80028d0 <HAL_GPIO_Init+0x2dc>)
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	3301      	adds	r3, #1
 800289c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	fa22 f303 	lsr.w	r3, r2, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f47f aeab 	bne.w	8002604 <HAL_GPIO_Init+0x10>
  }
}
 80028ae:	bf00      	nop
 80028b0:	bf00      	nop
 80028b2:	371c      	adds	r7, #28
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	40010000 	.word	0x40010000
 80028c0:	48000400 	.word	0x48000400
 80028c4:	48000800 	.word	0x48000800
 80028c8:	48000c00 	.word	0x48000c00
 80028cc:	48001000 	.word	0x48001000
 80028d0:	58000800 	.word	0x58000800

080028d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	460b      	mov	r3, r1
 80028de:	807b      	strh	r3, [r7, #2]
 80028e0:	4613      	mov	r3, r2
 80028e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028e4:	787b      	ldrb	r3, [r7, #1]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028ea:	887a      	ldrh	r2, [r7, #2]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028f0:	e002      	b.n	80028f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028f2:	887a      	ldrh	r2, [r7, #2]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	4603      	mov	r3, r0
 800290c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800290e:	4b08      	ldr	r3, [pc, #32]	@ (8002930 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	88fb      	ldrh	r3, [r7, #6]
 8002914:	4013      	ands	r3, r2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d006      	beq.n	8002928 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800291a:	4a05      	ldr	r2, [pc, #20]	@ (8002930 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800291c:	88fb      	ldrh	r3, [r7, #6]
 800291e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002920:	88fb      	ldrh	r3, [r7, #6]
 8002922:	4618      	mov	r0, r3
 8002924:	f000 f806 	bl	8002934 <HAL_GPIO_EXTI_Callback>
  }
}
 8002928:	bf00      	nop
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	58000800 	.word	0x58000800

08002934 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
	...

0800294c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8002952:	4b0a      	ldr	r3, [pc, #40]	@ (800297c <HAL_HSEM_IRQHandler+0x30>)
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002958:	4b08      	ldr	r3, [pc, #32]	@ (800297c <HAL_HSEM_IRQHandler+0x30>)
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	43db      	mvns	r3, r3
 8002960:	4906      	ldr	r1, [pc, #24]	@ (800297c <HAL_HSEM_IRQHandler+0x30>)
 8002962:	4013      	ands	r3, r2
 8002964:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8002966:	4a05      	ldr	r2, [pc, #20]	@ (800297c <HAL_HSEM_IRQHandler+0x30>)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 f807 	bl	8002980 <HAL_HSEM_FreeCallback>
}
 8002972:	bf00      	nop
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	58001500 	.word	0x58001500

08002980 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e0c0      	b.n	8002b28 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d106      	bne.n	80029c0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7ff f894 	bl	8001ae8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2203      	movs	r2, #3
 80029c4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f003 f9d5 	bl	8005d7c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029d2:	2300      	movs	r3, #0
 80029d4:	73fb      	strb	r3, [r7, #15]
 80029d6:	e03e      	b.n	8002a56 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029d8:	7bfa      	ldrb	r2, [r7, #15]
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	4613      	mov	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	440b      	add	r3, r1
 80029e6:	3311      	adds	r3, #17
 80029e8:	2201      	movs	r2, #1
 80029ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029ec:	7bfa      	ldrb	r2, [r7, #15]
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	4613      	mov	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4413      	add	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	440b      	add	r3, r1
 80029fa:	3310      	adds	r3, #16
 80029fc:	7bfa      	ldrb	r2, [r7, #15]
 80029fe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a00:	7bfa      	ldrb	r2, [r7, #15]
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	4613      	mov	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	440b      	add	r3, r1
 8002a0e:	3313      	adds	r3, #19
 8002a10:	2200      	movs	r2, #0
 8002a12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a14:	7bfa      	ldrb	r2, [r7, #15]
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	440b      	add	r3, r1
 8002a22:	3320      	adds	r3, #32
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a28:	7bfa      	ldrb	r2, [r7, #15]
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	440b      	add	r3, r1
 8002a36:	3324      	adds	r3, #36	@ 0x24
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a3c:	7bfb      	ldrb	r3, [r7, #15]
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	4613      	mov	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	440b      	add	r3, r1
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a50:	7bfb      	ldrb	r3, [r7, #15]
 8002a52:	3301      	adds	r3, #1
 8002a54:	73fb      	strb	r3, [r7, #15]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	791b      	ldrb	r3, [r3, #4]
 8002a5a:	7bfa      	ldrb	r2, [r7, #15]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d3bb      	bcc.n	80029d8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a60:	2300      	movs	r3, #0
 8002a62:	73fb      	strb	r3, [r7, #15]
 8002a64:	e044      	b.n	8002af0 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a66:	7bfa      	ldrb	r2, [r7, #15]
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	440b      	add	r3, r1
 8002a74:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002a78:	2200      	movs	r2, #0
 8002a7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a7c:	7bfa      	ldrb	r2, [r7, #15]
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	4613      	mov	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	440b      	add	r3, r1
 8002a8a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002a8e:	7bfa      	ldrb	r2, [r7, #15]
 8002a90:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a92:	7bfa      	ldrb	r2, [r7, #15]
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	4613      	mov	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	440b      	add	r3, r1
 8002aa0:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002aa8:	7bfa      	ldrb	r2, [r7, #15]
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	440b      	add	r3, r1
 8002ab6:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002abe:	7bfa      	ldrb	r2, [r7, #15]
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	440b      	add	r3, r1
 8002acc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ad4:	7bfa      	ldrb	r2, [r7, #15]
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	440b      	add	r3, r1
 8002ae2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aea:	7bfb      	ldrb	r3, [r7, #15]
 8002aec:	3301      	adds	r3, #1
 8002aee:	73fb      	strb	r3, [r7, #15]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	791b      	ldrb	r3, [r3, #4]
 8002af4:	7bfa      	ldrb	r2, [r7, #15]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d3b5      	bcc.n	8002a66 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6818      	ldr	r0, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	3304      	adds	r3, #4
 8002b02:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002b06:	f003 f954 	bl	8005db2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	7a9b      	ldrb	r3, [r3, #10]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d102      	bne.n	8002b26 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 f805 	bl	8002b30 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	f043 0302 	orr.w	r3, r3, #2
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b88:	4b05      	ldr	r3, [pc, #20]	@ (8002ba0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a04      	ldr	r2, [pc, #16]	@ (8002ba0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b92:	6013      	str	r3, [r2, #0]
}
 8002b94:	bf00      	nop
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	58000400 	.word	0x58000400

08002ba4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002ba8:	4b04      	ldr	r3, [pc, #16]	@ (8002bbc <HAL_PWREx_GetVoltageRange+0x18>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	58000400 	.word	0x58000400

08002bc0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002bc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bd2:	d101      	bne.n	8002bd8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e000      	b.n	8002bda <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <LL_RCC_HSE_Enable>:
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002be8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bf2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bf6:	6013      	str	r3, [r2, #0]
}
 8002bf8:	bf00      	nop
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <LL_RCC_HSE_Disable>:
{
 8002c02:	b480      	push	{r7}
 8002c04:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002c06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c14:	6013      	str	r3, [r2, #0]
}
 8002c16:	bf00      	nop
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <LL_RCC_HSE_IsReady>:
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002c24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c32:	d101      	bne.n	8002c38 <LL_RCC_HSE_IsReady+0x18>
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <LL_RCC_HSE_IsReady+0x1a>
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <LL_RCC_HSI_Enable>:
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002c48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c56:	6013      	str	r3, [r2, #0]
}
 8002c58:	bf00      	nop
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <LL_RCC_HSI_Disable>:
{
 8002c62:	b480      	push	{r7}
 8002c64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002c66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c74:	6013      	str	r3, [r2, #0]
}
 8002c76:	bf00      	nop
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <LL_RCC_HSI_IsReady>:
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002c84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c92:	d101      	bne.n	8002c98 <LL_RCC_HSI_IsReady+0x18>
 8002c94:	2301      	movs	r3, #1
 8002c96:	e000      	b.n	8002c9a <LL_RCC_HSI_IsReady+0x1a>
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002cac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	061b      	lsls	r3, r3, #24
 8002cba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	604b      	str	r3, [r1, #4]
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <LL_RCC_HSI48_Enable>:
{
 8002cce:	b480      	push	{r7}
 8002cd0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002cd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002cda:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cde:	f043 0301 	orr.w	r3, r3, #1
 8002ce2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8002ce6:	bf00      	nop
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <LL_RCC_HSI48_Disable>:
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002cf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002cfc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d00:	f023 0301 	bic.w	r3, r3, #1
 8002d04:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8002d08:	bf00      	nop
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <LL_RCC_HSI48_IsReady>:
{
 8002d12:	b480      	push	{r7}
 8002d14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002d16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d101      	bne.n	8002d2a <LL_RCC_HSI48_IsReady+0x18>
 8002d26:	2301      	movs	r3, #1
 8002d28:	e000      	b.n	8002d2c <LL_RCC_HSI48_IsReady+0x1a>
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <LL_RCC_LSE_Enable>:
{
 8002d36:	b480      	push	{r7}
 8002d38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002d3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002d4e:	bf00      	nop
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <LL_RCC_LSE_Disable>:
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002d5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d64:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d68:	f023 0301 	bic.w	r3, r3, #1
 8002d6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002d70:	bf00      	nop
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <LL_RCC_LSE_EnableBypass>:
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002d7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d8a:	f043 0304 	orr.w	r3, r3, #4
 8002d8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002d92:	bf00      	nop
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <LL_RCC_LSE_DisableBypass>:
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002da0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002da8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002dac:	f023 0304 	bic.w	r3, r3, #4
 8002db0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002db4:	bf00      	nop
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <LL_RCC_LSE_IsReady>:
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002dc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d101      	bne.n	8002dd6 <LL_RCC_LSE_IsReady+0x18>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <LL_RCC_LSE_IsReady+0x1a>
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <LL_RCC_LSI1_Enable>:
{
 8002de2:	b480      	push	{r7}
 8002de4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002de6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002df2:	f043 0301 	orr.w	r3, r3, #1
 8002df6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002dfa:	bf00      	nop
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <LL_RCC_LSI1_Disable>:
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002e08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e14:	f023 0301 	bic.w	r3, r3, #1
 8002e18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002e1c:	bf00      	nop
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <LL_RCC_LSI1_IsReady>:
{
 8002e26:	b480      	push	{r7}
 8002e28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002e2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d101      	bne.n	8002e3e <LL_RCC_LSI1_IsReady+0x18>
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e000      	b.n	8002e40 <LL_RCC_LSI1_IsReady+0x1a>
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <LL_RCC_LSI2_Enable>:
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002e4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e56:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e5a:	f043 0304 	orr.w	r3, r3, #4
 8002e5e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002e62:	bf00      	nop
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <LL_RCC_LSI2_Disable>:
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002e70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e7c:	f023 0304 	bic.w	r3, r3, #4
 8002e80:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002e84:	bf00      	nop
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <LL_RCC_LSI2_IsReady>:
{
 8002e8e:	b480      	push	{r7}
 8002e90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002e92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e9a:	f003 0308 	and.w	r3, r3, #8
 8002e9e:	2b08      	cmp	r3, #8
 8002ea0:	d101      	bne.n	8002ea6 <LL_RCC_LSI2_IsReady+0x18>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <LL_RCC_LSI2_IsReady+0x1a>
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr

08002eb2 <LL_RCC_LSI2_SetTrimming>:
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002eba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ec2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	021b      	lsls	r3, r3, #8
 8002eca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <LL_RCC_MSI_Enable>:
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002ee4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002eee:	f043 0301 	orr.w	r3, r3, #1
 8002ef2:	6013      	str	r3, [r2, #0]
}
 8002ef4:	bf00      	nop
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <LL_RCC_MSI_Disable>:
{
 8002efe:	b480      	push	{r7}
 8002f00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002f02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f0c:	f023 0301 	bic.w	r3, r3, #1
 8002f10:	6013      	str	r3, [r2, #0]
}
 8002f12:	bf00      	nop
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <LL_RCC_MSI_IsReady>:
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002f20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d101      	bne.n	8002f32 <LL_RCC_MSI_IsReady+0x16>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <LL_RCC_MSI_IsReady+0x18>
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <LL_RCC_MSI_SetRange>:
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002f46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f50:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	600b      	str	r3, [r1, #0]
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <LL_RCC_MSI_GetRange>:
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002f6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f76:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2bb0      	cmp	r3, #176	@ 0xb0
 8002f7c:	d901      	bls.n	8002f82 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002f7e:	23b0      	movs	r3, #176	@ 0xb0
 8002f80:	607b      	str	r3, [r7, #4]
  return msiRange;
 8002f82:	687b      	ldr	r3, [r7, #4]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002f98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	021b      	lsls	r3, r3, #8
 8002fa6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002faa:	4313      	orrs	r3, r2
 8002fac:	604b      	str	r3, [r1, #4]
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <LL_RCC_SetSysClkSource>:
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002fc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f023 0203 	bic.w	r2, r3, #3
 8002fcc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	608b      	str	r3, [r1, #8]
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <LL_RCC_GetSysClkSource>:
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002fe6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 030c 	and.w	r3, r3, #12
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <LL_RCC_SetAHBPrescaler>:
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003002:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800300c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4313      	orrs	r3, r2
 8003014:	608b      	str	r3, [r1, #8]
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <LL_C2_RCC_SetAHBPrescaler>:
{
 8003022:	b480      	push	{r7}
 8003024:	b083      	sub	sp, #12
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800302a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800302e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003032:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003036:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4313      	orrs	r3, r2
 800303e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <LL_RCC_SetAHB4Prescaler>:
{
 800304e:	b480      	push	{r7}
 8003050:	b083      	sub	sp, #12
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003056:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800305a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800305e:	f023 020f 	bic.w	r2, r3, #15
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	091b      	lsrs	r3, r3, #4
 8003066:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800306a:	4313      	orrs	r3, r2
 800306c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <LL_RCC_SetAPB1Prescaler>:
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003084:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800308e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4313      	orrs	r3, r2
 8003096:	608b      	str	r3, [r1, #8]
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <LL_RCC_SetAPB2Prescaler>:
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80030ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4313      	orrs	r3, r2
 80030be:	608b      	str	r3, [r1, #8]
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <LL_RCC_GetAHBPrescaler>:
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80030d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <LL_RCC_GetAHB4Prescaler>:
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80030e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030ec:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <LL_RCC_GetAPB1Prescaler>:
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003104:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800310e:	4618      	mov	r0, r3
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <LL_RCC_GetAPB2Prescaler>:
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800311c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8003126:	4618      	mov	r0, r3
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003134:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800313e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003142:	6013      	str	r3, [r2, #0]
}
 8003144:	bf00      	nop
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800314e:	b480      	push	{r7}
 8003150:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003152:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800315c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003160:	6013      	str	r3, [r2, #0]
}
 8003162:	bf00      	nop
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003170:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800317a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800317e:	d101      	bne.n	8003184 <LL_RCC_PLL_IsReady+0x18>
 8003180:	2301      	movs	r3, #1
 8003182:	e000      	b.n	8003186 <LL_RCC_PLL_IsReady+0x1a>
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003194:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	0a1b      	lsrs	r3, r3, #8
 800319c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80031aa:	b480      	push	{r7}
 80031ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80031ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80031c2:	b480      	push	{r7}
 80031c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80031c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80031da:	b480      	push	{r7}
 80031dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80031de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	f003 0303 	and.w	r3, r3, #3
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80031f2:	b480      	push	{r7}
 80031f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80031f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003200:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003204:	d101      	bne.n	800320a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003206:	2301      	movs	r3, #1
 8003208:	e000      	b.n	800320c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr

08003216 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003216:	b480      	push	{r7}
 8003218:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800321a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800321e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003226:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800322a:	d101      	bne.n	8003230 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800322c:	2301      	movs	r3, #1
 800322e:	e000      	b.n	8003232 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003240:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003244:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003248:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800324c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003250:	d101      	bne.n	8003256 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003252:	2301      	movs	r3, #1
 8003254:	e000      	b.n	8003258 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003262:	b480      	push	{r7}
 8003264:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003266:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003270:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003274:	d101      	bne.n	800327a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003276:	2301      	movs	r3, #1
 8003278:	e000      	b.n	800327c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003286:	b480      	push	{r7}
 8003288:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800328a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003294:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003298:	d101      	bne.n	800329e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
	...

080032ac <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032ac:	b590      	push	{r4, r7, lr}
 80032ae:	b08d      	sub	sp, #52	@ 0x34
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e363      	b.n	8003986 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0320 	and.w	r3, r3, #32
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 808d 	beq.w	80033e6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032cc:	f7ff fe89 	bl	8002fe2 <LL_RCC_GetSysClkSource>
 80032d0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032d2:	f7ff ff82 	bl	80031da <LL_RCC_PLL_GetMainSource>
 80032d6:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80032d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d005      	beq.n	80032ea <HAL_RCC_OscConfig+0x3e>
 80032de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032e0:	2b0c      	cmp	r3, #12
 80032e2:	d147      	bne.n	8003374 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80032e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d144      	bne.n	8003374 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e347      	b.n	8003986 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80032fa:	f7ff fe34 	bl	8002f66 <LL_RCC_MSI_GetRange>
 80032fe:	4603      	mov	r3, r0
 8003300:	429c      	cmp	r4, r3
 8003302:	d914      	bls.n	800332e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003308:	4618      	mov	r0, r3
 800330a:	f000 fd2f 	bl	8003d6c <RCC_SetFlashLatencyFromMSIRange>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e336      	b.n	8003986 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff fe0e 	bl	8002f3e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff fe32 	bl	8002f90 <LL_RCC_MSI_SetCalibTrimming>
 800332c:	e013      	b.n	8003356 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff fe03 	bl	8002f3e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff fe27 	bl	8002f90 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003346:	4618      	mov	r0, r3
 8003348:	f000 fd10 	bl	8003d6c <RCC_SetFlashLatencyFromMSIRange>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e317      	b.n	8003986 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003356:	f000 fcc9 	bl	8003cec <HAL_RCC_GetHCLKFreq>
 800335a:	4603      	mov	r3, r0
 800335c:	4aa4      	ldr	r2, [pc, #656]	@ (80035f0 <HAL_RCC_OscConfig+0x344>)
 800335e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003360:	4ba4      	ldr	r3, [pc, #656]	@ (80035f4 <HAL_RCC_OscConfig+0x348>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f7fe fd19 	bl	8001d9c <HAL_InitTick>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d039      	beq.n	80033e4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e308      	b.n	8003986 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	69db      	ldr	r3, [r3, #28]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d01e      	beq.n	80033ba <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800337c:	f7ff fdb0 	bl	8002ee0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003380:	f7fe fd5a 	bl	8001e38 <HAL_GetTick>
 8003384:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003388:	f7fe fd56 	bl	8001e38 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e2f5      	b.n	8003986 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800339a:	f7ff fdbf 	bl	8002f1c <LL_RCC_MSI_IsReady>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0f1      	beq.n	8003388 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff fdc8 	bl	8002f3e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff fdec 	bl	8002f90 <LL_RCC_MSI_SetCalibTrimming>
 80033b8:	e015      	b.n	80033e6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80033ba:	f7ff fda0 	bl	8002efe <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033be:	f7fe fd3b 	bl	8001e38 <HAL_GetTick>
 80033c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033c6:	f7fe fd37 	bl	8001e38 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e2d6      	b.n	8003986 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80033d8:	f7ff fda0 	bl	8002f1c <LL_RCC_MSI_IsReady>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1f1      	bne.n	80033c6 <HAL_RCC_OscConfig+0x11a>
 80033e2:	e000      	b.n	80033e6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80033e4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d047      	beq.n	8003482 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033f2:	f7ff fdf6 	bl	8002fe2 <LL_RCC_GetSysClkSource>
 80033f6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033f8:	f7ff feef 	bl	80031da <LL_RCC_PLL_GetMainSource>
 80033fc:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	2b08      	cmp	r3, #8
 8003402:	d005      	beq.n	8003410 <HAL_RCC_OscConfig+0x164>
 8003404:	6a3b      	ldr	r3, [r7, #32]
 8003406:	2b0c      	cmp	r3, #12
 8003408:	d108      	bne.n	800341c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	2b03      	cmp	r3, #3
 800340e:	d105      	bne.n	800341c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d134      	bne.n	8003482 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e2b4      	b.n	8003986 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003424:	d102      	bne.n	800342c <HAL_RCC_OscConfig+0x180>
 8003426:	f7ff fbdd 	bl	8002be4 <LL_RCC_HSE_Enable>
 800342a:	e001      	b.n	8003430 <HAL_RCC_OscConfig+0x184>
 800342c:	f7ff fbe9 	bl	8002c02 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d012      	beq.n	800345e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003438:	f7fe fcfe 	bl	8001e38 <HAL_GetTick>
 800343c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003440:	f7fe fcfa 	bl	8001e38 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b64      	cmp	r3, #100	@ 0x64
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e299      	b.n	8003986 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003452:	f7ff fbe5 	bl	8002c20 <LL_RCC_HSE_IsReady>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d0f1      	beq.n	8003440 <HAL_RCC_OscConfig+0x194>
 800345c:	e011      	b.n	8003482 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345e:	f7fe fceb 	bl	8001e38 <HAL_GetTick>
 8003462:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003466:	f7fe fce7 	bl	8001e38 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b64      	cmp	r3, #100	@ 0x64
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e286      	b.n	8003986 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003478:	f7ff fbd2 	bl	8002c20 <LL_RCC_HSE_IsReady>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f1      	bne.n	8003466 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d04c      	beq.n	8003528 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800348e:	f7ff fda8 	bl	8002fe2 <LL_RCC_GetSysClkSource>
 8003492:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003494:	f7ff fea1 	bl	80031da <LL_RCC_PLL_GetMainSource>
 8003498:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	2b04      	cmp	r3, #4
 800349e:	d005      	beq.n	80034ac <HAL_RCC_OscConfig+0x200>
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	2b0c      	cmp	r3, #12
 80034a4:	d10e      	bne.n	80034c4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d10b      	bne.n	80034c4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e266      	b.n	8003986 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff fbf1 	bl	8002ca4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80034c2:	e031      	b.n	8003528 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d019      	beq.n	8003500 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034cc:	f7ff fbba 	bl	8002c44 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d0:	f7fe fcb2 	bl	8001e38 <HAL_GetTick>
 80034d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034d8:	f7fe fcae 	bl	8001e38 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e24d      	b.n	8003986 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80034ea:	f7ff fbc9 	bl	8002c80 <LL_RCC_HSI_IsReady>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0f1      	beq.n	80034d8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff fbd3 	bl	8002ca4 <LL_RCC_HSI_SetCalibTrimming>
 80034fe:	e013      	b.n	8003528 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003500:	f7ff fbaf 	bl	8002c62 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003504:	f7fe fc98 	bl	8001e38 <HAL_GetTick>
 8003508:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800350c:	f7fe fc94 	bl	8001e38 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e233      	b.n	8003986 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800351e:	f7ff fbaf 	bl	8002c80 <LL_RCC_HSI_IsReady>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1f1      	bne.n	800350c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0308 	and.w	r3, r3, #8
 8003530:	2b00      	cmp	r3, #0
 8003532:	d106      	bne.n	8003542 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 80a3 	beq.w	8003688 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d076      	beq.n	8003638 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0310 	and.w	r3, r3, #16
 8003552:	2b00      	cmp	r3, #0
 8003554:	d046      	beq.n	80035e4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003556:	f7ff fc66 	bl	8002e26 <LL_RCC_LSI1_IsReady>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d113      	bne.n	8003588 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003560:	f7ff fc3f 	bl	8002de2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003564:	f7fe fc68 	bl	8001e38 <HAL_GetTick>
 8003568:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800356c:	f7fe fc64 	bl	8001e38 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e203      	b.n	8003986 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800357e:	f7ff fc52 	bl	8002e26 <LL_RCC_LSI1_IsReady>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0f1      	beq.n	800356c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003588:	f7ff fc5f 	bl	8002e4a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358c:	f7fe fc54 	bl	8001e38 <HAL_GetTick>
 8003590:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003594:	f7fe fc50 	bl	8001e38 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b03      	cmp	r3, #3
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e1ef      	b.n	8003986 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80035a6:	f7ff fc72 	bl	8002e8e <LL_RCC_LSI2_IsReady>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0f1      	beq.n	8003594 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7ff fc7c 	bl	8002eb2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80035ba:	f7ff fc23 	bl	8002e04 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035be:	f7fe fc3b 	bl	8001e38 <HAL_GetTick>
 80035c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80035c4:	e008      	b.n	80035d8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80035c6:	f7fe fc37 	bl	8001e38 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e1d6      	b.n	8003986 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80035d8:	f7ff fc25 	bl	8002e26 <LL_RCC_LSI1_IsReady>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f1      	bne.n	80035c6 <HAL_RCC_OscConfig+0x31a>
 80035e2:	e051      	b.n	8003688 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80035e4:	f7ff fbfd 	bl	8002de2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e8:	f7fe fc26 	bl	8001e38 <HAL_GetTick>
 80035ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80035ee:	e00c      	b.n	800360a <HAL_RCC_OscConfig+0x35e>
 80035f0:	20000008 	.word	0x20000008
 80035f4:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80035f8:	f7fe fc1e 	bl	8001e38 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e1bd      	b.n	8003986 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800360a:	f7ff fc0c 	bl	8002e26 <LL_RCC_LSI1_IsReady>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0f1      	beq.n	80035f8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003614:	f7ff fc2a 	bl	8002e6c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800361a:	f7fe fc0d 	bl	8001e38 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b03      	cmp	r3, #3
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e1ac      	b.n	8003986 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800362c:	f7ff fc2f 	bl	8002e8e <LL_RCC_LSI2_IsReady>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1f1      	bne.n	800361a <HAL_RCC_OscConfig+0x36e>
 8003636:	e027      	b.n	8003688 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003638:	f7ff fc18 	bl	8002e6c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800363c:	f7fe fbfc 	bl	8001e38 <HAL_GetTick>
 8003640:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003644:	f7fe fbf8 	bl	8001e38 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b03      	cmp	r3, #3
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e197      	b.n	8003986 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003656:	f7ff fc1a 	bl	8002e8e <LL_RCC_LSI2_IsReady>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1f1      	bne.n	8003644 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003660:	f7ff fbd0 	bl	8002e04 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003664:	f7fe fbe8 	bl	8001e38 <HAL_GetTick>
 8003668:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800366c:	f7fe fbe4 	bl	8001e38 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e183      	b.n	8003986 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800367e:	f7ff fbd2 	bl	8002e26 <LL_RCC_LSI1_IsReady>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1f1      	bne.n	800366c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d05b      	beq.n	800374c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003694:	4ba7      	ldr	r3, [pc, #668]	@ (8003934 <HAL_RCC_OscConfig+0x688>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800369c:	2b00      	cmp	r3, #0
 800369e:	d114      	bne.n	80036ca <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80036a0:	f7ff fa70 	bl	8002b84 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036a4:	f7fe fbc8 	bl	8001e38 <HAL_GetTick>
 80036a8:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ac:	f7fe fbc4 	bl	8001e38 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e163      	b.n	8003986 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036be:	4b9d      	ldr	r3, [pc, #628]	@ (8003934 <HAL_RCC_OscConfig+0x688>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d0f0      	beq.n	80036ac <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d102      	bne.n	80036d8 <HAL_RCC_OscConfig+0x42c>
 80036d2:	f7ff fb30 	bl	8002d36 <LL_RCC_LSE_Enable>
 80036d6:	e00c      	b.n	80036f2 <HAL_RCC_OscConfig+0x446>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	2b05      	cmp	r3, #5
 80036de:	d104      	bne.n	80036ea <HAL_RCC_OscConfig+0x43e>
 80036e0:	f7ff fb4b 	bl	8002d7a <LL_RCC_LSE_EnableBypass>
 80036e4:	f7ff fb27 	bl	8002d36 <LL_RCC_LSE_Enable>
 80036e8:	e003      	b.n	80036f2 <HAL_RCC_OscConfig+0x446>
 80036ea:	f7ff fb35 	bl	8002d58 <LL_RCC_LSE_Disable>
 80036ee:	f7ff fb55 	bl	8002d9c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d014      	beq.n	8003724 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fa:	f7fe fb9d 	bl	8001e38 <HAL_GetTick>
 80036fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003700:	e00a      	b.n	8003718 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003702:	f7fe fb99 	bl	8001e38 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003710:	4293      	cmp	r3, r2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e136      	b.n	8003986 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003718:	f7ff fb51 	bl	8002dbe <LL_RCC_LSE_IsReady>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0ef      	beq.n	8003702 <HAL_RCC_OscConfig+0x456>
 8003722:	e013      	b.n	800374c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003724:	f7fe fb88 	bl	8001e38 <HAL_GetTick>
 8003728:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800372a:	e00a      	b.n	8003742 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800372c:	f7fe fb84 	bl	8001e38 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800373a:	4293      	cmp	r3, r2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e121      	b.n	8003986 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003742:	f7ff fb3c 	bl	8002dbe <LL_RCC_LSE_IsReady>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1ef      	bne.n	800372c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003754:	2b00      	cmp	r3, #0
 8003756:	d02c      	beq.n	80037b2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800375c:	2b00      	cmp	r3, #0
 800375e:	d014      	beq.n	800378a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003760:	f7ff fab5 	bl	8002cce <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003764:	f7fe fb68 	bl	8001e38 <HAL_GetTick>
 8003768:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800376c:	f7fe fb64 	bl	8001e38 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e103      	b.n	8003986 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800377e:	f7ff fac8 	bl	8002d12 <LL_RCC_HSI48_IsReady>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d0f1      	beq.n	800376c <HAL_RCC_OscConfig+0x4c0>
 8003788:	e013      	b.n	80037b2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800378a:	f7ff fab1 	bl	8002cf0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800378e:	f7fe fb53 	bl	8001e38 <HAL_GetTick>
 8003792:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003794:	e008      	b.n	80037a8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003796:	f7fe fb4f 	bl	8001e38 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e0ee      	b.n	8003986 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80037a8:	f7ff fab3 	bl	8002d12 <LL_RCC_HSI48_IsReady>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1f1      	bne.n	8003796 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 80e4 	beq.w	8003984 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037bc:	f7ff fc11 	bl	8002fe2 <LL_RCC_GetSysClkSource>
 80037c0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80037c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	f040 80b4 	bne.w	800393c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f003 0203 	and.w	r2, r3, #3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037de:	429a      	cmp	r2, r3
 80037e0:	d123      	bne.n	800382a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d11c      	bne.n	800382a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	0a1b      	lsrs	r3, r3, #8
 80037f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d114      	bne.n	800382a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800380a:	429a      	cmp	r2, r3
 800380c:	d10d      	bne.n	800382a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003818:	429a      	cmp	r2, r3
 800381a:	d106      	bne.n	800382a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003826:	429a      	cmp	r2, r3
 8003828:	d05d      	beq.n	80038e6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	2b0c      	cmp	r3, #12
 800382e:	d058      	beq.n	80038e2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003830:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e0a1      	b.n	8003986 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003842:	f7ff fc84 	bl	800314e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003846:	f7fe faf7 	bl	8001e38 <HAL_GetTick>
 800384a:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800384c:	e008      	b.n	8003860 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800384e:	f7fe faf3 	bl	8001e38 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d901      	bls.n	8003860 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e092      	b.n	8003986 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003860:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1ef      	bne.n	800384e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800386e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003872:	68da      	ldr	r2, [r3, #12]
 8003874:	4b30      	ldr	r3, [pc, #192]	@ (8003938 <HAL_RCC_OscConfig+0x68c>)
 8003876:	4013      	ands	r3, r2
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003880:	4311      	orrs	r1, r2
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003886:	0212      	lsls	r2, r2, #8
 8003888:	4311      	orrs	r1, r2
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800388e:	4311      	orrs	r1, r2
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003894:	4311      	orrs	r1, r2
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800389a:	430a      	orrs	r2, r1
 800389c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80038a0:	4313      	orrs	r3, r2
 80038a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80038a4:	f7ff fc44 	bl	8003130 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038b8:	f7fe fabe 	bl	8001e38 <HAL_GetTick>
 80038bc:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c0:	f7fe faba 	bl	8001e38 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e059      	b.n	8003986 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d0ef      	beq.n	80038c0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038e0:	e050      	b.n	8003984 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e04f      	b.n	8003986 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d147      	bne.n	8003984 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80038f4:	f7ff fc1c 	bl	8003130 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003902:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003906:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003908:	f7fe fa96 	bl	8001e38 <HAL_GetTick>
 800390c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003910:	f7fe fa92 	bl	8001e38 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e031      	b.n	8003986 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003922:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0ef      	beq.n	8003910 <HAL_RCC_OscConfig+0x664>
 8003930:	e028      	b.n	8003984 <HAL_RCC_OscConfig+0x6d8>
 8003932:	bf00      	nop
 8003934:	58000400 	.word	0x58000400
 8003938:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	2b0c      	cmp	r3, #12
 8003940:	d01e      	beq.n	8003980 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003942:	f7ff fc04 	bl	800314e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003946:	f7fe fa77 	bl	8001e38 <HAL_GetTick>
 800394a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800394c:	e008      	b.n	8003960 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800394e:	f7fe fa73 	bl	8001e38 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e012      	b.n	8003986 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003960:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1ef      	bne.n	800394e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800396e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003972:	68da      	ldr	r2, [r3, #12]
 8003974:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003978:	4b05      	ldr	r3, [pc, #20]	@ (8003990 <HAL_RCC_OscConfig+0x6e4>)
 800397a:	4013      	ands	r3, r2
 800397c:	60cb      	str	r3, [r1, #12]
 800397e:	e001      	b.n	8003984 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e000      	b.n	8003986 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3734      	adds	r7, #52	@ 0x34
 800398a:	46bd      	mov	sp, r7
 800398c:	bd90      	pop	{r4, r7, pc}
 800398e:	bf00      	nop
 8003990:	eefefffc 	.word	0xeefefffc

08003994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d101      	bne.n	80039a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e12d      	b.n	8003c04 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039a8:	4b98      	ldr	r3, [pc, #608]	@ (8003c0c <HAL_RCC_ClockConfig+0x278>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d91b      	bls.n	80039ee <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b6:	4b95      	ldr	r3, [pc, #596]	@ (8003c0c <HAL_RCC_ClockConfig+0x278>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f023 0207 	bic.w	r2, r3, #7
 80039be:	4993      	ldr	r1, [pc, #588]	@ (8003c0c <HAL_RCC_ClockConfig+0x278>)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039c6:	f7fe fa37 	bl	8001e38 <HAL_GetTick>
 80039ca:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039cc:	e008      	b.n	80039e0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80039ce:	f7fe fa33 	bl	8001e38 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e111      	b.n	8003c04 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e0:	4b8a      	ldr	r3, [pc, #552]	@ (8003c0c <HAL_RCC_ClockConfig+0x278>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d1ef      	bne.n	80039ce <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d016      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff fafb 	bl	8002ffa <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a04:	f7fe fa18 	bl	8001e38 <HAL_GetTick>
 8003a08:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a0c:	f7fe fa14 	bl	8001e38 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e0f2      	b.n	8003c04 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003a1e:	f7ff fbe8 	bl	80031f2 <LL_RCC_IsActiveFlag_HPRE>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0f1      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0320 	and.w	r3, r3, #32
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d016      	beq.n	8003a62 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff faf2 	bl	8003022 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a3e:	f7fe f9fb 	bl	8001e38 <HAL_GetTick>
 8003a42:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003a44:	e008      	b.n	8003a58 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a46:	f7fe f9f7 	bl	8001e38 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d901      	bls.n	8003a58 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e0d5      	b.n	8003c04 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003a58:	f7ff fbdd 	bl	8003216 <LL_RCC_IsActiveFlag_C2HPRE>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0f1      	beq.n	8003a46 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d016      	beq.n	8003a9c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7ff faeb 	bl	800304e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a78:	f7fe f9de 	bl	8001e38 <HAL_GetTick>
 8003a7c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a80:	f7fe f9da 	bl	8001e38 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e0b8      	b.n	8003c04 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003a92:	f7ff fbd3 	bl	800323c <LL_RCC_IsActiveFlag_SHDHPRE>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0f1      	beq.n	8003a80 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0304 	and.w	r3, r3, #4
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d016      	beq.n	8003ad6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff fae5 	bl	800307c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003ab2:	f7fe f9c1 	bl	8001e38 <HAL_GetTick>
 8003ab6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003ab8:	e008      	b.n	8003acc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003aba:	f7fe f9bd 	bl	8001e38 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e09b      	b.n	8003c04 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003acc:	f7ff fbc9 	bl	8003262 <LL_RCC_IsActiveFlag_PPRE1>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d0f1      	beq.n	8003aba <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d017      	beq.n	8003b12 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff fadb 	bl	80030a4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003aee:	f7fe f9a3 	bl	8001e38 <HAL_GetTick>
 8003af2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003af4:	e008      	b.n	8003b08 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003af6:	f7fe f99f 	bl	8001e38 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e07d      	b.n	8003c04 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003b08:	f7ff fbbd 	bl	8003286 <LL_RCC_IsActiveFlag_PPRE2>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0f1      	beq.n	8003af6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d043      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d106      	bne.n	8003b34 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003b26:	f7ff f87b 	bl	8002c20 <LL_RCC_HSE_IsReady>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d11e      	bne.n	8003b6e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e067      	b.n	8003c04 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2b03      	cmp	r3, #3
 8003b3a:	d106      	bne.n	8003b4a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003b3c:	f7ff fb16 	bl	800316c <LL_RCC_PLL_IsReady>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d113      	bne.n	8003b6e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e05c      	b.n	8003c04 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d106      	bne.n	8003b60 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003b52:	f7ff f9e3 	bl	8002f1c <LL_RCC_MSI_IsReady>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d108      	bne.n	8003b6e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e051      	b.n	8003c04 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003b60:	f7ff f88e 	bl	8002c80 <LL_RCC_HSI_IsReady>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e04a      	b.n	8003c04 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7ff fa21 	bl	8002fba <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b78:	f7fe f95e 	bl	8001e38 <HAL_GetTick>
 8003b7c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b7e:	e00a      	b.n	8003b96 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b80:	f7fe f95a 	bl	8001e38 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e036      	b.n	8003c04 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b96:	f7ff fa24 	bl	8002fe2 <LL_RCC_GetSysClkSource>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d1ec      	bne.n	8003b80 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ba6:	4b19      	ldr	r3, [pc, #100]	@ (8003c0c <HAL_RCC_ClockConfig+0x278>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d21b      	bcs.n	8003bec <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb4:	4b15      	ldr	r3, [pc, #84]	@ (8003c0c <HAL_RCC_ClockConfig+0x278>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f023 0207 	bic.w	r2, r3, #7
 8003bbc:	4913      	ldr	r1, [pc, #76]	@ (8003c0c <HAL_RCC_ClockConfig+0x278>)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bc4:	f7fe f938 	bl	8001e38 <HAL_GetTick>
 8003bc8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003bcc:	f7fe f934 	bl	8001e38 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e012      	b.n	8003c04 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bde:	4b0b      	ldr	r3, [pc, #44]	@ (8003c0c <HAL_RCC_ClockConfig+0x278>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0307 	and.w	r3, r3, #7
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d1ef      	bne.n	8003bcc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003bec:	f000 f87e 	bl	8003cec <HAL_RCC_GetHCLKFreq>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	4a07      	ldr	r2, [pc, #28]	@ (8003c10 <HAL_RCC_ClockConfig+0x27c>)
 8003bf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003bf6:	f7fe f92b 	bl	8001e50 <HAL_GetTickPrio>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7fe f8cd 	bl	8001d9c <HAL_InitTick>
 8003c02:	4603      	mov	r3, r0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3710      	adds	r7, #16
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	58004000 	.word	0x58004000
 8003c10:	20000008 	.word	0x20000008

08003c14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c14:	b590      	push	{r4, r7, lr}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c1a:	f7ff f9e2 	bl	8002fe2 <LL_RCC_GetSysClkSource>
 8003c1e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10a      	bne.n	8003c3c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003c26:	f7ff f99e 	bl	8002f66 <LL_RCC_MSI_GetRange>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	091b      	lsrs	r3, r3, #4
 8003c2e:	f003 030f 	and.w	r3, r3, #15
 8003c32:	4a2b      	ldr	r2, [pc, #172]	@ (8003ce0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	e04b      	b.n	8003cd4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	d102      	bne.n	8003c48 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c42:	4b28      	ldr	r3, [pc, #160]	@ (8003ce4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003c44:	60fb      	str	r3, [r7, #12]
 8003c46:	e045      	b.n	8003cd4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b08      	cmp	r3, #8
 8003c4c:	d10a      	bne.n	8003c64 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003c4e:	f7fe ffb7 	bl	8002bc0 <LL_RCC_HSE_IsEnabledDiv2>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d102      	bne.n	8003c5e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003c58:	4b22      	ldr	r3, [pc, #136]	@ (8003ce4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003c5a:	60fb      	str	r3, [r7, #12]
 8003c5c:	e03a      	b.n	8003cd4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003c5e:	4b22      	ldr	r3, [pc, #136]	@ (8003ce8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	e037      	b.n	8003cd4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003c64:	f7ff fab9 	bl	80031da <LL_RCC_PLL_GetMainSource>
 8003c68:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d003      	beq.n	8003c78 <HAL_RCC_GetSysClockFreq+0x64>
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	2b03      	cmp	r3, #3
 8003c74:	d003      	beq.n	8003c7e <HAL_RCC_GetSysClockFreq+0x6a>
 8003c76:	e00d      	b.n	8003c94 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003c78:	4b1a      	ldr	r3, [pc, #104]	@ (8003ce4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003c7a:	60bb      	str	r3, [r7, #8]
        break;
 8003c7c:	e015      	b.n	8003caa <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003c7e:	f7fe ff9f 	bl	8002bc0 <LL_RCC_HSE_IsEnabledDiv2>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d102      	bne.n	8003c8e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003c88:	4b16      	ldr	r3, [pc, #88]	@ (8003ce4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003c8a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003c8c:	e00d      	b.n	8003caa <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003c8e:	4b16      	ldr	r3, [pc, #88]	@ (8003ce8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003c90:	60bb      	str	r3, [r7, #8]
        break;
 8003c92:	e00a      	b.n	8003caa <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003c94:	f7ff f967 	bl	8002f66 <LL_RCC_MSI_GetRange>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	091b      	lsrs	r3, r3, #4
 8003c9c:	f003 030f 	and.w	r3, r3, #15
 8003ca0:	4a0f      	ldr	r2, [pc, #60]	@ (8003ce0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ca6:	60bb      	str	r3, [r7, #8]
        break;
 8003ca8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003caa:	f7ff fa71 	bl	8003190 <LL_RCC_PLL_GetN>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	fb03 f402 	mul.w	r4, r3, r2
 8003cb6:	f7ff fa84 	bl	80031c2 <LL_RCC_PLL_GetDivider>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	091b      	lsrs	r3, r3, #4
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	fbb4 f4f3 	udiv	r4, r4, r3
 8003cc4:	f7ff fa71 	bl	80031aa <LL_RCC_PLL_GetR>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	0f5b      	lsrs	r3, r3, #29
 8003ccc:	3301      	adds	r3, #1
 8003cce:	fbb4 f3f3 	udiv	r3, r4, r3
 8003cd2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3714      	adds	r7, #20
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd90      	pop	{r4, r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	080089dc 	.word	0x080089dc
 8003ce4:	00f42400 	.word	0x00f42400
 8003ce8:	01e84800 	.word	0x01e84800

08003cec <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cec:	b598      	push	{r3, r4, r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003cf0:	f7ff ff90 	bl	8003c14 <HAL_RCC_GetSysClockFreq>
 8003cf4:	4604      	mov	r4, r0
 8003cf6:	f7ff f9e9 	bl	80030cc <LL_RCC_GetAHBPrescaler>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	091b      	lsrs	r3, r3, #4
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	4a03      	ldr	r2, [pc, #12]	@ (8003d10 <HAL_RCC_GetHCLKFreq+0x24>)
 8003d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d08:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	bd98      	pop	{r3, r4, r7, pc}
 8003d10:	0800897c 	.word	0x0800897c

08003d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d14:	b598      	push	{r3, r4, r7, lr}
 8003d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003d18:	f7ff ffe8 	bl	8003cec <HAL_RCC_GetHCLKFreq>
 8003d1c:	4604      	mov	r4, r0
 8003d1e:	f7ff f9ef 	bl	8003100 <LL_RCC_GetAPB1Prescaler>
 8003d22:	4603      	mov	r3, r0
 8003d24:	0a1b      	lsrs	r3, r3, #8
 8003d26:	f003 0307 	and.w	r3, r3, #7
 8003d2a:	4a04      	ldr	r2, [pc, #16]	@ (8003d3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d30:	f003 031f 	and.w	r3, r3, #31
 8003d34:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	bd98      	pop	{r3, r4, r7, pc}
 8003d3c:	080089bc 	.word	0x080089bc

08003d40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d40:	b598      	push	{r3, r4, r7, lr}
 8003d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003d44:	f7ff ffd2 	bl	8003cec <HAL_RCC_GetHCLKFreq>
 8003d48:	4604      	mov	r4, r0
 8003d4a:	f7ff f9e5 	bl	8003118 <LL_RCC_GetAPB2Prescaler>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	0adb      	lsrs	r3, r3, #11
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	4a04      	ldr	r2, [pc, #16]	@ (8003d68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d5c:	f003 031f 	and.w	r3, r3, #31
 8003d60:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	bd98      	pop	{r3, r4, r7, pc}
 8003d68:	080089bc 	.word	0x080089bc

08003d6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003d6c:	b590      	push	{r4, r7, lr}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2bb0      	cmp	r3, #176	@ 0xb0
 8003d78:	d903      	bls.n	8003d82 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003d7a:	4b15      	ldr	r3, [pc, #84]	@ (8003dd0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	e007      	b.n	8003d92 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	091b      	lsrs	r3, r3, #4
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	4a11      	ldr	r2, [pc, #68]	@ (8003dd0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d90:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003d92:	f7ff f9a7 	bl	80030e4 <LL_RCC_GetAHB4Prescaler>
 8003d96:	4603      	mov	r3, r0
 8003d98:	091b      	lsrs	r3, r3, #4
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	4a0d      	ldr	r2, [pc, #52]	@ (8003dd4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003daa:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	4a0a      	ldr	r2, [pc, #40]	@ (8003dd8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003db0:	fba2 2303 	umull	r2, r3, r2, r3
 8003db4:	0c9c      	lsrs	r4, r3, #18
 8003db6:	f7fe fef5 	bl	8002ba4 <HAL_PWREx_GetVoltageRange>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4620      	mov	r0, r4
 8003dc0:	f000 f80c 	bl	8003ddc <RCC_SetFlashLatency>
 8003dc4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3714      	adds	r7, #20
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd90      	pop	{r4, r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	080089dc 	.word	0x080089dc
 8003dd4:	0800897c 	.word	0x0800897c
 8003dd8:	431bde83 	.word	0x431bde83

08003ddc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003ddc:	b590      	push	{r4, r7, lr}
 8003dde:	b093      	sub	sp, #76	@ 0x4c
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003de6:	4b37      	ldr	r3, [pc, #220]	@ (8003ec4 <RCC_SetFlashLatency+0xe8>)
 8003de8:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8003dec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003dee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003df2:	4a35      	ldr	r2, [pc, #212]	@ (8003ec8 <RCC_SetFlashLatency+0xec>)
 8003df4:	f107 031c 	add.w	r3, r7, #28
 8003df8:	ca07      	ldmia	r2, {r0, r1, r2}
 8003dfa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003dfe:	4b33      	ldr	r3, [pc, #204]	@ (8003ecc <RCC_SetFlashLatency+0xf0>)
 8003e00:	f107 040c 	add.w	r4, r7, #12
 8003e04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e14:	d11a      	bne.n	8003e4c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003e16:	2300      	movs	r3, #0
 8003e18:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e1a:	e013      	b.n	8003e44 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003e1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	3348      	adds	r3, #72	@ 0x48
 8003e22:	443b      	add	r3, r7
 8003e24:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d807      	bhi.n	8003e3e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003e2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	3348      	adds	r3, #72	@ 0x48
 8003e34:	443b      	add	r3, r7
 8003e36:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003e3a:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8003e3c:	e020      	b.n	8003e80 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003e3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e40:	3301      	adds	r3, #1
 8003e42:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e46:	2b03      	cmp	r3, #3
 8003e48:	d9e8      	bls.n	8003e1c <RCC_SetFlashLatency+0x40>
 8003e4a:	e019      	b.n	8003e80 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e50:	e013      	b.n	8003e7a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	3348      	adds	r3, #72	@ 0x48
 8003e58:	443b      	add	r3, r7
 8003e5a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d807      	bhi.n	8003e74 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003e64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	3348      	adds	r3, #72	@ 0x48
 8003e6a:	443b      	add	r3, r7
 8003e6c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003e70:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8003e72:	e005      	b.n	8003e80 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003e74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e76:	3301      	adds	r3, #1
 8003e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d9e8      	bls.n	8003e52 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003e80:	4b13      	ldr	r3, [pc, #76]	@ (8003ed0 <RCC_SetFlashLatency+0xf4>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f023 0207 	bic.w	r2, r3, #7
 8003e88:	4911      	ldr	r1, [pc, #68]	@ (8003ed0 <RCC_SetFlashLatency+0xf4>)
 8003e8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003e90:	f7fd ffd2 	bl	8001e38 <HAL_GetTick>
 8003e94:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003e96:	e008      	b.n	8003eaa <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003e98:	f7fd ffce 	bl	8001e38 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d901      	bls.n	8003eaa <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e007      	b.n	8003eba <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003eaa:	4b09      	ldr	r3, [pc, #36]	@ (8003ed0 <RCC_SetFlashLatency+0xf4>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d1ef      	bne.n	8003e98 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	374c      	adds	r7, #76	@ 0x4c
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd90      	pop	{r4, r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	080087c8 	.word	0x080087c8
 8003ec8:	080087d8 	.word	0x080087d8
 8003ecc:	080087e4 	.word	0x080087e4
 8003ed0:	58004000 	.word	0x58004000

08003ed4 <LL_RCC_LSE_IsEnabled>:
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003ed8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d101      	bne.n	8003eec <LL_RCC_LSE_IsEnabled+0x18>
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e000      	b.n	8003eee <LL_RCC_LSE_IsEnabled+0x1a>
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <LL_RCC_LSE_IsReady>:
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003efc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d101      	bne.n	8003f10 <LL_RCC_LSE_IsReady+0x18>
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e000      	b.n	8003f12 <LL_RCC_LSE_IsReady+0x1a>
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <LL_RCC_MSI_EnablePLLMode>:
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003f20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f2a:	f043 0304 	orr.w	r3, r3, #4
 8003f2e:	6013      	str	r3, [r2, #0]
}
 8003f30:	bf00      	nop
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <LL_RCC_SetRFWKPClockSource>:
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b083      	sub	sp, #12
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003f42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f4a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr

08003f66 <LL_RCC_SetSMPSClockSource>:
{
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003f6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f74:	f023 0203 	bic.w	r2, r3, #3
 8003f78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <LL_RCC_SetSMPSPrescaler>:
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003f96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003fa0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <LL_RCC_SetUSARTClockSource>:
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003fbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fc6:	f023 0203 	bic.w	r2, r3, #3
 8003fca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003fd6:	bf00      	nop
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <LL_RCC_SetLPUARTClockSource>:
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b083      	sub	sp, #12
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003fea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003ff6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004002:	bf00      	nop
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <LL_RCC_SetI2CClockSource>:
{
 800400e:	b480      	push	{r7}
 8004010:	b083      	sub	sp, #12
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004016:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800401a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	091b      	lsrs	r3, r3, #4
 8004022:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8004026:	43db      	mvns	r3, r3
 8004028:	401a      	ands	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	011b      	lsls	r3, r3, #4
 800402e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8004032:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004036:	4313      	orrs	r3, r2
 8004038:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <LL_RCC_SetLPTIMClockSource>:
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004050:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004054:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	0c1b      	lsrs	r3, r3, #16
 800405c:	041b      	lsls	r3, r3, #16
 800405e:	43db      	mvns	r3, r3
 8004060:	401a      	ands	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	041b      	lsls	r3, r3, #16
 8004066:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800406a:	4313      	orrs	r3, r2
 800406c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <LL_RCC_SetSAIClockSource>:
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004084:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800408c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004090:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4313      	orrs	r3, r2
 8004098:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <LL_RCC_SetRNGClockSource>:
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80040b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040b8:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80040bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <LL_RCC_SetCLK48ClockSource>:
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80040dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040e4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80040e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <LL_RCC_SetUSBClockSource>:
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f7ff ffe3 	bl	80040d4 <LL_RCC_SetCLK48ClockSource>
}
 800410e:	bf00      	nop
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <LL_RCC_SetADCClockSource>:
{
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800411e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004126:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800412a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4313      	orrs	r3, r2
 8004132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <LL_RCC_SetRTCClockSource>:
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800414a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800414e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004152:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004156:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4313      	orrs	r3, r2
 800415e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8004162:	bf00      	nop
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <LL_RCC_GetRTCClockSource>:
{
 800416e:	b480      	push	{r7}
 8004170:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004172:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800417a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800417e:	4618      	mov	r0, r3
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <LL_RCC_ForceBackupDomainReset>:
{
 8004188:	b480      	push	{r7}
 800418a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800418c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004190:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004194:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004198:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800419c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80041a0:	bf00      	nop
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <LL_RCC_ReleaseBackupDomainReset>:
{
 80041aa:	b480      	push	{r7}
 80041ac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80041ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80041c2:	bf00      	nop
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <LL_RCC_PLLSAI1_Enable>:
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80041d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80041de:	6013      	str	r3, [r2, #0]
}
 80041e0:	bf00      	nop
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <LL_RCC_PLLSAI1_Disable>:
{
 80041ea:	b480      	push	{r7}
 80041ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80041ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041f8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80041fc:	6013      	str	r3, [r2, #0]
}
 80041fe:	bf00      	nop
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <LL_RCC_PLLSAI1_IsReady>:
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800420c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004216:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800421a:	d101      	bne.n	8004220 <LL_RCC_PLLSAI1_IsReady+0x18>
 800421c:	2301      	movs	r3, #1
 800421e:	e000      	b.n	8004222 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b088      	sub	sp, #32
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004234:	2300      	movs	r3, #0
 8004236:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004238:	2300      	movs	r3, #0
 800423a:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004244:	2b00      	cmp	r3, #0
 8004246:	d034      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800424c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004250:	d021      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004252:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004256:	d81b      	bhi.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004258:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800425c:	d01d      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800425e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004262:	d815      	bhi.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00b      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004268:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800426c:	d110      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800426e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004278:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800427c:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800427e:	e00d      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3304      	adds	r3, #4
 8004284:	4618      	mov	r0, r3
 8004286:	f000 f94d 	bl	8004524 <RCCEx_PLLSAI1_ConfigNP>
 800428a:	4603      	mov	r3, r0
 800428c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800428e:	e005      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	77fb      	strb	r3, [r7, #31]
        break;
 8004294:	e002      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004296:	bf00      	nop
 8004298:	e000      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800429a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800429c:	7ffb      	ldrb	r3, [r7, #31]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d105      	bne.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7ff fee8 	bl	800407c <LL_RCC_SetSAIClockSource>
 80042ac:	e001      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ae:	7ffb      	ldrb	r3, [r7, #31]
 80042b0:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d046      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80042be:	f7ff ff56 	bl	800416e <LL_RCC_GetRTCClockSource>
 80042c2:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d03c      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80042ce:	f7fe fc59 	bl	8002b84 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d105      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff ff30 	bl	8004142 <LL_RCC_SetRTCClockSource>
 80042e2:	e02e      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80042e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ec:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80042ee:	f7ff ff4b 	bl	8004188 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80042f2:	f7ff ff5a 	bl	80041aa <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004300:	4313      	orrs	r3, r2
 8004302:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004304:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800430e:	f7ff fde1 	bl	8003ed4 <LL_RCC_LSE_IsEnabled>
 8004312:	4603      	mov	r3, r0
 8004314:	2b01      	cmp	r3, #1
 8004316:	d114      	bne.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004318:	f7fd fd8e 	bl	8001e38 <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800431e:	e00b      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004320:	f7fd fd8a 	bl	8001e38 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800432e:	4293      	cmp	r3, r2
 8004330:	d902      	bls.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	77fb      	strb	r3, [r7, #31]
              break;
 8004336:	e004      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004338:	f7ff fdde 	bl	8003ef8 <LL_RCC_LSE_IsReady>
 800433c:	4603      	mov	r3, r0
 800433e:	2b01      	cmp	r3, #1
 8004340:	d1ee      	bne.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004342:	7ffb      	ldrb	r3, [r7, #31]
 8004344:	77bb      	strb	r3, [r7, #30]
 8004346:	e001      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004348:	7ffb      	ldrb	r3, [r7, #31]
 800434a:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	2b00      	cmp	r3, #0
 8004356:	d004      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	4618      	mov	r0, r3
 800435e:	f7ff fe2a 	bl	8003fb6 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d004      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	4618      	mov	r0, r3
 8004374:	f7ff fe35 	bl	8003fe2 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0310 	and.w	r3, r3, #16
 8004380:	2b00      	cmp	r3, #0
 8004382:	d004      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004388:	4618      	mov	r0, r3
 800438a:	f7ff fe5d 	bl	8004048 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0320 	and.w	r3, r3, #32
 8004396:	2b00      	cmp	r3, #0
 8004398:	d004      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800439e:	4618      	mov	r0, r3
 80043a0:	f7ff fe52 	bl	8004048 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0304 	and.w	r3, r3, #4
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d004      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7ff fe2a 	bl	800400e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0308 	and.w	r3, r3, #8
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d004      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff fe1f 	bl	800400e <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d022      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff fe8d 	bl	8004100 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043ee:	d107      	bne.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80043f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80043fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043fe:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004404:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004408:	d10b      	bne.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	3304      	adds	r3, #4
 800440e:	4618      	mov	r0, r3
 8004410:	f000 f8e3 	bl	80045da <RCCEx_PLLSAI1_ConfigNQ>
 8004414:	4603      	mov	r3, r0
 8004416:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004418:	7ffb      	ldrb	r3, [r7, #31]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800441e:	7ffb      	ldrb	r3, [r7, #31]
 8004420:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800442a:	2b00      	cmp	r3, #0
 800442c:	d02b      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004436:	d008      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800443c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004440:	d003      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004446:	2b00      	cmp	r3, #0
 8004448:	d105      	bne.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800444e:	4618      	mov	r0, r3
 8004450:	f7ff fe2a 	bl	80040a8 <LL_RCC_SetRNGClockSource>
 8004454:	e00a      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800445a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800445e:	60fb      	str	r3, [r7, #12]
 8004460:	2000      	movs	r0, #0
 8004462:	f7ff fe21 	bl	80040a8 <LL_RCC_SetRNGClockSource>
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f7ff fe34 	bl	80040d4 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004470:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8004474:	d107      	bne.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004476:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004480:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004484:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800448e:	2b00      	cmp	r3, #0
 8004490:	d022      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004496:	4618      	mov	r0, r3
 8004498:	f7ff fe3d 	bl	8004116 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044a4:	d107      	bne.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80044a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80044b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044b4:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80044be:	d10b      	bne.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	3304      	adds	r3, #4
 80044c4:	4618      	mov	r0, r3
 80044c6:	f000 f8e3 	bl	8004690 <RCCEx_PLLSAI1_ConfigNR>
 80044ca:	4603      	mov	r3, r0
 80044cc:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80044ce:	7ffb      	ldrb	r3, [r7, #31]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d001      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80044d4:	7ffb      	ldrb	r3, [r7, #31]
 80044d6:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d004      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7ff fd26 	bl	8003f3a <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d009      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044fe:	4618      	mov	r0, r3
 8004500:	f7ff fd45 	bl	8003f8e <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004508:	4618      	mov	r0, r3
 800450a:	f7ff fd2c 	bl	8003f66 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800450e:	7fbb      	ldrb	r3, [r7, #30]
}
 8004510:	4618      	mov	r0, r3
 8004512:	3720      	adds	r7, #32
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800451c:	f7ff fcfe 	bl	8003f1c <LL_RCC_MSI_EnablePLLMode>
}
 8004520:	bf00      	nop
 8004522:	bd80      	pop	{r7, pc}

08004524 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800452c:	2300      	movs	r3, #0
 800452e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004530:	f7ff fe5b 	bl	80041ea <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004534:	f7fd fc80 	bl	8001e38 <HAL_GetTick>
 8004538:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800453a:	e009      	b.n	8004550 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800453c:	f7fd fc7c 	bl	8001e38 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d902      	bls.n	8004550 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	73fb      	strb	r3, [r7, #15]
      break;
 800454e:	e004      	b.n	800455a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004550:	f7ff fe5a 	bl	8004208 <LL_RCC_PLLSAI1_IsReady>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1f0      	bne.n	800453c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800455a:	7bfb      	ldrb	r3, [r7, #15]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d137      	bne.n	80045d0 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004560:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	021b      	lsls	r3, r3, #8
 8004570:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004574:	4313      	orrs	r3, r2
 8004576:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004578:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800458a:	4313      	orrs	r3, r2
 800458c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800458e:	f7ff fe1d 	bl	80041cc <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004592:	f7fd fc51 	bl	8001e38 <HAL_GetTick>
 8004596:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004598:	e009      	b.n	80045ae <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800459a:	f7fd fc4d 	bl	8001e38 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d902      	bls.n	80045ae <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	73fb      	strb	r3, [r7, #15]
        break;
 80045ac:	e004      	b.n	80045b8 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80045ae:	f7ff fe2b 	bl	8004208 <LL_RCC_PLLSAI1_IsReady>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d1f0      	bne.n	800459a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80045b8:	7bfb      	ldrb	r3, [r7, #15]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d108      	bne.n	80045d0 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80045be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045c2:	691a      	ldr	r2, [r3, #16]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80045cc:	4313      	orrs	r3, r2
 80045ce:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b084      	sub	sp, #16
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045e2:	2300      	movs	r3, #0
 80045e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80045e6:	f7ff fe00 	bl	80041ea <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80045ea:	f7fd fc25 	bl	8001e38 <HAL_GetTick>
 80045ee:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80045f0:	e009      	b.n	8004606 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045f2:	f7fd fc21 	bl	8001e38 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d902      	bls.n	8004606 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	73fb      	strb	r3, [r7, #15]
      break;
 8004604:	e004      	b.n	8004610 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004606:	f7ff fdff 	bl	8004208 <LL_RCC_PLLSAI1_IsReady>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1f0      	bne.n	80045f2 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004610:	7bfb      	ldrb	r3, [r7, #15]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d137      	bne.n	8004686 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004616:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	021b      	lsls	r3, r3, #8
 8004626:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800462a:	4313      	orrs	r3, r2
 800462c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800462e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004640:	4313      	orrs	r3, r2
 8004642:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004644:	f7ff fdc2 	bl	80041cc <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004648:	f7fd fbf6 	bl	8001e38 <HAL_GetTick>
 800464c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800464e:	e009      	b.n	8004664 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004650:	f7fd fbf2 	bl	8001e38 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d902      	bls.n	8004664 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	73fb      	strb	r3, [r7, #15]
        break;
 8004662:	e004      	b.n	800466e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004664:	f7ff fdd0 	bl	8004208 <LL_RCC_PLLSAI1_IsReady>
 8004668:	4603      	mov	r3, r0
 800466a:	2b01      	cmp	r3, #1
 800466c:	d1f0      	bne.n	8004650 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800466e:	7bfb      	ldrb	r3, [r7, #15]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d108      	bne.n	8004686 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004674:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004678:	691a      	ldr	r2, [r3, #16]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004682:	4313      	orrs	r3, r2
 8004684:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004686:	7bfb      	ldrb	r3, [r7, #15]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004698:	2300      	movs	r3, #0
 800469a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800469c:	f7ff fda5 	bl	80041ea <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80046a0:	f7fd fbca 	bl	8001e38 <HAL_GetTick>
 80046a4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80046a6:	e009      	b.n	80046bc <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046a8:	f7fd fbc6 	bl	8001e38 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d902      	bls.n	80046bc <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	73fb      	strb	r3, [r7, #15]
      break;
 80046ba:	e004      	b.n	80046c6 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80046bc:	f7ff fda4 	bl	8004208 <LL_RCC_PLLSAI1_IsReady>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1f0      	bne.n	80046a8 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80046c6:	7bfb      	ldrb	r3, [r7, #15]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d137      	bne.n	800473c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80046cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	021b      	lsls	r3, r3, #8
 80046dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80046e0:	4313      	orrs	r3, r2
 80046e2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80046e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80046f6:	4313      	orrs	r3, r2
 80046f8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80046fa:	f7ff fd67 	bl	80041cc <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046fe:	f7fd fb9b 	bl	8001e38 <HAL_GetTick>
 8004702:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004704:	e009      	b.n	800471a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004706:	f7fd fb97 	bl	8001e38 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d902      	bls.n	800471a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	73fb      	strb	r3, [r7, #15]
        break;
 8004718:	e004      	b.n	8004724 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800471a:	f7ff fd75 	bl	8004208 <LL_RCC_PLLSAI1_IsReady>
 800471e:	4603      	mov	r3, r0
 8004720:	2b01      	cmp	r3, #1
 8004722:	d1f0      	bne.n	8004706 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8004724:	7bfb      	ldrb	r3, [r7, #15]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d108      	bne.n	800473c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800472a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800472e:	691a      	ldr	r2, [r3, #16]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004738:	4313      	orrs	r3, r2
 800473a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800473c:	7bfb      	ldrb	r3, [r7, #15]
}
 800473e:	4618      	mov	r0, r3
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
	...

08004748 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e09f      	b.n	800489a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d106      	bne.n	8004774 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7fd f938 	bl	80019e4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2202      	movs	r2, #2
 8004778:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800477c:	4b49      	ldr	r3, [pc, #292]	@ (80048a4 <HAL_RTC_Init+0x15c>)
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	f003 0310 	and.w	r3, r3, #16
 8004784:	2b10      	cmp	r3, #16
 8004786:	d07e      	beq.n	8004886 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	22ca      	movs	r2, #202	@ 0xca
 800478e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2253      	movs	r2, #83	@ 0x53
 8004796:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 f8ab 	bl	80048f4 <RTC_EnterInitMode>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00a      	beq.n	80047ba <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	22ff      	movs	r2, #255	@ 0xff
 80047aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2204      	movs	r2, #4
 80047b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	73fb      	strb	r3, [r7, #15]
 80047b8:	e067      	b.n	800488a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	6812      	ldr	r2, [r2, #0]
 80047c4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80047c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047cc:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6899      	ldr	r1, [r3, #8]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	431a      	orrs	r2, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	68d2      	ldr	r2, [r2, #12]
 80047f4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6919      	ldr	r1, [r3, #16]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	041a      	lsls	r2, r3, #16
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	430a      	orrs	r2, r1
 8004808:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68da      	ldr	r2, [r3, #12]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004818:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 0203 	bic.w	r2, r2, #3
 8004828:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	69da      	ldr	r2, [r3, #28]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	431a      	orrs	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	430a      	orrs	r2, r1
 8004840:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f003 0320 	and.w	r3, r3, #32
 800484c:	2b00      	cmp	r3, #0
 800484e:	d113      	bne.n	8004878 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f829 	bl	80048a8 <HAL_RTC_WaitForSynchro>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00d      	beq.n	8004878 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	22ff      	movs	r2, #255	@ 0xff
 8004862:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2204      	movs	r2, #4
 8004868:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e010      	b.n	800489a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	22ff      	movs	r2, #255	@ 0xff
 800487e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8004880:	2300      	movs	r3, #0
 8004882:	73fb      	strb	r3, [r7, #15]
 8004884:	e001      	b.n	800488a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8004886:	2300      	movs	r3, #0
 8004888:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800488a:	7bfb      	ldrb	r3, [r7, #15]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d103      	bne.n	8004898 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8004898:	7bfb      	ldrb	r3, [r7, #15]
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	40002800 	.word	0x40002800

080048a8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68da      	ldr	r2, [r3, #12]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80048be:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80048c0:	f7fd faba 	bl	8001e38 <HAL_GetTick>
 80048c4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80048c6:	e009      	b.n	80048dc <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80048c8:	f7fd fab6 	bl	8001e38 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80048d6:	d901      	bls.n	80048dc <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e007      	b.n	80048ec <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	f003 0320 	and.w	r3, r3, #32
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d0ee      	beq.n	80048c8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004906:	2b00      	cmp	r3, #0
 8004908:	d119      	bne.n	800493e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f04f 32ff 	mov.w	r2, #4294967295
 8004912:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004914:	f7fd fa90 	bl	8001e38 <HAL_GetTick>
 8004918:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800491a:	e009      	b.n	8004930 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800491c:	f7fd fa8c 	bl	8001e38 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800492a:	d901      	bls.n	8004930 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e007      	b.n	8004940 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800493a:	2b00      	cmp	r3, #0
 800493c:	d0ee      	beq.n	800491c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b086      	sub	sp, #24
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f893 3020 	ldrb.w	r3, [r3, #32]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d101      	bne.n	8004962 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800495e:	2302      	movs	r3, #2
 8004960:	e0a8      	b.n	8004ab4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2202      	movs	r2, #2
 800496e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	22ca      	movs	r2, #202	@ 0xca
 8004978:	625a      	str	r2, [r3, #36]	@ 0x24
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2253      	movs	r2, #83	@ 0x53
 8004980:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800498c:	2b00      	cmp	r3, #0
 800498e:	d020      	beq.n	80049d2 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8004990:	f7fd fa52 	bl	8001e38 <HAL_GetTick>
 8004994:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8004996:	e015      	b.n	80049c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004998:	f7fd fa4e 	bl	8001e38 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80049a6:	d90d      	bls.n	80049c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	22ff      	movs	r2, #255	@ 0xff
 80049ae:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2203      	movs	r2, #3
 80049b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e077      	b.n	8004ab4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	f003 0304 	and.w	r3, r3, #4
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1e2      	bne.n	8004998 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	689a      	ldr	r2, [r3, #8]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049e0:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	b2da      	uxtb	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80049f2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80049f4:	f7fd fa20 	bl	8001e38 <HAL_GetTick>
 80049f8:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80049fa:	e015      	b.n	8004a28 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80049fc:	f7fd fa1c 	bl	8001e38 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a0a:	d90d      	bls.n	8004a28 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	22ff      	movs	r2, #255	@ 0xff
 8004a12:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2203      	movs	r2, #3
 8004a18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e045      	b.n	8004ab4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	f003 0304 	and.w	r3, r3, #4
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d0e2      	beq.n	80049fc <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	689a      	ldr	r2, [r3, #8]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f022 0207 	bic.w	r2, r2, #7
 8004a4c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6899      	ldr	r1, [r3, #8]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8004a5e:	4b17      	ldr	r3, [pc, #92]	@ (8004abc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004a60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a64:	4a15      	ldr	r2, [pc, #84]	@ (8004abc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004a66:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004a6a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8004a6e:	4b13      	ldr	r3, [pc, #76]	@ (8004abc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a12      	ldr	r2, [pc, #72]	@ (8004abc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004a74:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004a78:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	689a      	ldr	r2, [r3, #8]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a88:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689a      	ldr	r2, [r3, #8]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a98:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	22ff      	movs	r2, #255	@ 0xff
 8004aa0:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3718      	adds	r7, #24
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	58000800 	.word	0x58000800

08004ac0 <LL_RCC_GetUSARTClockSource>:
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004ac8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004acc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4013      	ands	r3, r2
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <LL_RCC_GetLPUARTClockSource>:
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004ae8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004aec:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4013      	ands	r3, r2
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e042      	b.n	8004b98 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d106      	bne.n	8004b2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7fc ff91 	bl	8001a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2224      	movs	r2, #36	@ 0x24
 8004b2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 0201 	bic.w	r2, r2, #1
 8004b40:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d002      	beq.n	8004b50 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 fd94 	bl	8005678 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 fb69 	bl	8005228 <UART_SetConfig>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d101      	bne.n	8004b60 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e01b      	b.n	8004b98 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685a      	ldr	r2, [r3, #4]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689a      	ldr	r2, [r3, #8]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f042 0201 	orr.w	r2, r2, #1
 8004b8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 fe13 	bl	80057bc <UART_CheckIdleState>
 8004b96:	4603      	mov	r3, r0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3708      	adds	r7, #8
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b0ba      	sub	sp, #232	@ 0xe8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004bc6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004bca:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004bce:	4013      	ands	r3, r2
 8004bd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004bd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d11b      	bne.n	8004c14 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004be0:	f003 0320 	and.w	r3, r3, #32
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d015      	beq.n	8004c14 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bec:	f003 0320 	and.w	r3, r3, #32
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d105      	bne.n	8004c00 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004bf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d009      	beq.n	8004c14 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f000 82e3 	beq.w	80051d0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	4798      	blx	r3
      }
      return;
 8004c12:	e2dd      	b.n	80051d0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004c14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 8123 	beq.w	8004e64 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004c1e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004c22:	4b8d      	ldr	r3, [pc, #564]	@ (8004e58 <HAL_UART_IRQHandler+0x2b8>)
 8004c24:	4013      	ands	r3, r2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d106      	bne.n	8004c38 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004c2a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004c2e:	4b8b      	ldr	r3, [pc, #556]	@ (8004e5c <HAL_UART_IRQHandler+0x2bc>)
 8004c30:	4013      	ands	r3, r2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	f000 8116 	beq.w	8004e64 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d011      	beq.n	8004c68 <HAL_UART_IRQHandler+0xc8>
 8004c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00b      	beq.n	8004c68 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2201      	movs	r2, #1
 8004c56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c5e:	f043 0201 	orr.w	r2, r3, #1
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d011      	beq.n	8004c98 <HAL_UART_IRQHandler+0xf8>
 8004c74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00b      	beq.n	8004c98 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2202      	movs	r2, #2
 8004c86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c8e:	f043 0204 	orr.w	r2, r3, #4
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d011      	beq.n	8004cc8 <HAL_UART_IRQHandler+0x128>
 8004ca4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00b      	beq.n	8004cc8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2204      	movs	r2, #4
 8004cb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cbe:	f043 0202 	orr.w	r2, r3, #2
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ccc:	f003 0308 	and.w	r3, r3, #8
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d017      	beq.n	8004d04 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cd8:	f003 0320 	and.w	r3, r3, #32
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d105      	bne.n	8004cec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004ce0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004ce4:	4b5c      	ldr	r3, [pc, #368]	@ (8004e58 <HAL_UART_IRQHandler+0x2b8>)
 8004ce6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00b      	beq.n	8004d04 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2208      	movs	r2, #8
 8004cf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cfa:	f043 0208 	orr.w	r2, r3, #8
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d012      	beq.n	8004d36 <HAL_UART_IRQHandler+0x196>
 8004d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00c      	beq.n	8004d36 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d2c:	f043 0220 	orr.w	r2, r3, #32
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f000 8249 	beq.w	80051d4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d46:	f003 0320 	and.w	r3, r3, #32
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d013      	beq.n	8004d76 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004d4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d52:	f003 0320 	and.w	r3, r3, #32
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d105      	bne.n	8004d66 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004d5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d007      	beq.n	8004d76 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d7c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d8a:	2b40      	cmp	r3, #64	@ 0x40
 8004d8c:	d005      	beq.n	8004d9a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004d8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d92:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d054      	beq.n	8004e44 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 fe25 	bl	80059ea <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004daa:	2b40      	cmp	r3, #64	@ 0x40
 8004dac:	d146      	bne.n	8004e3c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	3308      	adds	r3, #8
 8004db4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004dbc:	e853 3f00 	ldrex	r3, [r3]
 8004dc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004dc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004dc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dcc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	3308      	adds	r3, #8
 8004dd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004dda:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004dde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004de6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004dea:	e841 2300 	strex	r3, r2, [r1]
 8004dee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004df2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1d9      	bne.n	8004dae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d017      	beq.n	8004e34 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e0a:	4a15      	ldr	r2, [pc, #84]	@ (8004e60 <HAL_UART_IRQHandler+0x2c0>)
 8004e0c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7fd fa1f 	bl	8002258 <HAL_DMA_Abort_IT>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d019      	beq.n	8004e54 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004e2e:	4610      	mov	r0, r2
 8004e30:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e32:	e00f      	b.n	8004e54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 f9e1 	bl	80051fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e3a:	e00b      	b.n	8004e54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 f9dd 	bl	80051fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e42:	e007      	b.n	8004e54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 f9d9 	bl	80051fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004e52:	e1bf      	b.n	80051d4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e54:	bf00      	nop
    return;
 8004e56:	e1bd      	b.n	80051d4 <HAL_UART_IRQHandler+0x634>
 8004e58:	10000001 	.word	0x10000001
 8004e5c:	04000120 	.word	0x04000120
 8004e60:	08005ab7 	.word	0x08005ab7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	f040 8153 	bne.w	8005114 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e72:	f003 0310 	and.w	r3, r3, #16
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f000 814c 	beq.w	8005114 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e80:	f003 0310 	and.w	r3, r3, #16
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f000 8145 	beq.w	8005114 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2210      	movs	r2, #16
 8004e90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e9c:	2b40      	cmp	r3, #64	@ 0x40
 8004e9e:	f040 80bb 	bne.w	8005018 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004eb0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 818f 	beq.w	80051d8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004ec0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	f080 8187 	bcs.w	80051d8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ed0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0320 	and.w	r3, r3, #32
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f040 8087 	bne.w	8004ff6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ef4:	e853 3f00 	ldrex	r3, [r3]
 8004ef8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004efc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004f12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004f16:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004f1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004f22:	e841 2300 	strex	r3, r2, [r1]
 8004f26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004f2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1da      	bne.n	8004ee8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	3308      	adds	r3, #8
 8004f38:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f3c:	e853 3f00 	ldrex	r3, [r3]
 8004f40:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004f42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f44:	f023 0301 	bic.w	r3, r3, #1
 8004f48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	3308      	adds	r3, #8
 8004f52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004f56:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004f5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004f5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004f62:	e841 2300 	strex	r3, r2, [r1]
 8004f66:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004f68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1e1      	bne.n	8004f32 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	3308      	adds	r3, #8
 8004f74:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f78:	e853 3f00 	ldrex	r3, [r3]
 8004f7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004f7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	3308      	adds	r3, #8
 8004f8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004f92:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004f94:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f96:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004f98:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004f9a:	e841 2300 	strex	r3, r2, [r1]
 8004f9e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004fa0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1e3      	bne.n	8004f6e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2220      	movs	r2, #32
 8004faa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fbc:	e853 3f00 	ldrex	r3, [r3]
 8004fc0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004fc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fc4:	f023 0310 	bic.w	r3, r3, #16
 8004fc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004fd6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004fd8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fda:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004fdc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004fde:	e841 2300 	strex	r3, r2, [r1]
 8004fe2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004fe4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1e4      	bne.n	8004fb4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7fd f8d2 	bl	800219a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005008:	b29b      	uxth	r3, r3
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	b29b      	uxth	r3, r3
 800500e:	4619      	mov	r1, r3
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 f8fd 	bl	8005210 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005016:	e0df      	b.n	80051d8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005024:	b29b      	uxth	r3, r3
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005032:	b29b      	uxth	r3, r3
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 80d1 	beq.w	80051dc <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800503a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800503e:	2b00      	cmp	r3, #0
 8005040:	f000 80cc 	beq.w	80051dc <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800504c:	e853 3f00 	ldrex	r3, [r3]
 8005050:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005054:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005058:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	461a      	mov	r2, r3
 8005062:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005066:	647b      	str	r3, [r7, #68]	@ 0x44
 8005068:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800506c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800506e:	e841 2300 	strex	r3, r2, [r1]
 8005072:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005074:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1e4      	bne.n	8005044 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	3308      	adds	r3, #8
 8005080:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005084:	e853 3f00 	ldrex	r3, [r3]
 8005088:	623b      	str	r3, [r7, #32]
   return(result);
 800508a:	6a3b      	ldr	r3, [r7, #32]
 800508c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005090:	f023 0301 	bic.w	r3, r3, #1
 8005094:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	3308      	adds	r3, #8
 800509e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80050a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80050a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050aa:	e841 2300 	strex	r3, r2, [r1]
 80050ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1e1      	bne.n	800507a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2220      	movs	r2, #32
 80050ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	e853 3f00 	ldrex	r3, [r3]
 80050d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 0310 	bic.w	r3, r3, #16
 80050de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	461a      	mov	r2, r3
 80050e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80050ec:	61fb      	str	r3, [r7, #28]
 80050ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f0:	69b9      	ldr	r1, [r7, #24]
 80050f2:	69fa      	ldr	r2, [r7, #28]
 80050f4:	e841 2300 	strex	r3, r2, [r1]
 80050f8:	617b      	str	r3, [r7, #20]
   return(result);
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1e4      	bne.n	80050ca <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2202      	movs	r2, #2
 8005104:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005106:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800510a:	4619      	mov	r1, r3
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 f87f 	bl	8005210 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005112:	e063      	b.n	80051dc <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005118:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00e      	beq.n	800513e <HAL_UART_IRQHandler+0x59e>
 8005120:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005124:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d008      	beq.n	800513e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005134:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 fcfe 	bl	8005b38 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800513c:	e051      	b.n	80051e2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800513e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005142:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005146:	2b00      	cmp	r3, #0
 8005148:	d014      	beq.n	8005174 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800514a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800514e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005152:	2b00      	cmp	r3, #0
 8005154:	d105      	bne.n	8005162 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005156:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800515a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d008      	beq.n	8005174 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005166:	2b00      	cmp	r3, #0
 8005168:	d03a      	beq.n	80051e0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	4798      	blx	r3
    }
    return;
 8005172:	e035      	b.n	80051e0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800517c:	2b00      	cmp	r3, #0
 800517e:	d009      	beq.n	8005194 <HAL_UART_IRQHandler+0x5f4>
 8005180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 fca8 	bl	8005ae2 <UART_EndTransmit_IT>
    return;
 8005192:	e026      	b.n	80051e2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005198:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d009      	beq.n	80051b4 <HAL_UART_IRQHandler+0x614>
 80051a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051a4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d003      	beq.n	80051b4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 fcd7 	bl	8005b60 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80051b2:	e016      	b.n	80051e2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80051b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d010      	beq.n	80051e2 <HAL_UART_IRQHandler+0x642>
 80051c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	da0c      	bge.n	80051e2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 fcbf 	bl	8005b4c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80051ce:	e008      	b.n	80051e2 <HAL_UART_IRQHandler+0x642>
      return;
 80051d0:	bf00      	nop
 80051d2:	e006      	b.n	80051e2 <HAL_UART_IRQHandler+0x642>
    return;
 80051d4:	bf00      	nop
 80051d6:	e004      	b.n	80051e2 <HAL_UART_IRQHandler+0x642>
      return;
 80051d8:	bf00      	nop
 80051da:	e002      	b.n	80051e2 <HAL_UART_IRQHandler+0x642>
      return;
 80051dc:	bf00      	nop
 80051de:	e000      	b.n	80051e2 <HAL_UART_IRQHandler+0x642>
    return;
 80051e0:	bf00      	nop
  }
}
 80051e2:	37e8      	adds	r7, #232	@ 0xe8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	460b      	mov	r3, r1
 800521a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005228:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800522c:	b08c      	sub	sp, #48	@ 0x30
 800522e:	af00      	add	r7, sp, #0
 8005230:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005232:	2300      	movs	r3, #0
 8005234:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	689a      	ldr	r2, [r3, #8]
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	431a      	orrs	r2, r3
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	431a      	orrs	r2, r3
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	69db      	ldr	r3, [r3, #28]
 800524c:	4313      	orrs	r3, r2
 800524e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	4baf      	ldr	r3, [pc, #700]	@ (8005514 <UART_SetConfig+0x2ec>)
 8005258:	4013      	ands	r3, r2
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	6812      	ldr	r2, [r2, #0]
 800525e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005260:	430b      	orrs	r3, r1
 8005262:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	68da      	ldr	r2, [r3, #12]
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	430a      	orrs	r2, r1
 8005278:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4aa4      	ldr	r2, [pc, #656]	@ (8005518 <UART_SetConfig+0x2f0>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d004      	beq.n	8005294 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005290:	4313      	orrs	r3, r2
 8005292:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800529e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80052a2:	697a      	ldr	r2, [r7, #20]
 80052a4:	6812      	ldr	r2, [r2, #0]
 80052a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052a8:	430b      	orrs	r3, r1
 80052aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b2:	f023 010f 	bic.w	r1, r3, #15
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	430a      	orrs	r2, r1
 80052c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a95      	ldr	r2, [pc, #596]	@ (800551c <UART_SetConfig+0x2f4>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d125      	bne.n	8005318 <UART_SetConfig+0xf0>
 80052cc:	2003      	movs	r0, #3
 80052ce:	f7ff fbf7 	bl	8004ac0 <LL_RCC_GetUSARTClockSource>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b03      	cmp	r3, #3
 80052d6:	d81b      	bhi.n	8005310 <UART_SetConfig+0xe8>
 80052d8:	a201      	add	r2, pc, #4	@ (adr r2, 80052e0 <UART_SetConfig+0xb8>)
 80052da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052de:	bf00      	nop
 80052e0:	080052f1 	.word	0x080052f1
 80052e4:	08005301 	.word	0x08005301
 80052e8:	080052f9 	.word	0x080052f9
 80052ec:	08005309 	.word	0x08005309
 80052f0:	2301      	movs	r3, #1
 80052f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052f6:	e042      	b.n	800537e <UART_SetConfig+0x156>
 80052f8:	2302      	movs	r3, #2
 80052fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052fe:	e03e      	b.n	800537e <UART_SetConfig+0x156>
 8005300:	2304      	movs	r3, #4
 8005302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005306:	e03a      	b.n	800537e <UART_SetConfig+0x156>
 8005308:	2308      	movs	r3, #8
 800530a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800530e:	e036      	b.n	800537e <UART_SetConfig+0x156>
 8005310:	2310      	movs	r3, #16
 8005312:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005316:	e032      	b.n	800537e <UART_SetConfig+0x156>
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a7e      	ldr	r2, [pc, #504]	@ (8005518 <UART_SetConfig+0x2f0>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d12a      	bne.n	8005378 <UART_SetConfig+0x150>
 8005322:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8005326:	f7ff fbdb 	bl	8004ae0 <LL_RCC_GetLPUARTClockSource>
 800532a:	4603      	mov	r3, r0
 800532c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005330:	d01a      	beq.n	8005368 <UART_SetConfig+0x140>
 8005332:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005336:	d81b      	bhi.n	8005370 <UART_SetConfig+0x148>
 8005338:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800533c:	d00c      	beq.n	8005358 <UART_SetConfig+0x130>
 800533e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005342:	d815      	bhi.n	8005370 <UART_SetConfig+0x148>
 8005344:	2b00      	cmp	r3, #0
 8005346:	d003      	beq.n	8005350 <UART_SetConfig+0x128>
 8005348:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800534c:	d008      	beq.n	8005360 <UART_SetConfig+0x138>
 800534e:	e00f      	b.n	8005370 <UART_SetConfig+0x148>
 8005350:	2300      	movs	r3, #0
 8005352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005356:	e012      	b.n	800537e <UART_SetConfig+0x156>
 8005358:	2302      	movs	r3, #2
 800535a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800535e:	e00e      	b.n	800537e <UART_SetConfig+0x156>
 8005360:	2304      	movs	r3, #4
 8005362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005366:	e00a      	b.n	800537e <UART_SetConfig+0x156>
 8005368:	2308      	movs	r3, #8
 800536a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800536e:	e006      	b.n	800537e <UART_SetConfig+0x156>
 8005370:	2310      	movs	r3, #16
 8005372:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005376:	e002      	b.n	800537e <UART_SetConfig+0x156>
 8005378:	2310      	movs	r3, #16
 800537a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a65      	ldr	r2, [pc, #404]	@ (8005518 <UART_SetConfig+0x2f0>)
 8005384:	4293      	cmp	r3, r2
 8005386:	f040 8097 	bne.w	80054b8 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800538a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800538e:	2b08      	cmp	r3, #8
 8005390:	d823      	bhi.n	80053da <UART_SetConfig+0x1b2>
 8005392:	a201      	add	r2, pc, #4	@ (adr r2, 8005398 <UART_SetConfig+0x170>)
 8005394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005398:	080053bd 	.word	0x080053bd
 800539c:	080053db 	.word	0x080053db
 80053a0:	080053c5 	.word	0x080053c5
 80053a4:	080053db 	.word	0x080053db
 80053a8:	080053cb 	.word	0x080053cb
 80053ac:	080053db 	.word	0x080053db
 80053b0:	080053db 	.word	0x080053db
 80053b4:	080053db 	.word	0x080053db
 80053b8:	080053d3 	.word	0x080053d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053bc:	f7fe fcaa 	bl	8003d14 <HAL_RCC_GetPCLK1Freq>
 80053c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053c2:	e010      	b.n	80053e6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053c4:	4b56      	ldr	r3, [pc, #344]	@ (8005520 <UART_SetConfig+0x2f8>)
 80053c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80053c8:	e00d      	b.n	80053e6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053ca:	f7fe fc23 	bl	8003c14 <HAL_RCC_GetSysClockFreq>
 80053ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80053d0:	e009      	b.n	80053e6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80053d8:	e005      	b.n	80053e6 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80053da:	2300      	movs	r3, #0
 80053dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80053e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80053e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f000 812b 	beq.w	8005644 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f2:	4a4c      	ldr	r2, [pc, #304]	@ (8005524 <UART_SetConfig+0x2fc>)
 80053f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053f8:	461a      	mov	r2, r3
 80053fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005400:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	4613      	mov	r3, r2
 8005408:	005b      	lsls	r3, r3, #1
 800540a:	4413      	add	r3, r2
 800540c:	69ba      	ldr	r2, [r7, #24]
 800540e:	429a      	cmp	r2, r3
 8005410:	d305      	bcc.n	800541e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005418:	69ba      	ldr	r2, [r7, #24]
 800541a:	429a      	cmp	r2, r3
 800541c:	d903      	bls.n	8005426 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005424:	e10e      	b.n	8005644 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005428:	2200      	movs	r2, #0
 800542a:	60bb      	str	r3, [r7, #8]
 800542c:	60fa      	str	r2, [r7, #12]
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005432:	4a3c      	ldr	r2, [pc, #240]	@ (8005524 <UART_SetConfig+0x2fc>)
 8005434:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005438:	b29b      	uxth	r3, r3
 800543a:	2200      	movs	r2, #0
 800543c:	603b      	str	r3, [r7, #0]
 800543e:	607a      	str	r2, [r7, #4]
 8005440:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005444:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005448:	f7fa fea0 	bl	800018c <__aeabi_uldivmod>
 800544c:	4602      	mov	r2, r0
 800544e:	460b      	mov	r3, r1
 8005450:	4610      	mov	r0, r2
 8005452:	4619      	mov	r1, r3
 8005454:	f04f 0200 	mov.w	r2, #0
 8005458:	f04f 0300 	mov.w	r3, #0
 800545c:	020b      	lsls	r3, r1, #8
 800545e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005462:	0202      	lsls	r2, r0, #8
 8005464:	6979      	ldr	r1, [r7, #20]
 8005466:	6849      	ldr	r1, [r1, #4]
 8005468:	0849      	lsrs	r1, r1, #1
 800546a:	2000      	movs	r0, #0
 800546c:	460c      	mov	r4, r1
 800546e:	4605      	mov	r5, r0
 8005470:	eb12 0804 	adds.w	r8, r2, r4
 8005474:	eb43 0905 	adc.w	r9, r3, r5
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	469a      	mov	sl, r3
 8005480:	4693      	mov	fp, r2
 8005482:	4652      	mov	r2, sl
 8005484:	465b      	mov	r3, fp
 8005486:	4640      	mov	r0, r8
 8005488:	4649      	mov	r1, r9
 800548a:	f7fa fe7f 	bl	800018c <__aeabi_uldivmod>
 800548e:	4602      	mov	r2, r0
 8005490:	460b      	mov	r3, r1
 8005492:	4613      	mov	r3, r2
 8005494:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800549c:	d308      	bcc.n	80054b0 <UART_SetConfig+0x288>
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054a4:	d204      	bcs.n	80054b0 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	6a3a      	ldr	r2, [r7, #32]
 80054ac:	60da      	str	r2, [r3, #12]
 80054ae:	e0c9      	b.n	8005644 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80054b6:	e0c5      	b.n	8005644 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	69db      	ldr	r3, [r3, #28]
 80054bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054c0:	d16d      	bne.n	800559e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80054c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80054c6:	3b01      	subs	r3, #1
 80054c8:	2b07      	cmp	r3, #7
 80054ca:	d82d      	bhi.n	8005528 <UART_SetConfig+0x300>
 80054cc:	a201      	add	r2, pc, #4	@ (adr r2, 80054d4 <UART_SetConfig+0x2ac>)
 80054ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d2:	bf00      	nop
 80054d4:	080054f5 	.word	0x080054f5
 80054d8:	080054fd 	.word	0x080054fd
 80054dc:	08005529 	.word	0x08005529
 80054e0:	08005503 	.word	0x08005503
 80054e4:	08005529 	.word	0x08005529
 80054e8:	08005529 	.word	0x08005529
 80054ec:	08005529 	.word	0x08005529
 80054f0:	0800550b 	.word	0x0800550b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054f4:	f7fe fc24 	bl	8003d40 <HAL_RCC_GetPCLK2Freq>
 80054f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80054fa:	e01b      	b.n	8005534 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054fc:	4b08      	ldr	r3, [pc, #32]	@ (8005520 <UART_SetConfig+0x2f8>)
 80054fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005500:	e018      	b.n	8005534 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005502:	f7fe fb87 	bl	8003c14 <HAL_RCC_GetSysClockFreq>
 8005506:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005508:	e014      	b.n	8005534 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800550a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800550e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005510:	e010      	b.n	8005534 <UART_SetConfig+0x30c>
 8005512:	bf00      	nop
 8005514:	cfff69f3 	.word	0xcfff69f3
 8005518:	40008000 	.word	0x40008000
 800551c:	40013800 	.word	0x40013800
 8005520:	00f42400 	.word	0x00f42400
 8005524:	08008a1c 	.word	0x08008a1c
      default:
        pclk = 0U;
 8005528:	2300      	movs	r3, #0
 800552a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005532:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005536:	2b00      	cmp	r3, #0
 8005538:	f000 8084 	beq.w	8005644 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005540:	4a4b      	ldr	r2, [pc, #300]	@ (8005670 <UART_SetConfig+0x448>)
 8005542:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005546:	461a      	mov	r2, r3
 8005548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554a:	fbb3 f3f2 	udiv	r3, r3, r2
 800554e:	005a      	lsls	r2, r3, #1
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	085b      	lsrs	r3, r3, #1
 8005556:	441a      	add	r2, r3
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005560:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005562:	6a3b      	ldr	r3, [r7, #32]
 8005564:	2b0f      	cmp	r3, #15
 8005566:	d916      	bls.n	8005596 <UART_SetConfig+0x36e>
 8005568:	6a3b      	ldr	r3, [r7, #32]
 800556a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800556e:	d212      	bcs.n	8005596 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005570:	6a3b      	ldr	r3, [r7, #32]
 8005572:	b29b      	uxth	r3, r3
 8005574:	f023 030f 	bic.w	r3, r3, #15
 8005578:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800557a:	6a3b      	ldr	r3, [r7, #32]
 800557c:	085b      	lsrs	r3, r3, #1
 800557e:	b29b      	uxth	r3, r3
 8005580:	f003 0307 	and.w	r3, r3, #7
 8005584:	b29a      	uxth	r2, r3
 8005586:	8bfb      	ldrh	r3, [r7, #30]
 8005588:	4313      	orrs	r3, r2
 800558a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	8bfa      	ldrh	r2, [r7, #30]
 8005592:	60da      	str	r2, [r3, #12]
 8005594:	e056      	b.n	8005644 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800559c:	e052      	b.n	8005644 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800559e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80055a2:	3b01      	subs	r3, #1
 80055a4:	2b07      	cmp	r3, #7
 80055a6:	d822      	bhi.n	80055ee <UART_SetConfig+0x3c6>
 80055a8:	a201      	add	r2, pc, #4	@ (adr r2, 80055b0 <UART_SetConfig+0x388>)
 80055aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ae:	bf00      	nop
 80055b0:	080055d1 	.word	0x080055d1
 80055b4:	080055d9 	.word	0x080055d9
 80055b8:	080055ef 	.word	0x080055ef
 80055bc:	080055df 	.word	0x080055df
 80055c0:	080055ef 	.word	0x080055ef
 80055c4:	080055ef 	.word	0x080055ef
 80055c8:	080055ef 	.word	0x080055ef
 80055cc:	080055e7 	.word	0x080055e7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055d0:	f7fe fbb6 	bl	8003d40 <HAL_RCC_GetPCLK2Freq>
 80055d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80055d6:	e010      	b.n	80055fa <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055d8:	4b26      	ldr	r3, [pc, #152]	@ (8005674 <UART_SetConfig+0x44c>)
 80055da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80055dc:	e00d      	b.n	80055fa <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055de:	f7fe fb19 	bl	8003c14 <HAL_RCC_GetSysClockFreq>
 80055e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80055e4:	e009      	b.n	80055fa <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80055ec:	e005      	b.n	80055fa <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80055f8:	bf00      	nop
    }

    if (pclk != 0U)
 80055fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d021      	beq.n	8005644 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005604:	4a1a      	ldr	r2, [pc, #104]	@ (8005670 <UART_SetConfig+0x448>)
 8005606:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800560a:	461a      	mov	r2, r3
 800560c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	085b      	lsrs	r3, r3, #1
 8005618:	441a      	add	r2, r3
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005622:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005624:	6a3b      	ldr	r3, [r7, #32]
 8005626:	2b0f      	cmp	r3, #15
 8005628:	d909      	bls.n	800563e <UART_SetConfig+0x416>
 800562a:	6a3b      	ldr	r3, [r7, #32]
 800562c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005630:	d205      	bcs.n	800563e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005632:	6a3b      	ldr	r3, [r7, #32]
 8005634:	b29a      	uxth	r2, r3
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	60da      	str	r2, [r3, #12]
 800563c:	e002      	b.n	8005644 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	2201      	movs	r2, #1
 8005648:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	2201      	movs	r2, #1
 8005650:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	2200      	movs	r2, #0
 8005658:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	2200      	movs	r2, #0
 800565e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005660:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005664:	4618      	mov	r0, r3
 8005666:	3730      	adds	r7, #48	@ 0x30
 8005668:	46bd      	mov	sp, r7
 800566a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800566e:	bf00      	nop
 8005670:	08008a1c 	.word	0x08008a1c
 8005674:	00f42400 	.word	0x00f42400

08005678 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005684:	f003 0308 	and.w	r3, r3, #8
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00a      	beq.n	80056a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	430a      	orrs	r2, r1
 80056a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00a      	beq.n	80056c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	430a      	orrs	r2, r1
 80056c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c8:	f003 0302 	and.w	r3, r3, #2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00a      	beq.n	80056e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	430a      	orrs	r2, r1
 80056e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ea:	f003 0304 	and.w	r3, r3, #4
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00a      	beq.n	8005708 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	430a      	orrs	r2, r1
 8005706:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800570c:	f003 0310 	and.w	r3, r3, #16
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00a      	beq.n	800572a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	430a      	orrs	r2, r1
 8005728:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800572e:	f003 0320 	and.w	r3, r3, #32
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00a      	beq.n	800574c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	430a      	orrs	r2, r1
 800574a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005754:	2b00      	cmp	r3, #0
 8005756:	d01a      	beq.n	800578e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	430a      	orrs	r2, r1
 800576c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005772:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005776:	d10a      	bne.n	800578e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	430a      	orrs	r2, r1
 800578c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00a      	beq.n	80057b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	430a      	orrs	r2, r1
 80057ae:	605a      	str	r2, [r3, #4]
  }
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b098      	sub	sp, #96	@ 0x60
 80057c0:	af02      	add	r7, sp, #8
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057cc:	f7fc fb34 	bl	8001e38 <HAL_GetTick>
 80057d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0308 	and.w	r3, r3, #8
 80057dc:	2b08      	cmp	r3, #8
 80057de:	d12f      	bne.n	8005840 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057e8:	2200      	movs	r2, #0
 80057ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f88e 	bl	8005910 <UART_WaitOnFlagUntilTimeout>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d022      	beq.n	8005840 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005802:	e853 3f00 	ldrex	r3, [r3]
 8005806:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800580a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800580e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	461a      	mov	r2, r3
 8005816:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005818:	647b      	str	r3, [r7, #68]	@ 0x44
 800581a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800581e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005820:	e841 2300 	strex	r3, r2, [r1]
 8005824:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005826:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1e6      	bne.n	80057fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2220      	movs	r2, #32
 8005830:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e063      	b.n	8005908 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0304 	and.w	r3, r3, #4
 800584a:	2b04      	cmp	r3, #4
 800584c:	d149      	bne.n	80058e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800584e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005856:	2200      	movs	r2, #0
 8005858:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 f857 	bl	8005910 <UART_WaitOnFlagUntilTimeout>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d03c      	beq.n	80058e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005870:	e853 3f00 	ldrex	r3, [r3]
 8005874:	623b      	str	r3, [r7, #32]
   return(result);
 8005876:	6a3b      	ldr	r3, [r7, #32]
 8005878:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800587c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	461a      	mov	r2, r3
 8005884:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005886:	633b      	str	r3, [r7, #48]	@ 0x30
 8005888:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800588c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800588e:	e841 2300 	strex	r3, r2, [r1]
 8005892:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1e6      	bne.n	8005868 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	3308      	adds	r3, #8
 80058a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	e853 3f00 	ldrex	r3, [r3]
 80058a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f023 0301 	bic.w	r3, r3, #1
 80058b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	3308      	adds	r3, #8
 80058b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058ba:	61fa      	str	r2, [r7, #28]
 80058bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058be:	69b9      	ldr	r1, [r7, #24]
 80058c0:	69fa      	ldr	r2, [r7, #28]
 80058c2:	e841 2300 	strex	r3, r2, [r1]
 80058c6:	617b      	str	r3, [r7, #20]
   return(result);
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1e5      	bne.n	800589a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2220      	movs	r2, #32
 80058d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e012      	b.n	8005908 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2220      	movs	r2, #32
 80058e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2220      	movs	r2, #32
 80058ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3758      	adds	r7, #88	@ 0x58
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	603b      	str	r3, [r7, #0]
 800591c:	4613      	mov	r3, r2
 800591e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005920:	e04f      	b.n	80059c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005928:	d04b      	beq.n	80059c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800592a:	f7fc fa85 	bl	8001e38 <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	69ba      	ldr	r2, [r7, #24]
 8005936:	429a      	cmp	r2, r3
 8005938:	d302      	bcc.n	8005940 <UART_WaitOnFlagUntilTimeout+0x30>
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d101      	bne.n	8005944 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e04e      	b.n	80059e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0304 	and.w	r3, r3, #4
 800594e:	2b00      	cmp	r3, #0
 8005950:	d037      	beq.n	80059c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	2b80      	cmp	r3, #128	@ 0x80
 8005956:	d034      	beq.n	80059c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	2b40      	cmp	r3, #64	@ 0x40
 800595c:	d031      	beq.n	80059c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	69db      	ldr	r3, [r3, #28]
 8005964:	f003 0308 	and.w	r3, r3, #8
 8005968:	2b08      	cmp	r3, #8
 800596a:	d110      	bne.n	800598e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2208      	movs	r2, #8
 8005972:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f000 f838 	bl	80059ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2208      	movs	r2, #8
 800597e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e029      	b.n	80059e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	69db      	ldr	r3, [r3, #28]
 8005994:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005998:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800599c:	d111      	bne.n	80059c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80059a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f000 f81e 	bl	80059ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2220      	movs	r2, #32
 80059b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e00f      	b.n	80059e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	69da      	ldr	r2, [r3, #28]
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	4013      	ands	r3, r2
 80059cc:	68ba      	ldr	r2, [r7, #8]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	bf0c      	ite	eq
 80059d2:	2301      	moveq	r3, #1
 80059d4:	2300      	movne	r3, #0
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	461a      	mov	r2, r3
 80059da:	79fb      	ldrb	r3, [r7, #7]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d0a0      	beq.n	8005922 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}

080059ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059ea:	b480      	push	{r7}
 80059ec:	b095      	sub	sp, #84	@ 0x54
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059fa:	e853 3f00 	ldrex	r3, [r3]
 80059fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a10:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a12:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a18:	e841 2300 	strex	r3, r2, [r1]
 8005a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1e6      	bne.n	80059f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3308      	adds	r3, #8
 8005a2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	e853 3f00 	ldrex	r3, [r3]
 8005a32:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a3a:	f023 0301 	bic.w	r3, r3, #1
 8005a3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	3308      	adds	r3, #8
 8005a46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a50:	e841 2300 	strex	r3, r2, [r1]
 8005a54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1e3      	bne.n	8005a24 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d118      	bne.n	8005a96 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	e853 3f00 	ldrex	r3, [r3]
 8005a70:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	f023 0310 	bic.w	r3, r3, #16
 8005a78:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	461a      	mov	r2, r3
 8005a80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a82:	61bb      	str	r3, [r7, #24]
 8005a84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a86:	6979      	ldr	r1, [r7, #20]
 8005a88:	69ba      	ldr	r2, [r7, #24]
 8005a8a:	e841 2300 	strex	r3, r2, [r1]
 8005a8e:	613b      	str	r3, [r7, #16]
   return(result);
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1e6      	bne.n	8005a64 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2220      	movs	r2, #32
 8005a9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005aaa:	bf00      	nop
 8005aac:	3754      	adds	r7, #84	@ 0x54
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b084      	sub	sp, #16
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ac2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f7ff fb91 	bl	80051fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ada:	bf00      	nop
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b088      	sub	sp, #32
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	e853 3f00 	ldrex	r3, [r3]
 8005af6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005afe:	61fb      	str	r3, [r7, #28]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	461a      	mov	r2, r3
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	61bb      	str	r3, [r7, #24]
 8005b0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0c:	6979      	ldr	r1, [r7, #20]
 8005b0e:	69ba      	ldr	r2, [r7, #24]
 8005b10:	e841 2300 	strex	r3, r2, [r1]
 8005b14:	613b      	str	r3, [r7, #16]
   return(result);
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1e6      	bne.n	8005aea <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2220      	movs	r2, #32
 8005b20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f7ff fb5c 	bl	80051e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b30:	bf00      	nop
 8005b32:	3720      	adds	r7, #32
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d101      	bne.n	8005b8a <HAL_UARTEx_DisableFifoMode+0x16>
 8005b86:	2302      	movs	r3, #2
 8005b88:	e027      	b.n	8005bda <HAL_UARTEx_DisableFifoMode+0x66>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2224      	movs	r2, #36	@ 0x24
 8005b96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f022 0201 	bic.w	r2, r2, #1
 8005bb0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005bb8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2220      	movs	r2, #32
 8005bcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3714      	adds	r7, #20
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b084      	sub	sp, #16
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
 8005bee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d101      	bne.n	8005bfe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005bfa:	2302      	movs	r3, #2
 8005bfc:	e02d      	b.n	8005c5a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2224      	movs	r2, #36	@ 0x24
 8005c0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 0201 	bic.w	r2, r2, #1
 8005c24:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	683a      	ldr	r2, [r7, #0]
 8005c36:	430a      	orrs	r2, r1
 8005c38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f850 	bl	8005ce0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2220      	movs	r2, #32
 8005c4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b084      	sub	sp, #16
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
 8005c6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d101      	bne.n	8005c7a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005c76:	2302      	movs	r3, #2
 8005c78:	e02d      	b.n	8005cd6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2224      	movs	r2, #36	@ 0x24
 8005c86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 0201 	bic.w	r2, r2, #1
 8005ca0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	683a      	ldr	r2, [r7, #0]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 f812 	bl	8005ce0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3710      	adds	r7, #16
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
	...

08005ce0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d108      	bne.n	8005d02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005d00:	e031      	b.n	8005d66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005d02:	2308      	movs	r3, #8
 8005d04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005d06:	2308      	movs	r3, #8
 8005d08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	0e5b      	lsrs	r3, r3, #25
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	f003 0307 	and.w	r3, r3, #7
 8005d18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	0f5b      	lsrs	r3, r3, #29
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	f003 0307 	and.w	r3, r3, #7
 8005d28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d2a:	7bbb      	ldrb	r3, [r7, #14]
 8005d2c:	7b3a      	ldrb	r2, [r7, #12]
 8005d2e:	4911      	ldr	r1, [pc, #68]	@ (8005d74 <UARTEx_SetNbDataToProcess+0x94>)
 8005d30:	5c8a      	ldrb	r2, [r1, r2]
 8005d32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005d36:	7b3a      	ldrb	r2, [r7, #12]
 8005d38:	490f      	ldr	r1, [pc, #60]	@ (8005d78 <UARTEx_SetNbDataToProcess+0x98>)
 8005d3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d48:	7bfb      	ldrb	r3, [r7, #15]
 8005d4a:	7b7a      	ldrb	r2, [r7, #13]
 8005d4c:	4909      	ldr	r1, [pc, #36]	@ (8005d74 <UARTEx_SetNbDataToProcess+0x94>)
 8005d4e:	5c8a      	ldrb	r2, [r1, r2]
 8005d50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005d54:	7b7a      	ldrb	r2, [r7, #13]
 8005d56:	4908      	ldr	r1, [pc, #32]	@ (8005d78 <UARTEx_SetNbDataToProcess+0x98>)
 8005d58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005d66:	bf00      	nop
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	08008a34 	.word	0x08008a34
 8005d78:	08008a3c 	.word	0x08008a3c

08005d7c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005d84:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005d88:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	43db      	mvns	r3, r3
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3714      	adds	r7, #20
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b085      	sub	sp, #20
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	60f8      	str	r0, [r7, #12]
 8005dba:	1d3b      	adds	r3, r7, #4
 8005dbc:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3714      	adds	r7, #20
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8005dee:	b5b0      	push	{r4, r5, r7, lr}
 8005df0:	b0ce      	sub	sp, #312	@ 0x138
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	4605      	mov	r5, r0
 8005df6:	460c      	mov	r4, r1
 8005df8:	4610      	mov	r0, r2
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005e00:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8005e04:	462a      	mov	r2, r5
 8005e06:	701a      	strb	r2, [r3, #0]
 8005e08:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005e0c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8005e10:	4622      	mov	r2, r4
 8005e12:	801a      	strh	r2, [r3, #0]
 8005e14:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005e18:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	801a      	strh	r2, [r3, #0]
 8005e20:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005e24:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8005e28:	460a      	mov	r2, r1
 8005e2a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8005e2c:	f107 0310 	add.w	r3, r7, #16
 8005e30:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8005e34:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8005e38:	3308      	adds	r3, #8
 8005e3a:	f107 0210 	add.w	r2, r7, #16
 8005e3e:	4413      	add	r3, r2
 8005e40:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8005e44:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8005e48:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8005e4c:	4413      	add	r3, r2
 8005e4e:	3309      	adds	r3, #9
 8005e50:	f107 0210 	add.w	r2, r7, #16
 8005e54:	4413      	add	r3, r2
 8005e56:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005e5a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005e5e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005e62:	2200      	movs	r2, #0
 8005e64:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005e66:	2300      	movs	r3, #0
 8005e68:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8005e6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005e70:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005e74:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8005e78:	7812      	ldrb	r2, [r2, #0]
 8005e7a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005e7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005e80:	3301      	adds	r3, #1
 8005e82:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8005e86:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005e8a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005e8e:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8005e92:	8812      	ldrh	r2, [r2, #0]
 8005e94:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8005e98:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005e9c:	3302      	adds	r3, #2
 8005e9e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8005ea2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005ea6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005eaa:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8005eae:	8812      	ldrh	r2, [r2, #0]
 8005eb0:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8005eb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005eb8:	3302      	adds	r3, #2
 8005eba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8005ebe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005ec2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005ec6:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8005eca:	7812      	ldrb	r2, [r2, #0]
 8005ecc:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005ece:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8005ed8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005edc:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8005ee0:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8005ee2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8005eec:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005ef0:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8005ef4:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8005ef6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005efa:	3301      	adds	r3, #1
 8005efc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8005f00:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005f04:	3308      	adds	r3, #8
 8005f06:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8005f0a:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f000 fc21 	bl	8006756 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8005f14:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8005f18:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8005f22:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005f26:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8005f2a:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8005f2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005f30:	3301      	adds	r3, #1
 8005f32:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8005f36:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8005f40:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8005f44:	4618      	mov	r0, r3
 8005f46:	f000 fc06 	bl	8006756 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8005f4a:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8005f4e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005f52:	4413      	add	r3, r2
 8005f54:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8005f58:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005f5c:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8005f60:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8005f62:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005f66:	3302      	adds	r3, #2
 8005f68:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8005f6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005f70:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8005f74:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8005f76:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005f7a:	3302      	adds	r3, #2
 8005f7c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005f80:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005f84:	2218      	movs	r2, #24
 8005f86:	2100      	movs	r1, #0
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f000 fbf4 	bl	8006776 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005f8e:	233f      	movs	r3, #63	@ 0x3f
 8005f90:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8005f94:	2383      	movs	r3, #131	@ 0x83
 8005f96:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005f9a:	f107 0310 	add.w	r3, r7, #16
 8005f9e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005fa2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005fa6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005faa:	f107 030f 	add.w	r3, r7, #15
 8005fae:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005fb8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 fe50 	bl	8006c64 <hci_send_req>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	da01      	bge.n	8005fce <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8005fca:	23ff      	movs	r3, #255	@ 0xff
 8005fcc:	e004      	b.n	8005fd8 <aci_gap_set_discoverable+0x1ea>
  return status;
 8005fce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005fd2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005fd6:	781b      	ldrb	r3, [r3, #0]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bdb0      	pop	{r4, r5, r7, pc}

08005fe2 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8005fe2:	b590      	push	{r4, r7, lr}
 8005fe4:	b0cd      	sub	sp, #308	@ 0x134
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	4604      	mov	r4, r0
 8005fea:	4608      	mov	r0, r1
 8005fec:	4611      	mov	r1, r2
 8005fee:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005ff2:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8005ff6:	6013      	str	r3, [r2, #0]
 8005ff8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ffc:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006000:	4622      	mov	r2, r4
 8006002:	701a      	strb	r2, [r3, #0]
 8006004:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006008:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800600c:	4602      	mov	r2, r0
 800600e:	701a      	strb	r2, [r3, #0]
 8006010:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006014:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8006018:	460a      	mov	r2, r1
 800601a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800601c:	f107 0310 	add.w	r3, r7, #16
 8006020:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006024:	f107 0308 	add.w	r3, r7, #8
 8006028:	2207      	movs	r2, #7
 800602a:	2100      	movs	r1, #0
 800602c:	4618      	mov	r0, r3
 800602e:	f000 fba2 	bl	8006776 <Osal_MemSet>
  int index_input = 0;
 8006032:	2300      	movs	r3, #0
 8006034:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 8006038:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800603c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006040:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006044:	7812      	ldrb	r2, [r2, #0]
 8006046:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006048:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800604c:	3301      	adds	r3, #1
 800604e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8006052:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006056:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800605a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800605e:	7812      	ldrb	r2, [r2, #0]
 8006060:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006062:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006066:	3301      	adds	r3, #1
 8006068:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 800606c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006070:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006074:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8006078:	7812      	ldrb	r2, [r2, #0]
 800607a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800607c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006080:	3301      	adds	r3, #1
 8006082:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006086:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800608a:	2218      	movs	r2, #24
 800608c:	2100      	movs	r1, #0
 800608e:	4618      	mov	r0, r3
 8006090:	f000 fb71 	bl	8006776 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006094:	233f      	movs	r3, #63	@ 0x3f
 8006096:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 800609a:	238a      	movs	r3, #138	@ 0x8a
 800609c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80060a0:	f107 0310 	add.w	r3, r7, #16
 80060a4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80060a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80060ac:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 80060b0:	f107 0308 	add.w	r3, r7, #8
 80060b4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 80060b8:	2307      	movs	r3, #7
 80060ba:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80060be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80060c2:	2100      	movs	r1, #0
 80060c4:	4618      	mov	r0, r3
 80060c6:	f000 fdcd 	bl	8006c64 <hci_send_req>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	da01      	bge.n	80060d4 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 80060d0:	23ff      	movs	r3, #255	@ 0xff
 80060d2:	e02e      	b.n	8006132 <aci_gap_init+0x150>
  if ( resp.Status )
 80060d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80060d8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d005      	beq.n	80060ee <aci_gap_init+0x10c>
    return resp.Status;
 80060e2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80060e6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	e021      	b.n	8006132 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 80060ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80060f2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80060f6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006100:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8006108:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800610c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006110:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006114:	b29a      	uxth	r2, r3
 8006116:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800611a:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800611c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006120:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006124:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8006128:	b29a      	uxth	r2, r3
 800612a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800612e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8006138:	46bd      	mov	sp, r7
 800613a:	bd90      	pop	{r4, r7, pc}

0800613c <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b0cc      	sub	sp, #304	@ 0x130
 8006140:	af00      	add	r7, sp, #0
 8006142:	4602      	mov	r2, r0
 8006144:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006148:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800614c:	6019      	str	r1, [r3, #0]
 800614e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006152:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006156:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8006158:	f107 0310 	add.w	r3, r7, #16
 800615c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006160:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006164:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006168:	2200      	movs	r2, #0
 800616a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800616c:	2300      	movs	r3, #0
 800616e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8006172:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006176:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800617a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800617e:	7812      	ldrb	r2, [r2, #0]
 8006180:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006182:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006186:	3301      	adds	r3, #1
 8006188:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800618c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006190:	1c58      	adds	r0, r3, #1
 8006192:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006196:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800619a:	781a      	ldrb	r2, [r3, #0]
 800619c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80061a0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80061a4:	6819      	ldr	r1, [r3, #0]
 80061a6:	f000 fad6 	bl	8006756 <Osal_MemCpy>
  index_input += AdvDataLen;
 80061aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80061ae:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80061b8:	4413      	add	r3, r2
 80061ba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80061be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80061c2:	2218      	movs	r2, #24
 80061c4:	2100      	movs	r1, #0
 80061c6:	4618      	mov	r0, r3
 80061c8:	f000 fad5 	bl	8006776 <Osal_MemSet>
  rq.ogf = 0x3f;
 80061cc:	233f      	movs	r3, #63	@ 0x3f
 80061ce:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 80061d2:	238e      	movs	r3, #142	@ 0x8e
 80061d4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80061d8:	f107 0310 	add.w	r3, r7, #16
 80061dc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80061e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80061e4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80061e8:	f107 030f 	add.w	r3, r7, #15
 80061ec:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80061f0:	2301      	movs	r3, #1
 80061f2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80061f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80061fa:	2100      	movs	r1, #0
 80061fc:	4618      	mov	r0, r3
 80061fe:	f000 fd31 	bl	8006c64 <hci_send_req>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	da01      	bge.n	800620c <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8006208:	23ff      	movs	r3, #255	@ 0xff
 800620a:	e004      	b.n	8006216 <aci_gap_update_adv_data+0xda>
  return status;
 800620c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006210:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006214:	781b      	ldrb	r3, [r3, #0]
}
 8006216:	4618      	mov	r0, r3
 8006218:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <aci_gap_delete_ad_type>:

tBleStatus aci_gap_delete_ad_type( uint8_t ADType )
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b0cc      	sub	sp, #304	@ 0x130
 8006224:	af00      	add	r7, sp, #0
 8006226:	4602      	mov	r2, r0
 8006228:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800622c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006230:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_delete_ad_type_cp0 *cp0 = (aci_gap_delete_ad_type_cp0*)(cmd_buffer);
 8006232:	f107 0310 	add.w	r3, r7, #16
 8006236:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800623a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800623e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006242:	2200      	movs	r2, #0
 8006244:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006246:	2300      	movs	r3, #0
 8006248:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ADType = ADType;
 800624c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006250:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006254:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006258:	7812      	ldrb	r2, [r2, #0]
 800625a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800625c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006260:	3301      	adds	r3, #1
 8006262:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006266:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800626a:	2218      	movs	r2, #24
 800626c:	2100      	movs	r1, #0
 800626e:	4618      	mov	r0, r3
 8006270:	f000 fa81 	bl	8006776 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006274:	233f      	movs	r3, #63	@ 0x3f
 8006276:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08f;
 800627a:	238f      	movs	r3, #143	@ 0x8f
 800627c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006280:	f107 0310 	add.w	r3, r7, #16
 8006284:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006288:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800628c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006290:	f107 030f 	add.w	r3, r7, #15
 8006294:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006298:	2301      	movs	r3, #1
 800629a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800629e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80062a2:	2100      	movs	r1, #0
 80062a4:	4618      	mov	r0, r3
 80062a6:	f000 fcdd 	bl	8006c64 <hci_send_req>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	da01      	bge.n	80062b4 <aci_gap_delete_ad_type+0x94>
    return BLE_STATUS_TIMEOUT;
 80062b0:	23ff      	movs	r3, #255	@ 0xff
 80062b2:	e004      	b.n	80062be <aci_gap_delete_ad_type+0x9e>
  return status;
 80062b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80062b8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80062bc:	781b      	ldrb	r3, [r3, #0]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b088      	sub	sp, #32
 80062cc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80062ce:	2300      	movs	r3, #0
 80062d0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80062d2:	f107 0308 	add.w	r3, r7, #8
 80062d6:	2218      	movs	r2, #24
 80062d8:	2100      	movs	r1, #0
 80062da:	4618      	mov	r0, r3
 80062dc:	f000 fa4b 	bl	8006776 <Osal_MemSet>
  rq.ogf = 0x3f;
 80062e0:	233f      	movs	r3, #63	@ 0x3f
 80062e2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80062e4:	f240 1301 	movw	r3, #257	@ 0x101
 80062e8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80062ea:	1dfb      	adds	r3, r7, #7
 80062ec:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80062ee:	2301      	movs	r3, #1
 80062f0:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80062f2:	f107 0308 	add.w	r3, r7, #8
 80062f6:	2100      	movs	r1, #0
 80062f8:	4618      	mov	r0, r3
 80062fa:	f000 fcb3 	bl	8006c64 <hci_send_req>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	da01      	bge.n	8006308 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8006304:	23ff      	movs	r3, #255	@ 0xff
 8006306:	e000      	b.n	800630a <aci_gatt_init+0x42>
  return status;
 8006308:	79fb      	ldrb	r3, [r7, #7]
}
 800630a:	4618      	mov	r0, r3
 800630c:	3720      	adds	r7, #32
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8006312:	b5b0      	push	{r4, r5, r7, lr}
 8006314:	b0cc      	sub	sp, #304	@ 0x130
 8006316:	af00      	add	r7, sp, #0
 8006318:	4605      	mov	r5, r0
 800631a:	460c      	mov	r4, r1
 800631c:	4610      	mov	r0, r2
 800631e:	4619      	mov	r1, r3
 8006320:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006324:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006328:	462a      	mov	r2, r5
 800632a:	801a      	strh	r2, [r3, #0]
 800632c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006330:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006334:	4622      	mov	r2, r4
 8006336:	801a      	strh	r2, [r3, #0]
 8006338:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800633c:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8006340:	4602      	mov	r2, r0
 8006342:	701a      	strb	r2, [r3, #0]
 8006344:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006348:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800634c:	460a      	mov	r2, r1
 800634e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8006350:	f107 0310 	add.w	r3, r7, #16
 8006354:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006358:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800635c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006360:	2200      	movs	r2, #0
 8006362:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006364:	2300      	movs	r3, #0
 8006366:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800636a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800636e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006372:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006376:	8812      	ldrh	r2, [r2, #0]
 8006378:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800637a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800637e:	3302      	adds	r3, #2
 8006380:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8006384:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006388:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800638c:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8006390:	8812      	ldrh	r2, [r2, #0]
 8006392:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8006394:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006398:	3302      	adds	r3, #2
 800639a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 800639e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80063a2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80063a6:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 80063aa:	7812      	ldrb	r2, [r2, #0]
 80063ac:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80063ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80063b2:	3301      	adds	r3, #1
 80063b4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80063b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80063bc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80063c0:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 80063c4:	7812      	ldrb	r2, [r2, #0]
 80063c6:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80063c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80063cc:	3301      	adds	r3, #1
 80063ce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80063d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80063d6:	1d98      	adds	r0, r3, #6
 80063d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80063dc:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	461a      	mov	r2, r3
 80063e4:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80063e8:	f000 f9b5 	bl	8006756 <Osal_MemCpy>
  index_input += Char_Value_Length;
 80063ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80063f0:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80063fa:	4413      	add	r3, r2
 80063fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006400:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006404:	2218      	movs	r2, #24
 8006406:	2100      	movs	r1, #0
 8006408:	4618      	mov	r0, r3
 800640a:	f000 f9b4 	bl	8006776 <Osal_MemSet>
  rq.ogf = 0x3f;
 800640e:	233f      	movs	r3, #63	@ 0x3f
 8006410:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8006414:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8006418:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800641c:	f107 0310 	add.w	r3, r7, #16
 8006420:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006424:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006428:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800642c:	f107 030f 	add.w	r3, r7, #15
 8006430:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006434:	2301      	movs	r3, #1
 8006436:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800643a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800643e:	2100      	movs	r1, #0
 8006440:	4618      	mov	r0, r3
 8006442:	f000 fc0f 	bl	8006c64 <hci_send_req>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	da01      	bge.n	8006450 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800644c:	23ff      	movs	r3, #255	@ 0xff
 800644e:	e004      	b.n	800645a <aci_gatt_update_char_value+0x148>
  return status;
 8006450:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006454:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006458:	781b      	ldrb	r3, [r3, #0]
}
 800645a:	4618      	mov	r0, r3
 800645c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006460:	46bd      	mov	sp, r7
 8006462:	bdb0      	pop	{r4, r5, r7, pc}

08006464 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b0cc      	sub	sp, #304	@ 0x130
 8006468:	af00      	add	r7, sp, #0
 800646a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800646e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006472:	601a      	str	r2, [r3, #0]
 8006474:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006478:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800647c:	4602      	mov	r2, r0
 800647e:	701a      	strb	r2, [r3, #0]
 8006480:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006484:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006488:	460a      	mov	r2, r1
 800648a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800648c:	f107 0310 	add.w	r3, r7, #16
 8006490:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006494:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006498:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800649c:	2200      	movs	r2, #0
 800649e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80064a0:	2300      	movs	r3, #0
 80064a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 80064a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80064aa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80064ae:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80064b2:	7812      	ldrb	r2, [r2, #0]
 80064b4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80064b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80064ba:	3301      	adds	r3, #1
 80064bc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 80064c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80064c4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80064c8:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80064cc:	7812      	ldrb	r2, [r2, #0]
 80064ce:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80064d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80064d4:	3301      	adds	r3, #1
 80064d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80064da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80064de:	1c98      	adds	r0, r3, #2
 80064e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80064e4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80064e8:	781a      	ldrb	r2, [r3, #0]
 80064ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80064ee:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80064f2:	6819      	ldr	r1, [r3, #0]
 80064f4:	f000 f92f 	bl	8006756 <Osal_MemCpy>
  index_input += Length;
 80064f8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80064fc:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006506:	4413      	add	r3, r2
 8006508:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800650c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006510:	2218      	movs	r2, #24
 8006512:	2100      	movs	r1, #0
 8006514:	4618      	mov	r0, r3
 8006516:	f000 f92e 	bl	8006776 <Osal_MemSet>
  rq.ogf = 0x3f;
 800651a:	233f      	movs	r3, #63	@ 0x3f
 800651c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8006520:	230c      	movs	r3, #12
 8006522:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006526:	f107 0310 	add.w	r3, r7, #16
 800652a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800652e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006532:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006536:	f107 030f 	add.w	r3, r7, #15
 800653a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800653e:	2301      	movs	r3, #1
 8006540:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006544:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006548:	2100      	movs	r1, #0
 800654a:	4618      	mov	r0, r3
 800654c:	f000 fb8a 	bl	8006c64 <hci_send_req>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	da01      	bge.n	800655a <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8006556:	23ff      	movs	r3, #255	@ 0xff
 8006558:	e004      	b.n	8006564 <aci_hal_write_config_data+0x100>
  return status;
 800655a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800655e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006562:	781b      	ldrb	r3, [r3, #0]
}
 8006564:	4618      	mov	r0, r3
 8006566:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800656e:	b580      	push	{r7, lr}
 8006570:	b0cc      	sub	sp, #304	@ 0x130
 8006572:	af00      	add	r7, sp, #0
 8006574:	4602      	mov	r2, r0
 8006576:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800657a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800657e:	701a      	strb	r2, [r3, #0]
 8006580:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006584:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006588:	460a      	mov	r2, r1
 800658a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800658c:	f107 0310 	add.w	r3, r7, #16
 8006590:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006594:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006598:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800659c:	2200      	movs	r2, #0
 800659e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80065a0:	2300      	movs	r3, #0
 80065a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 80065a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80065aa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80065ae:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80065b2:	7812      	ldrb	r2, [r2, #0]
 80065b4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80065b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80065ba:	3301      	adds	r3, #1
 80065bc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 80065c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80065c4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80065c8:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80065cc:	7812      	ldrb	r2, [r2, #0]
 80065ce:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80065d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80065d4:	3301      	adds	r3, #1
 80065d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80065da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80065de:	2218      	movs	r2, #24
 80065e0:	2100      	movs	r1, #0
 80065e2:	4618      	mov	r0, r3
 80065e4:	f000 f8c7 	bl	8006776 <Osal_MemSet>
  rq.ogf = 0x3f;
 80065e8:	233f      	movs	r3, #63	@ 0x3f
 80065ea:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 80065ee:	230f      	movs	r3, #15
 80065f0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80065f4:	f107 0310 	add.w	r3, r7, #16
 80065f8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80065fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006600:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006604:	f107 030f 	add.w	r3, r7, #15
 8006608:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800660c:	2301      	movs	r3, #1
 800660e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006612:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006616:	2100      	movs	r1, #0
 8006618:	4618      	mov	r0, r3
 800661a:	f000 fb23 	bl	8006c64 <hci_send_req>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	da01      	bge.n	8006628 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8006624:	23ff      	movs	r3, #255	@ 0xff
 8006626:	e004      	b.n	8006632 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8006628:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800662c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006630:	781b      	ldrb	r3, [r3, #0]
}
 8006632:	4618      	mov	r0, r3
 8006634:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b088      	sub	sp, #32
 8006640:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006642:	2300      	movs	r3, #0
 8006644:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006646:	f107 0308 	add.w	r3, r7, #8
 800664a:	2218      	movs	r2, #24
 800664c:	2100      	movs	r1, #0
 800664e:	4618      	mov	r0, r3
 8006650:	f000 f891 	bl	8006776 <Osal_MemSet>
  rq.ogf = 0x03;
 8006654:	2303      	movs	r3, #3
 8006656:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8006658:	2303      	movs	r3, #3
 800665a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800665c:	1dfb      	adds	r3, r7, #7
 800665e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006660:	2301      	movs	r3, #1
 8006662:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006664:	f107 0308 	add.w	r3, r7, #8
 8006668:	2100      	movs	r1, #0
 800666a:	4618      	mov	r0, r3
 800666c:	f000 fafa 	bl	8006c64 <hci_send_req>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	da01      	bge.n	800667a <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006676:	23ff      	movs	r3, #255	@ 0xff
 8006678:	e000      	b.n	800667c <hci_reset+0x40>
  return status;
 800667a:	79fb      	ldrb	r3, [r7, #7]
}
 800667c:	4618      	mov	r0, r3
 800667e:	3720      	adds	r7, #32
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <hci_le_set_scan_response_data>:
  return status;
}

tBleStatus hci_le_set_scan_response_data( uint8_t Scan_Response_Data_Length,
                                          const uint8_t* Scan_Response_Data )
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b0cc      	sub	sp, #304	@ 0x130
 8006688:	af00      	add	r7, sp, #0
 800668a:	4602      	mov	r2, r0
 800668c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006690:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006694:	6019      	str	r1, [r3, #0]
 8006696:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800669a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800669e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
 80066a0:	f107 0310 	add.w	r3, r7, #16
 80066a4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80066a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80066ac:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80066b0:	2200      	movs	r2, #0
 80066b2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80066b4:	2300      	movs	r3, #0
 80066b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Scan_Response_Data_Length = Scan_Response_Data_Length;
 80066ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80066be:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80066c2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80066c6:	7812      	ldrb	r2, [r2, #0]
 80066c8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80066ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80066ce:	3301      	adds	r3, #1
 80066d0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Scan_Response_Data, (const void*)Scan_Response_Data, 31 );
 80066d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80066d8:	1c58      	adds	r0, r3, #1
 80066da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80066de:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80066e2:	221f      	movs	r2, #31
 80066e4:	6819      	ldr	r1, [r3, #0]
 80066e6:	f000 f836 	bl	8006756 <Osal_MemCpy>
  index_input += 31;
 80066ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80066ee:	331f      	adds	r3, #31
 80066f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80066f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80066f8:	2218      	movs	r2, #24
 80066fa:	2100      	movs	r1, #0
 80066fc:	4618      	mov	r0, r3
 80066fe:	f000 f83a 	bl	8006776 <Osal_MemSet>
  rq.ogf = 0x08;
 8006702:	2308      	movs	r3, #8
 8006704:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x009;
 8006708:	2309      	movs	r3, #9
 800670a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800670e:	f107 0310 	add.w	r3, r7, #16
 8006712:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006716:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800671a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800671e:	f107 030f 	add.w	r3, r7, #15
 8006722:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006726:	2301      	movs	r3, #1
 8006728:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800672c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006730:	2100      	movs	r1, #0
 8006732:	4618      	mov	r0, r3
 8006734:	f000 fa96 	bl	8006c64 <hci_send_req>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	da01      	bge.n	8006742 <hci_le_set_scan_response_data+0xbe>
    return BLE_STATUS_TIMEOUT;
 800673e:	23ff      	movs	r3, #255	@ 0xff
 8006740:	e004      	b.n	800674c <hci_le_set_scan_response_data+0xc8>
  return status;
 8006742:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006746:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800674a:	781b      	ldrb	r3, [r3, #0]
}
 800674c:	4618      	mov	r0, r3
 800674e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b084      	sub	sp, #16
 800675a:	af00      	add	r7, sp, #0
 800675c:	60f8      	str	r0, [r7, #12]
 800675e:	60b9      	str	r1, [r7, #8]
 8006760:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	68b9      	ldr	r1, [r7, #8]
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f002 f806 	bl	8008778 <memcpy>
 800676c:	4603      	mov	r3, r0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8006776:	b580      	push	{r7, lr}
 8006778:	b084      	sub	sp, #16
 800677a:	af00      	add	r7, sp, #0
 800677c:	60f8      	str	r0, [r7, #12]
 800677e:	60b9      	str	r1, [r7, #8]
 8006780:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	68b9      	ldr	r1, [r7, #8]
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f001 ffca 	bl	8008720 <memset>
 800678c:	4603      	mov	r3, r0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3710      	adds	r7, #16
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8006796:	b480      	push	{r7}
 8006798:	af00      	add	r7, sp, #0
  return;
 800679a:	bf00      	nop
}
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 80067a4:	b480      	push	{r7}
 80067a6:	af00      	add	r7, sp, #0
  return;
 80067a8:	bf00      	nop
}
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 80067b2:	b480      	push	{r7}
 80067b4:	af00      	add	r7, sp, #0
  return;
 80067b6:	bf00      	nop
}
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 80067c0:	b480      	push	{r7}
 80067c2:	af00      	add	r7, sp, #0
  return;
 80067c4:	bf00      	nop
}
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 80067ce:	b480      	push	{r7}
 80067d0:	af00      	add	r7, sp, #0
  return;
 80067d2:	bf00      	nop
}
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 80067dc:	b480      	push	{r7}
 80067de:	af00      	add	r7, sp, #0
  return;
 80067e0:	bf00      	nop
}
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr

080067ea <HRS_Init>:
__WEAK void HRS_Init( void )
{
 80067ea:	b480      	push	{r7}
 80067ec:	af00      	add	r7, sp, #0
  return;
 80067ee:	bf00      	nop
}
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 80067f8:	b480      	push	{r7}
 80067fa:	af00      	add	r7, sp, #0
  return;
 80067fc:	bf00      	nop
}
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8006806:	b480      	push	{r7}
 8006808:	af00      	add	r7, sp, #0
  return;
 800680a:	bf00      	nop
}
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8006814:	b480      	push	{r7}
 8006816:	af00      	add	r7, sp, #0
  return;
 8006818:	bf00      	nop
}
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr

08006822 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8006822:	b480      	push	{r7}
 8006824:	af00      	add	r7, sp, #0
  return;
 8006826:	bf00      	nop
}
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8006830:	b480      	push	{r7}
 8006832:	af00      	add	r7, sp, #0
  return;
 8006834:	bf00      	nop
}
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr

0800683e <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800683e:	b480      	push	{r7}
 8006840:	af00      	add	r7, sp, #0
  return;
 8006842:	bf00      	nop
}
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800684c:	b480      	push	{r7}
 800684e:	af00      	add	r7, sp, #0
  return;
 8006850:	bf00      	nop
}
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr

0800685a <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800685a:	b480      	push	{r7}
 800685c:	af00      	add	r7, sp, #0
  return;
 800685e:	bf00      	nop
}
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8006868:	b480      	push	{r7}
 800686a:	af00      	add	r7, sp, #0
  return;
 800686c:	bf00      	nop
}
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr

08006876 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8006876:	b480      	push	{r7}
 8006878:	af00      	add	r7, sp, #0
  return;
 800687a:	bf00      	nop
}
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 8006884:	b480      	push	{r7}
 8006886:	af00      	add	r7, sp, #0
  return;
 8006888:	bf00      	nop
}
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
	...

08006894 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8006894:	b580      	push	{r7, lr}
 8006896:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8006898:	4b04      	ldr	r3, [pc, #16]	@ (80068ac <SVCCTL_Init+0x18>)
 800689a:	2200      	movs	r2, #0
 800689c:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800689e:	4b04      	ldr	r3, [pc, #16]	@ (80068b0 <SVCCTL_Init+0x1c>)
 80068a0:	2200      	movs	r2, #0
 80068a2:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 80068a4:	f000 f806 	bl	80068b4 <SVCCTL_SvcInit>

  return;
 80068a8:	bf00      	nop
}
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	2000001c 	.word	0x2000001c
 80068b0:	2000003c 	.word	0x2000003c

080068b4 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	af00      	add	r7, sp, #0
  BAS_Init();
 80068b8:	f7ff ff6d 	bl	8006796 <BAS_Init>

  BLS_Init();
 80068bc:	f7ff ff72 	bl	80067a4 <BLS_Init>

  CRS_STM_Init();
 80068c0:	f7ff ff77 	bl	80067b2 <CRS_STM_Init>

  DIS_Init();
 80068c4:	f7ff ff7c 	bl	80067c0 <DIS_Init>

  EDS_STM_Init();
 80068c8:	f7ff ff81 	bl	80067ce <EDS_STM_Init>

  HIDS_Init();
 80068cc:	f7ff ff86 	bl	80067dc <HIDS_Init>

  HRS_Init();
 80068d0:	f7ff ff8b 	bl	80067ea <HRS_Init>

  HTS_Init();
 80068d4:	f7ff ff90 	bl	80067f8 <HTS_Init>

  IAS_Init();
 80068d8:	f7ff ff95 	bl	8006806 <IAS_Init>

  LLS_Init();
 80068dc:	f7ff ff9a 	bl	8006814 <LLS_Init>

  TPS_Init();
 80068e0:	f7ff ff9f 	bl	8006822 <TPS_Init>

  MOTENV_STM_Init();
 80068e4:	f7ff ffa4 	bl	8006830 <MOTENV_STM_Init>

  P2PS_STM_Init();
 80068e8:	f7ff ffa9 	bl	800683e <P2PS_STM_Init>

  ZDD_STM_Init();
 80068ec:	f7ff ffae 	bl	800684c <ZDD_STM_Init>

  OTAS_STM_Init();
 80068f0:	f7ff ffb3 	bl	800685a <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80068f4:	f7ff ffbf 	bl	8006876 <BVOPUS_STM_Init>

  MESH_Init();
 80068f8:	f7ff ffb6 	bl	8006868 <MESH_Init>

  SVCCTL_InitCustomSvc();
 80068fc:	f7ff ffc2 	bl	8006884 <SVCCTL_InitCustomSvc>
  
  return;
 8006900:	bf00      	nop
}
 8006902:	bd80      	pop	{r7, pc}

08006904 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b086      	sub	sp, #24
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	3301      	adds	r3, #1
 8006910:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8006912:	2300      	movs	r3, #0
 8006914:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	2bff      	cmp	r3, #255	@ 0xff
 800691c:	d125      	bne.n	800696a <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	3302      	adds	r3, #2
 8006922:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	881b      	ldrh	r3, [r3, #0]
 8006928:	b29b      	uxth	r3, r3
 800692a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800692e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006932:	d118      	bne.n	8006966 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8006934:	2300      	movs	r3, #0
 8006936:	757b      	strb	r3, [r7, #21]
 8006938:	e00d      	b.n	8006956 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800693a:	7d7b      	ldrb	r3, [r7, #21]
 800693c:	4a1a      	ldr	r2, [pc, #104]	@ (80069a8 <SVCCTL_UserEvtRx+0xa4>)
 800693e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	4798      	blx	r3
 8006946:	4603      	mov	r3, r0
 8006948:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800694a:	7dfb      	ldrb	r3, [r7, #23]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d108      	bne.n	8006962 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8006950:	7d7b      	ldrb	r3, [r7, #21]
 8006952:	3301      	adds	r3, #1
 8006954:	757b      	strb	r3, [r7, #21]
 8006956:	4b14      	ldr	r3, [pc, #80]	@ (80069a8 <SVCCTL_UserEvtRx+0xa4>)
 8006958:	7f1b      	ldrb	r3, [r3, #28]
 800695a:	7d7a      	ldrb	r2, [r7, #21]
 800695c:	429a      	cmp	r2, r3
 800695e:	d3ec      	bcc.n	800693a <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8006960:	e002      	b.n	8006968 <SVCCTL_UserEvtRx+0x64>
              break;
 8006962:	bf00      	nop
          break;
 8006964:	e000      	b.n	8006968 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8006966:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8006968:	e000      	b.n	800696c <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800696a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800696c:	7dfb      	ldrb	r3, [r7, #23]
 800696e:	2b02      	cmp	r3, #2
 8006970:	d00f      	beq.n	8006992 <SVCCTL_UserEvtRx+0x8e>
 8006972:	2b02      	cmp	r3, #2
 8006974:	dc10      	bgt.n	8006998 <SVCCTL_UserEvtRx+0x94>
 8006976:	2b00      	cmp	r3, #0
 8006978:	d002      	beq.n	8006980 <SVCCTL_UserEvtRx+0x7c>
 800697a:	2b01      	cmp	r3, #1
 800697c:	d006      	beq.n	800698c <SVCCTL_UserEvtRx+0x88>
 800697e:	e00b      	b.n	8006998 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 ff7f 	bl	8007884 <SVCCTL_App_Notification>
 8006986:	4603      	mov	r3, r0
 8006988:	75bb      	strb	r3, [r7, #22]
      break;
 800698a:	e008      	b.n	800699e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800698c:	2301      	movs	r3, #1
 800698e:	75bb      	strb	r3, [r7, #22]
      break;
 8006990:	e005      	b.n	800699e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8006992:	2300      	movs	r3, #0
 8006994:	75bb      	strb	r3, [r7, #22]
      break;
 8006996:	e002      	b.n	800699e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8006998:	2301      	movs	r3, #1
 800699a:	75bb      	strb	r3, [r7, #22]
      break;
 800699c:	bf00      	nop
  }

  return (return_status);
 800699e:	7dbb      	ldrb	r3, [r7, #22]
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3718      	adds	r7, #24
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	2000001c 	.word	0x2000001c

080069ac <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b088      	sub	sp, #32
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80069b4:	f107 030c 	add.w	r3, r7, #12
 80069b8:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	212e      	movs	r1, #46	@ 0x2e
 80069c4:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 80069c8:	f000 fae8 	bl	8006f9c <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	330b      	adds	r3, #11
 80069d0:	78db      	ldrb	r3, [r3, #3]
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3720      	adds	r7, #32
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b088      	sub	sp, #32
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80069e2:	f107 030c 	add.w	r3, r7, #12
 80069e6:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	210f      	movs	r1, #15
 80069f2:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 80069f6:	f000 fad1 	bl	8006f9c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	330b      	adds	r3, #11
 80069fe:	78db      	ldrb	r3, [r3, #3]
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3720      	adds	r7, #32
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b088      	sub	sp, #32
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8006a10:	f107 030c 	add.w	r3, r7, #12
 8006a14:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	2110      	movs	r1, #16
 8006a1c:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8006a20:	f000 fabc 	bl	8006f9c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	330b      	adds	r3, #11
 8006a28:	78db      	ldrb	r3, [r3, #3]
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3720      	adds	r7, #32
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
	...

08006a34 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8006a34:	b480      	push	{r7}
 8006a36:	b08b      	sub	sp, #44	@ 0x2c
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8006a40:	2300      	movs	r3, #0
 8006a42:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8006a44:	2300      	movs	r3, #0
 8006a46:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8006a50:	2300      	movs	r3, #0
 8006a52:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8006a54:	2300      	movs	r3, #0
 8006a56:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8006a5c:	4b4a      	ldr	r3, [pc, #296]	@ (8006b88 <SHCI_GetWirelessFwInfo+0x154>)
 8006a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a60:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006a64:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8006a6e:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a44      	ldr	r2, [pc, #272]	@ (8006b8c <SHCI_GetWirelessFwInfo+0x158>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d10f      	bne.n	8006aa0 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	695b      	ldr	r3, [r3, #20]
 8006a84:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	699b      	ldr	r3, [r3, #24]
 8006a8a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	69db      	ldr	r3, [r3, #28]
 8006a90:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	691b      	ldr	r3, [r3, #16]
 8006a9c:	617b      	str	r3, [r7, #20]
 8006a9e:	e01a      	b.n	8006ad6 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8006aa8:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8006aac:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	695b      	ldr	r3, [r3, #20]
 8006abc:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad8:	0e1b      	lsrs	r3, r3, #24
 8006ada:	b2da      	uxtb	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae2:	0c1b      	lsrs	r3, r3, #16
 8006ae4:	b2da      	uxtb	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8006aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aec:	0a1b      	lsrs	r3, r3, #8
 8006aee:	b2da      	uxtb	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8006af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af6:	091b      	lsrs	r3, r3, #4
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	f003 030f 	and.w	r3, r3, #15
 8006afe:	b2da      	uxtb	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8006b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	f003 030f 	and.w	r3, r3, #15
 8006b0c:	b2da      	uxtb	r2, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8006b12:	6a3b      	ldr	r3, [r7, #32]
 8006b14:	0e1b      	lsrs	r3, r3, #24
 8006b16:	b2da      	uxtb	r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8006b1c:	6a3b      	ldr	r3, [r7, #32]
 8006b1e:	0c1b      	lsrs	r3, r3, #16
 8006b20:	b2da      	uxtb	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8006b26:	6a3b      	ldr	r3, [r7, #32]
 8006b28:	0a1b      	lsrs	r3, r3, #8
 8006b2a:	b2da      	uxtb	r2, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8006b30:	6a3b      	ldr	r3, [r7, #32]
 8006b32:	b2da      	uxtb	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	b2da      	uxtb	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	0e1b      	lsrs	r3, r3, #24
 8006b44:	b2da      	uxtb	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	0c1b      	lsrs	r3, r3, #16
 8006b4e:	b2da      	uxtb	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	0a1b      	lsrs	r3, r3, #8
 8006b58:	b2da      	uxtb	r2, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	0e1b      	lsrs	r3, r3, #24
 8006b62:	b2da      	uxtb	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	0c1b      	lsrs	r3, r3, #16
 8006b6c:	b2da      	uxtb	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	b2da      	uxtb	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	372c      	adds	r7, #44	@ 0x2c
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr
 8006b88:	58004000 	.word	0x58004000
 8006b8c:	a94656b9 	.word	0xa94656b9

08006b90 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	4a08      	ldr	r2, [pc, #32]	@ (8006bc0 <hci_init+0x30>)
 8006ba0:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8006ba2:	4a08      	ldr	r2, [pc, #32]	@ (8006bc4 <hci_init+0x34>)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8006ba8:	4806      	ldr	r0, [pc, #24]	@ (8006bc4 <hci_init+0x34>)
 8006baa:	f000 f979 	bl	8006ea0 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f000 f8da 	bl	8006d6c <TlInit>

  return;
 8006bb8:	bf00      	nop
}
 8006bba:	3708      	adds	r7, #8
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	200004fc 	.word	0x200004fc
 8006bc4:	200004d4 	.word	0x200004d4

08006bc8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8006bce:	4822      	ldr	r0, [pc, #136]	@ (8006c58 <hci_user_evt_proc+0x90>)
 8006bd0:	f000 fd32 	bl	8007638 <LST_is_empty>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d12b      	bne.n	8006c32 <hci_user_evt_proc+0x6a>
 8006bda:	4b20      	ldr	r3, [pc, #128]	@ (8006c5c <hci_user_evt_proc+0x94>)
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d027      	beq.n	8006c32 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8006be2:	f107 030c 	add.w	r3, r7, #12
 8006be6:	4619      	mov	r1, r3
 8006be8:	481b      	ldr	r0, [pc, #108]	@ (8006c58 <hci_user_evt_proc+0x90>)
 8006bea:	f000 fdb4 	bl	8007756 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8006bee:	4b1c      	ldr	r3, [pc, #112]	@ (8006c60 <hci_user_evt_proc+0x98>)
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00c      	beq.n	8006c10 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8006bfe:	4b18      	ldr	r3, [pc, #96]	@ (8006c60 <hci_user_evt_proc+0x98>)
 8006c00:	69db      	ldr	r3, [r3, #28]
 8006c02:	1d3a      	adds	r2, r7, #4
 8006c04:	4610      	mov	r0, r2
 8006c06:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8006c08:	793a      	ldrb	r2, [r7, #4]
 8006c0a:	4b14      	ldr	r3, [pc, #80]	@ (8006c5c <hci_user_evt_proc+0x94>)
 8006c0c:	701a      	strb	r2, [r3, #0]
 8006c0e:	e002      	b.n	8006c16 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006c10:	4b12      	ldr	r3, [pc, #72]	@ (8006c5c <hci_user_evt_proc+0x94>)
 8006c12:	2201      	movs	r2, #1
 8006c14:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8006c16:	4b11      	ldr	r3, [pc, #68]	@ (8006c5c <hci_user_evt_proc+0x94>)
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d004      	beq.n	8006c28 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	4618      	mov	r0, r3
 8006c22:	f000 fc0d 	bl	8007440 <TL_MM_EvtDone>
 8006c26:	e004      	b.n	8006c32 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	480a      	ldr	r0, [pc, #40]	@ (8006c58 <hci_user_evt_proc+0x90>)
 8006c2e:	f000 fd25 	bl	800767c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8006c32:	4809      	ldr	r0, [pc, #36]	@ (8006c58 <hci_user_evt_proc+0x90>)
 8006c34:	f000 fd00 	bl	8007638 <LST_is_empty>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d107      	bne.n	8006c4e <hci_user_evt_proc+0x86>
 8006c3e:	4b07      	ldr	r3, [pc, #28]	@ (8006c5c <hci_user_evt_proc+0x94>)
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d003      	beq.n	8006c4e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8006c46:	4804      	ldr	r0, [pc, #16]	@ (8006c58 <hci_user_evt_proc+0x90>)
 8006c48:	f000 ff46 	bl	8007ad8 <hci_notify_asynch_evt>
  }


  return;
 8006c4c:	bf00      	nop
 8006c4e:	bf00      	nop
}
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	20000044 	.word	0x20000044
 8006c5c:	20000050 	.word	0x20000050
 8006c60:	200004d4 	.word	0x200004d4

08006c64 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b088      	sub	sp, #32
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8006c70:	2000      	movs	r0, #0
 8006c72:	f000 f8d1 	bl	8006e18 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8006c76:	2300      	movs	r3, #0
 8006c78:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	885b      	ldrh	r3, [r3, #2]
 8006c7e:	b21b      	sxth	r3, r3
 8006c80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c84:	b21a      	sxth	r2, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	881b      	ldrh	r3, [r3, #0]
 8006c8a:	029b      	lsls	r3, r3, #10
 8006c8c:	b21b      	sxth	r3, r3
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	b21b      	sxth	r3, r3
 8006c92:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8006c94:	4b33      	ldr	r3, [pc, #204]	@ (8006d64 <hci_send_req+0x100>)
 8006c96:	2201      	movs	r2, #1
 8006c98:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	b2d9      	uxtb	r1, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	689a      	ldr	r2, [r3, #8]
 8006ca4:	8bbb      	ldrh	r3, [r7, #28]
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f000 f890 	bl	8006dcc <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8006cac:	e04e      	b.n	8006d4c <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8006cae:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8006cb2:	f000 ff28 	bl	8007b06 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8006cb6:	e043      	b.n	8006d40 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8006cb8:	f107 030c 	add.w	r3, r7, #12
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	482a      	ldr	r0, [pc, #168]	@ (8006d68 <hci_send_req+0x104>)
 8006cc0:	f000 fd49 	bl	8007756 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	7a5b      	ldrb	r3, [r3, #9]
 8006cc8:	2b0f      	cmp	r3, #15
 8006cca:	d114      	bne.n	8006cf6 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	330b      	adds	r3, #11
 8006cd0:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	885b      	ldrh	r3, [r3, #2]
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	8bba      	ldrh	r2, [r7, #28]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d104      	bne.n	8006ce8 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	693a      	ldr	r2, [r7, #16]
 8006ce4:	7812      	ldrb	r2, [r2, #0]
 8006ce6:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	785b      	ldrb	r3, [r3, #1]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d027      	beq.n	8006d40 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	77fb      	strb	r3, [r7, #31]
 8006cf4:	e024      	b.n	8006d40 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	330b      	adds	r3, #11
 8006cfa:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	8bba      	ldrh	r2, [r7, #28]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d114      	bne.n	8006d34 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	7a9b      	ldrb	r3, [r3, #10]
 8006d0e:	3b03      	subs	r3, #3
 8006d10:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	695a      	ldr	r2, [r3, #20]
 8006d16:	7dfb      	ldrb	r3, [r7, #23]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	bfa8      	it	ge
 8006d1c:	461a      	movge	r2, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6918      	ldr	r0, [r3, #16]
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	1cd9      	adds	r1, r3, #3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	695b      	ldr	r3, [r3, #20]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	f001 fd22 	bl	8008778 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d001      	beq.n	8006d40 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8006d40:	4809      	ldr	r0, [pc, #36]	@ (8006d68 <hci_send_req+0x104>)
 8006d42:	f000 fc79 	bl	8007638 <LST_is_empty>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d0b5      	beq.n	8006cb8 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8006d4c:	7ffb      	ldrb	r3, [r7, #31]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d0ad      	beq.n	8006cae <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8006d52:	2001      	movs	r0, #1
 8006d54:	f000 f860 	bl	8006e18 <NotifyCmdStatus>

  return 0;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3720      	adds	r7, #32
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	20000500 	.word	0x20000500
 8006d68:	200004f4 	.word	0x200004f4

08006d6c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b086      	sub	sp, #24
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8006d74:	480f      	ldr	r0, [pc, #60]	@ (8006db4 <TlInit+0x48>)
 8006d76:	f000 fc4f 	bl	8007618 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8006d7a:	4a0f      	ldr	r2, [pc, #60]	@ (8006db8 <TlInit+0x4c>)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8006d80:	480e      	ldr	r0, [pc, #56]	@ (8006dbc <TlInit+0x50>)
 8006d82:	f000 fc49 	bl	8007618 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006d86:	4b0e      	ldr	r3, [pc, #56]	@ (8006dc0 <TlInit+0x54>)
 8006d88:	2201      	movs	r2, #1
 8006d8a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8006d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8006dc4 <TlInit+0x58>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00a      	beq.n	8006daa <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8006d98:	4b0b      	ldr	r3, [pc, #44]	@ (8006dc8 <TlInit+0x5c>)
 8006d9a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8006d9c:	4b09      	ldr	r3, [pc, #36]	@ (8006dc4 <TlInit+0x58>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f107 0208 	add.w	r2, r7, #8
 8006da4:	4610      	mov	r0, r2
 8006da6:	4798      	blx	r3
  }

  return;
 8006da8:	bf00      	nop
 8006daa:	bf00      	nop
}
 8006dac:	3718      	adds	r7, #24
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	200004f4 	.word	0x200004f4
 8006db8:	2000004c 	.word	0x2000004c
 8006dbc:	20000044 	.word	0x20000044
 8006dc0:	20000050 	.word	0x20000050
 8006dc4:	200004d4 	.word	0x200004d4
 8006dc8:	08006e59 	.word	0x08006e59

08006dcc <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	603a      	str	r2, [r7, #0]
 8006dd6:	80fb      	strh	r3, [r7, #6]
 8006dd8:	460b      	mov	r3, r1
 8006dda:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8006ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8006e10 <SendCmd+0x44>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	88fa      	ldrh	r2, [r7, #6]
 8006de2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8006de6:	4b0a      	ldr	r3, [pc, #40]	@ (8006e10 <SendCmd+0x44>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	797a      	ldrb	r2, [r7, #5]
 8006dec:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8006dee:	4b08      	ldr	r3, [pc, #32]	@ (8006e10 <SendCmd+0x44>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	330c      	adds	r3, #12
 8006df4:	797a      	ldrb	r2, [r7, #5]
 8006df6:	6839      	ldr	r1, [r7, #0]
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f001 fcbd 	bl	8008778 <memcpy>

  hciContext.io.Send(0,0);
 8006dfe:	4b05      	ldr	r3, [pc, #20]	@ (8006e14 <SendCmd+0x48>)
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	2100      	movs	r1, #0
 8006e04:	2000      	movs	r0, #0
 8006e06:	4798      	blx	r3

  return;
 8006e08:	bf00      	nop
}
 8006e0a:	3708      	adds	r7, #8
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	2000004c 	.word	0x2000004c
 8006e14:	200004d4 	.word	0x200004d4

08006e18 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	4603      	mov	r3, r0
 8006e20:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8006e22:	79fb      	ldrb	r3, [r7, #7]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d108      	bne.n	8006e3a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8006e28:	4b0a      	ldr	r3, [pc, #40]	@ (8006e54 <NotifyCmdStatus+0x3c>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00d      	beq.n	8006e4c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8006e30:	4b08      	ldr	r3, [pc, #32]	@ (8006e54 <NotifyCmdStatus+0x3c>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2000      	movs	r0, #0
 8006e36:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8006e38:	e008      	b.n	8006e4c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8006e3a:	4b06      	ldr	r3, [pc, #24]	@ (8006e54 <NotifyCmdStatus+0x3c>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d004      	beq.n	8006e4c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8006e42:	4b04      	ldr	r3, [pc, #16]	@ (8006e54 <NotifyCmdStatus+0x3c>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2001      	movs	r0, #1
 8006e48:	4798      	blx	r3
  return;
 8006e4a:	bf00      	nop
 8006e4c:	bf00      	nop
}
 8006e4e:	3708      	adds	r7, #8
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	200004fc 	.word	0x200004fc

08006e58 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	7a5b      	ldrb	r3, [r3, #9]
 8006e64:	2b0f      	cmp	r3, #15
 8006e66:	d003      	beq.n	8006e70 <TlEvtReceived+0x18>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	7a5b      	ldrb	r3, [r3, #9]
 8006e6c:	2b0e      	cmp	r3, #14
 8006e6e:	d107      	bne.n	8006e80 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8006e70:	6879      	ldr	r1, [r7, #4]
 8006e72:	4809      	ldr	r0, [pc, #36]	@ (8006e98 <TlEvtReceived+0x40>)
 8006e74:	f000 fc28 	bl	80076c8 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8006e78:	2000      	movs	r0, #0
 8006e7a:	f000 fe39 	bl	8007af0 <hci_cmd_resp_release>
 8006e7e:	e006      	b.n	8006e8e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8006e80:	6879      	ldr	r1, [r7, #4]
 8006e82:	4806      	ldr	r0, [pc, #24]	@ (8006e9c <TlEvtReceived+0x44>)
 8006e84:	f000 fc20 	bl	80076c8 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8006e88:	4804      	ldr	r0, [pc, #16]	@ (8006e9c <TlEvtReceived+0x44>)
 8006e8a:	f000 fe25 	bl	8007ad8 <hci_notify_asynch_evt>
  }

  return;
 8006e8e:	bf00      	nop
}
 8006e90:	3708      	adds	r7, #8
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	200004f4 	.word	0x200004f4
 8006e9c:	20000044 	.word	0x20000044

08006ea0 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a05      	ldr	r2, [pc, #20]	@ (8006ec0 <hci_register_io_bus+0x20>)
 8006eac:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a04      	ldr	r2, [pc, #16]	@ (8006ec4 <hci_register_io_bus+0x24>)
 8006eb2:	611a      	str	r2, [r3, #16]

  return;
 8006eb4:	bf00      	nop
}
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr
 8006ec0:	080071b9 	.word	0x080071b9
 8006ec4:	08007221 	.word	0x08007221

08006ec8 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	4a08      	ldr	r2, [pc, #32]	@ (8006ef8 <shci_init+0x30>)
 8006ed8:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8006eda:	4a08      	ldr	r2, [pc, #32]	@ (8006efc <shci_init+0x34>)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8006ee0:	4806      	ldr	r0, [pc, #24]	@ (8006efc <shci_init+0x34>)
 8006ee2:	f000 f915 	bl	8007110 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4618      	mov	r0, r3
 8006eec:	f000 f898 	bl	8007020 <TlInit>

  return;
 8006ef0:	bf00      	nop
}
 8006ef2:	3708      	adds	r7, #8
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	20000524 	.word	0x20000524
 8006efc:	20000504 	.word	0x20000504

08006f00 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8006f06:	4822      	ldr	r0, [pc, #136]	@ (8006f90 <shci_user_evt_proc+0x90>)
 8006f08:	f000 fb96 	bl	8007638 <LST_is_empty>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d12b      	bne.n	8006f6a <shci_user_evt_proc+0x6a>
 8006f12:	4b20      	ldr	r3, [pc, #128]	@ (8006f94 <shci_user_evt_proc+0x94>)
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d027      	beq.n	8006f6a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8006f1a:	f107 030c 	add.w	r3, r7, #12
 8006f1e:	4619      	mov	r1, r3
 8006f20:	481b      	ldr	r0, [pc, #108]	@ (8006f90 <shci_user_evt_proc+0x90>)
 8006f22:	f000 fc18 	bl	8007756 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8006f26:	4b1c      	ldr	r3, [pc, #112]	@ (8006f98 <shci_user_evt_proc+0x98>)
 8006f28:	69db      	ldr	r3, [r3, #28]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d00c      	beq.n	8006f48 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8006f32:	2301      	movs	r3, #1
 8006f34:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8006f36:	4b18      	ldr	r3, [pc, #96]	@ (8006f98 <shci_user_evt_proc+0x98>)
 8006f38:	69db      	ldr	r3, [r3, #28]
 8006f3a:	1d3a      	adds	r2, r7, #4
 8006f3c:	4610      	mov	r0, r2
 8006f3e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8006f40:	793a      	ldrb	r2, [r7, #4]
 8006f42:	4b14      	ldr	r3, [pc, #80]	@ (8006f94 <shci_user_evt_proc+0x94>)
 8006f44:	701a      	strb	r2, [r3, #0]
 8006f46:	e002      	b.n	8006f4e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8006f48:	4b12      	ldr	r3, [pc, #72]	@ (8006f94 <shci_user_evt_proc+0x94>)
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8006f4e:	4b11      	ldr	r3, [pc, #68]	@ (8006f94 <shci_user_evt_proc+0x94>)
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d004      	beq.n	8006f60 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f000 fa71 	bl	8007440 <TL_MM_EvtDone>
 8006f5e:	e004      	b.n	8006f6a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	4619      	mov	r1, r3
 8006f64:	480a      	ldr	r0, [pc, #40]	@ (8006f90 <shci_user_evt_proc+0x90>)
 8006f66:	f000 fb89 	bl	800767c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8006f6a:	4809      	ldr	r0, [pc, #36]	@ (8006f90 <shci_user_evt_proc+0x90>)
 8006f6c:	f000 fb64 	bl	8007638 <LST_is_empty>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d107      	bne.n	8006f86 <shci_user_evt_proc+0x86>
 8006f76:	4b07      	ldr	r3, [pc, #28]	@ (8006f94 <shci_user_evt_proc+0x94>)
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d003      	beq.n	8006f86 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8006f7e:	4804      	ldr	r0, [pc, #16]	@ (8006f90 <shci_user_evt_proc+0x90>)
 8006f80:	f7f9 fc97 	bl	80008b2 <shci_notify_asynch_evt>
  }


  return;
 8006f84:	bf00      	nop
 8006f86:	bf00      	nop
}
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	20000054 	.word	0x20000054
 8006f94:	20000064 	.word	0x20000064
 8006f98:	20000504 	.word	0x20000504

08006f9c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60ba      	str	r2, [r7, #8]
 8006fa4:	607b      	str	r3, [r7, #4]
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	81fb      	strh	r3, [r7, #14]
 8006faa:	460b      	mov	r3, r1
 8006fac:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8006fae:	2000      	movs	r0, #0
 8006fb0:	f000 f868 	bl	8007084 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8006fb4:	4b17      	ldr	r3, [pc, #92]	@ (8007014 <shci_send+0x78>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	89fa      	ldrh	r2, [r7, #14]
 8006fba:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8006fbe:	4b15      	ldr	r3, [pc, #84]	@ (8007014 <shci_send+0x78>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	7b7a      	ldrb	r2, [r7, #13]
 8006fc4:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8006fc6:	4b13      	ldr	r3, [pc, #76]	@ (8007014 <shci_send+0x78>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	330c      	adds	r3, #12
 8006fcc:	7b7a      	ldrb	r2, [r7, #13]
 8006fce:	68b9      	ldr	r1, [r7, #8]
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f001 fbd1 	bl	8008778 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8006fd6:	4b10      	ldr	r3, [pc, #64]	@ (8007018 <shci_send+0x7c>)
 8006fd8:	2201      	movs	r2, #1
 8006fda:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8006fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800701c <shci_send+0x80>)
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	2000      	movs	r0, #0
 8006fe4:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8006fe6:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8006fea:	f7f9 fc79 	bl	80008e0 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f103 0008 	add.w	r0, r3, #8
 8006ff4:	4b07      	ldr	r3, [pc, #28]	@ (8007014 <shci_send+0x78>)
 8006ff6:	6819      	ldr	r1, [r3, #0]
 8006ff8:	4b06      	ldr	r3, [pc, #24]	@ (8007014 <shci_send+0x78>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	789b      	ldrb	r3, [r3, #2]
 8006ffe:	3303      	adds	r3, #3
 8007000:	461a      	mov	r2, r3
 8007002:	f001 fbb9 	bl	8008778 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8007006:	2001      	movs	r0, #1
 8007008:	f000 f83c 	bl	8007084 <Cmd_SetStatus>

  return;
 800700c:	bf00      	nop
}
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	20000060 	.word	0x20000060
 8007018:	20000528 	.word	0x20000528
 800701c:	20000504 	.word	0x20000504

08007020 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b086      	sub	sp, #24
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8007028:	4a10      	ldr	r2, [pc, #64]	@ (800706c <TlInit+0x4c>)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800702e:	4810      	ldr	r0, [pc, #64]	@ (8007070 <TlInit+0x50>)
 8007030:	f000 faf2 	bl	8007618 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8007034:	2001      	movs	r0, #1
 8007036:	f000 f825 	bl	8007084 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800703a:	4b0e      	ldr	r3, [pc, #56]	@ (8007074 <TlInit+0x54>)
 800703c:	2201      	movs	r2, #1
 800703e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8007040:	4b0d      	ldr	r3, [pc, #52]	@ (8007078 <TlInit+0x58>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00c      	beq.n	8007062 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800704c:	4b0b      	ldr	r3, [pc, #44]	@ (800707c <TlInit+0x5c>)
 800704e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8007050:	4b0b      	ldr	r3, [pc, #44]	@ (8007080 <TlInit+0x60>)
 8007052:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8007054:	4b08      	ldr	r3, [pc, #32]	@ (8007078 <TlInit+0x58>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f107 020c 	add.w	r2, r7, #12
 800705c:	4610      	mov	r0, r2
 800705e:	4798      	blx	r3
  }

  return;
 8007060:	bf00      	nop
 8007062:	bf00      	nop
}
 8007064:	3718      	adds	r7, #24
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	20000060 	.word	0x20000060
 8007070:	20000054 	.word	0x20000054
 8007074:	20000064 	.word	0x20000064
 8007078:	20000504 	.word	0x20000504
 800707c:	080070d5 	.word	0x080070d5
 8007080:	080070ed 	.word	0x080070ed

08007084 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	4603      	mov	r3, r0
 800708c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800708e:	79fb      	ldrb	r3, [r7, #7]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d10b      	bne.n	80070ac <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8007094:	4b0d      	ldr	r3, [pc, #52]	@ (80070cc <Cmd_SetStatus+0x48>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d003      	beq.n	80070a4 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800709c:	4b0b      	ldr	r3, [pc, #44]	@ (80070cc <Cmd_SetStatus+0x48>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2000      	movs	r0, #0
 80070a2:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80070a4:	4b0a      	ldr	r3, [pc, #40]	@ (80070d0 <Cmd_SetStatus+0x4c>)
 80070a6:	2200      	movs	r2, #0
 80070a8:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 80070aa:	e00b      	b.n	80070c4 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80070ac:	4b08      	ldr	r3, [pc, #32]	@ (80070d0 <Cmd_SetStatus+0x4c>)
 80070ae:	2201      	movs	r2, #1
 80070b0:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80070b2:	4b06      	ldr	r3, [pc, #24]	@ (80070cc <Cmd_SetStatus+0x48>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d004      	beq.n	80070c4 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80070ba:	4b04      	ldr	r3, [pc, #16]	@ (80070cc <Cmd_SetStatus+0x48>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2001      	movs	r0, #1
 80070c0:	4798      	blx	r3
  return;
 80070c2:	bf00      	nop
 80070c4:	bf00      	nop
}
 80070c6:	3708      	adds	r7, #8
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	20000524 	.word	0x20000524
 80070d0:	2000005c 	.word	0x2000005c

080070d4 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80070dc:	2000      	movs	r0, #0
 80070de:	f7f9 fbf4 	bl	80008ca <shci_cmd_resp_release>

  return;
 80070e2:	bf00      	nop
}
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
	...

080070ec <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80070f4:	6879      	ldr	r1, [r7, #4]
 80070f6:	4805      	ldr	r0, [pc, #20]	@ (800710c <TlUserEvtReceived+0x20>)
 80070f8:	f000 fae6 	bl	80076c8 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80070fc:	4803      	ldr	r0, [pc, #12]	@ (800710c <TlUserEvtReceived+0x20>)
 80070fe:	f7f9 fbd8 	bl	80008b2 <shci_notify_asynch_evt>

  return;
 8007102:	bf00      	nop
}
 8007104:	3708      	adds	r7, #8
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	20000054 	.word	0x20000054

08007110 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a05      	ldr	r2, [pc, #20]	@ (8007130 <shci_register_io_bus+0x20>)
 800711c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a04      	ldr	r2, [pc, #16]	@ (8007134 <shci_register_io_bus+0x24>)
 8007122:	611a      	str	r2, [r3, #16]

  return;
 8007124:	bf00      	nop
}
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr
 8007130:	080072cd 	.word	0x080072cd
 8007134:	08007321 	.word	0x08007321

08007138 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8007138:	b580      	push	{r7, lr}
 800713a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800713c:	f000 ffa2 	bl	8008084 <HW_IPCC_Enable>

  return;
 8007140:	bf00      	nop
}
 8007142:	bd80      	pop	{r7, pc}

08007144 <TL_Init>:


void TL_Init( void )
{
 8007144:	b580      	push	{r7, lr}
 8007146:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8007148:	4b10      	ldr	r3, [pc, #64]	@ (800718c <TL_Init+0x48>)
 800714a:	4a11      	ldr	r2, [pc, #68]	@ (8007190 <TL_Init+0x4c>)
 800714c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800714e:	4b0f      	ldr	r3, [pc, #60]	@ (800718c <TL_Init+0x48>)
 8007150:	4a10      	ldr	r2, [pc, #64]	@ (8007194 <TL_Init+0x50>)
 8007152:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8007154:	4b0d      	ldr	r3, [pc, #52]	@ (800718c <TL_Init+0x48>)
 8007156:	4a10      	ldr	r2, [pc, #64]	@ (8007198 <TL_Init+0x54>)
 8007158:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800715a:	4b0c      	ldr	r3, [pc, #48]	@ (800718c <TL_Init+0x48>)
 800715c:	4a0f      	ldr	r2, [pc, #60]	@ (800719c <TL_Init+0x58>)
 800715e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8007160:	4b0a      	ldr	r3, [pc, #40]	@ (800718c <TL_Init+0x48>)
 8007162:	4a0f      	ldr	r2, [pc, #60]	@ (80071a0 <TL_Init+0x5c>)
 8007164:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8007166:	4b09      	ldr	r3, [pc, #36]	@ (800718c <TL_Init+0x48>)
 8007168:	4a0e      	ldr	r2, [pc, #56]	@ (80071a4 <TL_Init+0x60>)
 800716a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800716c:	4b07      	ldr	r3, [pc, #28]	@ (800718c <TL_Init+0x48>)
 800716e:	4a0e      	ldr	r2, [pc, #56]	@ (80071a8 <TL_Init+0x64>)
 8007170:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8007172:	4b06      	ldr	r3, [pc, #24]	@ (800718c <TL_Init+0x48>)
 8007174:	4a0d      	ldr	r2, [pc, #52]	@ (80071ac <TL_Init+0x68>)
 8007176:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8007178:	4b04      	ldr	r3, [pc, #16]	@ (800718c <TL_Init+0x48>)
 800717a:	4a0d      	ldr	r2, [pc, #52]	@ (80071b0 <TL_Init+0x6c>)
 800717c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800717e:	4b03      	ldr	r3, [pc, #12]	@ (800718c <TL_Init+0x48>)
 8007180:	4a0c      	ldr	r2, [pc, #48]	@ (80071b4 <TL_Init+0x70>)
 8007182:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8007184:	f000 ff92 	bl	80080ac <HW_IPCC_Init>

  return;
 8007188:	bf00      	nop
}
 800718a:	bd80      	pop	{r7, pc}
 800718c:	20030000 	.word	0x20030000
 8007190:	20030028 	.word	0x20030028
 8007194:	20030048 	.word	0x20030048
 8007198:	20030058 	.word	0x20030058
 800719c:	20030068 	.word	0x20030068
 80071a0:	20030070 	.word	0x20030070
 80071a4:	20030078 	.word	0x20030078
 80071a8:	20030080 	.word	0x20030080
 80071ac:	2003009c 	.word	0x2003009c
 80071b0:	200300a0 	.word	0x200300a0
 80071b4:	200300ac 	.word	0x200300ac

080071b8 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 80071c4:	4811      	ldr	r0, [pc, #68]	@ (800720c <TL_BLE_Init+0x54>)
 80071c6:	f000 fa27 	bl	8007618 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 80071ca:	4b11      	ldr	r3, [pc, #68]	@ (8007210 <TL_BLE_Init+0x58>)
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	689a      	ldr	r2, [r3, #8]
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	68da      	ldr	r2, [r3, #12]
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	4a0c      	ldr	r2, [pc, #48]	@ (8007214 <TL_BLE_Init+0x5c>)
 80071e4:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	4a08      	ldr	r2, [pc, #32]	@ (800720c <TL_BLE_Init+0x54>)
 80071ea:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 80071ec:	f000 ff74 	bl	80080d8 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a08      	ldr	r2, [pc, #32]	@ (8007218 <TL_BLE_Init+0x60>)
 80071f6:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	4a07      	ldr	r2, [pc, #28]	@ (800721c <TL_BLE_Init+0x64>)
 80071fe:	6013      	str	r3, [r2, #0]

  return 0;
 8007200:	2300      	movs	r3, #0
}
 8007202:	4618      	mov	r0, r3
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	200300c8 	.word	0x200300c8
 8007210:	20030000 	.word	0x20030000
 8007214:	20030a58 	.word	0x20030a58
 8007218:	20000534 	.word	0x20000534
 800721c:	20000538 	.word	0x20000538

08007220 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	460b      	mov	r3, r1
 800722a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800722c:	4b09      	ldr	r3, [pc, #36]	@ (8007254 <TL_BLE_SendCmd+0x34>)
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2201      	movs	r2, #1
 8007234:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8007236:	4b07      	ldr	r3, [pc, #28]	@ (8007254 <TL_BLE_SendCmd+0x34>)
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4619      	mov	r1, r3
 800723e:	2001      	movs	r0, #1
 8007240:	f000 f96c 	bl	800751c <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8007244:	f000 ff52 	bl	80080ec <HW_IPCC_BLE_SendCmd>

  return 0;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3708      	adds	r7, #8
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	20030000 	.word	0x20030000

08007258 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800725e:	e01c      	b.n	800729a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8007260:	1d3b      	adds	r3, r7, #4
 8007262:	4619      	mov	r1, r3
 8007264:	4812      	ldr	r0, [pc, #72]	@ (80072b0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8007266:	f000 fa76 	bl	8007756 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	7a5b      	ldrb	r3, [r3, #9]
 800726e:	2b0f      	cmp	r3, #15
 8007270:	d003      	beq.n	800727a <HW_IPCC_BLE_RxEvtNot+0x22>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	7a5b      	ldrb	r3, [r3, #9]
 8007276:	2b0e      	cmp	r3, #14
 8007278:	d105      	bne.n	8007286 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4619      	mov	r1, r3
 800727e:	2002      	movs	r0, #2
 8007280:	f000 f94c 	bl	800751c <OutputDbgTrace>
 8007284:	e004      	b.n	8007290 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4619      	mov	r1, r3
 800728a:	2003      	movs	r0, #3
 800728c:	f000 f946 	bl	800751c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8007290:	4b08      	ldr	r3, [pc, #32]	@ (80072b4 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	4610      	mov	r0, r2
 8007298:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800729a:	4805      	ldr	r0, [pc, #20]	@ (80072b0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800729c:	f000 f9cc 	bl	8007638 <LST_is_empty>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d0dc      	beq.n	8007260 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80072a6:	bf00      	nop
}
 80072a8:	3708      	adds	r7, #8
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	200300c8 	.word	0x200300c8
 80072b4:	20000534 	.word	0x20000534

080072b8 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 80072bc:	4b02      	ldr	r3, [pc, #8]	@ (80072c8 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4798      	blx	r3

  return;
 80072c2:	bf00      	nop
}
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	20000538 	.word	0x20000538

080072cc <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 80072d8:	480d      	ldr	r0, [pc, #52]	@ (8007310 <TL_SYS_Init+0x44>)
 80072da:	f000 f99d 	bl	8007618 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80072de:	4b0d      	ldr	r3, [pc, #52]	@ (8007314 <TL_SYS_Init+0x48>)
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	689a      	ldr	r2, [r3, #8]
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	4a08      	ldr	r2, [pc, #32]	@ (8007310 <TL_SYS_Init+0x44>)
 80072f0:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80072f2:	f000 ff1d 	bl	8008130 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a07      	ldr	r2, [pc, #28]	@ (8007318 <TL_SYS_Init+0x4c>)
 80072fc:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	4a06      	ldr	r2, [pc, #24]	@ (800731c <TL_SYS_Init+0x50>)
 8007304:	6013      	str	r3, [r2, #0]

  return 0;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}
 8007310:	200300d0 	.word	0x200300d0
 8007314:	20030000 	.word	0x20030000
 8007318:	2000053c 	.word	0x2000053c
 800731c:	20000540 	.word	0x20000540

08007320 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	460b      	mov	r3, r1
 800732a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800732c:	4b09      	ldr	r3, [pc, #36]	@ (8007354 <TL_SYS_SendCmd+0x34>)
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2210      	movs	r2, #16
 8007334:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8007336:	4b07      	ldr	r3, [pc, #28]	@ (8007354 <TL_SYS_SendCmd+0x34>)
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4619      	mov	r1, r3
 800733e:	2004      	movs	r0, #4
 8007340:	f000 f8ec 	bl	800751c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8007344:	f000 fefe 	bl	8008144 <HW_IPCC_SYS_SendCmd>

  return 0;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3708      	adds	r7, #8
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	20030000 	.word	0x20030000

08007358 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800735c:	4b07      	ldr	r3, [pc, #28]	@ (800737c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4619      	mov	r1, r3
 8007364:	2005      	movs	r0, #5
 8007366:	f000 f8d9 	bl	800751c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800736a:	4b05      	ldr	r3, [pc, #20]	@ (8007380 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a03      	ldr	r2, [pc, #12]	@ (800737c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8007370:	68d2      	ldr	r2, [r2, #12]
 8007372:	6812      	ldr	r2, [r2, #0]
 8007374:	4610      	mov	r0, r2
 8007376:	4798      	blx	r3

  return;
 8007378:	bf00      	nop
}
 800737a:	bd80      	pop	{r7, pc}
 800737c:	20030000 	.word	0x20030000
 8007380:	2000053c 	.word	0x2000053c

08007384 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800738a:	e00e      	b.n	80073aa <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800738c:	1d3b      	adds	r3, r7, #4
 800738e:	4619      	mov	r1, r3
 8007390:	480b      	ldr	r0, [pc, #44]	@ (80073c0 <HW_IPCC_SYS_EvtNot+0x3c>)
 8007392:	f000 f9e0 	bl	8007756 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4619      	mov	r1, r3
 800739a:	2006      	movs	r0, #6
 800739c:	f000 f8be 	bl	800751c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 80073a0:	4b08      	ldr	r3, [pc, #32]	@ (80073c4 <HW_IPCC_SYS_EvtNot+0x40>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	4610      	mov	r0, r2
 80073a8:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80073aa:	4805      	ldr	r0, [pc, #20]	@ (80073c0 <HW_IPCC_SYS_EvtNot+0x3c>)
 80073ac:	f000 f944 	bl	8007638 <LST_is_empty>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d0ea      	beq.n	800738c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 80073b6:	bf00      	nop
}
 80073b8:	3708      	adds	r7, #8
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	200300d0 	.word	0x200300d0
 80073c4:	20000540 	.word	0x20000540

080073c8 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 80073d0:	4817      	ldr	r0, [pc, #92]	@ (8007430 <TL_MM_Init+0x68>)
 80073d2:	f000 f921 	bl	8007618 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 80073d6:	4817      	ldr	r0, [pc, #92]	@ (8007434 <TL_MM_Init+0x6c>)
 80073d8:	f000 f91e 	bl	8007618 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 80073dc:	4b16      	ldr	r3, [pc, #88]	@ (8007438 <TL_MM_Init+0x70>)
 80073de:	691b      	ldr	r3, [r3, #16]
 80073e0:	4a16      	ldr	r2, [pc, #88]	@ (800743c <TL_MM_Init+0x74>)
 80073e2:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80073e4:	4b15      	ldr	r3, [pc, #84]	@ (800743c <TL_MM_Init+0x74>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	6892      	ldr	r2, [r2, #8]
 80073ec:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80073ee:	4b13      	ldr	r3, [pc, #76]	@ (800743c <TL_MM_Init+0x74>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	68d2      	ldr	r2, [r2, #12]
 80073f6:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80073f8:	4b10      	ldr	r3, [pc, #64]	@ (800743c <TL_MM_Init+0x74>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a0c      	ldr	r2, [pc, #48]	@ (8007430 <TL_MM_Init+0x68>)
 80073fe:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8007400:	4b0e      	ldr	r3, [pc, #56]	@ (800743c <TL_MM_Init+0x74>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	6812      	ldr	r2, [r2, #0]
 8007408:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800740a:	4b0c      	ldr	r3, [pc, #48]	@ (800743c <TL_MM_Init+0x74>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	6852      	ldr	r2, [r2, #4]
 8007412:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8007414:	4b09      	ldr	r3, [pc, #36]	@ (800743c <TL_MM_Init+0x74>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	6912      	ldr	r2, [r2, #16]
 800741c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800741e:	4b07      	ldr	r3, [pc, #28]	@ (800743c <TL_MM_Init+0x74>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	6952      	ldr	r2, [r2, #20]
 8007426:	619a      	str	r2, [r3, #24]

  return;
 8007428:	bf00      	nop
}
 800742a:	3708      	adds	r7, #8
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}
 8007430:	200300b8 	.word	0x200300b8
 8007434:	2000052c 	.word	0x2000052c
 8007438:	20030000 	.word	0x20030000
 800743c:	20000544 	.word	0x20000544

08007440 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8007448:	6879      	ldr	r1, [r7, #4]
 800744a:	4807      	ldr	r0, [pc, #28]	@ (8007468 <TL_MM_EvtDone+0x28>)
 800744c:	f000 f93c 	bl	80076c8 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8007450:	6879      	ldr	r1, [r7, #4]
 8007452:	2000      	movs	r0, #0
 8007454:	f000 f862 	bl	800751c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8007458:	4804      	ldr	r0, [pc, #16]	@ (800746c <TL_MM_EvtDone+0x2c>)
 800745a:	f000 fe99 	bl	8008190 <HW_IPCC_MM_SendFreeBuf>

  return;
 800745e:	bf00      	nop
}
 8007460:	3708      	adds	r7, #8
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	2000052c 	.word	0x2000052c
 800746c:	08007471 	.word	0x08007471

08007470 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8007476:	e00c      	b.n	8007492 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8007478:	1d3b      	adds	r3, r7, #4
 800747a:	4619      	mov	r1, r3
 800747c:	480a      	ldr	r0, [pc, #40]	@ (80074a8 <SendFreeBuf+0x38>)
 800747e:	f000 f96a 	bl	8007756 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8007482:	4b0a      	ldr	r3, [pc, #40]	@ (80074ac <SendFreeBuf+0x3c>)
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	4611      	mov	r1, r2
 800748c:	4618      	mov	r0, r3
 800748e:	f000 f91b 	bl	80076c8 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8007492:	4805      	ldr	r0, [pc, #20]	@ (80074a8 <SendFreeBuf+0x38>)
 8007494:	f000 f8d0 	bl	8007638 <LST_is_empty>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d0ec      	beq.n	8007478 <SendFreeBuf+0x8>
  }

  return;
 800749e:	bf00      	nop
}
 80074a0:	3708      	adds	r7, #8
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	2000052c 	.word	0x2000052c
 80074ac:	20030000 	.word	0x20030000

080074b0 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80074b4:	4805      	ldr	r0, [pc, #20]	@ (80074cc <TL_TRACES_Init+0x1c>)
 80074b6:	f000 f8af 	bl	8007618 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80074ba:	4b05      	ldr	r3, [pc, #20]	@ (80074d0 <TL_TRACES_Init+0x20>)
 80074bc:	695b      	ldr	r3, [r3, #20]
 80074be:	4a03      	ldr	r2, [pc, #12]	@ (80074cc <TL_TRACES_Init+0x1c>)
 80074c0:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80074c2:	f000 fe9b 	bl	80081fc <HW_IPCC_TRACES_Init>

  return;
 80074c6:	bf00      	nop
}
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	200300c0 	.word	0x200300c0
 80074d0:	20030000 	.word	0x20030000

080074d4 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80074da:	e008      	b.n	80074ee <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80074dc:	1d3b      	adds	r3, r7, #4
 80074de:	4619      	mov	r1, r3
 80074e0:	4808      	ldr	r0, [pc, #32]	@ (8007504 <HW_IPCC_TRACES_EvtNot+0x30>)
 80074e2:	f000 f938 	bl	8007756 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4618      	mov	r0, r3
 80074ea:	f000 f80d 	bl	8007508 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80074ee:	4805      	ldr	r0, [pc, #20]	@ (8007504 <HW_IPCC_TRACES_EvtNot+0x30>)
 80074f0:	f000 f8a2 	bl	8007638 <LST_is_empty>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d0f0      	beq.n	80074dc <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80074fa:	bf00      	nop
}
 80074fc:	3708      	adds	r7, #8
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	200300c0 	.word	0x200300c0

08007508 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8007510:	bf00      	nop
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800751c:	b480      	push	{r7}
 800751e:	b085      	sub	sp, #20
 8007520:	af00      	add	r7, sp, #0
 8007522:	4603      	mov	r3, r0
 8007524:	6039      	str	r1, [r7, #0]
 8007526:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8007528:	79fb      	ldrb	r3, [r7, #7]
 800752a:	2b06      	cmp	r3, #6
 800752c:	d845      	bhi.n	80075ba <OutputDbgTrace+0x9e>
 800752e:	a201      	add	r2, pc, #4	@ (adr r2, 8007534 <OutputDbgTrace+0x18>)
 8007530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007534:	08007551 	.word	0x08007551
 8007538:	08007575 	.word	0x08007575
 800753c:	0800757b 	.word	0x0800757b
 8007540:	0800758f 	.word	0x0800758f
 8007544:	0800759b 	.word	0x0800759b
 8007548:	080075a1 	.word	0x080075a1
 800754c:	080075af 	.word	0x080075af
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	7a5b      	ldrb	r3, [r3, #9]
 8007558:	2bff      	cmp	r3, #255	@ 0xff
 800755a:	d005      	beq.n	8007568 <OutputDbgTrace+0x4c>
 800755c:	2bff      	cmp	r3, #255	@ 0xff
 800755e:	dc05      	bgt.n	800756c <OutputDbgTrace+0x50>
 8007560:	2b0e      	cmp	r3, #14
 8007562:	d005      	beq.n	8007570 <OutputDbgTrace+0x54>
 8007564:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8007566:	e001      	b.n	800756c <OutputDbgTrace+0x50>
          break;
 8007568:	bf00      	nop
 800756a:	e027      	b.n	80075bc <OutputDbgTrace+0xa0>
          break;
 800756c:	bf00      	nop
 800756e:	e025      	b.n	80075bc <OutputDbgTrace+0xa0>
          break;
 8007570:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8007572:	e023      	b.n	80075bc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8007578:	e020      	b.n	80075bc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	7a5b      	ldrb	r3, [r3, #9]
 8007582:	2b0e      	cmp	r3, #14
 8007584:	d001      	beq.n	800758a <OutputDbgTrace+0x6e>
 8007586:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8007588:	e000      	b.n	800758c <OutputDbgTrace+0x70>
          break;
 800758a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800758c:	e016      	b.n	80075bc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	7a5b      	ldrb	r3, [r3, #9]
 8007596:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007598:	e010      	b.n	80075bc <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800759e:	e00d      	b.n	80075bc <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	7a5b      	ldrb	r3, [r3, #9]
 80075a8:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80075aa:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80075ac:	e006      	b.n	80075bc <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	7a5b      	ldrb	r3, [r3, #9]
 80075b6:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80075b8:	e000      	b.n	80075bc <OutputDbgTrace+0xa0>

    default:
      break;
 80075ba:	bf00      	nop
  }

  return;
 80075bc:	bf00      	nop
}
 80075be:	3714      	adds	r7, #20
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	4603      	mov	r3, r0
 80075d0:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80075d2:	4b0f      	ldr	r3, [pc, #60]	@ (8007610 <OTP_Read+0x48>)
 80075d4:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80075d6:	e002      	b.n	80075de <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	3b08      	subs	r3, #8
 80075dc:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	3307      	adds	r3, #7
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	79fa      	ldrb	r2, [r7, #7]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d003      	beq.n	80075f2 <OTP_Read+0x2a>
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	4a09      	ldr	r2, [pc, #36]	@ (8007614 <OTP_Read+0x4c>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d1f2      	bne.n	80075d8 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	3307      	adds	r3, #7
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	79fa      	ldrb	r2, [r7, #7]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d001      	beq.n	8007602 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80075fe:	2300      	movs	r3, #0
 8007600:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8007602:	68fb      	ldr	r3, [r7, #12]
}
 8007604:	4618      	mov	r0, r3
 8007606:	3714      	adds	r7, #20
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr
 8007610:	1fff73f8 	.word	0x1fff73f8
 8007614:	1fff7000 	.word	0x1fff7000

08007618 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	605a      	str	r2, [r3, #4]
}
 800762c:	bf00      	nop
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8007638:	b480      	push	{r7}
 800763a:	b087      	sub	sp, #28
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007640:	f3ef 8310 	mrs	r3, PRIMASK
 8007644:	60fb      	str	r3, [r7, #12]
  return(result);
 8007646:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007648:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800764a:	b672      	cpsid	i
}
 800764c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	429a      	cmp	r2, r3
 8007656:	d102      	bne.n	800765e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8007658:	2301      	movs	r3, #1
 800765a:	75fb      	strb	r3, [r7, #23]
 800765c:	e001      	b.n	8007662 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800765e:	2300      	movs	r3, #0
 8007660:	75fb      	strb	r3, [r7, #23]
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	f383 8810 	msr	PRIMASK, r3
}
 800766c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800766e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007670:	4618      	mov	r0, r3
 8007672:	371c      	adds	r7, #28
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800767c:	b480      	push	{r7}
 800767e:	b087      	sub	sp, #28
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007686:	f3ef 8310 	mrs	r3, PRIMASK
 800768a:	60fb      	str	r3, [r7, #12]
  return(result);
 800768c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800768e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007690:	b672      	cpsid	i
}
 8007692:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	683a      	ldr	r2, [r7, #0]
 80076a6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	683a      	ldr	r2, [r7, #0]
 80076ae:	605a      	str	r2, [r3, #4]
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	f383 8810 	msr	PRIMASK, r3
}
 80076ba:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80076bc:	bf00      	nop
 80076be:	371c      	adds	r7, #28
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b087      	sub	sp, #28
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076d2:	f3ef 8310 	mrs	r3, PRIMASK
 80076d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80076d8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80076da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80076dc:	b672      	cpsid	i
}
 80076de:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	685a      	ldr	r2, [r3, #4]
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	683a      	ldr	r2, [r7, #0]
 80076f2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	683a      	ldr	r2, [r7, #0]
 80076fa:	601a      	str	r2, [r3, #0]
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	f383 8810 	msr	PRIMASK, r3
}
 8007706:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007708:	bf00      	nop
 800770a:	371c      	adds	r7, #28
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8007714:	b480      	push	{r7}
 8007716:	b087      	sub	sp, #28
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800771c:	f3ef 8310 	mrs	r3, PRIMASK
 8007720:	60fb      	str	r3, [r7, #12]
  return(result);
 8007722:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007724:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007726:	b672      	cpsid	i
}
 8007728:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	6812      	ldr	r2, [r2, #0]
 8007732:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	6852      	ldr	r2, [r2, #4]
 800773c:	605a      	str	r2, [r3, #4]
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	f383 8810 	msr	PRIMASK, r3
}
 8007748:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800774a:	bf00      	nop
 800774c:	371c      	adds	r7, #28
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b086      	sub	sp, #24
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
 800775e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007760:	f3ef 8310 	mrs	r3, PRIMASK
 8007764:	60fb      	str	r3, [r7, #12]
  return(result);
 8007766:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007768:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800776a:	b672      	cpsid	i
}
 800776c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4618      	mov	r0, r3
 800777c:	f7ff ffca 	bl	8007714 <LST_remove_node>
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	f383 8810 	msr	PRIMASK, r3
}
 800778a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800778c:	bf00      	nop
 800778e:	3718      	adds	r7, #24
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <__NVIC_SystemReset>:
{
 8007794:	b480      	push	{r7}
 8007796:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8007798:	f3bf 8f4f 	dsb	sy
}
 800779c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800779e:	4b06      	ldr	r3, [pc, #24]	@ (80077b8 <__NVIC_SystemReset+0x24>)
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80077a6:	4904      	ldr	r1, [pc, #16]	@ (80077b8 <__NVIC_SystemReset+0x24>)
 80077a8:	4b04      	ldr	r3, [pc, #16]	@ (80077bc <__NVIC_SystemReset+0x28>)
 80077aa:	4313      	orrs	r3, r2
 80077ac:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80077ae:	f3bf 8f4f 	dsb	sy
}
 80077b2:	bf00      	nop
    __NOP();
 80077b4:	bf00      	nop
 80077b6:	e7fd      	b.n	80077b4 <__NVIC_SystemReset+0x20>
 80077b8:	e000ed00 	.word	0xe000ed00
 80077bc:	05fa0004 	.word	0x05fa0004

080077c0 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80077c0:	b480      	push	{r7}
 80077c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80077c4:	4b03      	ldr	r3, [pc, #12]	@ (80077d4 <LL_FLASH_GetUDN+0x14>)
 80077c6:	681b      	ldr	r3, [r3, #0]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr
 80077d2:	bf00      	nop
 80077d4:	1fff7580 	.word	0x1fff7580

080077d8 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80077d8:	b480      	push	{r7}
 80077da:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80077dc:	4b03      	ldr	r3, [pc, #12]	@ (80077ec <LL_FLASH_GetDeviceID+0x14>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	b2db      	uxtb	r3, r3
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr
 80077ec:	1fff7584 	.word	0x1fff7584

080077f0 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80077f0:	b480      	push	{r7}
 80077f2:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80077f4:	4b03      	ldr	r3, [pc, #12]	@ (8007804 <LL_FLASH_GetSTCompanyID+0x14>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	0a1b      	lsrs	r3, r3, #8
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr
 8007804:	1fff7584 	.word	0x1fff7584

08007808 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8007808:	b5b0      	push	{r4, r5, r7, lr}
 800780a:	b090      	sub	sp, #64	@ 0x40
 800780c:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800780e:	4b1a      	ldr	r3, [pc, #104]	@ (8007878 <APP_BLE_Init+0x70>)
 8007810:	1d3c      	adds	r4, r7, #4
 8007812:	461d      	mov	r5, r3
 8007814:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007816:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007818:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800781a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800781c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800781e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007820:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007824:	c403      	stmia	r4!, {r0, r1}
 8007826:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8007828:	f000 f860 	bl	80078ec <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800782c:	2101      	movs	r1, #1
 800782e:	2002      	movs	r0, #2
 8007830:	f000 fd0c 	bl	800824c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8007834:	4a11      	ldr	r2, [pc, #68]	@ (800787c <APP_BLE_Init+0x74>)
 8007836:	2100      	movs	r1, #0
 8007838:	2002      	movs	r0, #2
 800783a:	f000 fe33 	bl	80084a4 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800783e:	1d3b      	adds	r3, r7, #4
 8007840:	4618      	mov	r0, r3
 8007842:	f7ff f8b3 	bl	80069ac <SHCI_C2_BLE_Init>
 8007846:	4603      	mov	r3, r0
 8007848:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (status != SHCI_Success)
 800784c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007850:	2b00      	cmp	r3, #0
 8007852:	d001      	beq.n	8007858 <APP_BLE_Init+0x50>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8007854:	f7fa f83a 	bl	80018cc <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8007858:	f000 f85e 	bl	8007918 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800785c:	f7ff f81a 	bl	8006894 <SVCCTL_Init>

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_BEACON_UPDATE_REQ_ID, UTIL_SEQ_RFU, Beacon_Update);
 8007860:	4a07      	ldr	r2, [pc, #28]	@ (8007880 <APP_BLE_Init+0x78>)
 8007862:	2100      	movs	r1, #0
 8007864:	2001      	movs	r0, #1
 8007866:	f000 fe1d 	bl	80084a4 <UTIL_SEQ_RegTask>
    EddystoneTLM_Process();
  }
  else if (CFG_BEACON_TYPE & CFG_IBEACON)
  {
    APP_DBG_MSG("Ibeacon advertise\n\r");
    IBeacon_Process();
 800786a:	f000 fa6d 	bl	8007d48 <IBeacon_Process>
  }
  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800786e:	bf00      	nop
}
 8007870:	3740      	adds	r7, #64	@ 0x40
 8007872:	46bd      	mov	sp, r7
 8007874:	bdb0      	pop	{r4, r5, r7, pc}
 8007876:	bf00      	nop
 8007878:	080087f4 	.word	0x080087f4
 800787c:	08006bc9 	.word	0x08006bc9
 8007880:	080079ed 	.word	0x080079ed

08007884 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8007884:	b480      	push	{r7}
 8007886:	b087      	sub	sp, #28
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	3301      	adds	r3, #1
 8007890:	617b      	str	r3, [r7, #20]

  switch (p_event_pckt->evt)
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	2bff      	cmp	r3, #255	@ 0xff
 8007898:	d00e      	beq.n	80078b8 <SVCCTL_App_Notification+0x34>
 800789a:	2bff      	cmp	r3, #255	@ 0xff
 800789c:	dc19      	bgt.n	80078d2 <SVCCTL_App_Notification+0x4e>
 800789e:	2b05      	cmp	r3, #5
 80078a0:	d019      	beq.n	80078d6 <SVCCTL_App_Notification+0x52>
 80078a2:	2b3e      	cmp	r3, #62	@ 0x3e
 80078a4:	d000      	beq.n	80078a8 <SVCCTL_App_Notification+0x24>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 80078a6:	e014      	b.n	80078d2 <SVCCTL_App_Notification+0x4e>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	3302      	adds	r3, #2
 80078ac:	60fb      	str	r3, [r7, #12]
      switch (p_meta_evt->subevent)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	2b01      	cmp	r3, #1
          break;
 80078b4:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 80078b6:	e011      	b.n	80078dc <SVCCTL_App_Notification+0x58>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	3302      	adds	r3, #2
 80078bc:	613b      	str	r3, [r7, #16]
      switch (p_blecore_evt->ecode)
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	881b      	ldrh	r3, [r3, #0]
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	461a      	mov	r2, r3
 80078c6:	f240 4307 	movw	r3, #1031	@ 0x407
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d105      	bne.n	80078da <SVCCTL_App_Notification+0x56>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 80078ce:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80078d0:	e003      	b.n	80078da <SVCCTL_App_Notification+0x56>
      break;
 80078d2:	bf00      	nop
 80078d4:	e002      	b.n	80078dc <SVCCTL_App_Notification+0x58>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 80078d6:	bf00      	nop
 80078d8:	e000      	b.n	80078dc <SVCCTL_App_Notification+0x58>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80078da:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80078dc:	2301      	movs	r3, #1
}
 80078de:	4618      	mov	r0, r3
 80078e0:	371c      	adds	r7, #28
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr
	...

080078ec <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80078f2:	4b06      	ldr	r3, [pc, #24]	@ (800790c <Ble_Tl_Init+0x20>)
 80078f4:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80078f6:	4b06      	ldr	r3, [pc, #24]	@ (8007910 <Ble_Tl_Init+0x24>)
 80078f8:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80078fa:	463b      	mov	r3, r7
 80078fc:	4619      	mov	r1, r3
 80078fe:	4805      	ldr	r0, [pc, #20]	@ (8007914 <Ble_Tl_Init+0x28>)
 8007900:	f7ff f946 	bl	8006b90 <hci_init>

  return;
 8007904:	bf00      	nop
}
 8007906:	3708      	adds	r7, #8
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}
 800790c:	200300d8 	.word	0x200300d8
 8007910:	08007b55 	.word	0x08007b55
 8007914:	08007b1d 	.word	0x08007b1d

08007918 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8007918:	b5b0      	push	{r4, r5, r7, lr}
 800791a:	b088      	sub	sp, #32
 800791c:	af02      	add	r7, sp, #8
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800791e:	2300      	movs	r3, #0
 8007920:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007922:	2392      	movs	r3, #146	@ 0x92
 8007924:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8007926:	f7fe fe89 	bl	800663c <hci_reset>
 800792a:	4603      	mov	r3, r0
 800792c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800792e:	f000 f88f 	bl	8007a50 <BleGetBdAddress>
 8007932:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8007934:	693a      	ldr	r2, [r7, #16]
 8007936:	2106      	movs	r1, #6
 8007938:	2000      	movs	r0, #0
 800793a:	f7fe fd93 	bl	8006464 <aci_hal_write_config_data>
 800793e:	4603      	mov	r3, r0
 8007940:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8007942:	4a27      	ldr	r2, [pc, #156]	@ (80079e0 <Ble_Hci_Gap_Gatt_Init+0xc8>)
 8007944:	2110      	movs	r1, #16
 8007946:	2018      	movs	r0, #24
 8007948:	f7fe fd8c 	bl	8006464 <aci_hal_write_config_data>
 800794c:	4603      	mov	r3, r0
 800794e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8007950:	4a24      	ldr	r2, [pc, #144]	@ (80079e4 <Ble_Hci_Gap_Gatt_Init+0xcc>)
 8007952:	2110      	movs	r1, #16
 8007954:	2008      	movs	r0, #8
 8007956:	f7fe fd85 	bl	8006464 <aci_hal_write_config_data>
 800795a:	4603      	mov	r3, r0
 800795c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800795e:	2118      	movs	r1, #24
 8007960:	2001      	movs	r0, #1
 8007962:	f7fe fe04 	bl	800656e <aci_hal_set_tx_power_level>
 8007966:	4603      	mov	r3, r0
 8007968:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800796a:	f7fe fcad 	bl	80062c8 <aci_gatt_init>
 800796e:	4603      	mov	r3, r0
 8007970:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8007972:	2300      	movs	r3, #0
 8007974:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8007976:	7bfb      	ldrb	r3, [r7, #15]
 8007978:	f043 0301 	orr.w	r3, r3, #1
 800797c:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800797e:	7bfb      	ldrb	r3, [r7, #15]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d01f      	beq.n	80079c4 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = "BEACON";
 8007984:	4b18      	ldr	r3, [pc, #96]	@ (80079e8 <Ble_Hci_Gap_Gatt_Init+0xd0>)
 8007986:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8007988:	1dba      	adds	r2, r7, #6
 800798a:	7bf8      	ldrb	r0, [r7, #15]
 800798c:	1cbb      	adds	r3, r7, #2
 800798e:	9301      	str	r3, [sp, #4]
 8007990:	1d3b      	adds	r3, r7, #4
 8007992:	9300      	str	r3, [sp, #0]
 8007994:	4613      	mov	r3, r2
 8007996:	2207      	movs	r2, #7
 8007998:	2100      	movs	r1, #0
 800799a:	f7fe fb22 	bl	8005fe2 <aci_gap_init>
 800799e:	4603      	mov	r3, r0
 80079a0:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 80079a2:	88fc      	ldrh	r4, [r7, #6]
 80079a4:	88bd      	ldrh	r5, [r7, #4]
 80079a6:	68b8      	ldr	r0, [r7, #8]
 80079a8:	f7f8 fbe8 	bl	800017c <strlen>
 80079ac:	4603      	mov	r3, r0
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	9300      	str	r3, [sp, #0]
 80079b4:	4613      	mov	r3, r2
 80079b6:	2200      	movs	r2, #0
 80079b8:	4629      	mov	r1, r5
 80079ba:	4620      	mov	r0, r4
 80079bc:	f7fe fca9 	bl	8006312 <aci_gatt_update_char_value>
 80079c0:	4603      	mov	r3, r0
 80079c2:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 80079c4:	88f8      	ldrh	r0, [r7, #6]
 80079c6:	8879      	ldrh	r1, [r7, #2]
 80079c8:	463b      	mov	r3, r7
 80079ca:	9300      	str	r3, [sp, #0]
 80079cc:	2302      	movs	r3, #2
 80079ce:	2200      	movs	r2, #0
 80079d0:	f7fe fc9f 	bl	8006312 <aci_gatt_update_char_value>
 80079d4:	4603      	mov	r3, r0
 80079d6:	75fb      	strb	r3, [r7, #23]
  else
  {
    BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Appearance\n");
  }

}
 80079d8:	bf00      	nop
 80079da:	3718      	adds	r7, #24
 80079dc:	46bd      	mov	sp, r7
 80079de:	bdb0      	pop	{r4, r5, r7, pc}
 80079e0:	08008a4c 	.word	0x08008a4c
 80079e4:	08008a5c 	.word	0x08008a5c
 80079e8:	08008830 	.word	0x08008830

080079ec <Beacon_Update>:
static void Beacon_Update(void)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
  FLASH_EraseInitTypeDef erase;
  uint32_t pageError = 0;
 80079f2:	2300      	movs	r3, #0
 80079f4:	603b      	str	r3, [r7, #0]

  if (sector_type != 0)
 80079f6:	4b13      	ldr	r3, [pc, #76]	@ (8007a44 <Beacon_Update+0x58>)
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d01b      	beq.n	8007a36 <Beacon_Update+0x4a>
  {
    erase.TypeErase = FLASH_TYPEERASE_PAGES;
 80079fe:	2302      	movs	r3, #2
 8007a00:	607b      	str	r3, [r7, #4]
    erase.Page      = sector_type;
 8007a02:	4b10      	ldr	r3, [pc, #64]	@ (8007a44 <Beacon_Update+0x58>)
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	60bb      	str	r3, [r7, #8]
    if (sector_type == APP_SECTORS)
 8007a08:	4b0e      	ldr	r3, [pc, #56]	@ (8007a44 <Beacon_Update+0x58>)
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	2b07      	cmp	r3, #7
 8007a0e:	d102      	bne.n	8007a16 <Beacon_Update+0x2a>
    {
      erase.NbPages = 2;  /* 2 sectors for beacon application */
 8007a10:	2302      	movs	r3, #2
 8007a12:	60fb      	str	r3, [r7, #12]
 8007a14:	e001      	b.n	8007a1a <Beacon_Update+0x2e>
    }
    else
    {
      erase.NbPages = 1; /* 1 sector for beacon user data */
 8007a16:	2301      	movs	r3, #1
 8007a18:	60fb      	str	r3, [r7, #12]
    }

    HAL_FLASH_Unlock();
 8007a1a:	f7fa fc7d 	bl	8002318 <HAL_FLASH_Unlock>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_OPTVERR);
 8007a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8007a48 <Beacon_Update+0x5c>)
 8007a20:	f248 0211 	movw	r2, #32785	@ 0x8011
 8007a24:	611a      	str	r2, [r3, #16]

    HAL_FLASHEx_Erase(&erase, &pageError);
 8007a26:	463a      	mov	r2, r7
 8007a28:	1d3b      	adds	r3, r7, #4
 8007a2a:	4611      	mov	r1, r2
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f7fa fd1d 	bl	800246c <HAL_FLASHEx_Erase>

    HAL_FLASH_Lock();
 8007a32:	f7fa fc93 	bl	800235c <HAL_FLASH_Lock>
  }

  *(uint32_t*) SRAM1_BASE = BOOT_MODE_AND_SECTOR;
 8007a36:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8007a3a:	4a04      	ldr	r2, [pc, #16]	@ (8007a4c <Beacon_Update+0x60>)
 8007a3c:	601a      	str	r2, [r3, #0]
  /**
   * Boot Mode:    1 (OTA)
   * Sector Index: 6
   * Nb Sectors  : 1
   */
  NVIC_SystemReset();
 8007a3e:	f7ff fea9 	bl	8007794 <__NVIC_SystemReset>
 8007a42:	bf00      	nop
 8007a44:	2000054e 	.word	0x2000054e
 8007a48:	58004000 	.word	0x58004000
 8007a4c:	00010601 	.word	0x00010601

08007a50 <BleGetBdAddress>:
}

const uint8_t* BleGetBdAddress(void)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8007a56:	f7ff feb3 	bl	80077c0 <LL_FLASH_GetUDN>
 8007a5a:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a62:	d023      	beq.n	8007aac <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8007a64:	f7ff fec4 	bl	80077f0 <LL_FLASH_GetSTCompanyID>
 8007a68:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8007a6a:	f7ff feb5 	bl	80077d8 <LL_FLASH_GetDeviceID>
 8007a6e:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	b2da      	uxtb	r2, r3
 8007a74:	4b16      	ldr	r3, [pc, #88]	@ (8007ad0 <BleGetBdAddress+0x80>)
 8007a76:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	0a1b      	lsrs	r3, r3, #8
 8007a7c:	b2da      	uxtb	r2, r3
 8007a7e:	4b14      	ldr	r3, [pc, #80]	@ (8007ad0 <BleGetBdAddress+0x80>)
 8007a80:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	b2da      	uxtb	r2, r3
 8007a86:	4b12      	ldr	r3, [pc, #72]	@ (8007ad0 <BleGetBdAddress+0x80>)
 8007a88:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	b2da      	uxtb	r2, r3
 8007a8e:	4b10      	ldr	r3, [pc, #64]	@ (8007ad0 <BleGetBdAddress+0x80>)
 8007a90:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	0a1b      	lsrs	r3, r3, #8
 8007a96:	b2da      	uxtb	r2, r3
 8007a98:	4b0d      	ldr	r3, [pc, #52]	@ (8007ad0 <BleGetBdAddress+0x80>)
 8007a9a:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	0c1b      	lsrs	r3, r3, #16
 8007aa0:	b2da      	uxtb	r2, r3
 8007aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8007ad0 <BleGetBdAddress+0x80>)
 8007aa4:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8007aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8007ad0 <BleGetBdAddress+0x80>)
 8007aa8:	617b      	str	r3, [r7, #20]
 8007aaa:	e00b      	b.n	8007ac4 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8007aac:	2000      	movs	r0, #0
 8007aae:	f7ff fd8b 	bl	80075c8 <OTP_Read>
 8007ab2:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d002      	beq.n	8007ac0 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	617b      	str	r3, [r7, #20]
 8007abe:	e001      	b.n	8007ac4 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8007ac0:	4b04      	ldr	r3, [pc, #16]	@ (8007ad4 <BleGetBdAddress+0x84>)
 8007ac2:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8007ac4:	697b      	ldr	r3, [r7, #20]
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3718      	adds	r7, #24
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	20000548 	.word	0x20000548
 8007ad4:	08008a44 	.word	0x08008a44

08007ad8 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8007ae0:	2100      	movs	r1, #0
 8007ae2:	2002      	movs	r0, #2
 8007ae4:	f000 fd00 	bl	80084e8 <UTIL_SEQ_SetTask>

  return;
 8007ae8:	bf00      	nop
}
 8007aea:	3708      	adds	r7, #8
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8007af8:	2001      	movs	r0, #1
 8007afa:	f000 fd61 	bl	80085c0 <UTIL_SEQ_SetEvt>

  return;
 8007afe:	bf00      	nop
}
 8007b00:	3708      	adds	r7, #8
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b082      	sub	sp, #8
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8007b0e:	2001      	movs	r0, #1
 8007b10:	f000 fd76 	bl	8008600 <UTIL_SEQ_WaitEvt>

  return;
 8007b14:	bf00      	nop
}
 8007b16:	3708      	adds	r7, #8
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	3308      	adds	r3, #8
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f7fe fee8 	bl	8006904 <SVCCTL_UserEvtRx>
 8007b34:	4603      	mov	r3, r0
 8007b36:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8007b38:	7afb      	ldrb	r3, [r7, #11]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d003      	beq.n	8007b46 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2201      	movs	r2, #1
 8007b42:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8007b44:	e003      	b.n	8007b4e <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	701a      	strb	r2, [r3, #0]
  return;
 8007b4c:	bf00      	nop
}
 8007b4e:	3710      	adds	r7, #16
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8007b5e:	79fb      	ldrb	r3, [r7, #7]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d002      	beq.n	8007b6a <BLE_StatusNot+0x16>
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d006      	beq.n	8007b76 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8007b68:	e00b      	b.n	8007b82 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	f000 fce6 	bl	8008540 <UTIL_SEQ_PauseTask>
      break;
 8007b74:	e005      	b.n	8007b82 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8007b76:	2303      	movs	r3, #3
 8007b78:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8007b7a:	68f8      	ldr	r0, [r7, #12]
 8007b7c:	f000 fd00 	bl	8008580 <UTIL_SEQ_ResumeTask>
      break;
 8007b80:	bf00      	nop
  }

  return;
 8007b82:	bf00      	nop
}
 8007b84:	3710      	adds	r7, #16
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
	...

08007b8c <IBeacon_Init>:
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/

static tBleStatus IBeacon_Init(IBeacon_InitTypeDef *IBeacon_Init)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b094      	sub	sp, #80	@ 0x50
 8007b90:	af08      	add	r7, sp, #32
 8007b92:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN IBeacon_Init_1 */

/* USER CODE END IBeacon_Init_1 */
  tBleStatus ret = BLE_STATUS_SUCCESS;
 8007b94:	2300      	movs	r3, #0
 8007b96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint16_t AdvertisingInterval = (IBeacon_Init->AdvertisingInterval * ADVERTISING_INTERVAL_INCREMENT / 10);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	881b      	ldrh	r3, [r3, #0]
 8007b9e:	011b      	lsls	r3, r3, #4
 8007ba0:	4a67      	ldr	r2, [pc, #412]	@ (8007d40 <IBeacon_Init+0x1b4>)
 8007ba2:	fb82 1203 	smull	r1, r2, r2, r3
 8007ba6:	1092      	asrs	r2, r2, #2
 8007ba8:	17db      	asrs	r3, r3, #31
 8007baa:	1ad3      	subs	r3, r2, r3
 8007bac:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* Disable scan response. */
  hci_le_set_scan_response_data(0, NULL);
 8007bae:	2100      	movs	r1, #0
 8007bb0:	2000      	movs	r0, #0
 8007bb2:	f7fe fd67 	bl	8006684 <hci_le_set_scan_response_data>

  /* Put the device in a non-connectable mode. */
  ret = aci_gap_set_discoverable(ADV_NONCONN_IND,                          /*< Advertise as non-connectable, undirected. */
 8007bb6:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8007bb8:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8007bba:	2300      	movs	r3, #0
 8007bbc:	9306      	str	r3, [sp, #24]
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	9305      	str	r3, [sp, #20]
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	9304      	str	r3, [sp, #16]
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	9303      	str	r3, [sp, #12]
 8007bca:	2300      	movs	r3, #0
 8007bcc:	9302      	str	r3, [sp, #8]
 8007bce:	2300      	movs	r3, #0
 8007bd0:	9301      	str	r3, [sp, #4]
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	9300      	str	r3, [sp, #0]
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	2003      	movs	r0, #3
 8007bda:	f7fe f908 	bl	8005dee <aci_gap_set_discoverable>
 8007bde:	4603      	mov	r3, r0
 8007be0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                                 GAP_PUBLIC_ADDR, NO_WHITE_LIST_USE,           /*< Use the public address, with no white list. */
                                 0, NULL,                                  /*< Do not use a local name. */
                                 0, NULL,                                  /*< Do not include the service UUID list. */
                                 0, 0);                                    /*< Do not set a slave connection interval. */

  if (ret != BLE_STATUS_SUCCESS)
 8007be4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d002      	beq.n	8007bf2 <IBeacon_Init+0x66>
  {
    return ret;
 8007bec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007bf0:	e0a1      	b.n	8007d36 <IBeacon_Init+0x1aa>
  }

  /* Remove the TX power level advertisement (this is done to decrease the packet size). */
  ret = aci_gap_delete_ad_type(AD_TYPE_TX_POWER_LEVEL);
 8007bf2:	200a      	movs	r0, #10
 8007bf4:	f7fe fb14 	bl	8006220 <aci_gap_delete_ad_type>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 8007bfe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d002      	beq.n	8007c0c <IBeacon_Init+0x80>
  {
    return ret;
 8007c06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007c0a:	e094      	b.n	8007d36 <IBeacon_Init+0x1aa>
  }

  uint8_t service_data[] =
 8007c0c:	231a      	movs	r3, #26
 8007c0e:	743b      	strb	r3, [r7, #16]
 8007c10:	23ff      	movs	r3, #255	@ 0xff
 8007c12:	747b      	strb	r3, [r7, #17]
 8007c14:	234c      	movs	r3, #76	@ 0x4c
 8007c16:	74bb      	strb	r3, [r7, #18]
 8007c18:	2300      	movs	r3, #0
 8007c1a:	74fb      	strb	r3, [r7, #19]
 8007c1c:	2302      	movs	r3, #2
 8007c1e:	753b      	strb	r3, [r7, #20]
 8007c20:	2315      	movs	r3, #21
 8007c22:	757b      	strb	r3, [r7, #21]
  {
    26,                                                                      /*< Length. */
    AD_TYPE_MANUFACTURER_SPECIFIC_DATA,                                      /*< Manufacturer Specific Data data type value. */
    0x4C, 0x00, 0x02, 0x15,                                                  /*< 32-bit Manufacturer Data. */
    IBeacon_Init->UuID[0],                                                   /*< 16-byte Proximity UUID. */
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	781b      	ldrb	r3, [r3, #0]
  uint8_t service_data[] =
 8007c2a:	75bb      	strb	r3, [r7, #22]
    IBeacon_Init->UuID[1],
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8007c30:	785b      	ldrb	r3, [r3, #1]
 8007c32:	75fb      	strb	r3, [r7, #23]
    IBeacon_Init->UuID[2],
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8007c38:	789b      	ldrb	r3, [r3, #2]
 8007c3a:	763b      	strb	r3, [r7, #24]
    IBeacon_Init->UuID[3],
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8007c40:	78db      	ldrb	r3, [r3, #3]
 8007c42:	767b      	strb	r3, [r7, #25]
    IBeacon_Init->UuID[4],
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8007c48:	791b      	ldrb	r3, [r3, #4]
 8007c4a:	76bb      	strb	r3, [r7, #26]
    IBeacon_Init->UuID[5],
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8007c50:	795b      	ldrb	r3, [r3, #5]
 8007c52:	76fb      	strb	r3, [r7, #27]
    IBeacon_Init->UuID[6],
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8007c58:	799b      	ldrb	r3, [r3, #6]
 8007c5a:	773b      	strb	r3, [r7, #28]
    IBeacon_Init->UuID[7],
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8007c60:	79db      	ldrb	r3, [r3, #7]
 8007c62:	777b      	strb	r3, [r7, #29]
    IBeacon_Init->UuID[8],
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8007c68:	7a1b      	ldrb	r3, [r3, #8]
 8007c6a:	77bb      	strb	r3, [r7, #30]
    IBeacon_Init->UuID[9],
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8007c70:	7a5b      	ldrb	r3, [r3, #9]
 8007c72:	77fb      	strb	r3, [r7, #31]
    IBeacon_Init->UuID[10],
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8007c78:	7a9b      	ldrb	r3, [r3, #10]
 8007c7a:	f887 3020 	strb.w	r3, [r7, #32]
    IBeacon_Init->UuID[11],
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8007c82:	7adb      	ldrb	r3, [r3, #11]
 8007c84:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    IBeacon_Init->UuID[12],
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8007c8c:	7b1b      	ldrb	r3, [r3, #12]
 8007c8e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    IBeacon_Init->UuID[13],
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8007c96:	7b5b      	ldrb	r3, [r3, #13]
 8007c98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    IBeacon_Init->UuID[14],
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8007ca0:	7b9b      	ldrb	r3, [r3, #14]
 8007ca2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    IBeacon_Init->UuID[15],
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8007caa:	7bdb      	ldrb	r3, [r3, #15]
 8007cac:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    IBeacon_Init->MajorID[0],                                                /*< 2-byte Major. */
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	781b      	ldrb	r3, [r3, #0]
  uint8_t service_data[] =
 8007cb6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    IBeacon_Init->MajorID[1],
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	689b      	ldr	r3, [r3, #8]
  uint8_t service_data[] =
 8007cbe:	785b      	ldrb	r3, [r3, #1]
 8007cc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    IBeacon_Init->MinorID[0],                                                /*< 2-byte Minor. */
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	781b      	ldrb	r3, [r3, #0]
  uint8_t service_data[] =
 8007cca:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    IBeacon_Init->MinorID[1],
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	68db      	ldr	r3, [r3, #12]
  uint8_t service_data[] =
 8007cd2:	785b      	ldrb	r3, [r3, #1]
 8007cd4:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    IBeacon_Init->CalibratedTxPower,                                         /*< Ranging data. */
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	7c1b      	ldrb	r3, [r3, #16]
  uint8_t service_data[] =
 8007cdc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  };

  uint8_t flags[] =
 8007ce0:	4a18      	ldr	r2, [pc, #96]	@ (8007d44 <IBeacon_Init+0x1b8>)
 8007ce2:	f107 030c 	add.w	r3, r7, #12
 8007ce6:	6812      	ldr	r2, [r2, #0]
 8007ce8:	4611      	mov	r1, r2
 8007cea:	8019      	strh	r1, [r3, #0]
 8007cec:	3302      	adds	r3, #2
 8007cee:	0c12      	lsrs	r2, r2, #16
 8007cf0:	701a      	strb	r2, [r3, #0]
    AD_TYPE_FLAGS,                                                          /*< Flags data type value. */
    (FLAG_BIT_LE_GENERAL_DISCOVERABLE_MODE | FLAG_BIT_BR_EDR_NOT_SUPPORTED) /*< BLE general discoverable, without BR/EDR support. */
  };

  /* Update the service data. */
  ret = aci_gap_update_adv_data(sizeof(service_data), service_data);
 8007cf2:	f107 0310 	add.w	r3, r7, #16
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	201b      	movs	r0, #27
 8007cfa:	f7fe fa1f 	bl	800613c <aci_gap_update_adv_data>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 8007d04:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d002      	beq.n	8007d12 <IBeacon_Init+0x186>
  {
    return ret;
 8007d0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007d10:	e011      	b.n	8007d36 <IBeacon_Init+0x1aa>
  }

  /* Update the adverstising flags. */
  ret = aci_gap_update_adv_data(sizeof(flags), flags);
 8007d12:	f107 030c 	add.w	r3, r7, #12
 8007d16:	4619      	mov	r1, r3
 8007d18:	2003      	movs	r0, #3
 8007d1a:	f7fe fa0f 	bl	800613c <aci_gap_update_adv_data>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 8007d24:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d002      	beq.n	8007d32 <IBeacon_Init+0x1a6>
  {
    return ret;
 8007d2c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007d30:	e001      	b.n	8007d36 <IBeacon_Init+0x1aa>
  }
/* USER CODE BEGIN IBeacon_Init_2 */

/* USER CODE END IBeacon_Init_2 */
  return ret;
 8007d32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3730      	adds	r7, #48	@ 0x30
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	66666667 	.word	0x66666667
 8007d44:	08008838 	.word	0x08008838

08007d48 <IBeacon_Process>:

void IBeacon_Process(void)
{
 8007d48:	b590      	push	{r4, r7, lr}
 8007d4a:	b08d      	sub	sp, #52	@ 0x34
 8007d4c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN IBeacon_Process_1 */

/* USER CODE END IBeacon_Process_1 */
  /* Default ibeacon */
  uint8_t UuID[]    = { UUID };
 8007d4e:	4b11      	ldr	r3, [pc, #68]	@ (8007d94 <IBeacon_Process+0x4c>)
 8007d50:	f107 0420 	add.w	r4, r7, #32
 8007d54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007d56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint8_t MajorID[] = { MAJOR_ID };
 8007d5a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007d5e:	83bb      	strh	r3, [r7, #28]
  uint8_t MinorID[] = { MINOR_ID };
 8007d60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007d64:	833b      	strh	r3, [r7, #24]

  IBeacon_InitTypeDef IBeacon_InitStruct =
 8007d66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007d6a:	80bb      	strh	r3, [r7, #4]
 8007d6c:	f107 0320 	add.w	r3, r7, #32
 8007d70:	60bb      	str	r3, [r7, #8]
 8007d72:	f107 031c 	add.w	r3, r7, #28
 8007d76:	60fb      	str	r3, [r7, #12]
 8007d78:	f107 0318 	add.w	r3, r7, #24
 8007d7c:	613b      	str	r3, [r7, #16]
 8007d7e:	23c1      	movs	r3, #193	@ 0xc1
 8007d80:	753b      	strb	r3, [r7, #20]
    data_address += 2;
    IBeacon_InitStruct.CalibratedTxPower = *(uint8_t *)(data_address);
  }
#endif

  IBeacon_Init(&IBeacon_InitStruct);
 8007d82:	1d3b      	adds	r3, r7, #4
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7ff ff01 	bl	8007b8c <IBeacon_Init>
/* USER CODE BEGIN IBeacon_Process_2 */

/* USER CODE END IBeacon_Process_2 */
}
 8007d8a:	bf00      	nop
 8007d8c:	3734      	adds	r7, #52	@ 0x34
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd90      	pop	{r4, r7, pc}
 8007d92:	bf00      	nop
 8007d94:	0800883c 	.word	0x0800883c

08007d98 <LL_PWR_EnableBootC2>:
{
 8007d98:	b480      	push	{r7}
 8007d9a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8007d9c:	4b05      	ldr	r3, [pc, #20]	@ (8007db4 <LL_PWR_EnableBootC2+0x1c>)
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	4a04      	ldr	r2, [pc, #16]	@ (8007db4 <LL_PWR_EnableBootC2+0x1c>)
 8007da2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007da6:	60d3      	str	r3, [r2, #12]
}
 8007da8:	bf00      	nop
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr
 8007db2:	bf00      	nop
 8007db4:	58000400 	.word	0x58000400

08007db8 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8007dc0:	4b06      	ldr	r3, [pc, #24]	@ (8007ddc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8007dc2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8007dc6:	4905      	ldr	r1, [pc, #20]	@ (8007ddc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8007dd0:	bf00      	nop
 8007dd2:	370c      	adds	r7, #12
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr
 8007ddc:	58000800 	.word	0x58000800

08007de0 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8007de8:	4b05      	ldr	r3, [pc, #20]	@ (8007e00 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007dea:	6a1a      	ldr	r2, [r3, #32]
 8007dec:	4904      	ldr	r1, [pc, #16]	@ (8007e00 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	620b      	str	r3, [r1, #32]
}
 8007df4:	bf00      	nop
 8007df6:	370c      	adds	r7, #12
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr
 8007e00:	58000800 	.word	0x58000800

08007e04 <LL_AHB3_GRP1_EnableClock>:
{
 8007e04:	b480      	push	{r7}
 8007e06:	b085      	sub	sp, #20
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8007e0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007e12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8007e1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4013      	ands	r3, r2
 8007e26:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007e28:	68fb      	ldr	r3, [r7, #12]
}
 8007e2a:	bf00      	nop
 8007e2c:	3714      	adds	r7, #20
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr

08007e36 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8007e36:	b480      	push	{r7}
 8007e38:	b085      	sub	sp, #20
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8007e3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e42:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8007e46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8007e52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e56:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4013      	ands	r3, r2
 8007e5e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007e60:	68fb      	ldr	r3, [r7, #12]
}
 8007e62:	bf00      	nop
 8007e64:	3714      	adds	r7, #20
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr

08007e6e <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8007e6e:	b480      	push	{r7}
 8007e70:	b083      	sub	sp, #12
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	601a      	str	r2, [r3, #0]
}
 8007e82:	bf00      	nop
 8007e84:	370c      	adds	r7, #12
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr

08007e8e <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8007e8e:	b480      	push	{r7}
 8007e90:	b083      	sub	sp, #12
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f043 0201 	orr.w	r2, r3, #1
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	601a      	str	r2, [r3, #0]
}
 8007ea2:	bf00      	nop
 8007ea4:	370c      	adds	r7, #12
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr

08007eae <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8007eae:	b480      	push	{r7}
 8007eb0:	b083      	sub	sp, #12
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
 8007eb6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	685a      	ldr	r2, [r3, #4]
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	041b      	lsls	r3, r3, #16
 8007ec0:	43db      	mvns	r3, r3
 8007ec2:	401a      	ands	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	605a      	str	r2, [r3, #4]
}
 8007ec8:	bf00      	nop
 8007eca:	370c      	adds	r7, #12
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	685a      	ldr	r2, [r3, #4]
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	041b      	lsls	r3, r3, #16
 8007ee6:	431a      	orrs	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	605a      	str	r2, [r3, #4]
}
 8007eec:	bf00      	nop
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	685a      	ldr	r2, [r3, #4]
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	43db      	mvns	r3, r3
 8007f0a:	401a      	ands	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	605a      	str	r2, [r3, #4]
}
 8007f10:	bf00      	nop
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	683a      	ldr	r2, [r7, #0]
 8007f2a:	609a      	str	r2, [r3, #8]
}
 8007f2c:	bf00      	nop
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	041a      	lsls	r2, r3, #16
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	609a      	str	r2, [r3, #8]
}
 8007f4a:	bf00      	nop
 8007f4c:	370c      	adds	r7, #12
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr

08007f56 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8007f56:	b480      	push	{r7}
 8007f58:	b083      	sub	sp, #12
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
 8007f5e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	68da      	ldr	r2, [r3, #12]
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	4013      	ands	r3, r2
 8007f68:	683a      	ldr	r2, [r7, #0]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d101      	bne.n	8007f72 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e000      	b.n	8007f74 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8007f72:	2300      	movs	r3, #0
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	69da      	ldr	r2, [r3, #28]
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	4013      	ands	r3, r2
 8007f92:	683a      	ldr	r2, [r7, #0]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d101      	bne.n	8007f9c <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8007f98:	2301      	movs	r3, #1
 8007f9a:	e000      	b.n	8007f9e <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	370c      	adds	r7, #12
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr
	...

08007fac <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8007fb0:	2102      	movs	r1, #2
 8007fb2:	4818      	ldr	r0, [pc, #96]	@ (8008014 <HW_IPCC_Rx_Handler+0x68>)
 8007fb4:	f7ff ffe4 	bl	8007f80 <LL_C2_IPCC_IsActiveFlag_CHx>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d008      	beq.n	8007fd0 <HW_IPCC_Rx_Handler+0x24>
 8007fbe:	4b15      	ldr	r3, [pc, #84]	@ (8008014 <HW_IPCC_Rx_Handler+0x68>)
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	f003 0302 	and.w	r3, r3, #2
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d102      	bne.n	8007fd0 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8007fca:	f000 f8d5 	bl	8008178 <HW_IPCC_SYS_EvtHandler>
 8007fce:	e01e      	b.n	800800e <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8007fd0:	2101      	movs	r1, #1
 8007fd2:	4810      	ldr	r0, [pc, #64]	@ (8008014 <HW_IPCC_Rx_Handler+0x68>)
 8007fd4:	f7ff ffd4 	bl	8007f80 <LL_C2_IPCC_IsActiveFlag_CHx>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d008      	beq.n	8007ff0 <HW_IPCC_Rx_Handler+0x44>
 8007fde:	4b0d      	ldr	r3, [pc, #52]	@ (8008014 <HW_IPCC_Rx_Handler+0x68>)
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	f003 0301 	and.w	r3, r3, #1
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d102      	bne.n	8007ff0 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8007fea:	f000 f889 	bl	8008100 <HW_IPCC_BLE_EvtHandler>
 8007fee:	e00e      	b.n	800800e <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8007ff0:	2108      	movs	r1, #8
 8007ff2:	4808      	ldr	r0, [pc, #32]	@ (8008014 <HW_IPCC_Rx_Handler+0x68>)
 8007ff4:	f7ff ffc4 	bl	8007f80 <LL_C2_IPCC_IsActiveFlag_CHx>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d008      	beq.n	8008010 <HW_IPCC_Rx_Handler+0x64>
 8007ffe:	4b05      	ldr	r3, [pc, #20]	@ (8008014 <HW_IPCC_Rx_Handler+0x68>)
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	f003 0308 	and.w	r3, r3, #8
 8008006:	2b00      	cmp	r3, #0
 8008008:	d102      	bne.n	8008010 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800800a:	f000 f901 	bl	8008210 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800800e:	bf00      	nop
 8008010:	bf00      	nop
}
 8008012:	bd80      	pop	{r7, pc}
 8008014:	58000c00 	.word	0x58000c00

08008018 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8008018:	b580      	push	{r7, lr}
 800801a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800801c:	2102      	movs	r1, #2
 800801e:	4818      	ldr	r0, [pc, #96]	@ (8008080 <HW_IPCC_Tx_Handler+0x68>)
 8008020:	f7ff ff99 	bl	8007f56 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008024:	4603      	mov	r3, r0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d108      	bne.n	800803c <HW_IPCC_Tx_Handler+0x24>
 800802a:	4b15      	ldr	r3, [pc, #84]	@ (8008080 <HW_IPCC_Tx_Handler+0x68>)
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008032:	2b00      	cmp	r3, #0
 8008034:	d102      	bne.n	800803c <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8008036:	f000 f893 	bl	8008160 <HW_IPCC_SYS_CmdEvtHandler>
 800803a:	e01e      	b.n	800807a <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800803c:	2108      	movs	r1, #8
 800803e:	4810      	ldr	r0, [pc, #64]	@ (8008080 <HW_IPCC_Tx_Handler+0x68>)
 8008040:	f7ff ff89 	bl	8007f56 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d108      	bne.n	800805c <HW_IPCC_Tx_Handler+0x44>
 800804a:	4b0d      	ldr	r3, [pc, #52]	@ (8008080 <HW_IPCC_Tx_Handler+0x68>)
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008052:	2b00      	cmp	r3, #0
 8008054:	d102      	bne.n	800805c <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8008056:	f000 f8bd 	bl	80081d4 <HW_IPCC_MM_FreeBufHandler>
 800805a:	e00e      	b.n	800807a <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800805c:	2120      	movs	r1, #32
 800805e:	4808      	ldr	r0, [pc, #32]	@ (8008080 <HW_IPCC_Tx_Handler+0x68>)
 8008060:	f7ff ff79 	bl	8007f56 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d108      	bne.n	800807c <HW_IPCC_Tx_Handler+0x64>
 800806a:	4b05      	ldr	r3, [pc, #20]	@ (8008080 <HW_IPCC_Tx_Handler+0x68>)
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008072:	2b00      	cmp	r3, #0
 8008074:	d102      	bne.n	800807c <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8008076:	f000 f84f 	bl	8008118 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800807a:	bf00      	nop
 800807c:	bf00      	nop
}
 800807e:	bd80      	pop	{r7, pc}
 8008080:	58000c00 	.word	0x58000c00

08008084 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8008084:	b580      	push	{r7, lr}
 8008086:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8008088:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800808c:	f7ff fed3 	bl	8007e36 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8008090:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008094:	f7ff fea4 	bl	8007de0 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8008098:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800809c:	f7ff fe8c 	bl	8007db8 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80080a0:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80080a2:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80080a4:	f7ff fe78 	bl	8007d98 <LL_PWR_EnableBootC2>

  return;
 80080a8:	bf00      	nop
}
 80080aa:	bd80      	pop	{r7, pc}

080080ac <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80080b0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80080b4:	f7ff fea6 	bl	8007e04 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80080b8:	4806      	ldr	r0, [pc, #24]	@ (80080d4 <HW_IPCC_Init+0x28>)
 80080ba:	f7ff fee8 	bl	8007e8e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80080be:	4805      	ldr	r0, [pc, #20]	@ (80080d4 <HW_IPCC_Init+0x28>)
 80080c0:	f7ff fed5 	bl	8007e6e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80080c4:	202c      	movs	r0, #44	@ 0x2c
 80080c6:	f7fa f824 	bl	8002112 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80080ca:	202d      	movs	r0, #45	@ 0x2d
 80080cc:	f7fa f821 	bl	8002112 <HAL_NVIC_EnableIRQ>

  return;
 80080d0:	bf00      	nop
}
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	58000c00 	.word	0x58000c00

080080d8 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80080dc:	2101      	movs	r1, #1
 80080de:	4802      	ldr	r0, [pc, #8]	@ (80080e8 <HW_IPCC_BLE_Init+0x10>)
 80080e0:	f7ff ff0a 	bl	8007ef8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80080e4:	bf00      	nop
}
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	58000c00 	.word	0x58000c00

080080ec <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80080f0:	2101      	movs	r1, #1
 80080f2:	4802      	ldr	r0, [pc, #8]	@ (80080fc <HW_IPCC_BLE_SendCmd+0x10>)
 80080f4:	f7ff ff20 	bl	8007f38 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80080f8:	bf00      	nop
}
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	58000c00 	.word	0x58000c00

08008100 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8008100:	b580      	push	{r7, lr}
 8008102:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8008104:	f7ff f8a8 	bl	8007258 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8008108:	2101      	movs	r1, #1
 800810a:	4802      	ldr	r0, [pc, #8]	@ (8008114 <HW_IPCC_BLE_EvtHandler+0x14>)
 800810c:	f7ff ff06 	bl	8007f1c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008110:	bf00      	nop
}
 8008112:	bd80      	pop	{r7, pc}
 8008114:	58000c00 	.word	0x58000c00

08008118 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8008118:	b580      	push	{r7, lr}
 800811a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800811c:	2120      	movs	r1, #32
 800811e:	4803      	ldr	r0, [pc, #12]	@ (800812c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8008120:	f7ff fed8 	bl	8007ed4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8008124:	f7ff f8c8 	bl	80072b8 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8008128:	bf00      	nop
}
 800812a:	bd80      	pop	{r7, pc}
 800812c:	58000c00 	.word	0x58000c00

08008130 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8008130:	b580      	push	{r7, lr}
 8008132:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8008134:	2102      	movs	r1, #2
 8008136:	4802      	ldr	r0, [pc, #8]	@ (8008140 <HW_IPCC_SYS_Init+0x10>)
 8008138:	f7ff fede 	bl	8007ef8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800813c:	bf00      	nop
}
 800813e:	bd80      	pop	{r7, pc}
 8008140:	58000c00 	.word	0x58000c00

08008144 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8008144:	b580      	push	{r7, lr}
 8008146:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008148:	2102      	movs	r1, #2
 800814a:	4804      	ldr	r0, [pc, #16]	@ (800815c <HW_IPCC_SYS_SendCmd+0x18>)
 800814c:	f7ff fef4 	bl	8007f38 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008150:	2102      	movs	r1, #2
 8008152:	4802      	ldr	r0, [pc, #8]	@ (800815c <HW_IPCC_SYS_SendCmd+0x18>)
 8008154:	f7ff feab 	bl	8007eae <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8008158:	bf00      	nop
}
 800815a:	bd80      	pop	{r7, pc}
 800815c:	58000c00 	.word	0x58000c00

08008160 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8008160:	b580      	push	{r7, lr}
 8008162:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008164:	2102      	movs	r1, #2
 8008166:	4803      	ldr	r0, [pc, #12]	@ (8008174 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8008168:	f7ff feb4 	bl	8007ed4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800816c:	f7ff f8f4 	bl	8007358 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8008170:	bf00      	nop
}
 8008172:	bd80      	pop	{r7, pc}
 8008174:	58000c00 	.word	0x58000c00

08008178 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8008178:	b580      	push	{r7, lr}
 800817a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800817c:	f7ff f902 	bl	8007384 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8008180:	2102      	movs	r1, #2
 8008182:	4802      	ldr	r0, [pc, #8]	@ (800818c <HW_IPCC_SYS_EvtHandler+0x14>)
 8008184:	f7ff feca 	bl	8007f1c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008188:	bf00      	nop
}
 800818a:	bd80      	pop	{r7, pc}
 800818c:	58000c00 	.word	0x58000c00

08008190 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8008198:	2108      	movs	r1, #8
 800819a:	480c      	ldr	r0, [pc, #48]	@ (80081cc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800819c:	f7ff fedb 	bl	8007f56 <LL_C1_IPCC_IsActiveFlag_CHx>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d007      	beq.n	80081b6 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80081a6:	4a0a      	ldr	r2, [pc, #40]	@ (80081d0 <HW_IPCC_MM_SendFreeBuf+0x40>)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80081ac:	2108      	movs	r1, #8
 80081ae:	4807      	ldr	r0, [pc, #28]	@ (80081cc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80081b0:	f7ff fe7d 	bl	8007eae <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80081b4:	e006      	b.n	80081c4 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80081ba:	2108      	movs	r1, #8
 80081bc:	4803      	ldr	r0, [pc, #12]	@ (80081cc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80081be:	f7ff febb 	bl	8007f38 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80081c2:	bf00      	nop
}
 80081c4:	3708      	adds	r7, #8
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	58000c00 	.word	0x58000c00
 80081d0:	20000550 	.word	0x20000550

080081d4 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80081d8:	2108      	movs	r1, #8
 80081da:	4806      	ldr	r0, [pc, #24]	@ (80081f4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80081dc:	f7ff fe7a 	bl	8007ed4 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80081e0:	4b05      	ldr	r3, [pc, #20]	@ (80081f8 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80081e6:	2108      	movs	r1, #8
 80081e8:	4802      	ldr	r0, [pc, #8]	@ (80081f4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80081ea:	f7ff fea5 	bl	8007f38 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80081ee:	bf00      	nop
}
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	58000c00 	.word	0x58000c00
 80081f8:	20000550 	.word	0x20000550

080081fc <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8008200:	2108      	movs	r1, #8
 8008202:	4802      	ldr	r0, [pc, #8]	@ (800820c <HW_IPCC_TRACES_Init+0x10>)
 8008204:	f7ff fe78 	bl	8007ef8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008208:	bf00      	nop
}
 800820a:	bd80      	pop	{r7, pc}
 800820c:	58000c00 	.word	0x58000c00

08008210 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8008210:	b580      	push	{r7, lr}
 8008212:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8008214:	f7ff f95e 	bl	80074d4 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8008218:	2108      	movs	r1, #8
 800821a:	4802      	ldr	r0, [pc, #8]	@ (8008224 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800821c:	f7ff fe7e 	bl	8007f1c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008220:	bf00      	nop
}
 8008222:	bd80      	pop	{r7, pc}
 8008224:	58000c00 	.word	0x58000c00

08008228 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8008228:	b480      	push	{r7}
 800822a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800822c:	4b05      	ldr	r3, [pc, #20]	@ (8008244 <UTIL_LPM_Init+0x1c>)
 800822e:	2200      	movs	r2, #0
 8008230:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8008232:	4b05      	ldr	r3, [pc, #20]	@ (8008248 <UTIL_LPM_Init+0x20>)
 8008234:	2200      	movs	r2, #0
 8008236:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8008238:	bf00      	nop
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr
 8008242:	bf00      	nop
 8008244:	20000554 	.word	0x20000554
 8008248:	20000558 	.word	0x20000558

0800824c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800824c:	b480      	push	{r7}
 800824e:	b087      	sub	sp, #28
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	460b      	mov	r3, r1
 8008256:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008258:	f3ef 8310 	mrs	r3, PRIMASK
 800825c:	613b      	str	r3, [r7, #16]
  return(result);
 800825e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8008260:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008262:	b672      	cpsid	i
}
 8008264:	bf00      	nop
  
  switch(state)
 8008266:	78fb      	ldrb	r3, [r7, #3]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d008      	beq.n	800827e <UTIL_LPM_SetOffMode+0x32>
 800826c:	2b01      	cmp	r3, #1
 800826e:	d10e      	bne.n	800828e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8008270:	4b0d      	ldr	r3, [pc, #52]	@ (80082a8 <UTIL_LPM_SetOffMode+0x5c>)
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	4313      	orrs	r3, r2
 8008278:	4a0b      	ldr	r2, [pc, #44]	@ (80082a8 <UTIL_LPM_SetOffMode+0x5c>)
 800827a:	6013      	str	r3, [r2, #0]
      break;
 800827c:	e008      	b.n	8008290 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	43da      	mvns	r2, r3
 8008282:	4b09      	ldr	r3, [pc, #36]	@ (80082a8 <UTIL_LPM_SetOffMode+0x5c>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4013      	ands	r3, r2
 8008288:	4a07      	ldr	r2, [pc, #28]	@ (80082a8 <UTIL_LPM_SetOffMode+0x5c>)
 800828a:	6013      	str	r3, [r2, #0]
      break;
 800828c:	e000      	b.n	8008290 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800828e:	bf00      	nop
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f383 8810 	msr	PRIMASK, r3
}
 800829a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800829c:	bf00      	nop
 800829e:	371c      	adds	r7, #28
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr
 80082a8:	20000558 	.word	0x20000558

080082ac <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b090      	sub	sp, #64	@ 0x40
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80082b4:	4b73      	ldr	r3, [pc, #460]	@ (8008484 <UTIL_SEQ_Run+0x1d8>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 80082ba:	4b72      	ldr	r3, [pc, #456]	@ (8008484 <UTIL_SEQ_Run+0x1d8>)
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4013      	ands	r3, r2
 80082c2:	4a70      	ldr	r2, [pc, #448]	@ (8008484 <UTIL_SEQ_Run+0x1d8>)
 80082c4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 80082c6:	4b70      	ldr	r3, [pc, #448]	@ (8008488 <UTIL_SEQ_Run+0x1dc>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 80082cc:	4b6f      	ldr	r3, [pc, #444]	@ (800848c <UTIL_SEQ_Run+0x1e0>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 80082d2:	4b6f      	ldr	r3, [pc, #444]	@ (8008490 <UTIL_SEQ_Run+0x1e4>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 80082d8:	4b6e      	ldr	r3, [pc, #440]	@ (8008494 <UTIL_SEQ_Run+0x1e8>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80082de:	e08d      	b.n	80083fc <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 80082e0:	2300      	movs	r3, #0
 80082e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80082e4:	e002      	b.n	80082ec <UTIL_SEQ_Run+0x40>
    {
      counter++;
 80082e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082e8:	3301      	adds	r3, #1
 80082ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80082ec:	4a6a      	ldr	r2, [pc, #424]	@ (8008498 <UTIL_SEQ_Run+0x1ec>)
 80082ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082f0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80082f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f6:	401a      	ands	r2, r3
 80082f8:	4b62      	ldr	r3, [pc, #392]	@ (8008484 <UTIL_SEQ_Run+0x1d8>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4013      	ands	r3, r2
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d0f1      	beq.n	80082e6 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8008302:	4a65      	ldr	r2, [pc, #404]	@ (8008498 <UTIL_SEQ_Run+0x1ec>)
 8008304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008306:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800830a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800830c:	401a      	ands	r2, r3
 800830e:	4b5d      	ldr	r3, [pc, #372]	@ (8008484 <UTIL_SEQ_Run+0x1d8>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4013      	ands	r3, r2
 8008314:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8008316:	4a60      	ldr	r2, [pc, #384]	@ (8008498 <UTIL_SEQ_Run+0x1ec>)
 8008318:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800831a:	00db      	lsls	r3, r3, #3
 800831c:	4413      	add	r3, r2
 800831e:	685a      	ldr	r2, [r3, #4]
 8008320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008322:	4013      	ands	r3, r2
 8008324:	2b00      	cmp	r3, #0
 8008326:	d106      	bne.n	8008336 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8008328:	4a5b      	ldr	r2, [pc, #364]	@ (8008498 <UTIL_SEQ_Run+0x1ec>)
 800832a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800832c:	00db      	lsls	r3, r3, #3
 800832e:	4413      	add	r3, r2
 8008330:	f04f 32ff 	mov.w	r2, #4294967295
 8008334:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8008336:	4a58      	ldr	r2, [pc, #352]	@ (8008498 <UTIL_SEQ_Run+0x1ec>)
 8008338:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800833a:	00db      	lsls	r3, r3, #3
 800833c:	4413      	add	r3, r2
 800833e:	685a      	ldr	r2, [r3, #4]
 8008340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008342:	4013      	ands	r3, r2
 8008344:	4618      	mov	r0, r3
 8008346:	f000 f9b3 	bl	80086b0 <SEQ_BitPosition>
 800834a:	4603      	mov	r3, r0
 800834c:	461a      	mov	r2, r3
 800834e:	4b53      	ldr	r3, [pc, #332]	@ (800849c <UTIL_SEQ_Run+0x1f0>)
 8008350:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8008352:	4a51      	ldr	r2, [pc, #324]	@ (8008498 <UTIL_SEQ_Run+0x1ec>)
 8008354:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008356:	00db      	lsls	r3, r3, #3
 8008358:	4413      	add	r3, r2
 800835a:	685a      	ldr	r2, [r3, #4]
 800835c:	4b4f      	ldr	r3, [pc, #316]	@ (800849c <UTIL_SEQ_Run+0x1f0>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2101      	movs	r1, #1
 8008362:	fa01 f303 	lsl.w	r3, r1, r3
 8008366:	43db      	mvns	r3, r3
 8008368:	401a      	ands	r2, r3
 800836a:	494b      	ldr	r1, [pc, #300]	@ (8008498 <UTIL_SEQ_Run+0x1ec>)
 800836c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800836e:	00db      	lsls	r3, r3, #3
 8008370:	440b      	add	r3, r1
 8008372:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008374:	f3ef 8310 	mrs	r3, PRIMASK
 8008378:	61bb      	str	r3, [r7, #24]
  return(result);
 800837a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800837c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800837e:	b672      	cpsid	i
}
 8008380:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8008382:	4b46      	ldr	r3, [pc, #280]	@ (800849c <UTIL_SEQ_Run+0x1f0>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2201      	movs	r2, #1
 8008388:	fa02 f303 	lsl.w	r3, r2, r3
 800838c:	43da      	mvns	r2, r3
 800838e:	4b3e      	ldr	r3, [pc, #248]	@ (8008488 <UTIL_SEQ_Run+0x1dc>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4013      	ands	r3, r2
 8008394:	4a3c      	ldr	r2, [pc, #240]	@ (8008488 <UTIL_SEQ_Run+0x1dc>)
 8008396:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8008398:	2302      	movs	r3, #2
 800839a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800839c:	e013      	b.n	80083c6 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800839e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083a0:	3b01      	subs	r3, #1
 80083a2:	4a3d      	ldr	r2, [pc, #244]	@ (8008498 <UTIL_SEQ_Run+0x1ec>)
 80083a4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80083a8:	4b3c      	ldr	r3, [pc, #240]	@ (800849c <UTIL_SEQ_Run+0x1f0>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	2201      	movs	r2, #1
 80083ae:	fa02 f303 	lsl.w	r3, r2, r3
 80083b2:	43da      	mvns	r2, r3
 80083b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083b6:	3b01      	subs	r3, #1
 80083b8:	400a      	ands	r2, r1
 80083ba:	4937      	ldr	r1, [pc, #220]	@ (8008498 <UTIL_SEQ_Run+0x1ec>)
 80083bc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80083c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083c2:	3b01      	subs	r3, #1
 80083c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d1e8      	bne.n	800839e <UTIL_SEQ_Run+0xf2>
 80083cc:	6a3b      	ldr	r3, [r7, #32]
 80083ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	f383 8810 	msr	PRIMASK, r3
}
 80083d6:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80083d8:	4b30      	ldr	r3, [pc, #192]	@ (800849c <UTIL_SEQ_Run+0x1f0>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a30      	ldr	r2, [pc, #192]	@ (80084a0 <UTIL_SEQ_Run+0x1f4>)
 80083de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083e2:	4798      	blx	r3

    local_taskset = TaskSet;
 80083e4:	4b28      	ldr	r3, [pc, #160]	@ (8008488 <UTIL_SEQ_Run+0x1dc>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 80083ea:	4b28      	ldr	r3, [pc, #160]	@ (800848c <UTIL_SEQ_Run+0x1e0>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 80083f0:	4b27      	ldr	r3, [pc, #156]	@ (8008490 <UTIL_SEQ_Run+0x1e4>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 80083f6:	4b27      	ldr	r3, [pc, #156]	@ (8008494 <UTIL_SEQ_Run+0x1e8>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80083fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80083fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008400:	401a      	ands	r2, r3
 8008402:	4b20      	ldr	r3, [pc, #128]	@ (8008484 <UTIL_SEQ_Run+0x1d8>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4013      	ands	r3, r2
 8008408:	2b00      	cmp	r3, #0
 800840a:	d005      	beq.n	8008418 <UTIL_SEQ_Run+0x16c>
 800840c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800840e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008410:	4013      	ands	r3, r2
 8008412:	2b00      	cmp	r3, #0
 8008414:	f43f af64 	beq.w	80082e0 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8008418:	4b20      	ldr	r3, [pc, #128]	@ (800849c <UTIL_SEQ_Run+0x1f0>)
 800841a:	f04f 32ff 	mov.w	r2, #4294967295
 800841e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8008420:	f000 f938 	bl	8008694 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008424:	f3ef 8310 	mrs	r3, PRIMASK
 8008428:	613b      	str	r3, [r7, #16]
  return(result);
 800842a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800842c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800842e:	b672      	cpsid	i
}
 8008430:	bf00      	nop
  local_taskset = TaskSet;
 8008432:	4b15      	ldr	r3, [pc, #84]	@ (8008488 <UTIL_SEQ_Run+0x1dc>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8008438:	4b14      	ldr	r3, [pc, #80]	@ (800848c <UTIL_SEQ_Run+0x1e0>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800843e:	4b14      	ldr	r3, [pc, #80]	@ (8008490 <UTIL_SEQ_Run+0x1e4>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8008444:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008448:	401a      	ands	r2, r3
 800844a:	4b0e      	ldr	r3, [pc, #56]	@ (8008484 <UTIL_SEQ_Run+0x1d8>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4013      	ands	r3, r2
 8008450:	2b00      	cmp	r3, #0
 8008452:	d107      	bne.n	8008464 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8008454:	4b0f      	ldr	r3, [pc, #60]	@ (8008494 <UTIL_SEQ_Run+0x1e8>)
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800845a:	4013      	ands	r3, r2
 800845c:	2b00      	cmp	r3, #0
 800845e:	d101      	bne.n	8008464 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8008460:	f7f8 fa13 	bl	800088a <UTIL_SEQ_Idle>
 8008464:	69fb      	ldr	r3, [r7, #28]
 8008466:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f383 8810 	msr	PRIMASK, r3
}
 800846e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8008470:	f000 f917 	bl	80086a2 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8008474:	4a03      	ldr	r2, [pc, #12]	@ (8008484 <UTIL_SEQ_Run+0x1d8>)
 8008476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008478:	6013      	str	r3, [r2, #0]

  return;
 800847a:	bf00      	nop
}
 800847c:	3740      	adds	r7, #64	@ 0x40
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	20000018 	.word	0x20000018
 8008488:	2000055c 	.word	0x2000055c
 800848c:	20000560 	.word	0x20000560
 8008490:	20000014 	.word	0x20000014
 8008494:	20000564 	.word	0x20000564
 8008498:	200005ec 	.word	0x200005ec
 800849c:	20000568 	.word	0x20000568
 80084a0:	2000056c 	.word	0x2000056c

080084a4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b088      	sub	sp, #32
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	60b9      	str	r1, [r7, #8]
 80084ae:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084b0:	f3ef 8310 	mrs	r3, PRIMASK
 80084b4:	617b      	str	r3, [r7, #20]
  return(result);
 80084b6:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80084b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80084ba:	b672      	cpsid	i
}
 80084bc:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80084be:	68f8      	ldr	r0, [r7, #12]
 80084c0:	f000 f8f6 	bl	80086b0 <SEQ_BitPosition>
 80084c4:	4603      	mov	r3, r0
 80084c6:	4619      	mov	r1, r3
 80084c8:	4a06      	ldr	r2, [pc, #24]	@ (80084e4 <UTIL_SEQ_RegTask+0x40>)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80084d0:	69fb      	ldr	r3, [r7, #28]
 80084d2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	f383 8810 	msr	PRIMASK, r3
}
 80084da:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80084dc:	bf00      	nop
}
 80084de:	3720      	adds	r7, #32
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	2000056c 	.word	0x2000056c

080084e8 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80084e8:	b480      	push	{r7}
 80084ea:	b087      	sub	sp, #28
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084f2:	f3ef 8310 	mrs	r3, PRIMASK
 80084f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80084f8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80084fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80084fc:	b672      	cpsid	i
}
 80084fe:	bf00      	nop

  TaskSet |= TaskId_bm;
 8008500:	4b0d      	ldr	r3, [pc, #52]	@ (8008538 <UTIL_SEQ_SetTask+0x50>)
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	4313      	orrs	r3, r2
 8008508:	4a0b      	ldr	r2, [pc, #44]	@ (8008538 <UTIL_SEQ_SetTask+0x50>)
 800850a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800850c:	4a0b      	ldr	r2, [pc, #44]	@ (800853c <UTIL_SEQ_SetTask+0x54>)
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	431a      	orrs	r2, r3
 8008518:	4908      	ldr	r1, [pc, #32]	@ (800853c <UTIL_SEQ_SetTask+0x54>)
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	f383 8810 	msr	PRIMASK, r3
}
 800852a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800852c:	bf00      	nop
}
 800852e:	371c      	adds	r7, #28
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr
 8008538:	2000055c 	.word	0x2000055c
 800853c:	200005ec 	.word	0x200005ec

08008540 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8008540:	b480      	push	{r7}
 8008542:	b087      	sub	sp, #28
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008548:	f3ef 8310 	mrs	r3, PRIMASK
 800854c:	60fb      	str	r3, [r7, #12]
  return(result);
 800854e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008550:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008552:	b672      	cpsid	i
}
 8008554:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	43da      	mvns	r2, r3
 800855a:	4b08      	ldr	r3, [pc, #32]	@ (800857c <UTIL_SEQ_PauseTask+0x3c>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4013      	ands	r3, r2
 8008560:	4a06      	ldr	r2, [pc, #24]	@ (800857c <UTIL_SEQ_PauseTask+0x3c>)
 8008562:	6013      	str	r3, [r2, #0]
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	f383 8810 	msr	PRIMASK, r3
}
 800856e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008570:	bf00      	nop
}
 8008572:	371c      	adds	r7, #28
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr
 800857c:	20000014 	.word	0x20000014

08008580 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8008580:	b480      	push	{r7}
 8008582:	b087      	sub	sp, #28
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008588:	f3ef 8310 	mrs	r3, PRIMASK
 800858c:	60fb      	str	r3, [r7, #12]
  return(result);
 800858e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008590:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008592:	b672      	cpsid	i
}
 8008594:	bf00      	nop

  TaskMask |= TaskId_bm;
 8008596:	4b09      	ldr	r3, [pc, #36]	@ (80085bc <UTIL_SEQ_ResumeTask+0x3c>)
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4313      	orrs	r3, r2
 800859e:	4a07      	ldr	r2, [pc, #28]	@ (80085bc <UTIL_SEQ_ResumeTask+0x3c>)
 80085a0:	6013      	str	r3, [r2, #0]
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	f383 8810 	msr	PRIMASK, r3
}
 80085ac:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80085ae:	bf00      	nop
}
 80085b0:	371c      	adds	r7, #28
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr
 80085ba:	bf00      	nop
 80085bc:	20000014 	.word	0x20000014

080085c0 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80085c0:	b480      	push	{r7}
 80085c2:	b087      	sub	sp, #28
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085c8:	f3ef 8310 	mrs	r3, PRIMASK
 80085cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80085ce:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80085d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80085d2:	b672      	cpsid	i
}
 80085d4:	bf00      	nop

  EvtSet |= EvtId_bm;
 80085d6:	4b09      	ldr	r3, [pc, #36]	@ (80085fc <UTIL_SEQ_SetEvt+0x3c>)
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4313      	orrs	r3, r2
 80085de:	4a07      	ldr	r2, [pc, #28]	@ (80085fc <UTIL_SEQ_SetEvt+0x3c>)
 80085e0:	6013      	str	r3, [r2, #0]
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	f383 8810 	msr	PRIMASK, r3
}
 80085ec:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80085ee:	bf00      	nop
}
 80085f0:	371c      	adds	r7, #28
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr
 80085fa:	bf00      	nop
 80085fc:	20000560 	.word	0x20000560

08008600 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b088      	sub	sp, #32
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8008608:	4b1f      	ldr	r3, [pc, #124]	@ (8008688 <UTIL_SEQ_WaitEvt+0x88>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800860e:	4b1e      	ldr	r3, [pc, #120]	@ (8008688 <UTIL_SEQ_WaitEvt+0x88>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008616:	d102      	bne.n	800861e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8008618:	2300      	movs	r3, #0
 800861a:	61fb      	str	r3, [r7, #28]
 800861c:	e005      	b.n	800862a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800861e:	4b1a      	ldr	r3, [pc, #104]	@ (8008688 <UTIL_SEQ_WaitEvt+0x88>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	2201      	movs	r2, #1
 8008624:	fa02 f303 	lsl.w	r3, r2, r3
 8008628:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800862a:	4b18      	ldr	r3, [pc, #96]	@ (800868c <UTIL_SEQ_WaitEvt+0x8c>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8008630:	4a16      	ldr	r2, [pc, #88]	@ (800868c <UTIL_SEQ_WaitEvt+0x8c>)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8008636:	e003      	b.n	8008640 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8008638:	6879      	ldr	r1, [r7, #4]
 800863a:	69f8      	ldr	r0, [r7, #28]
 800863c:	f7f8 f92c 	bl	8000898 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8008640:	4b13      	ldr	r3, [pc, #76]	@ (8008690 <UTIL_SEQ_WaitEvt+0x90>)
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4013      	ands	r3, r2
 8008648:	2b00      	cmp	r3, #0
 800864a:	d0f5      	beq.n	8008638 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800864c:	4a0e      	ldr	r2, [pc, #56]	@ (8008688 <UTIL_SEQ_WaitEvt+0x88>)
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008652:	f3ef 8310 	mrs	r3, PRIMASK
 8008656:	60bb      	str	r3, [r7, #8]
  return(result);
 8008658:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800865a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800865c:	b672      	cpsid	i
}
 800865e:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	43da      	mvns	r2, r3
 8008664:	4b0a      	ldr	r3, [pc, #40]	@ (8008690 <UTIL_SEQ_WaitEvt+0x90>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4013      	ands	r3, r2
 800866a:	4a09      	ldr	r2, [pc, #36]	@ (8008690 <UTIL_SEQ_WaitEvt+0x90>)
 800866c:	6013      	str	r3, [r2, #0]
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f383 8810 	msr	PRIMASK, r3
}
 8008678:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800867a:	4a04      	ldr	r2, [pc, #16]	@ (800868c <UTIL_SEQ_WaitEvt+0x8c>)
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	6013      	str	r3, [r2, #0]
  return;
 8008680:	bf00      	nop
}
 8008682:	3720      	adds	r7, #32
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	20000568 	.word	0x20000568
 800868c:	20000564 	.word	0x20000564
 8008690:	20000560 	.word	0x20000560

08008694 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8008694:	b480      	push	{r7}
 8008696:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8008698:	bf00      	nop
}
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr

080086a2 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80086a2:	b480      	push	{r7}
 80086a4:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80086a6:	bf00      	nop
}
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b085      	sub	sp, #20
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 80086b8:	2300      	movs	r3, #0
 80086ba:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086c6:	d204      	bcs.n	80086d2 <SEQ_BitPosition+0x22>
 80086c8:	2310      	movs	r3, #16
 80086ca:	73fb      	strb	r3, [r7, #15]
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	041b      	lsls	r3, r3, #16
 80086d0:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80086d8:	d205      	bcs.n	80086e6 <SEQ_BitPosition+0x36>
 80086da:	7bfb      	ldrb	r3, [r7, #15]
 80086dc:	3308      	adds	r3, #8
 80086de:	73fb      	strb	r3, [r7, #15]
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	021b      	lsls	r3, r3, #8
 80086e4:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086ec:	d205      	bcs.n	80086fa <SEQ_BitPosition+0x4a>
 80086ee:	7bfb      	ldrb	r3, [r7, #15]
 80086f0:	3304      	adds	r3, #4
 80086f2:	73fb      	strb	r3, [r7, #15]
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	011b      	lsls	r3, r3, #4
 80086f8:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	0f1b      	lsrs	r3, r3, #28
 80086fe:	4a07      	ldr	r2, [pc, #28]	@ (800871c <SEQ_BitPosition+0x6c>)
 8008700:	5cd2      	ldrb	r2, [r2, r3]
 8008702:	7bfb      	ldrb	r3, [r7, #15]
 8008704:	4413      	add	r3, r2
 8008706:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8008708:	7bfb      	ldrb	r3, [r7, #15]
 800870a:	f1c3 031f 	rsb	r3, r3, #31
 800870e:	b2db      	uxtb	r3, r3
}
 8008710:	4618      	mov	r0, r3
 8008712:	3714      	adds	r7, #20
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr
 800871c:	08008a6c 	.word	0x08008a6c

08008720 <memset>:
 8008720:	4402      	add	r2, r0
 8008722:	4603      	mov	r3, r0
 8008724:	4293      	cmp	r3, r2
 8008726:	d100      	bne.n	800872a <memset+0xa>
 8008728:	4770      	bx	lr
 800872a:	f803 1b01 	strb.w	r1, [r3], #1
 800872e:	e7f9      	b.n	8008724 <memset+0x4>

08008730 <__libc_init_array>:
 8008730:	b570      	push	{r4, r5, r6, lr}
 8008732:	4d0d      	ldr	r5, [pc, #52]	@ (8008768 <__libc_init_array+0x38>)
 8008734:	4c0d      	ldr	r4, [pc, #52]	@ (800876c <__libc_init_array+0x3c>)
 8008736:	1b64      	subs	r4, r4, r5
 8008738:	10a4      	asrs	r4, r4, #2
 800873a:	2600      	movs	r6, #0
 800873c:	42a6      	cmp	r6, r4
 800873e:	d109      	bne.n	8008754 <__libc_init_array+0x24>
 8008740:	4d0b      	ldr	r5, [pc, #44]	@ (8008770 <__libc_init_array+0x40>)
 8008742:	4c0c      	ldr	r4, [pc, #48]	@ (8008774 <__libc_init_array+0x44>)
 8008744:	f000 f826 	bl	8008794 <_init>
 8008748:	1b64      	subs	r4, r4, r5
 800874a:	10a4      	asrs	r4, r4, #2
 800874c:	2600      	movs	r6, #0
 800874e:	42a6      	cmp	r6, r4
 8008750:	d105      	bne.n	800875e <__libc_init_array+0x2e>
 8008752:	bd70      	pop	{r4, r5, r6, pc}
 8008754:	f855 3b04 	ldr.w	r3, [r5], #4
 8008758:	4798      	blx	r3
 800875a:	3601      	adds	r6, #1
 800875c:	e7ee      	b.n	800873c <__libc_init_array+0xc>
 800875e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008762:	4798      	blx	r3
 8008764:	3601      	adds	r6, #1
 8008766:	e7f2      	b.n	800874e <__libc_init_array+0x1e>
 8008768:	08008a84 	.word	0x08008a84
 800876c:	08008a84 	.word	0x08008a84
 8008770:	08008a84 	.word	0x08008a84
 8008774:	08008a88 	.word	0x08008a88

08008778 <memcpy>:
 8008778:	440a      	add	r2, r1
 800877a:	4291      	cmp	r1, r2
 800877c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008780:	d100      	bne.n	8008784 <memcpy+0xc>
 8008782:	4770      	bx	lr
 8008784:	b510      	push	{r4, lr}
 8008786:	f811 4b01 	ldrb.w	r4, [r1], #1
 800878a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800878e:	4291      	cmp	r1, r2
 8008790:	d1f9      	bne.n	8008786 <memcpy+0xe>
 8008792:	bd10      	pop	{r4, pc}

08008794 <_init>:
 8008794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008796:	bf00      	nop
 8008798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800879a:	bc08      	pop	{r3}
 800879c:	469e      	mov	lr, r3
 800879e:	4770      	bx	lr

080087a0 <_fini>:
 80087a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087a2:	bf00      	nop
 80087a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087a6:	bc08      	pop	{r3}
 80087a8:	469e      	mov	lr, r3
 80087aa:	4770      	bx	lr
