
Beacon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008918  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  08008a54  08008a54  00009a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008d14  08008d14  00009d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008d1c  08008d1c  00009d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008d20  08008d20  00009d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000024  20000008  08008d24  0000a008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  2000002c  08008d48  0000a02c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000064  08008d7d  0000a064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000690  20000078  08008d8e  0000a078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000708  08008d8e  0000a708  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000aa67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0000b000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0000b000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08008d8e  0000a1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   00033412  00000000  00000000  0000aa97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000066cf  00000000  00000000  0003dea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002db8  00000000  00000000  00044578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002333  00000000  00000000  00047330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002cfe6  00000000  00000000  00049663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00033196  00000000  00000000  00076649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0010449c  00000000  00000000  000a97df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001adc7b  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000c168  00000000  00000000  001adcc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000042  00000000  00000000  001b9e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000078 	.word	0x20000078
 8000158:	00000000 	.word	0x00000000
 800015c:	08008a3c 	.word	0x08008a3c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000007c 	.word	0x2000007c
 8000178:	08008a3c 	.word	0x08008a3c

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b96a 	b.w	8000478 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9d08      	ldr	r5, [sp, #32]
 80001c2:	460c      	mov	r4, r1
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d14e      	bne.n	8000266 <__udivmoddi4+0xaa>
 80001c8:	4694      	mov	ip, r2
 80001ca:	458c      	cmp	ip, r1
 80001cc:	4686      	mov	lr, r0
 80001ce:	fab2 f282 	clz	r2, r2
 80001d2:	d962      	bls.n	800029a <__udivmoddi4+0xde>
 80001d4:	b14a      	cbz	r2, 80001ea <__udivmoddi4+0x2e>
 80001d6:	f1c2 0320 	rsb	r3, r2, #32
 80001da:	4091      	lsls	r1, r2
 80001dc:	fa20 f303 	lsr.w	r3, r0, r3
 80001e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e4:	4319      	orrs	r1, r3
 80001e6:	fa00 fe02 	lsl.w	lr, r0, r2
 80001ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001ee:	fa1f f68c 	uxth.w	r6, ip
 80001f2:	fbb1 f4f7 	udiv	r4, r1, r7
 80001f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001fa:	fb07 1114 	mls	r1, r7, r4, r1
 80001fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000202:	fb04 f106 	mul.w	r1, r4, r6
 8000206:	4299      	cmp	r1, r3
 8000208:	d90a      	bls.n	8000220 <__udivmoddi4+0x64>
 800020a:	eb1c 0303 	adds.w	r3, ip, r3
 800020e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000212:	f080 8112 	bcs.w	800043a <__udivmoddi4+0x27e>
 8000216:	4299      	cmp	r1, r3
 8000218:	f240 810f 	bls.w	800043a <__udivmoddi4+0x27e>
 800021c:	3c02      	subs	r4, #2
 800021e:	4463      	add	r3, ip
 8000220:	1a59      	subs	r1, r3, r1
 8000222:	fa1f f38e 	uxth.w	r3, lr
 8000226:	fbb1 f0f7 	udiv	r0, r1, r7
 800022a:	fb07 1110 	mls	r1, r7, r0, r1
 800022e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000232:	fb00 f606 	mul.w	r6, r0, r6
 8000236:	429e      	cmp	r6, r3
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0303 	adds.w	r3, ip, r3
 800023e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000242:	f080 80fc 	bcs.w	800043e <__udivmoddi4+0x282>
 8000246:	429e      	cmp	r6, r3
 8000248:	f240 80f9 	bls.w	800043e <__udivmoddi4+0x282>
 800024c:	4463      	add	r3, ip
 800024e:	3802      	subs	r0, #2
 8000250:	1b9b      	subs	r3, r3, r6
 8000252:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000256:	2100      	movs	r1, #0
 8000258:	b11d      	cbz	r5, 8000262 <__udivmoddi4+0xa6>
 800025a:	40d3      	lsrs	r3, r2
 800025c:	2200      	movs	r2, #0
 800025e:	e9c5 3200 	strd	r3, r2, [r5]
 8000262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000266:	428b      	cmp	r3, r1
 8000268:	d905      	bls.n	8000276 <__udivmoddi4+0xba>
 800026a:	b10d      	cbz	r5, 8000270 <__udivmoddi4+0xb4>
 800026c:	e9c5 0100 	strd	r0, r1, [r5]
 8000270:	2100      	movs	r1, #0
 8000272:	4608      	mov	r0, r1
 8000274:	e7f5      	b.n	8000262 <__udivmoddi4+0xa6>
 8000276:	fab3 f183 	clz	r1, r3
 800027a:	2900      	cmp	r1, #0
 800027c:	d146      	bne.n	800030c <__udivmoddi4+0x150>
 800027e:	42a3      	cmp	r3, r4
 8000280:	d302      	bcc.n	8000288 <__udivmoddi4+0xcc>
 8000282:	4290      	cmp	r0, r2
 8000284:	f0c0 80f0 	bcc.w	8000468 <__udivmoddi4+0x2ac>
 8000288:	1a86      	subs	r6, r0, r2
 800028a:	eb64 0303 	sbc.w	r3, r4, r3
 800028e:	2001      	movs	r0, #1
 8000290:	2d00      	cmp	r5, #0
 8000292:	d0e6      	beq.n	8000262 <__udivmoddi4+0xa6>
 8000294:	e9c5 6300 	strd	r6, r3, [r5]
 8000298:	e7e3      	b.n	8000262 <__udivmoddi4+0xa6>
 800029a:	2a00      	cmp	r2, #0
 800029c:	f040 8090 	bne.w	80003c0 <__udivmoddi4+0x204>
 80002a0:	eba1 040c 	sub.w	r4, r1, ip
 80002a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a8:	fa1f f78c 	uxth.w	r7, ip
 80002ac:	2101      	movs	r1, #1
 80002ae:	fbb4 f6f8 	udiv	r6, r4, r8
 80002b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002b6:	fb08 4416 	mls	r4, r8, r6, r4
 80002ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002be:	fb07 f006 	mul.w	r0, r7, r6
 80002c2:	4298      	cmp	r0, r3
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x11c>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 34ff 	add.w	r4, r6, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x11a>
 80002d0:	4298      	cmp	r0, r3
 80002d2:	f200 80cd 	bhi.w	8000470 <__udivmoddi4+0x2b4>
 80002d6:	4626      	mov	r6, r4
 80002d8:	1a1c      	subs	r4, r3, r0
 80002da:	fa1f f38e 	uxth.w	r3, lr
 80002de:	fbb4 f0f8 	udiv	r0, r4, r8
 80002e2:	fb08 4410 	mls	r4, r8, r0, r4
 80002e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002ea:	fb00 f707 	mul.w	r7, r0, r7
 80002ee:	429f      	cmp	r7, r3
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0x148>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f100 34ff 	add.w	r4, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x146>
 80002fc:	429f      	cmp	r7, r3
 80002fe:	f200 80b0 	bhi.w	8000462 <__udivmoddi4+0x2a6>
 8000302:	4620      	mov	r0, r4
 8000304:	1bdb      	subs	r3, r3, r7
 8000306:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030a:	e7a5      	b.n	8000258 <__udivmoddi4+0x9c>
 800030c:	f1c1 0620 	rsb	r6, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 f706 	lsr.w	r7, r2, r6
 8000316:	431f      	orrs	r7, r3
 8000318:	fa20 fc06 	lsr.w	ip, r0, r6
 800031c:	fa04 f301 	lsl.w	r3, r4, r1
 8000320:	ea43 030c 	orr.w	r3, r3, ip
 8000324:	40f4      	lsrs	r4, r6
 8000326:	fa00 f801 	lsl.w	r8, r0, r1
 800032a:	0c38      	lsrs	r0, r7, #16
 800032c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000330:	fbb4 fef0 	udiv	lr, r4, r0
 8000334:	fa1f fc87 	uxth.w	ip, r7
 8000338:	fb00 441e 	mls	r4, r0, lr, r4
 800033c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000340:	fb0e f90c 	mul.w	r9, lr, ip
 8000344:	45a1      	cmp	r9, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x1a6>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000352:	f080 8084 	bcs.w	800045e <__udivmoddi4+0x2a2>
 8000356:	45a1      	cmp	r9, r4
 8000358:	f240 8081 	bls.w	800045e <__udivmoddi4+0x2a2>
 800035c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000360:	443c      	add	r4, r7
 8000362:	eba4 0409 	sub.w	r4, r4, r9
 8000366:	fa1f f983 	uxth.w	r9, r3
 800036a:	fbb4 f3f0 	udiv	r3, r4, r0
 800036e:	fb00 4413 	mls	r4, r0, r3, r4
 8000372:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000376:	fb03 fc0c 	mul.w	ip, r3, ip
 800037a:	45a4      	cmp	ip, r4
 800037c:	d907      	bls.n	800038e <__udivmoddi4+0x1d2>
 800037e:	193c      	adds	r4, r7, r4
 8000380:	f103 30ff 	add.w	r0, r3, #4294967295
 8000384:	d267      	bcs.n	8000456 <__udivmoddi4+0x29a>
 8000386:	45a4      	cmp	ip, r4
 8000388:	d965      	bls.n	8000456 <__udivmoddi4+0x29a>
 800038a:	3b02      	subs	r3, #2
 800038c:	443c      	add	r4, r7
 800038e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000392:	fba0 9302 	umull	r9, r3, r0, r2
 8000396:	eba4 040c 	sub.w	r4, r4, ip
 800039a:	429c      	cmp	r4, r3
 800039c:	46ce      	mov	lr, r9
 800039e:	469c      	mov	ip, r3
 80003a0:	d351      	bcc.n	8000446 <__udivmoddi4+0x28a>
 80003a2:	d04e      	beq.n	8000442 <__udivmoddi4+0x286>
 80003a4:	b155      	cbz	r5, 80003bc <__udivmoddi4+0x200>
 80003a6:	ebb8 030e 	subs.w	r3, r8, lr
 80003aa:	eb64 040c 	sbc.w	r4, r4, ip
 80003ae:	fa04 f606 	lsl.w	r6, r4, r6
 80003b2:	40cb      	lsrs	r3, r1
 80003b4:	431e      	orrs	r6, r3
 80003b6:	40cc      	lsrs	r4, r1
 80003b8:	e9c5 6400 	strd	r6, r4, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	e750      	b.n	8000262 <__udivmoddi4+0xa6>
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f103 	lsr.w	r1, r0, r3
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	fa24 f303 	lsr.w	r3, r4, r3
 80003d0:	4094      	lsls	r4, r2
 80003d2:	430c      	orrs	r4, r1
 80003d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003d8:	fa00 fe02 	lsl.w	lr, r0, r2
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e4:	fb08 3110 	mls	r1, r8, r0, r3
 80003e8:	0c23      	lsrs	r3, r4, #16
 80003ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ee:	fb00 f107 	mul.w	r1, r0, r7
 80003f2:	4299      	cmp	r1, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x24c>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 36ff 	add.w	r6, r0, #4294967295
 80003fe:	d22c      	bcs.n	800045a <__udivmoddi4+0x29e>
 8000400:	4299      	cmp	r1, r3
 8000402:	d92a      	bls.n	800045a <__udivmoddi4+0x29e>
 8000404:	3802      	subs	r0, #2
 8000406:	4463      	add	r3, ip
 8000408:	1a5b      	subs	r3, r3, r1
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000410:	fb08 3311 	mls	r3, r8, r1, r3
 8000414:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000418:	fb01 f307 	mul.w	r3, r1, r7
 800041c:	42a3      	cmp	r3, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x276>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f101 36ff 	add.w	r6, r1, #4294967295
 8000428:	d213      	bcs.n	8000452 <__udivmoddi4+0x296>
 800042a:	42a3      	cmp	r3, r4
 800042c:	d911      	bls.n	8000452 <__udivmoddi4+0x296>
 800042e:	3902      	subs	r1, #2
 8000430:	4464      	add	r4, ip
 8000432:	1ae4      	subs	r4, r4, r3
 8000434:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000438:	e739      	b.n	80002ae <__udivmoddi4+0xf2>
 800043a:	4604      	mov	r4, r0
 800043c:	e6f0      	b.n	8000220 <__udivmoddi4+0x64>
 800043e:	4608      	mov	r0, r1
 8000440:	e706      	b.n	8000250 <__udivmoddi4+0x94>
 8000442:	45c8      	cmp	r8, r9
 8000444:	d2ae      	bcs.n	80003a4 <__udivmoddi4+0x1e8>
 8000446:	ebb9 0e02 	subs.w	lr, r9, r2
 800044a:	eb63 0c07 	sbc.w	ip, r3, r7
 800044e:	3801      	subs	r0, #1
 8000450:	e7a8      	b.n	80003a4 <__udivmoddi4+0x1e8>
 8000452:	4631      	mov	r1, r6
 8000454:	e7ed      	b.n	8000432 <__udivmoddi4+0x276>
 8000456:	4603      	mov	r3, r0
 8000458:	e799      	b.n	800038e <__udivmoddi4+0x1d2>
 800045a:	4630      	mov	r0, r6
 800045c:	e7d4      	b.n	8000408 <__udivmoddi4+0x24c>
 800045e:	46d6      	mov	lr, sl
 8000460:	e77f      	b.n	8000362 <__udivmoddi4+0x1a6>
 8000462:	4463      	add	r3, ip
 8000464:	3802      	subs	r0, #2
 8000466:	e74d      	b.n	8000304 <__udivmoddi4+0x148>
 8000468:	4606      	mov	r6, r0
 800046a:	4623      	mov	r3, r4
 800046c:	4608      	mov	r0, r1
 800046e:	e70f      	b.n	8000290 <__udivmoddi4+0xd4>
 8000470:	3e02      	subs	r6, #2
 8000472:	4463      	add	r3, ip
 8000474:	e730      	b.n	80002d8 <__udivmoddi4+0x11c>
 8000476:	bf00      	nop

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 800047c:	b5b0      	push	{r4, r5, r7, lr}
 800047e:	b088      	sub	sp, #32
 8000480:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000482:	4b0b      	ldr	r3, [pc, #44]	@ (80004b0 <APPD_EnableCPU2+0x34>)
 8000484:	1d3c      	adds	r4, r7, #4
 8000486:	461d      	mov	r5, r3
 8000488:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800048a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800048c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000490:	c403      	stmia	r4!, {r0, r1}
 8000492:	8022      	strh	r2, [r4, #0]
 8000494:	3402      	adds	r4, #2
 8000496:	0c13      	lsrs	r3, r2, #16
 8000498:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800049a:	f007 f96d 	bl	8007778 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	4618      	mov	r0, r3
 80004a2:	f006 fc70 	bl	8006d86 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80004a6:	bf00      	nop
}
 80004a8:	3720      	adds	r7, #32
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bdb0      	pop	{r4, r5, r7, pc}
 80004ae:	bf00      	nop
 80004b0:	08008a54 	.word	0x08008a54

080004b4 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80004bc:	4b07      	ldr	r3, [pc, #28]	@ (80004dc <LL_C2_PWR_SetPowerMode+0x28>)
 80004be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80004c2:	f023 0207 	bic.w	r2, r3, #7
 80004c6:	4905      	ldr	r1, [pc, #20]	@ (80004dc <LL_C2_PWR_SetPowerMode+0x28>)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4313      	orrs	r3, r2
 80004cc:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80004d0:	bf00      	nop
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr
 80004dc:	58000400 	.word	0x58000400

080004e0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80004e8:	4b06      	ldr	r3, [pc, #24]	@ (8000504 <LL_EXTI_EnableIT_32_63+0x24>)
 80004ea:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80004ee:	4905      	ldr	r1, [pc, #20]	@ (8000504 <LL_EXTI_EnableIT_32_63+0x24>)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4313      	orrs	r3, r2
 80004f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80004f8:	bf00      	nop
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr
 8000504:	58000800 	.word	0x58000800

08000508 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000510:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000514:	4a0a      	ldr	r2, [pc, #40]	@ (8000540 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000516:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800051a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800051e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000522:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	021b      	lsls	r3, r3, #8
 800052a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800052e:	4313      	orrs	r3, r2
 8000530:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	cafecafe 	.word	0xcafecafe

08000544 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800054c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000550:	689b      	ldr	r3, [r3, #8]
 8000552:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000556:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4313      	orrs	r3, r2
 800055e:	608b      	str	r3, [r1, #8]
}
 8000560:	bf00      	nop
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr

0800056c <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000570:	4b04      	ldr	r3, [pc, #16]	@ (8000584 <LL_DBGMCU_GetDeviceID+0x18>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000578:	4618      	mov	r0, r3
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	e0042000 	.word	0xe0042000

08000588 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 800058c:	4b04      	ldr	r3, [pc, #16]	@ (80005a0 <LL_DBGMCU_GetRevisionID+0x18>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	0c1b      	lsrs	r3, r3, #16
 8000592:	b29b      	uxth	r3, r3
}
 8000594:	4618      	mov	r0, r3
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	e0042000 	.word	0xe0042000

080005a4 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	22ff      	movs	r2, #255	@ 0xff
 80005b0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80005b2:	bf00      	nop
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	22ca      	movs	r2, #202	@ 0xca
 80005ca:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2253      	movs	r2, #83	@ 0x53
 80005d0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80005d2:	bf00      	nop
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr

080005de <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80005de:	b480      	push	{r7}
 80005e0:	b083      	sub	sp, #12
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
 80005e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	689b      	ldr	r3, [r3, #8]
 80005ec:	f023 0207 	bic.w	r2, r3, #7
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	431a      	orrs	r2, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	609a      	str	r2, [r3, #8]
}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000608:	4b04      	ldr	r3, [pc, #16]	@ (800061c <MX_APPE_Config+0x18>)
 800060a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800060e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000610:	f000 f824 	bl	800065c <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000614:	f000 f829 	bl	800066a <Config_HSE>

  return;
 8000618:	bf00      	nop
}
 800061a:	bd80      	pop	{r7, pc}
 800061c:	58004000 	.word	0x58004000

08000620 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000624:	f000 f835 	bl	8000692 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000628:	f000 f84e 	bl	80006c8 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800062c:	4903      	ldr	r1, [pc, #12]	@ (800063c <MX_APPE_Init+0x1c>)
 800062e:	2000      	movs	r0, #0
 8000630:	f000 fd76 	bl	8001120 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000634:	f000 f856 	bl	80006e4 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000638:	bf00      	nop
}
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000170 	.word	0x20000170

08000640 <Init_Smps>:

void Init_Smps(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000644:	bf00      	nop
}
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr

0800064e <Init_Exti>:

void Init_Exti(void)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000652:	2050      	movs	r0, #80	@ 0x50
 8000654:	f7ff ff44 	bl	80004e0 <LL_EXTI_EnableIT_32_63>

  return;
 8000658:	bf00      	nop
}
 800065a:	bd80      	pop	{r7, pc}

0800065c <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000660:	bf00      	nop
}
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr

0800066a <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	b082      	sub	sp, #8
 800066e:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000670:	2000      	movs	r0, #0
 8000672:	f007 f8e9 	bl	8007848 <OTP_Read>
 8000676:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d005      	beq.n	800068a <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	799b      	ldrb	r3, [r3, #6]
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff ff40 	bl	8000508 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000688:	bf00      	nop
 800068a:	bf00      	nop
}
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <System_Init>:

static void System_Init(void)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	af00      	add	r7, sp, #0
  Init_Smps();
 8000696:	f7ff ffd3 	bl	8000640 <Init_Smps>

  Init_Exti();
 800069a:	f7ff ffd8 	bl	800064e <Init_Exti>

  Init_Rtc();
 800069e:	f000 f803 	bl	80006a8 <Init_Rtc>

  return;
 80006a2:	bf00      	nop
}
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <Init_Rtc>:

static void Init_Rtc(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80006ac:	4805      	ldr	r0, [pc, #20]	@ (80006c4 <Init_Rtc+0x1c>)
 80006ae:	f7ff ff86 	bl	80005be <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80006b2:	2100      	movs	r1, #0
 80006b4:	4803      	ldr	r0, [pc, #12]	@ (80006c4 <Init_Rtc+0x1c>)
 80006b6:	f7ff ff92 	bl	80005de <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80006ba:	4802      	ldr	r0, [pc, #8]	@ (80006c4 <Init_Rtc+0x1c>)
 80006bc:	f7ff ff72 	bl	80005a4 <LL_RTC_EnableWriteProtection>

  return;
 80006c0:	bf00      	nop
}
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40002800 	.word	0x40002800

080006c8 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80006cc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80006d0:	f7ff ff38 	bl	8000544 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80006d4:	f007 fefc 	bl	80084d0 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80006d8:	2004      	movs	r0, #4
 80006da:	f7ff feeb 	bl	80004b4 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80006de:	bf00      	nop
}
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80006ea:	f006 ff01 	bl	80074f0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80006ee:	4a11      	ldr	r2, [pc, #68]	@ (8000734 <appe_Tl_Init+0x50>)
 80006f0:	2100      	movs	r1, #0
 80006f2:	2004      	movs	r0, #4
 80006f4:	f008 f82a 	bl	800874c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000738 <appe_Tl_Init+0x54>)
 80006fa:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	@ (800073c <appe_Tl_Init+0x58>)
 80006fe:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000700:	463b      	mov	r3, r7
 8000702:	4619      	mov	r1, r3
 8000704:	480e      	ldr	r0, [pc, #56]	@ (8000740 <appe_Tl_Init+0x5c>)
 8000706:	f006 fdb5 	bl	8007274 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800070a:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <appe_Tl_Init+0x60>)
 800070c:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800070e:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <appe_Tl_Init+0x64>)
 8000710:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000712:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <appe_Tl_Init+0x68>)
 8000714:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000716:	f240 533c 	movw	r3, #1340	@ 0x53c
 800071a:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 800071c:	f107 0308 	add.w	r3, r7, #8
 8000720:	4618      	mov	r0, r3
 8000722:	f006 ffb5 	bl	8007690 <TL_MM_Init>

  TL_Enable();
 8000726:	f006 fedd 	bl	80074e4 <TL_Enable>

  return;
 800072a:	bf00      	nop
}
 800072c:	3720      	adds	r7, #32
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	080072ad 	.word	0x080072ad
 8000738:	20030734 	.word	0x20030734
 800073c:	08000751 	.word	0x08000751
 8000740:	08000769 	.word	0x08000769
 8000744:	2003094c 	.word	0x2003094c
 8000748:	20030840 	.word	0x20030840
 800074c:	200301f8 	.word	0x200301f8

08000750 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800075a:	bf00      	nop
}
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
	...

08000768 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	330b      	adds	r3, #11
 8000776:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	b29b      	uxth	r3, r3
 800077e:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8000782:	2b07      	cmp	r3, #7
 8000784:	d81f      	bhi.n	80007c6 <APPE_SysUserEvtRx+0x5e>
 8000786:	a201      	add	r2, pc, #4	@ (adr r2, 800078c <APPE_SysUserEvtRx+0x24>)
 8000788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800078c:	080007ad 	.word	0x080007ad
 8000790:	080007bf 	.word	0x080007bf
 8000794:	080007c7 	.word	0x080007c7
 8000798:	080007c7 	.word	0x080007c7
 800079c:	080007c7 	.word	0x080007c7
 80007a0:	080007c7 	.word	0x080007c7
 80007a4:	080007c7 	.word	0x080007c7
 80007a8:	080007c7 	.word	0x080007c7
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	4618      	mov	r0, r3
 80007b2:	f006 fb15 	bl	8006de0 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f000 f81b 	bl	80007f2 <APPE_SysEvtReadyProcessing>
    break;
 80007bc:	e004      	b.n	80007c8 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f000 f806 	bl	80007d0 <APPE_SysEvtError>
    break;
 80007c4:	e000      	b.n	80007c8 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 80007c6:	bf00      	nop
  }

  return;
 80007c8:	bf00      	nop
}
 80007ca:	3720      	adds	r7, #32
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	330b      	adds	r3, #11
 80007de:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	3302      	adds	r3, #2
 80007e4:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80007e6:	bf00      	nop
}
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b08a      	sub	sp, #40	@ 0x28
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80007fa:	f107 0308 	add.w	r3, r7, #8
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	330b      	adds	r3, #11
 8000816:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000818:	69fb      	ldr	r3, [r7, #28]
 800081a:	3302      	adds	r3, #2
 800081c:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800081e:	69bb      	ldr	r3, [r7, #24]
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d11d      	bne.n	8000862 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000826:	f7ff fe29 	bl	800047c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800082a:	230f      	movs	r3, #15
 800082c:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800082e:	237f      	movs	r3, #127	@ 0x7f
 8000830:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000832:	f7ff fea9 	bl	8000588 <LL_DBGMCU_GetRevisionID>
 8000836:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800083a:	b29b      	uxth	r3, r3
 800083c:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800083e:	f7ff fe95 	bl	800056c <LL_DBGMCU_GetDeviceID>
 8000842:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000844:	6a3b      	ldr	r3, [r7, #32]
 8000846:	b29b      	uxth	r3, r3
 8000848:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800084a:	f107 0308 	add.w	r3, r7, #8
 800084e:	4618      	mov	r0, r3
 8000850:	f006 fab0 	bl	8006db4 <SHCI_C2_Config>

    APP_BLE_Init();
 8000854:	f007 f902 	bl	8007a5c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000858:	2100      	movs	r1, #0
 800085a:	2001      	movs	r0, #1
 800085c:	f007 fe4a 	bl	80084f4 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000860:	e007      	b.n	8000872 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000862:	69bb      	ldr	r3, [r7, #24]
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d103      	bne.n	8000872 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2200      	movs	r2, #0
 800086e:	701a      	strb	r2, [r3, #0]
  return;
 8000870:	bf00      	nop
 8000872:	bf00      	nop
}
 8000874:	3728      	adds	r7, #40	@ 0x28
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800087e:	f04f 30ff 	mov.w	r0, #4294967295
 8000882:	f007 fe67 	bl	8008554 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}

0800088a <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800088e:	bf00      	nop
}
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80008a2:	f04f 30ff 	mov.w	r0, #4294967295
 80008a6:	f007 fe55 	bl	8008554 <UTIL_SEQ_Run>
  return;
 80008aa:	bf00      	nop
}
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b082      	sub	sp, #8
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80008ba:	2100      	movs	r1, #0
 80008bc:	2004      	movs	r0, #4
 80008be:	f007 ff67 	bl	8008790 <UTIL_SEQ_SetTask>
  return;
 80008c2:	bf00      	nop
}
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80008d2:	2002      	movs	r0, #2
 80008d4:	f007 ffc8 	bl	8008868 <UTIL_SEQ_SetEvt>
  return;
 80008d8:	bf00      	nop
}
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80008e8:	2002      	movs	r0, #2
 80008ea:	f007 ffdd 	bl	80088a8 <UTIL_SEQ_WaitEvt>
  return;
 80008ee:	bf00      	nop
}
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <LL_EXTI_EnableIT_0_31>:
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000900:	4b06      	ldr	r3, [pc, #24]	@ (800091c <LL_EXTI_EnableIT_0_31+0x24>)
 8000902:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8000906:	4905      	ldr	r1, [pc, #20]	@ (800091c <LL_EXTI_EnableIT_0_31+0x24>)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4313      	orrs	r3, r2
 800090c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	58000800 	.word	0x58000800

08000920 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000928:	4b05      	ldr	r3, [pc, #20]	@ (8000940 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	4904      	ldr	r1, [pc, #16]	@ (8000940 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4313      	orrs	r3, r2
 8000932:	600b      	str	r3, [r1, #0]

}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	58000800 	.word	0x58000800

08000944 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800094a:	4b0d      	ldr	r3, [pc, #52]	@ (8000980 <ReadRtcSsrValue+0x3c>)
 800094c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800094e:	b29b      	uxth	r3, r3
 8000950:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000952:	4b0b      	ldr	r3, [pc, #44]	@ (8000980 <ReadRtcSsrValue+0x3c>)
 8000954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000956:	b29b      	uxth	r3, r3
 8000958:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800095a:	e005      	b.n	8000968 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000960:	4b07      	ldr	r3, [pc, #28]	@ (8000980 <ReadRtcSsrValue+0x3c>)
 8000962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000964:	b29b      	uxth	r3, r3
 8000966:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	429a      	cmp	r2, r3
 800096e:	d1f5      	bne.n	800095c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000970:	683b      	ldr	r3, [r7, #0]
}
 8000972:	4618      	mov	r0, r3
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	40002800 	.word	0x40002800

08000984 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	460a      	mov	r2, r1
 800098e:	71fb      	strb	r3, [r7, #7]
 8000990:	4613      	mov	r3, r2
 8000992:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000994:	79ba      	ldrb	r2, [r7, #6]
 8000996:	491d      	ldr	r1, [pc, #116]	@ (8000a0c <LinkTimerAfter+0x88>)
 8000998:	4613      	mov	r3, r2
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	4413      	add	r3, r2
 800099e:	00db      	lsls	r3, r3, #3
 80009a0:	440b      	add	r3, r1
 80009a2:	3315      	adds	r3, #21
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80009a8:	7bfb      	ldrb	r3, [r7, #15]
 80009aa:	2b06      	cmp	r3, #6
 80009ac:	d009      	beq.n	80009c2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80009ae:	7bfa      	ldrb	r2, [r7, #15]
 80009b0:	4916      	ldr	r1, [pc, #88]	@ (8000a0c <LinkTimerAfter+0x88>)
 80009b2:	4613      	mov	r3, r2
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	4413      	add	r3, r2
 80009b8:	00db      	lsls	r3, r3, #3
 80009ba:	440b      	add	r3, r1
 80009bc:	3314      	adds	r3, #20
 80009be:	79fa      	ldrb	r2, [r7, #7]
 80009c0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80009c2:	79fa      	ldrb	r2, [r7, #7]
 80009c4:	4911      	ldr	r1, [pc, #68]	@ (8000a0c <LinkTimerAfter+0x88>)
 80009c6:	4613      	mov	r3, r2
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	4413      	add	r3, r2
 80009cc:	00db      	lsls	r3, r3, #3
 80009ce:	440b      	add	r3, r1
 80009d0:	3315      	adds	r3, #21
 80009d2:	7bfa      	ldrb	r2, [r7, #15]
 80009d4:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80009d6:	79fa      	ldrb	r2, [r7, #7]
 80009d8:	490c      	ldr	r1, [pc, #48]	@ (8000a0c <LinkTimerAfter+0x88>)
 80009da:	4613      	mov	r3, r2
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	4413      	add	r3, r2
 80009e0:	00db      	lsls	r3, r3, #3
 80009e2:	440b      	add	r3, r1
 80009e4:	3314      	adds	r3, #20
 80009e6:	79ba      	ldrb	r2, [r7, #6]
 80009e8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80009ea:	79ba      	ldrb	r2, [r7, #6]
 80009ec:	4907      	ldr	r1, [pc, #28]	@ (8000a0c <LinkTimerAfter+0x88>)
 80009ee:	4613      	mov	r3, r2
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	4413      	add	r3, r2
 80009f4:	00db      	lsls	r3, r3, #3
 80009f6:	440b      	add	r3, r1
 80009f8:	3315      	adds	r3, #21
 80009fa:	79fa      	ldrb	r2, [r7, #7]
 80009fc:	701a      	strb	r2, [r3, #0]

  return;
 80009fe:	bf00      	nop
}
 8000a00:	3714      	adds	r7, #20
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	20000094 	.word	0x20000094

08000a10 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	460a      	mov	r2, r1
 8000a1a:	71fb      	strb	r3, [r7, #7]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000a20:	4b29      	ldr	r3, [pc, #164]	@ (8000ac8 <LinkTimerBefore+0xb8>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	79ba      	ldrb	r2, [r7, #6]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d032      	beq.n	8000a92 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000a2c:	79ba      	ldrb	r2, [r7, #6]
 8000a2e:	4927      	ldr	r1, [pc, #156]	@ (8000acc <LinkTimerBefore+0xbc>)
 8000a30:	4613      	mov	r3, r2
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	4413      	add	r3, r2
 8000a36:	00db      	lsls	r3, r3, #3
 8000a38:	440b      	add	r3, r1
 8000a3a:	3314      	adds	r3, #20
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000a40:	7bfa      	ldrb	r2, [r7, #15]
 8000a42:	4922      	ldr	r1, [pc, #136]	@ (8000acc <LinkTimerBefore+0xbc>)
 8000a44:	4613      	mov	r3, r2
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	4413      	add	r3, r2
 8000a4a:	00db      	lsls	r3, r3, #3
 8000a4c:	440b      	add	r3, r1
 8000a4e:	3315      	adds	r3, #21
 8000a50:	79fa      	ldrb	r2, [r7, #7]
 8000a52:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000a54:	79fa      	ldrb	r2, [r7, #7]
 8000a56:	491d      	ldr	r1, [pc, #116]	@ (8000acc <LinkTimerBefore+0xbc>)
 8000a58:	4613      	mov	r3, r2
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	4413      	add	r3, r2
 8000a5e:	00db      	lsls	r3, r3, #3
 8000a60:	440b      	add	r3, r1
 8000a62:	3315      	adds	r3, #21
 8000a64:	79ba      	ldrb	r2, [r7, #6]
 8000a66:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000a68:	79fa      	ldrb	r2, [r7, #7]
 8000a6a:	4918      	ldr	r1, [pc, #96]	@ (8000acc <LinkTimerBefore+0xbc>)
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	4413      	add	r3, r2
 8000a72:	00db      	lsls	r3, r3, #3
 8000a74:	440b      	add	r3, r1
 8000a76:	3314      	adds	r3, #20
 8000a78:	7bfa      	ldrb	r2, [r7, #15]
 8000a7a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000a7c:	79ba      	ldrb	r2, [r7, #6]
 8000a7e:	4913      	ldr	r1, [pc, #76]	@ (8000acc <LinkTimerBefore+0xbc>)
 8000a80:	4613      	mov	r3, r2
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	4413      	add	r3, r2
 8000a86:	00db      	lsls	r3, r3, #3
 8000a88:	440b      	add	r3, r1
 8000a8a:	3314      	adds	r3, #20
 8000a8c:	79fa      	ldrb	r2, [r7, #7]
 8000a8e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000a90:	e014      	b.n	8000abc <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000a92:	79fa      	ldrb	r2, [r7, #7]
 8000a94:	490d      	ldr	r1, [pc, #52]	@ (8000acc <LinkTimerBefore+0xbc>)
 8000a96:	4613      	mov	r3, r2
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	4413      	add	r3, r2
 8000a9c:	00db      	lsls	r3, r3, #3
 8000a9e:	440b      	add	r3, r1
 8000aa0:	3315      	adds	r3, #21
 8000aa2:	79ba      	ldrb	r2, [r7, #6]
 8000aa4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000aa6:	79ba      	ldrb	r2, [r7, #6]
 8000aa8:	4908      	ldr	r1, [pc, #32]	@ (8000acc <LinkTimerBefore+0xbc>)
 8000aaa:	4613      	mov	r3, r2
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	4413      	add	r3, r2
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	440b      	add	r3, r1
 8000ab4:	3314      	adds	r3, #20
 8000ab6:	79fa      	ldrb	r2, [r7, #7]
 8000ab8:	701a      	strb	r2, [r3, #0]
  return;
 8000aba:	bf00      	nop
}
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	20000124 	.word	0x20000124
 8000acc:	20000094 	.word	0x20000094

08000ad0 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ada:	4b4e      	ldr	r3, [pc, #312]	@ (8000c14 <linkTimer+0x144>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	2b06      	cmp	r3, #6
 8000ae2:	d118      	bne.n	8000b16 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000ae4:	4b4b      	ldr	r3, [pc, #300]	@ (8000c14 <linkTimer+0x144>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	4b4b      	ldr	r3, [pc, #300]	@ (8000c18 <linkTimer+0x148>)
 8000aec:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000aee:	4a49      	ldr	r2, [pc, #292]	@ (8000c14 <linkTimer+0x144>)
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000af4:	79fa      	ldrb	r2, [r7, #7]
 8000af6:	4949      	ldr	r1, [pc, #292]	@ (8000c1c <linkTimer+0x14c>)
 8000af8:	4613      	mov	r3, r2
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	4413      	add	r3, r2
 8000afe:	00db      	lsls	r3, r3, #3
 8000b00:	440b      	add	r3, r1
 8000b02:	3315      	adds	r3, #21
 8000b04:	2206      	movs	r2, #6
 8000b06:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000b08:	4b45      	ldr	r3, [pc, #276]	@ (8000c20 <linkTimer+0x150>)
 8000b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8000b0e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	81fb      	strh	r3, [r7, #14]
 8000b14:	e078      	b.n	8000c08 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000b16:	f000 f909 	bl	8000d2c <ReturnTimeElapsed>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000b1e:	79fa      	ldrb	r2, [r7, #7]
 8000b20:	493e      	ldr	r1, [pc, #248]	@ (8000c1c <linkTimer+0x14c>)
 8000b22:	4613      	mov	r3, r2
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	4413      	add	r3, r2
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	440b      	add	r3, r1
 8000b2c:	3308      	adds	r3, #8
 8000b2e:	6819      	ldr	r1, [r3, #0]
 8000b30:	89fb      	ldrh	r3, [r7, #14]
 8000b32:	79fa      	ldrb	r2, [r7, #7]
 8000b34:	4419      	add	r1, r3
 8000b36:	4839      	ldr	r0, [pc, #228]	@ (8000c1c <linkTimer+0x14c>)
 8000b38:	4613      	mov	r3, r2
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	4413      	add	r3, r2
 8000b3e:	00db      	lsls	r3, r3, #3
 8000b40:	4403      	add	r3, r0
 8000b42:	3308      	adds	r3, #8
 8000b44:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000b46:	79fa      	ldrb	r2, [r7, #7]
 8000b48:	4934      	ldr	r1, [pc, #208]	@ (8000c1c <linkTimer+0x14c>)
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	4413      	add	r3, r2
 8000b50:	00db      	lsls	r3, r3, #3
 8000b52:	440b      	add	r3, r1
 8000b54:	3308      	adds	r3, #8
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000b5a:	4b2e      	ldr	r3, [pc, #184]	@ (8000c14 <linkTimer+0x144>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	4619      	mov	r1, r3
 8000b62:	4a2e      	ldr	r2, [pc, #184]	@ (8000c1c <linkTimer+0x14c>)
 8000b64:	460b      	mov	r3, r1
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	440b      	add	r3, r1
 8000b6a:	00db      	lsls	r3, r3, #3
 8000b6c:	4413      	add	r3, r2
 8000b6e:	3308      	adds	r3, #8
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	68ba      	ldr	r2, [r7, #8]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d337      	bcc.n	8000be8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000b78:	4b26      	ldr	r3, [pc, #152]	@ (8000c14 <linkTimer+0x144>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000b7e:	7b7a      	ldrb	r2, [r7, #13]
 8000b80:	4926      	ldr	r1, [pc, #152]	@ (8000c1c <linkTimer+0x14c>)
 8000b82:	4613      	mov	r3, r2
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	4413      	add	r3, r2
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	440b      	add	r3, r1
 8000b8c:	3315      	adds	r3, #21
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000b92:	e013      	b.n	8000bbc <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000b94:	7b7a      	ldrb	r2, [r7, #13]
 8000b96:	4921      	ldr	r1, [pc, #132]	@ (8000c1c <linkTimer+0x14c>)
 8000b98:	4613      	mov	r3, r2
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	4413      	add	r3, r2
 8000b9e:	00db      	lsls	r3, r3, #3
 8000ba0:	440b      	add	r3, r1
 8000ba2:	3315      	adds	r3, #21
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000ba8:	7b7a      	ldrb	r2, [r7, #13]
 8000baa:	491c      	ldr	r1, [pc, #112]	@ (8000c1c <linkTimer+0x14c>)
 8000bac:	4613      	mov	r3, r2
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	4413      	add	r3, r2
 8000bb2:	00db      	lsls	r3, r3, #3
 8000bb4:	440b      	add	r3, r1
 8000bb6:	3315      	adds	r3, #21
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000bbc:	7b3b      	ldrb	r3, [r7, #12]
 8000bbe:	2b06      	cmp	r3, #6
 8000bc0:	d00b      	beq.n	8000bda <linkTimer+0x10a>
 8000bc2:	7b3a      	ldrb	r2, [r7, #12]
 8000bc4:	4915      	ldr	r1, [pc, #84]	@ (8000c1c <linkTimer+0x14c>)
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	4413      	add	r3, r2
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	440b      	add	r3, r1
 8000bd0:	3308      	adds	r3, #8
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	68ba      	ldr	r2, [r7, #8]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d2dc      	bcs.n	8000b94 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000bda:	7b7a      	ldrb	r2, [r7, #13]
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	4611      	mov	r1, r2
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fecf 	bl	8000984 <LinkTimerAfter>
 8000be6:	e00f      	b.n	8000c08 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000be8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c14 <linkTimer+0x144>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	4611      	mov	r1, r2
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff ff0c 	bl	8000a10 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <linkTimer+0x144>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <linkTimer+0x148>)
 8000c00:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000c02:	4a04      	ldr	r2, [pc, #16]	@ (8000c14 <linkTimer+0x144>)
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000c08:	89fb      	ldrh	r3, [r7, #14]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000124 	.word	0x20000124
 8000c18:	20000125 	.word	0x20000125
 8000c1c:	20000094 	.word	0x20000094
 8000c20:	20000128 	.word	0x20000128

08000c24 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	460a      	mov	r2, r1
 8000c2e:	71fb      	strb	r3, [r7, #7]
 8000c30:	4613      	mov	r3, r2
 8000c32:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000c34:	4b39      	ldr	r3, [pc, #228]	@ (8000d1c <UnlinkTimer+0xf8>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	79fa      	ldrb	r2, [r7, #7]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d111      	bne.n	8000c64 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000c40:	4b36      	ldr	r3, [pc, #216]	@ (8000d1c <UnlinkTimer+0xf8>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4b36      	ldr	r3, [pc, #216]	@ (8000d20 <UnlinkTimer+0xfc>)
 8000c48:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000c4a:	79fa      	ldrb	r2, [r7, #7]
 8000c4c:	4935      	ldr	r1, [pc, #212]	@ (8000d24 <UnlinkTimer+0x100>)
 8000c4e:	4613      	mov	r3, r2
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	4413      	add	r3, r2
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	440b      	add	r3, r1
 8000c58:	3315      	adds	r3, #21
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d1c <UnlinkTimer+0xf8>)
 8000c60:	701a      	strb	r2, [r3, #0]
 8000c62:	e03e      	b.n	8000ce2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000c64:	79fa      	ldrb	r2, [r7, #7]
 8000c66:	492f      	ldr	r1, [pc, #188]	@ (8000d24 <UnlinkTimer+0x100>)
 8000c68:	4613      	mov	r3, r2
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	4413      	add	r3, r2
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	440b      	add	r3, r1
 8000c72:	3314      	adds	r3, #20
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000c78:	79fa      	ldrb	r2, [r7, #7]
 8000c7a:	492a      	ldr	r1, [pc, #168]	@ (8000d24 <UnlinkTimer+0x100>)
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	4413      	add	r3, r2
 8000c82:	00db      	lsls	r3, r3, #3
 8000c84:	440b      	add	r3, r1
 8000c86:	3315      	adds	r3, #21
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000c8c:	79f9      	ldrb	r1, [r7, #7]
 8000c8e:	7bfa      	ldrb	r2, [r7, #15]
 8000c90:	4824      	ldr	r0, [pc, #144]	@ (8000d24 <UnlinkTimer+0x100>)
 8000c92:	460b      	mov	r3, r1
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	440b      	add	r3, r1
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	4403      	add	r3, r0
 8000c9c:	3315      	adds	r3, #21
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	b2d8      	uxtb	r0, r3
 8000ca2:	4920      	ldr	r1, [pc, #128]	@ (8000d24 <UnlinkTimer+0x100>)
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	4413      	add	r3, r2
 8000caa:	00db      	lsls	r3, r3, #3
 8000cac:	440b      	add	r3, r1
 8000cae:	3315      	adds	r3, #21
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000cb4:	7bbb      	ldrb	r3, [r7, #14]
 8000cb6:	2b06      	cmp	r3, #6
 8000cb8:	d013      	beq.n	8000ce2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000cba:	79f9      	ldrb	r1, [r7, #7]
 8000cbc:	7bba      	ldrb	r2, [r7, #14]
 8000cbe:	4819      	ldr	r0, [pc, #100]	@ (8000d24 <UnlinkTimer+0x100>)
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	440b      	add	r3, r1
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	4403      	add	r3, r0
 8000cca:	3314      	adds	r3, #20
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	b2d8      	uxtb	r0, r3
 8000cd0:	4914      	ldr	r1, [pc, #80]	@ (8000d24 <UnlinkTimer+0x100>)
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	4413      	add	r3, r2
 8000cd8:	00db      	lsls	r3, r3, #3
 8000cda:	440b      	add	r3, r1
 8000cdc:	3314      	adds	r3, #20
 8000cde:	4602      	mov	r2, r0
 8000ce0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000ce2:	79fa      	ldrb	r2, [r7, #7]
 8000ce4:	490f      	ldr	r1, [pc, #60]	@ (8000d24 <UnlinkTimer+0x100>)
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	4413      	add	r3, r2
 8000cec:	00db      	lsls	r3, r3, #3
 8000cee:	440b      	add	r3, r1
 8000cf0:	330c      	adds	r3, #12
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000cf6:	4b09      	ldr	r3, [pc, #36]	@ (8000d1c <UnlinkTimer+0xf8>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	2b06      	cmp	r3, #6
 8000cfe:	d107      	bne.n	8000d10 <UnlinkTimer+0xec>
 8000d00:	79bb      	ldrb	r3, [r7, #6]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d104      	bne.n	8000d10 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000d06:	4b08      	ldr	r3, [pc, #32]	@ (8000d28 <UnlinkTimer+0x104>)
 8000d08:	f04f 32ff 	mov.w	r2, #4294967295
 8000d0c:	601a      	str	r2, [r3, #0]
  }

  return;
 8000d0e:	bf00      	nop
 8000d10:	bf00      	nop
}
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	20000124 	.word	0x20000124
 8000d20:	20000125 	.word	0x20000125
 8000d24:	20000094 	.word	0x20000094
 8000d28:	20000128 	.word	0x20000128

08000d2c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000d32:	4b1a      	ldr	r3, [pc, #104]	@ (8000d9c <ReturnTimeElapsed+0x70>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d3a:	d026      	beq.n	8000d8a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000d3c:	f7ff fe02 	bl	8000944 <ReadRtcSsrValue>
 8000d40:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000d42:	4b16      	ldr	r3, [pc, #88]	@ (8000d9c <ReturnTimeElapsed+0x70>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d805      	bhi.n	8000d58 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000d4c:	4b13      	ldr	r3, [pc, #76]	@ (8000d9c <ReturnTimeElapsed+0x70>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	e00a      	b.n	8000d6e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000d58:	4b11      	ldr	r3, [pc, #68]	@ (8000da0 <ReturnTimeElapsed+0x74>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000d64:	4b0d      	ldr	r3, [pc, #52]	@ (8000d9c <ReturnTimeElapsed+0x70>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	683a      	ldr	r2, [r7, #0]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000da4 <ReturnTimeElapsed+0x78>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	461a      	mov	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	fb02 f303 	mul.w	r3, r2, r3
 8000d7a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000da8 <ReturnTimeElapsed+0x7c>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	40d3      	lsrs	r3, r2
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	e001      	b.n	8000d8e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	b29b      	uxth	r3, r3
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000128 	.word	0x20000128
 8000da0:	20000130 	.word	0x20000130
 8000da4:	2000012e 	.word	0x2000012e
 8000da8:	2000012d 	.word	0x2000012d

08000dac <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d108      	bne.n	8000dce <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000dbc:	f7ff fdc2 	bl	8000944 <ReadRtcSsrValue>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	4a21      	ldr	r2, [pc, #132]	@ (8000e48 <RestartWakeupCounter+0x9c>)
 8000dc4:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000dc6:	2003      	movs	r0, #3
 8000dc8:	f001 f9dc 	bl	8002184 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000dcc:	e039      	b.n	8000e42 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000dce:	88fb      	ldrh	r3, [r7, #6]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d803      	bhi.n	8000ddc <RestartWakeupCounter+0x30>
 8000dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e4c <RestartWakeupCounter+0xa0>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d002      	beq.n	8000de2 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000ddc:	88fb      	ldrh	r3, [r7, #6]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000de2:	bf00      	nop
 8000de4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e50 <RestartWakeupCounter+0xa4>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	f003 0304 	and.w	r3, r3, #4
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d0f8      	beq.n	8000de4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000df2:	4b17      	ldr	r3, [pc, #92]	@ (8000e50 <RestartWakeupCounter+0xa4>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	4b15      	ldr	r3, [pc, #84]	@ (8000e50 <RestartWakeupCounter+0xa4>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8000e02:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000e04:	4b13      	ldr	r3, [pc, #76]	@ (8000e54 <RestartWakeupCounter+0xa8>)
 8000e06:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000e0a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000e0c:	2003      	movs	r0, #3
 8000e0e:	f001 f9c7 	bl	80021a0 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000e12:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <RestartWakeupCounter+0xac>)
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	0c1b      	lsrs	r3, r3, #16
 8000e18:	041b      	lsls	r3, r3, #16
 8000e1a:	88fa      	ldrh	r2, [r7, #6]
 8000e1c:	490e      	ldr	r1, [pc, #56]	@ (8000e58 <RestartWakeupCounter+0xac>)
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000e22:	f7ff fd8f 	bl	8000944 <ReadRtcSsrValue>
 8000e26:	4603      	mov	r3, r0
 8000e28:	4a07      	ldr	r2, [pc, #28]	@ (8000e48 <RestartWakeupCounter+0x9c>)
 8000e2a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8000e2c:	4b08      	ldr	r3, [pc, #32]	@ (8000e50 <RestartWakeupCounter+0xa4>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	689a      	ldr	r2, [r3, #8]
 8000e32:	4b07      	ldr	r3, [pc, #28]	@ (8000e50 <RestartWakeupCounter+0xa4>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000e3a:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000e3c:	f3af 8000 	nop.w
  return ;
 8000e40:	bf00      	nop
}
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000128 	.word	0x20000128
 8000e4c:	2000012d 	.word	0x2000012d
 8000e50:	20000170 	.word	0x20000170
 8000e54:	58000800 	.word	0x58000800
 8000e58:	40002800 	.word	0x40002800

08000e5c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000e62:	4b45      	ldr	r3, [pc, #276]	@ (8000f78 <RescheduleTimerList+0x11c>)
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e6e:	d107      	bne.n	8000e80 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8000e70:	bf00      	nop
 8000e72:	4b42      	ldr	r3, [pc, #264]	@ (8000f7c <RescheduleTimerList+0x120>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	f003 0304 	and.w	r3, r3, #4
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d1f8      	bne.n	8000e72 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8000e80:	4b3e      	ldr	r3, [pc, #248]	@ (8000f7c <RescheduleTimerList+0x120>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	689a      	ldr	r2, [r3, #8]
 8000e86:	4b3d      	ldr	r3, [pc, #244]	@ (8000f7c <RescheduleTimerList+0x120>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000e8e:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000e90:	4b3b      	ldr	r3, [pc, #236]	@ (8000f80 <RescheduleTimerList+0x124>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000e96:	7bfa      	ldrb	r2, [r7, #15]
 8000e98:	493a      	ldr	r1, [pc, #232]	@ (8000f84 <RescheduleTimerList+0x128>)
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	4413      	add	r3, r2
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	440b      	add	r3, r1
 8000ea4:	3308      	adds	r3, #8
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000eaa:	f7ff ff3f 	bl	8000d2c <ReturnTimeElapsed>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000eb2:	88fb      	ldrh	r3, [r7, #6]
 8000eb4:	68ba      	ldr	r2, [r7, #8]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d205      	bcs.n	8000ec6 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000ebe:	4b32      	ldr	r3, [pc, #200]	@ (8000f88 <RescheduleTimerList+0x12c>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	701a      	strb	r2, [r3, #0]
 8000ec4:	e04d      	b.n	8000f62 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	4a30      	ldr	r2, [pc, #192]	@ (8000f8c <RescheduleTimerList+0x130>)
 8000eca:	8812      	ldrh	r2, [r2, #0]
 8000ecc:	b292      	uxth	r2, r2
 8000ece:	4413      	add	r3, r2
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d906      	bls.n	8000ee6 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000ed8:	4b2c      	ldr	r3, [pc, #176]	@ (8000f8c <RescheduleTimerList+0x130>)
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000ede:	4b2a      	ldr	r3, [pc, #168]	@ (8000f88 <RescheduleTimerList+0x12c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
 8000ee4:	e03d      	b.n	8000f62 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	88fb      	ldrh	r3, [r7, #6]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000ef0:	4b25      	ldr	r3, [pc, #148]	@ (8000f88 <RescheduleTimerList+0x12c>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ef6:	e034      	b.n	8000f62 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000ef8:	7bfa      	ldrb	r2, [r7, #15]
 8000efa:	4922      	ldr	r1, [pc, #136]	@ (8000f84 <RescheduleTimerList+0x128>)
 8000efc:	4613      	mov	r3, r2
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	4413      	add	r3, r2
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	440b      	add	r3, r1
 8000f06:	3308      	adds	r3, #8
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d20a      	bcs.n	8000f26 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000f10:	7bfa      	ldrb	r2, [r7, #15]
 8000f12:	491c      	ldr	r1, [pc, #112]	@ (8000f84 <RescheduleTimerList+0x128>)
 8000f14:	4613      	mov	r3, r2
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	4413      	add	r3, r2
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	440b      	add	r3, r1
 8000f1e:	3308      	adds	r3, #8
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	e013      	b.n	8000f4e <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000f26:	7bfa      	ldrb	r2, [r7, #15]
 8000f28:	4916      	ldr	r1, [pc, #88]	@ (8000f84 <RescheduleTimerList+0x128>)
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	4413      	add	r3, r2
 8000f30:	00db      	lsls	r3, r3, #3
 8000f32:	440b      	add	r3, r1
 8000f34:	3308      	adds	r3, #8
 8000f36:	6819      	ldr	r1, [r3, #0]
 8000f38:	88fb      	ldrh	r3, [r7, #6]
 8000f3a:	7bfa      	ldrb	r2, [r7, #15]
 8000f3c:	1ac9      	subs	r1, r1, r3
 8000f3e:	4811      	ldr	r0, [pc, #68]	@ (8000f84 <RescheduleTimerList+0x128>)
 8000f40:	4613      	mov	r3, r2
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	4413      	add	r3, r2
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	4403      	add	r3, r0
 8000f4a:	3308      	adds	r3, #8
 8000f4c:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000f4e:	7bfa      	ldrb	r2, [r7, #15]
 8000f50:	490c      	ldr	r1, [pc, #48]	@ (8000f84 <RescheduleTimerList+0x128>)
 8000f52:	4613      	mov	r3, r2
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	4413      	add	r3, r2
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	440b      	add	r3, r1
 8000f5c:	3315      	adds	r3, #21
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	2b06      	cmp	r3, #6
 8000f66:	d1c7      	bne.n	8000ef8 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000f68:	89bb      	ldrh	r3, [r7, #12]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff ff1e 	bl	8000dac <RestartWakeupCounter>

  return ;
 8000f70:	bf00      	nop
}
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40002800 	.word	0x40002800
 8000f7c:	20000170 	.word	0x20000170
 8000f80:	20000124 	.word	0x20000124
 8000f84:	20000094 	.word	0x20000094
 8000f88:	2000012c 	.word	0x2000012c
 8000f8c:	20000132 	.word	0x20000132

08000f90 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	@ 0x28
 8000f94:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000f96:	f3ef 8310 	mrs	r3, PRIMASK
 8000f9a:	617b      	str	r3, [r7, #20]
  return(result);
 8000f9c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000f9e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa0:	b672      	cpsid	i
}
 8000fa2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000fa4:	4b59      	ldr	r3, [pc, #356]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	22ca      	movs	r2, #202	@ 0xca
 8000faa:	625a      	str	r2, [r3, #36]	@ 0x24
 8000fac:	4b57      	ldr	r3, [pc, #348]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2253      	movs	r2, #83	@ 0x53
 8000fb2:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8000fb4:	4b55      	ldr	r3, [pc, #340]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	689a      	ldr	r2, [r3, #8]
 8000fba:	4b54      	ldr	r3, [pc, #336]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000fc2:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000fc4:	4b52      	ldr	r3, [pc, #328]	@ (8001110 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000fcc:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000fd0:	4950      	ldr	r1, [pc, #320]	@ (8001114 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	4413      	add	r3, r2
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	440b      	add	r3, r1
 8000fdc:	330c      	adds	r3, #12
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d16e      	bne.n	80010c4 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000fe6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000fea:	494a      	ldr	r1, [pc, #296]	@ (8001114 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000fec:	4613      	mov	r3, r2
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	4413      	add	r3, r2
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	440b      	add	r3, r1
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000ffa:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000ffe:	4945      	ldr	r1, [pc, #276]	@ (8001114 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001000:	4613      	mov	r3, r2
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	4413      	add	r3, r2
 8001006:	00db      	lsls	r3, r3, #3
 8001008:	440b      	add	r3, r1
 800100a:	3310      	adds	r3, #16
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001010:	4b41      	ldr	r3, [pc, #260]	@ (8001118 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d04c      	beq.n	80010b4 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800101a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800101e:	493d      	ldr	r1, [pc, #244]	@ (8001114 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001020:	4613      	mov	r3, r2
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	4413      	add	r3, r2
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	440b      	add	r3, r1
 800102a:	330d      	adds	r3, #13
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	b2db      	uxtb	r3, r3
 8001030:	2b01      	cmp	r3, #1
 8001032:	d124      	bne.n	800107e <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001034:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001038:	2101      	movs	r1, #1
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fdf2 	bl	8000c24 <UnlinkTimer>
 8001040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001042:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	f383 8810 	msr	PRIMASK, r3
}
 800104a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 800104c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001050:	4930      	ldr	r1, [pc, #192]	@ (8001114 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001052:	4613      	mov	r3, r2
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	4413      	add	r3, r2
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	440b      	add	r3, r1
 800105c:	3304      	adds	r3, #4
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001064:	4611      	mov	r1, r2
 8001066:	4618      	mov	r0, r3
 8001068:	f000 f9b8 	bl	80013dc <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800106c:	4b27      	ldr	r3, [pc, #156]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	22ca      	movs	r2, #202	@ 0xca
 8001072:	625a      	str	r2, [r3, #36]	@ 0x24
 8001074:	4b25      	ldr	r3, [pc, #148]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2253      	movs	r2, #83	@ 0x53
 800107a:	625a      	str	r2, [r3, #36]	@ 0x24
 800107c:	e012      	b.n	80010a4 <HW_TS_RTC_Wakeup_Handler+0x114>
 800107e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001080:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	f383 8810 	msr	PRIMASK, r3
}
 8001088:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800108a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800108e:	4618      	mov	r0, r3
 8001090:	f000 f920 	bl	80012d4 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001094:	4b1d      	ldr	r3, [pc, #116]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	22ca      	movs	r2, #202	@ 0xca
 800109a:	625a      	str	r2, [r3, #36]	@ 0x24
 800109c:	4b1b      	ldr	r3, [pc, #108]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2253      	movs	r2, #83	@ 0x53
 80010a2:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80010a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80010a8:	69fa      	ldr	r2, [r7, #28]
 80010aa:	4619      	mov	r1, r3
 80010ac:	69b8      	ldr	r0, [r7, #24]
 80010ae:	f000 fa1b 	bl	80014e8 <HW_TS_RTC_Int_AppNot>
 80010b2:	e022      	b.n	80010fa <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80010b4:	f7ff fed2 	bl	8000e5c <RescheduleTimerList>
 80010b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ba:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	f383 8810 	msr	PRIMASK, r3
}
 80010c2:	e01a      	b.n	80010fa <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80010c4:	bf00      	nop
 80010c6:	4b11      	ldr	r3, [pc, #68]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	f003 0304 	and.w	r3, r3, #4
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d0f8      	beq.n	80010c6 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80010d4:	4b0d      	ldr	r3, [pc, #52]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	4b0b      	ldr	r3, [pc, #44]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80010e4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80010e6:	4b0d      	ldr	r3, [pc, #52]	@ (800111c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80010e8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f383 8810 	msr	PRIMASK, r3
}
 80010f8:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80010fa:	4b04      	ldr	r3, [pc, #16]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	22ff      	movs	r2, #255	@ 0xff
 8001100:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8001102:	bf00      	nop
}
 8001104:	3728      	adds	r7, #40	@ 0x28
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000170 	.word	0x20000170
 8001110:	20000124 	.word	0x20000124
 8001114:	20000094 	.word	0x20000094
 8001118:	2000012c 	.word	0x2000012c
 800111c:	58000800 	.word	0x58000800

08001120 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800112c:	4b5e      	ldr	r3, [pc, #376]	@ (80012a8 <HW_TS_Init+0x188>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	22ca      	movs	r2, #202	@ 0xca
 8001132:	625a      	str	r2, [r3, #36]	@ 0x24
 8001134:	4b5c      	ldr	r3, [pc, #368]	@ (80012a8 <HW_TS_Init+0x188>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2253      	movs	r2, #83	@ 0x53
 800113a:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800113c:	4b5b      	ldr	r3, [pc, #364]	@ (80012ac <HW_TS_Init+0x18c>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	4a5a      	ldr	r2, [pc, #360]	@ (80012ac <HW_TS_Init+0x18c>)
 8001142:	f043 0320 	orr.w	r3, r3, #32
 8001146:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001148:	4b58      	ldr	r3, [pc, #352]	@ (80012ac <HW_TS_Init+0x18c>)
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	b2db      	uxtb	r3, r3
 8001154:	f1c3 0304 	rsb	r3, r3, #4
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4b55      	ldr	r3, [pc, #340]	@ (80012b0 <HW_TS_Init+0x190>)
 800115c:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800115e:	4b53      	ldr	r3, [pc, #332]	@ (80012ac <HW_TS_Init+0x18c>)
 8001160:	691b      	ldr	r3, [r3, #16]
 8001162:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001166:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 800116a:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	fa92 f2a2 	rbit	r2, r2
 8001172:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001174:	68fa      	ldr	r2, [r7, #12]
 8001176:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001178:	697a      	ldr	r2, [r7, #20]
 800117a:	2a00      	cmp	r2, #0
 800117c:	d101      	bne.n	8001182 <HW_TS_Init+0x62>
  {
    return 32U;
 800117e:	2220      	movs	r2, #32
 8001180:	e003      	b.n	800118a <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	fab2 f282 	clz	r2, r2
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	40d3      	lsrs	r3, r2
 800118c:	b2db      	uxtb	r3, r3
 800118e:	3301      	adds	r3, #1
 8001190:	b2da      	uxtb	r2, r3
 8001192:	4b48      	ldr	r3, [pc, #288]	@ (80012b4 <HW_TS_Init+0x194>)
 8001194:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001196:	4b45      	ldr	r3, [pc, #276]	@ (80012ac <HW_TS_Init+0x18c>)
 8001198:	691b      	ldr	r3, [r3, #16]
 800119a:	b29b      	uxth	r3, r3
 800119c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	3301      	adds	r3, #1
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	4b44      	ldr	r3, [pc, #272]	@ (80012b8 <HW_TS_Init+0x198>)
 80011a8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80011aa:	4b43      	ldr	r3, [pc, #268]	@ (80012b8 <HW_TS_Init+0x198>)
 80011ac:	881b      	ldrh	r3, [r3, #0]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	4a40      	ldr	r2, [pc, #256]	@ (80012b4 <HW_TS_Init+0x194>)
 80011b2:	7812      	ldrb	r2, [r2, #0]
 80011b4:	fb02 f303 	mul.w	r3, r2, r3
 80011b8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80011bc:	4a3c      	ldr	r2, [pc, #240]	@ (80012b0 <HW_TS_Init+0x190>)
 80011be:	7812      	ldrb	r2, [r2, #0]
 80011c0:	40d3      	lsrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d904      	bls.n	80011d8 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80011ce:	4b3b      	ldr	r3, [pc, #236]	@ (80012bc <HW_TS_Init+0x19c>)
 80011d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011d4:	801a      	strh	r2, [r3, #0]
 80011d6:	e003      	b.n	80011e0 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	b29a      	uxth	r2, r3
 80011dc:	4b37      	ldr	r3, [pc, #220]	@ (80012bc <HW_TS_Init+0x19c>)
 80011de:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80011e0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80011e4:	f7ff fb9c 	bl	8000920 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80011e8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80011ec:	f7ff fb84 	bl	80008f8 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d13d      	bne.n	8001272 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80011f6:	4b32      	ldr	r3, [pc, #200]	@ (80012c0 <HW_TS_Init+0x1a0>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80011fc:	4b31      	ldr	r3, [pc, #196]	@ (80012c4 <HW_TS_Init+0x1a4>)
 80011fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001202:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001204:	2300      	movs	r3, #0
 8001206:	77fb      	strb	r3, [r7, #31]
 8001208:	e00c      	b.n	8001224 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800120a:	7ffa      	ldrb	r2, [r7, #31]
 800120c:	492e      	ldr	r1, [pc, #184]	@ (80012c8 <HW_TS_Init+0x1a8>)
 800120e:	4613      	mov	r3, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	4413      	add	r3, r2
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	440b      	add	r3, r1
 8001218:	330c      	adds	r3, #12
 800121a:	2200      	movs	r2, #0
 800121c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800121e:	7ffb      	ldrb	r3, [r7, #31]
 8001220:	3301      	adds	r3, #1
 8001222:	77fb      	strb	r3, [r7, #31]
 8001224:	7ffb      	ldrb	r3, [r7, #31]
 8001226:	2b05      	cmp	r3, #5
 8001228:	d9ef      	bls.n	800120a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800122a:	4b28      	ldr	r3, [pc, #160]	@ (80012cc <HW_TS_Init+0x1ac>)
 800122c:	2206      	movs	r2, #6
 800122e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001230:	4b1d      	ldr	r3, [pc, #116]	@ (80012a8 <HW_TS_Init+0x188>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	4b1c      	ldr	r3, [pc, #112]	@ (80012a8 <HW_TS_Init+0x188>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800123e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001240:	4b19      	ldr	r3, [pc, #100]	@ (80012a8 <HW_TS_Init+0x188>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	b2da      	uxtb	r2, r3
 8001248:	4b17      	ldr	r3, [pc, #92]	@ (80012a8 <HW_TS_Init+0x188>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001250:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001252:	4b1f      	ldr	r3, [pc, #124]	@ (80012d0 <HW_TS_Init+0x1b0>)
 8001254:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001258:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800125a:	2003      	movs	r0, #3
 800125c:	f000 ffa0 	bl	80021a0 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001260:	4b11      	ldr	r3, [pc, #68]	@ (80012a8 <HW_TS_Init+0x188>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689a      	ldr	r2, [r3, #8]
 8001266:	4b10      	ldr	r3, [pc, #64]	@ (80012a8 <HW_TS_Init+0x188>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	e009      	b.n	8001286 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001272:	4b0d      	ldr	r3, [pc, #52]	@ (80012a8 <HW_TS_Init+0x188>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800127c:	2b00      	cmp	r3, #0
 800127e:	d002      	beq.n	8001286 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001280:	2003      	movs	r0, #3
 8001282:	f000 ff7f 	bl	8002184 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001286:	4b08      	ldr	r3, [pc, #32]	@ (80012a8 <HW_TS_Init+0x188>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	22ff      	movs	r2, #255	@ 0xff
 800128c:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800128e:	2200      	movs	r2, #0
 8001290:	2103      	movs	r1, #3
 8001292:	2003      	movs	r0, #3
 8001294:	f000 ff40 	bl	8002118 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001298:	2003      	movs	r0, #3
 800129a:	f000 ff57 	bl	800214c <HAL_NVIC_EnableIRQ>

  return;
 800129e:	bf00      	nop
}
 80012a0:	3720      	adds	r7, #32
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000170 	.word	0x20000170
 80012ac:	40002800 	.word	0x40002800
 80012b0:	2000012d 	.word	0x2000012d
 80012b4:	2000012e 	.word	0x2000012e
 80012b8:	20000130 	.word	0x20000130
 80012bc:	20000132 	.word	0x20000132
 80012c0:	2000012c 	.word	0x2000012c
 80012c4:	20000128 	.word	0x20000128
 80012c8:	20000094 	.word	0x20000094
 80012cc:	20000124 	.word	0x20000124
 80012d0:	58000800 	.word	0x58000800

080012d4 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80012de:	f3ef 8310 	mrs	r3, PRIMASK
 80012e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80012e4:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80012e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80012e8:	b672      	cpsid	i
}
 80012ea:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80012ec:	2003      	movs	r0, #3
 80012ee:	f000 ff3b 	bl	8002168 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80012f2:	4b34      	ldr	r3, [pc, #208]	@ (80013c4 <HW_TS_Stop+0xf0>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	22ca      	movs	r2, #202	@ 0xca
 80012f8:	625a      	str	r2, [r3, #36]	@ 0x24
 80012fa:	4b32      	ldr	r3, [pc, #200]	@ (80013c4 <HW_TS_Stop+0xf0>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2253      	movs	r2, #83	@ 0x53
 8001300:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001302:	79fa      	ldrb	r2, [r7, #7]
 8001304:	4930      	ldr	r1, [pc, #192]	@ (80013c8 <HW_TS_Stop+0xf4>)
 8001306:	4613      	mov	r3, r2
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	4413      	add	r3, r2
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	440b      	add	r3, r1
 8001310:	330c      	adds	r3, #12
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d142      	bne.n	80013a0 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fc80 	bl	8000c24 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001324:	4b29      	ldr	r3, [pc, #164]	@ (80013cc <HW_TS_Stop+0xf8>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800132a:	7cfb      	ldrb	r3, [r7, #19]
 800132c:	2b06      	cmp	r3, #6
 800132e:	d12f      	bne.n	8001390 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001330:	4b27      	ldr	r3, [pc, #156]	@ (80013d0 <HW_TS_Stop+0xfc>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001338:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800133c:	d107      	bne.n	800134e <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800133e:	bf00      	nop
 8001340:	4b20      	ldr	r3, [pc, #128]	@ (80013c4 <HW_TS_Stop+0xf0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f8      	bne.n	8001340 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800134e:	4b1d      	ldr	r3, [pc, #116]	@ (80013c4 <HW_TS_Stop+0xf0>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	4b1b      	ldr	r3, [pc, #108]	@ (80013c4 <HW_TS_Stop+0xf0>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800135c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800135e:	bf00      	nop
 8001360:	4b18      	ldr	r3, [pc, #96]	@ (80013c4 <HW_TS_Stop+0xf0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f8      	beq.n	8001360 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800136e:	4b15      	ldr	r3, [pc, #84]	@ (80013c4 <HW_TS_Stop+0xf0>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4b13      	ldr	r3, [pc, #76]	@ (80013c4 <HW_TS_Stop+0xf0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800137e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001380:	4b14      	ldr	r3, [pc, #80]	@ (80013d4 <HW_TS_Stop+0x100>)
 8001382:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001386:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001388:	2003      	movs	r0, #3
 800138a:	f000 ff09 	bl	80021a0 <HAL_NVIC_ClearPendingIRQ>
 800138e:	e007      	b.n	80013a0 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001390:	4b11      	ldr	r3, [pc, #68]	@ (80013d8 <HW_TS_Stop+0x104>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	b2db      	uxtb	r3, r3
 8001396:	7cfa      	ldrb	r2, [r7, #19]
 8001398:	429a      	cmp	r2, r3
 800139a:	d001      	beq.n	80013a0 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 800139c:	f7ff fd5e 	bl	8000e5c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80013a0:	4b08      	ldr	r3, [pc, #32]	@ (80013c4 <HW_TS_Stop+0xf0>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	22ff      	movs	r2, #255	@ 0xff
 80013a6:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80013a8:	2003      	movs	r0, #3
 80013aa:	f000 fecf 	bl	800214c <HAL_NVIC_EnableIRQ>
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	f383 8810 	msr	PRIMASK, r3
}
 80013b8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80013ba:	bf00      	nop
}
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000170 	.word	0x20000170
 80013c8:	20000094 	.word	0x20000094
 80013cc:	20000124 	.word	0x20000124
 80013d0:	40002800 	.word	0x40002800
 80013d4:	58000800 	.word	0x58000800
 80013d8:	20000125 	.word	0x20000125

080013dc <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	6039      	str	r1, [r7, #0]
 80013e6:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80013e8:	79fa      	ldrb	r2, [r7, #7]
 80013ea:	493b      	ldr	r1, [pc, #236]	@ (80014d8 <HW_TS_Start+0xfc>)
 80013ec:	4613      	mov	r3, r2
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	4413      	add	r3, r2
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	440b      	add	r3, r1
 80013f6:	330c      	adds	r3, #12
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d103      	bne.n	8001408 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff ff66 	bl	80012d4 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001408:	f3ef 8310 	mrs	r3, PRIMASK
 800140c:	60fb      	str	r3, [r7, #12]
  return(result);
 800140e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001410:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001412:	b672      	cpsid	i
}
 8001414:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001416:	2003      	movs	r0, #3
 8001418:	f000 fea6 	bl	8002168 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800141c:	4b2f      	ldr	r3, [pc, #188]	@ (80014dc <HW_TS_Start+0x100>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	22ca      	movs	r2, #202	@ 0xca
 8001422:	625a      	str	r2, [r3, #36]	@ 0x24
 8001424:	4b2d      	ldr	r3, [pc, #180]	@ (80014dc <HW_TS_Start+0x100>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2253      	movs	r2, #83	@ 0x53
 800142a:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800142c:	79fa      	ldrb	r2, [r7, #7]
 800142e:	492a      	ldr	r1, [pc, #168]	@ (80014d8 <HW_TS_Start+0xfc>)
 8001430:	4613      	mov	r3, r2
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	4413      	add	r3, r2
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	440b      	add	r3, r1
 800143a:	330c      	adds	r3, #12
 800143c:	2202      	movs	r2, #2
 800143e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001440:	79fa      	ldrb	r2, [r7, #7]
 8001442:	4925      	ldr	r1, [pc, #148]	@ (80014d8 <HW_TS_Start+0xfc>)
 8001444:	4613      	mov	r3, r2
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	4413      	add	r3, r2
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	440b      	add	r3, r1
 800144e:	3308      	adds	r3, #8
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001454:	79fa      	ldrb	r2, [r7, #7]
 8001456:	4920      	ldr	r1, [pc, #128]	@ (80014d8 <HW_TS_Start+0xfc>)
 8001458:	4613      	mov	r3, r2
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	4413      	add	r3, r2
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	440b      	add	r3, r1
 8001462:	3304      	adds	r3, #4
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fb30 	bl	8000ad0 <linkTimer>
 8001470:	4603      	mov	r3, r0
 8001472:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001474:	4b1a      	ldr	r3, [pc, #104]	@ (80014e0 <HW_TS_Start+0x104>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800147a:	4b1a      	ldr	r3, [pc, #104]	@ (80014e4 <HW_TS_Start+0x108>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	b2db      	uxtb	r3, r3
 8001480:	7c7a      	ldrb	r2, [r7, #17]
 8001482:	429a      	cmp	r2, r3
 8001484:	d002      	beq.n	800148c <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8001486:	f7ff fce9 	bl	8000e5c <RescheduleTimerList>
 800148a:	e013      	b.n	80014b4 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800148c:	79fa      	ldrb	r2, [r7, #7]
 800148e:	4912      	ldr	r1, [pc, #72]	@ (80014d8 <HW_TS_Start+0xfc>)
 8001490:	4613      	mov	r3, r2
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	4413      	add	r3, r2
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	440b      	add	r3, r1
 800149a:	3308      	adds	r3, #8
 800149c:	6819      	ldr	r1, [r3, #0]
 800149e:	8a7b      	ldrh	r3, [r7, #18]
 80014a0:	79fa      	ldrb	r2, [r7, #7]
 80014a2:	1ac9      	subs	r1, r1, r3
 80014a4:	480c      	ldr	r0, [pc, #48]	@ (80014d8 <HW_TS_Start+0xfc>)
 80014a6:	4613      	mov	r3, r2
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	4413      	add	r3, r2
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	4403      	add	r3, r0
 80014b0:	3308      	adds	r3, #8
 80014b2:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80014b4:	4b09      	ldr	r3, [pc, #36]	@ (80014dc <HW_TS_Start+0x100>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	22ff      	movs	r2, #255	@ 0xff
 80014ba:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80014bc:	2003      	movs	r0, #3
 80014be:	f000 fe45 	bl	800214c <HAL_NVIC_EnableIRQ>
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	f383 8810 	msr	PRIMASK, r3
}
 80014cc:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80014ce:	bf00      	nop
}
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000094 	.word	0x20000094
 80014dc:	20000170 	.word	0x20000170
 80014e0:	20000124 	.word	0x20000124
 80014e4:	20000125 	.word	0x20000125

080014e8 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	460b      	mov	r3, r1
 80014f2:	607a      	str	r2, [r7, #4]
 80014f4:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4798      	blx	r3

  return;
 80014fa:	bf00      	nop
}
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <LL_RCC_LSE_SetDriveCapability>:
{
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800150a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800150e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001512:	f023 0218 	bic.w	r2, r3, #24
 8001516:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4313      	orrs	r3, r2
 800151e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800152e:	b480      	push	{r7}
 8001530:	b085      	sub	sp, #20
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001536:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800153a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800153c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4313      	orrs	r3, r2
 8001544:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001546:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800154a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4013      	ands	r3, r2
 8001550:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001552:	68fb      	ldr	r3, [r7, #12]
}
 8001554:	bf00      	nop
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001564:	f000 fc74 	bl	8001e50 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001568:	f7ff f84c 	bl	8000604 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800156c:	f000 f814 	bl	8001598 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001570:	f000 f88a 	bl	8001688 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001574:	f000 f8a8 	bl	80016c8 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001578:	f000 f96c 	bl	8001854 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800157c:	f000 f8f4 	bl	8001768 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8001580:	f000 f940 	bl	8001804 <MX_USB_PCD_Init>
  MX_RTC_Init();
 8001584:	f000 f8bc 	bl	8001700 <MX_RTC_Init>
  MX_RF_Init();
 8001588:	f000 f8b2 	bl	80016f0 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 800158c:	f7ff f848 	bl	8000620 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001590:	f7ff f973 	bl	800087a <MX_APPE_Process>
 8001594:	e7fc      	b.n	8001590 <main+0x30>
	...

08001598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b09a      	sub	sp, #104	@ 0x68
 800159c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800159e:	f107 0320 	add.w	r3, r7, #32
 80015a2:	2248      	movs	r2, #72	@ 0x48
 80015a4:	2100      	movs	r1, #0
 80015a6:	4618      	mov	r0, r3
 80015a8:	f007 fa0e 	bl	80089c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	60da      	str	r2, [r3, #12]
 80015b8:	611a      	str	r2, [r3, #16]
 80015ba:	615a      	str	r2, [r3, #20]
 80015bc:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80015be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80015cc:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80015ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	f023 0303 	bic.w	r3, r3, #3
 80015d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015e2:	f001 f915 	bl	8002810 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80015e6:	2000      	movs	r0, #0
 80015e8:	f7ff ff8b 	bl	8001502 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015ec:	4b25      	ldr	r3, [pc, #148]	@ (8001684 <SystemClock_Config+0xec>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015f4:	4a23      	ldr	r2, [pc, #140]	@ (8001684 <SystemClock_Config+0xec>)
 80015f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015fa:	6013      	str	r3, [r2, #0]
 80015fc:	4b21      	ldr	r3, [pc, #132]	@ (8001684 <SystemClock_Config+0xec>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001604:	603b      	str	r3, [r7, #0]
 8001606:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8001608:	232f      	movs	r3, #47	@ 0x2f
 800160a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800160c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001610:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001612:	2301      	movs	r3, #1
 8001614:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001616:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800161a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800161c:	2301      	movs	r3, #1
 800161e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001620:	2340      	movs	r3, #64	@ 0x40
 8001622:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001624:	2300      	movs	r3, #0
 8001626:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001628:	2360      	movs	r3, #96	@ 0x60
 800162a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800162c:	2305      	movs	r3, #5
 800162e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001630:	2300      	movs	r3, #0
 8001632:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001634:	f107 0320 	add.w	r3, r7, #32
 8001638:	4618      	mov	r0, r3
 800163a:	f001 fc89 	bl	8002f50 <HAL_RCC_OscConfig>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001644:	f000 f95d 	bl	8001902 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001648:	236f      	movs	r3, #111	@ 0x6f
 800164a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800164c:	2302      	movs	r3, #2
 800164e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001654:	2300      	movs	r3, #0
 8001656:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800165c:	2300      	movs	r3, #0
 800165e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001660:	2300      	movs	r3, #0
 8001662:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	2101      	movs	r1, #1
 8001668:	4618      	mov	r0, r3
 800166a:	f001 ffe5 	bl	8003638 <HAL_RCC_ClockConfig>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8001674:	f000 f945 	bl	8001902 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001678:	f002 fdd2 	bl	8004220 <HAL_RCCEx_EnableMSIPLLMode>
}
 800167c:	bf00      	nop
 800167e:	3768      	adds	r7, #104	@ 0x68
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	58000400 	.word	0x58000400

08001688 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b094      	sub	sp, #80	@ 0x50
 800168c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800168e:	463b      	mov	r3, r7
 8001690:	2250      	movs	r2, #80	@ 0x50
 8001692:	2100      	movs	r1, #0
 8001694:	4618      	mov	r0, r3
 8001696:	f007 f997 	bl	80089c8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800169a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800169e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 80016a0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80016a4:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80016a6:	2300      	movs	r3, #0
 80016a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ae:	463b      	mov	r3, r7
 80016b0:	4618      	mov	r0, r3
 80016b2:	f002 fc3f 	bl	8003f34 <HAL_RCCEx_PeriphCLKConfig>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80016bc:	f000 f921 	bl	8001902 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80016c0:	bf00      	nop
 80016c2:	3750      	adds	r7, #80	@ 0x50
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80016cc:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <MX_IPCC_Init+0x20>)
 80016ce:	4a07      	ldr	r2, [pc, #28]	@ (80016ec <MX_IPCC_Init+0x24>)
 80016d0:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80016d2:	4805      	ldr	r0, [pc, #20]	@ (80016e8 <MX_IPCC_Init+0x20>)
 80016d4:	f000 ff1e 	bl	8002514 <HAL_IPCC_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80016de:	f000 f910 	bl	8001902 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000134 	.word	0x20000134
 80016ec:	58000c00 	.word	0x58000c00

080016f0 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001704:	4b16      	ldr	r3, [pc, #88]	@ (8001760 <MX_RTC_Init+0x60>)
 8001706:	4a17      	ldr	r2, [pc, #92]	@ (8001764 <MX_RTC_Init+0x64>)
 8001708:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800170a:	4b15      	ldr	r3, [pc, #84]	@ (8001760 <MX_RTC_Init+0x60>)
 800170c:	2200      	movs	r2, #0
 800170e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001710:	4b13      	ldr	r3, [pc, #76]	@ (8001760 <MX_RTC_Init+0x60>)
 8001712:	220f      	movs	r2, #15
 8001714:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001716:	4b12      	ldr	r3, [pc, #72]	@ (8001760 <MX_RTC_Init+0x60>)
 8001718:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800171c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800171e:	4b10      	ldr	r3, [pc, #64]	@ (8001760 <MX_RTC_Init+0x60>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001724:	4b0e      	ldr	r3, [pc, #56]	@ (8001760 <MX_RTC_Init+0x60>)
 8001726:	2200      	movs	r2, #0
 8001728:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800172a:	4b0d      	ldr	r3, [pc, #52]	@ (8001760 <MX_RTC_Init+0x60>)
 800172c:	2200      	movs	r2, #0
 800172e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001730:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <MX_RTC_Init+0x60>)
 8001732:	2200      	movs	r2, #0
 8001734:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001736:	480a      	ldr	r0, [pc, #40]	@ (8001760 <MX_RTC_Init+0x60>)
 8001738:	f002 fe8a 	bl	8004450 <HAL_RTC_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001742:	f000 f8de 	bl	8001902 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001746:	2200      	movs	r2, #0
 8001748:	2100      	movs	r1, #0
 800174a:	4805      	ldr	r0, [pc, #20]	@ (8001760 <MX_RTC_Init+0x60>)
 800174c:	f002 ff80 	bl	8004650 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001756:	f000 f8d4 	bl	8001902 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000170 	.word	0x20000170
 8001764:	40002800 	.word	0x40002800

08001768 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800176c:	4b23      	ldr	r3, [pc, #140]	@ (80017fc <MX_USART1_UART_Init+0x94>)
 800176e:	4a24      	ldr	r2, [pc, #144]	@ (8001800 <MX_USART1_UART_Init+0x98>)
 8001770:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001772:	4b22      	ldr	r3, [pc, #136]	@ (80017fc <MX_USART1_UART_Init+0x94>)
 8001774:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001778:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 800177a:	4b20      	ldr	r3, [pc, #128]	@ (80017fc <MX_USART1_UART_Init+0x94>)
 800177c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001780:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001782:	4b1e      	ldr	r3, [pc, #120]	@ (80017fc <MX_USART1_UART_Init+0x94>)
 8001784:	2200      	movs	r2, #0
 8001786:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001788:	4b1c      	ldr	r3, [pc, #112]	@ (80017fc <MX_USART1_UART_Init+0x94>)
 800178a:	2200      	movs	r2, #0
 800178c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800178e:	4b1b      	ldr	r3, [pc, #108]	@ (80017fc <MX_USART1_UART_Init+0x94>)
 8001790:	220c      	movs	r2, #12
 8001792:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001794:	4b19      	ldr	r3, [pc, #100]	@ (80017fc <MX_USART1_UART_Init+0x94>)
 8001796:	2200      	movs	r2, #0
 8001798:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800179a:	4b18      	ldr	r3, [pc, #96]	@ (80017fc <MX_USART1_UART_Init+0x94>)
 800179c:	2200      	movs	r2, #0
 800179e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017a0:	4b16      	ldr	r3, [pc, #88]	@ (80017fc <MX_USART1_UART_Init+0x94>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017a6:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <MX_USART1_UART_Init+0x94>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017ac:	4b13      	ldr	r3, [pc, #76]	@ (80017fc <MX_USART1_UART_Init+0x94>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017b2:	4812      	ldr	r0, [pc, #72]	@ (80017fc <MX_USART1_UART_Init+0x94>)
 80017b4:	f003 fa96 	bl	8004ce4 <HAL_UART_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80017be:	f000 f8a0 	bl	8001902 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017c2:	2100      	movs	r1, #0
 80017c4:	480d      	ldr	r0, [pc, #52]	@ (80017fc <MX_USART1_UART_Init+0x94>)
 80017c6:	f003 ff5d 	bl	8005684 <HAL_UARTEx_SetTxFifoThreshold>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80017d0:	f000 f897 	bl	8001902 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017d4:	2100      	movs	r1, #0
 80017d6:	4809      	ldr	r0, [pc, #36]	@ (80017fc <MX_USART1_UART_Init+0x94>)
 80017d8:	f003 ff92 	bl	8005700 <HAL_UARTEx_SetRxFifoThreshold>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80017e2:	f000 f88e 	bl	8001902 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80017e6:	4805      	ldr	r0, [pc, #20]	@ (80017fc <MX_USART1_UART_Init+0x94>)
 80017e8:	f003 ff13 	bl	8005612 <HAL_UARTEx_DisableFifoMode>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80017f2:	f000 f886 	bl	8001902 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000194 	.word	0x20000194
 8001800:	40013800 	.word	0x40013800

08001804 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001808:	4b10      	ldr	r3, [pc, #64]	@ (800184c <MX_USB_PCD_Init+0x48>)
 800180a:	4a11      	ldr	r2, [pc, #68]	@ (8001850 <MX_USB_PCD_Init+0x4c>)
 800180c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800180e:	4b0f      	ldr	r3, [pc, #60]	@ (800184c <MX_USB_PCD_Init+0x48>)
 8001810:	2208      	movs	r2, #8
 8001812:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001814:	4b0d      	ldr	r3, [pc, #52]	@ (800184c <MX_USB_PCD_Init+0x48>)
 8001816:	2202      	movs	r2, #2
 8001818:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800181a:	4b0c      	ldr	r3, [pc, #48]	@ (800184c <MX_USB_PCD_Init+0x48>)
 800181c:	2202      	movs	r2, #2
 800181e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001820:	4b0a      	ldr	r3, [pc, #40]	@ (800184c <MX_USB_PCD_Init+0x48>)
 8001822:	2200      	movs	r2, #0
 8001824:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001826:	4b09      	ldr	r3, [pc, #36]	@ (800184c <MX_USB_PCD_Init+0x48>)
 8001828:	2200      	movs	r2, #0
 800182a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800182c:	4b07      	ldr	r3, [pc, #28]	@ (800184c <MX_USB_PCD_Init+0x48>)
 800182e:	2200      	movs	r2, #0
 8001830:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001832:	4b06      	ldr	r3, [pc, #24]	@ (800184c <MX_USB_PCD_Init+0x48>)
 8001834:	2200      	movs	r2, #0
 8001836:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001838:	4804      	ldr	r0, [pc, #16]	@ (800184c <MX_USB_PCD_Init+0x48>)
 800183a:	f000 fef1 	bl	8002620 <HAL_PCD_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001844:	f000 f85d 	bl	8001902 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000228 	.word	0x20000228
 8001850:	40006800 	.word	0x40006800

08001854 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185a:	1d3b      	adds	r3, r7, #4
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001868:	2004      	movs	r0, #4
 800186a:	f7ff fe60 	bl	800152e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800186e:	2002      	movs	r0, #2
 8001870:	f7ff fe5d 	bl	800152e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001874:	2001      	movs	r0, #1
 8001876:	f7ff fe5a 	bl	800152e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800187a:	2008      	movs	r0, #8
 800187c:	f7ff fe57 	bl	800152e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001880:	2200      	movs	r2, #0
 8001882:	2123      	movs	r1, #35	@ 0x23
 8001884:	4814      	ldr	r0, [pc, #80]	@ (80018d8 <MX_GPIO_Init+0x84>)
 8001886:	f000 fe09 	bl	800249c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800188a:	2310      	movs	r3, #16
 800188c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800188e:	2300      	movs	r3, #0
 8001890:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001896:	1d3b      	adds	r3, r7, #4
 8001898:	4619      	mov	r1, r3
 800189a:	4810      	ldr	r0, [pc, #64]	@ (80018dc <MX_GPIO_Init+0x88>)
 800189c:	f000 fc8e 	bl	80021bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80018a0:	2323      	movs	r3, #35	@ 0x23
 80018a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a4:	2301      	movs	r3, #1
 80018a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ac:	2300      	movs	r3, #0
 80018ae:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b0:	1d3b      	adds	r3, r7, #4
 80018b2:	4619      	mov	r1, r3
 80018b4:	4808      	ldr	r0, [pc, #32]	@ (80018d8 <MX_GPIO_Init+0x84>)
 80018b6:	f000 fc81 	bl	80021bc <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80018ba:	2303      	movs	r3, #3
 80018bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018c6:	1d3b      	adds	r3, r7, #4
 80018c8:	4619      	mov	r1, r3
 80018ca:	4805      	ldr	r0, [pc, #20]	@ (80018e0 <MX_GPIO_Init+0x8c>)
 80018cc:	f000 fc76 	bl	80021bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018d0:	bf00      	nop
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	48000400 	.word	0x48000400
 80018dc:	48000800 	.word	0x48000800
 80018e0:	48000c00 	.word	0x48000c00

080018e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018f4:	d101      	bne.n	80018fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018f6:	f000 facb 	bl	8001e90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001906:	b672      	cpsid	i
}
 8001908:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800190a:	bf00      	nop
 800190c:	e7fd      	b.n	800190a <Error_Handler+0x8>

0800190e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001912:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800191a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800191e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001922:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001926:	bf00      	nop
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <LL_AHB2_GRP1_EnableClock>:
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001938:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800193c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800193e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4313      	orrs	r3, r2
 8001946:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001948:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800194c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4013      	ands	r3, r2
 8001952:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001954:	68fb      	ldr	r3, [r7, #12]
}
 8001956:	bf00      	nop
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001962:	b480      	push	{r7}
 8001964:	b085      	sub	sp, #20
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800196a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800196e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001970:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4313      	orrs	r3, r2
 8001978:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800197a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800197e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4013      	ands	r3, r2
 8001984:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001986:	68fb      	ldr	r3, [r7, #12]
}
 8001988:	bf00      	nop
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800199c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019a0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80019a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80019ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4013      	ands	r3, r2
 80019b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019b8:	68fb      	ldr	r3, [r7, #12]
}
 80019ba:	bf00      	nop
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b085      	sub	sp, #20
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80019ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019d2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80019d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4313      	orrs	r3, r2
 80019dc:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80019de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019e2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4013      	ands	r3, r2
 80019e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019ea:	68fb      	ldr	r3, [r7, #12]
}
 80019ec:	bf00      	nop
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80019fc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001a00:	f7ff ffaf 	bl	8001962 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001a04:	2200      	movs	r2, #0
 8001a06:	2100      	movs	r1, #0
 8001a08:	202e      	movs	r0, #46	@ 0x2e
 8001a0a:	f000 fb85 	bl	8002118 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001a0e:	202e      	movs	r0, #46	@ 0x2e
 8001a10:	f000 fb9c 	bl	800214c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a05      	ldr	r2, [pc, #20]	@ (8001a3c <HAL_IPCC_MspInit+0x24>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d103      	bne.n	8001a32 <HAL_IPCC_MspInit+0x1a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001a2a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8001a2e:	f7ff ff98 	bl	8001962 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	58000c00 	.word	0x58000c00

08001a40 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b096      	sub	sp, #88	@ 0x58
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a48:	f107 0308 	add.w	r3, r7, #8
 8001a4c:	2250      	movs	r2, #80	@ 0x50
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4618      	mov	r0, r3
 8001a52:	f006 ffb9 	bl	80089c8 <memset>
  if(hrtc->Instance==RTC)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a13      	ldr	r2, [pc, #76]	@ (8001aa8 <HAL_RTC_MspInit+0x68>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d11f      	bne.n	8001aa0 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 8001a60:	f000 fed6 	bl	8002810 <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a64:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001a68:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001a6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a6e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a70:	f107 0308 	add.w	r3, r7, #8
 8001a74:	4618      	mov	r0, r3
 8001a76:	f002 fa5d 	bl	8003f34 <HAL_RCCEx_PeriphCLKConfig>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 8001a80:	f7ff ff3f 	bl	8001902 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a84:	f7ff ff43 	bl	800190e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001a88:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001a8c:	f7ff ff82 	bl	8001994 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001a90:	2200      	movs	r2, #0
 8001a92:	2100      	movs	r1, #0
 8001a94:	2003      	movs	r0, #3
 8001a96:	f000 fb3f 	bl	8002118 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001a9a:	2003      	movs	r0, #3
 8001a9c:	f000 fb56 	bl	800214c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001aa0:	bf00      	nop
 8001aa2:	3758      	adds	r7, #88	@ 0x58
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40002800 	.word	0x40002800

08001aac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b09c      	sub	sp, #112	@ 0x70
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ac4:	f107 030c 	add.w	r3, r7, #12
 8001ac8:	2250      	movs	r2, #80	@ 0x50
 8001aca:	2100      	movs	r1, #0
 8001acc:	4618      	mov	r0, r3
 8001ace:	f006 ff7b 	bl	80089c8 <memset>
  if(huart->Instance==USART1)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a16      	ldr	r2, [pc, #88]	@ (8001b30 <HAL_UART_MspInit+0x84>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d124      	bne.n	8001b26 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001adc:	2301      	movs	r3, #1
 8001ade:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ae4:	f107 030c 	add.w	r3, r7, #12
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f002 fa23 	bl	8003f34 <HAL_RCCEx_PeriphCLKConfig>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001af4:	f7ff ff05 	bl	8001902 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001af8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001afc:	f7ff ff63 	bl	80019c6 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b00:	2002      	movs	r0, #2
 8001b02:	f7ff ff15 	bl	8001930 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001b06:	23c0      	movs	r3, #192	@ 0xc0
 8001b08:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b12:	2300      	movs	r3, #0
 8001b14:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b16:	2307      	movs	r3, #7
 8001b18:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4804      	ldr	r0, [pc, #16]	@ (8001b34 <HAL_UART_MspInit+0x88>)
 8001b22:	f000 fb4b 	bl	80021bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b26:	bf00      	nop
 8001b28:	3770      	adds	r7, #112	@ 0x70
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40013800 	.word	0x40013800
 8001b34:	48000400 	.word	0x48000400

08001b38 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b09c      	sub	sp, #112	@ 0x70
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b50:	f107 030c 	add.w	r3, r7, #12
 8001b54:	2250      	movs	r2, #80	@ 0x50
 8001b56:	2100      	movs	r1, #0
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f006 ff35 	bl	80089c8 <memset>
  if(hpcd->Instance==USB)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a1f      	ldr	r2, [pc, #124]	@ (8001be0 <HAL_PCD_MspInit+0xa8>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d136      	bne.n	8001bd6 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001b68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b6c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8001b6e:	2318      	movs	r3, #24
 8001b70:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001b72:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b76:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001b78:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b7c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001b7e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001b82:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8001b84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b88:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001b8a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001b8e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b90:	f107 030c 	add.w	r3, r7, #12
 8001b94:	4618      	mov	r0, r3
 8001b96:	f002 f9cd 	bl	8003f34 <HAL_RCCEx_PeriphCLKConfig>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8001ba0:	f7ff feaf 	bl	8001902 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	f7ff fec3 	bl	8001930 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001baa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001bae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001bbc:	230a      	movs	r3, #10
 8001bbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bca:	f000 faf7 	bl	80021bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001bce:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8001bd2:	f7ff fedf 	bl	8001994 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001bd6:	bf00      	nop
 8001bd8:	3770      	adds	r7, #112	@ 0x70
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40006800 	.word	0x40006800

08001be4 <LL_APB1_GRP1_EnableClock>:
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001bec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bf0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001bf2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001bfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c00:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4013      	ands	r3, r2
 8001c06:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c08:	68fb      	ldr	r3, [r7, #12]
}
 8001c0a:	bf00      	nop
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
	...

08001c18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08c      	sub	sp, #48	@ 0x30
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	201c      	movs	r0, #28
 8001c2e:	f000 fa73 	bl	8002118 <HAL_NVIC_SetPriority>
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c32:	201c      	movs	r0, #28
 8001c34:	f000 fa8a 	bl	800214c <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001c38:	2001      	movs	r0, #1
 8001c3a:	f7ff ffd3 	bl	8001be4 <LL_APB1_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c3e:	f107 0208 	add.w	r2, r7, #8
 8001c42:	f107 030c 	add.w	r3, r7, #12
 8001c46:	4611      	mov	r1, r2
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f001 fee1 	bl	8003a10 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c4e:	f001 feb3 	bl	80039b8 <HAL_RCC_GetPCLK1Freq>
 8001c52:	62f8      	str	r0, [r7, #44]	@ 0x2c

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c56:	4a13      	ldr	r2, [pc, #76]	@ (8001ca4 <HAL_InitTick+0x8c>)
 8001c58:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5c:	0c9b      	lsrs	r3, r3, #18
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001c62:	4b11      	ldr	r3, [pc, #68]	@ (8001ca8 <HAL_InitTick+0x90>)
 8001c64:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c68:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca8 <HAL_InitTick+0x90>)
 8001c6c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c70:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001c72:	4a0d      	ldr	r2, [pc, #52]	@ (8001ca8 <HAL_InitTick+0x90>)
 8001c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c76:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001c78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca8 <HAL_InitTick+0x90>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca8 <HAL_InitTick+0x90>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8001c84:	4808      	ldr	r0, [pc, #32]	@ (8001ca8 <HAL_InitTick+0x90>)
 8001c86:	f002 fd9f 	bl	80047c8 <HAL_TIM_Base_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d104      	bne.n	8001c9a <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8001c90:	4805      	ldr	r0, [pc, #20]	@ (8001ca8 <HAL_InitTick+0x90>)
 8001c92:	f002 fdfb 	bl	800488c <HAL_TIM_Base_Start_IT>
 8001c96:	4603      	mov	r3, r0
 8001c98:	e000      	b.n	8001c9c <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3730      	adds	r7, #48	@ 0x30
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	431bde83 	.word	0x431bde83
 8001ca8:	20000504 	.word	0x20000504

08001cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cb0:	bf00      	nop
 8001cb2:	e7fd      	b.n	8001cb0 <NMI_Handler+0x4>

08001cb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cb8:	bf00      	nop
 8001cba:	e7fd      	b.n	8001cb8 <HardFault_Handler+0x4>

08001cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc0:	bf00      	nop
 8001cc2:	e7fd      	b.n	8001cc0 <MemManage_Handler+0x4>

08001cc4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cc8:	bf00      	nop
 8001cca:	e7fd      	b.n	8001cc8 <BusFault_Handler+0x4>

08001ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd0:	bf00      	nop
 8001cd2:	e7fd      	b.n	8001cd0 <UsageFault_Handler+0x4>

08001cd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001d10:	f7ff f93e 	bl	8000f90 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001d14:	bf00      	nop
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d1c:	4802      	ldr	r0, [pc, #8]	@ (8001d28 <TIM2_IRQHandler+0x10>)
 8001d1e:	f002 fe03 	bl	8004928 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000504 	.word	0x20000504

08001d2c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001d30:	f000 fbcc 	bl	80024cc <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001d3c:	4b24      	ldr	r3, [pc, #144]	@ (8001dd0 <SystemInit+0x98>)
 8001d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d42:	4a23      	ldr	r2, [pc, #140]	@ (8001dd0 <SystemInit+0x98>)
 8001d44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001d4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d56:	f043 0301 	orr.w	r3, r3, #1
 8001d5a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001d5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d60:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001d64:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001d66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d70:	4b18      	ldr	r3, [pc, #96]	@ (8001dd4 <SystemInit+0x9c>)
 8001d72:	4013      	ands	r3, r2
 8001d74:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001d76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d82:	f023 0305 	bic.w	r3, r3, #5
 8001d86:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001d8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d96:	f023 0301 	bic.w	r3, r3, #1
 8001d9a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001d9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001da2:	4a0d      	ldr	r2, [pc, #52]	@ (8001dd8 <SystemInit+0xa0>)
 8001da4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001da6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001daa:	4a0b      	ldr	r2, [pc, #44]	@ (8001dd8 <SystemInit+0xa0>)
 8001dac:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001dae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001db8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dbc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001dbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	619a      	str	r2, [r3, #24]
}
 8001dc6:	bf00      	nop
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	e000ed00 	.word	0xe000ed00
 8001dd4:	faf6fefb 	.word	0xfaf6fefb
 8001dd8:	22041000 	.word	0x22041000

08001ddc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001ddc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dde:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001de0:	3304      	adds	r3, #4

08001de2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001de2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001de4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001de6:	d3f9      	bcc.n	8001ddc <CopyDataInit>
  bx lr
 8001de8:	4770      	bx	lr

08001dea <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001dea:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001dec:	3004      	adds	r0, #4

08001dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001dee:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001df0:	d3fb      	bcc.n	8001dea <FillZerobss>
  bx lr
 8001df2:	4770      	bx	lr

08001df4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001df4:	480c      	ldr	r0, [pc, #48]	@ (8001e28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001df6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001df8:	f7ff ff9e 	bl	8001d38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001dfc:	480b      	ldr	r0, [pc, #44]	@ (8001e2c <LoopForever+0x6>)
 8001dfe:	490c      	ldr	r1, [pc, #48]	@ (8001e30 <LoopForever+0xa>)
 8001e00:	4a0c      	ldr	r2, [pc, #48]	@ (8001e34 <LoopForever+0xe>)
 8001e02:	2300      	movs	r3, #0
 8001e04:	f7ff ffed 	bl	8001de2 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001e08:	480b      	ldr	r0, [pc, #44]	@ (8001e38 <LoopForever+0x12>)
 8001e0a:	490c      	ldr	r1, [pc, #48]	@ (8001e3c <LoopForever+0x16>)
 8001e0c:	4a0c      	ldr	r2, [pc, #48]	@ (8001e40 <LoopForever+0x1a>)
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f7ff ffe7 	bl	8001de2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001e14:	480b      	ldr	r0, [pc, #44]	@ (8001e44 <LoopForever+0x1e>)
 8001e16:	490c      	ldr	r1, [pc, #48]	@ (8001e48 <LoopForever+0x22>)
 8001e18:	2300      	movs	r3, #0
 8001e1a:	f7ff ffe8 	bl	8001dee <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e1e:	f006 fddb 	bl	80089d8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001e22:	f7ff fb9d 	bl	8001560 <main>

08001e26 <LoopForever>:

LoopForever:
  b LoopForever
 8001e26:	e7fe      	b.n	8001e26 <LoopForever>
  ldr   r0, =_estack
 8001e28:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001e2c:	20000008 	.word	0x20000008
 8001e30:	2000002c 	.word	0x2000002c
 8001e34:	08008d24 	.word	0x08008d24
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001e38:	200301e4 	.word	0x200301e4
 8001e3c:	20030a67 	.word	0x20030a67
 8001e40:	08008d8e 	.word	0x08008d8e
  INIT_BSS _sbss, _ebss
 8001e44:	20000078 	.word	0x20000078
 8001e48:	20000708 	.word	0x20000708

08001e4c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e4c:	e7fe      	b.n	8001e4c <ADC1_IRQHandler>
	...

08001e50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e56:	2300      	movs	r3, #0
 8001e58:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e8c <HAL_Init+0x3c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a0b      	ldr	r2, [pc, #44]	@ (8001e8c <HAL_Init+0x3c>)
 8001e60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e64:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e66:	2003      	movs	r0, #3
 8001e68:	f000 f94b 	bl	8002102 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e6c:	200f      	movs	r0, #15
 8001e6e:	f7ff fed3 	bl	8001c18 <HAL_InitTick>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d002      	beq.n	8001e7e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	71fb      	strb	r3, [r7, #7]
 8001e7c:	e001      	b.n	8001e82 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e7e:	f7ff fdbb 	bl	80019f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e82:	79fb      	ldrb	r3, [r7, #7]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	58004000 	.word	0x58004000

08001e90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e94:	4b06      	ldr	r3, [pc, #24]	@ (8001eb0 <HAL_IncTick+0x20>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b06      	ldr	r3, [pc, #24]	@ (8001eb4 <HAL_IncTick+0x24>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	4a04      	ldr	r2, [pc, #16]	@ (8001eb4 <HAL_IncTick+0x24>)
 8001ea2:	6013      	str	r3, [r2, #0]
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	20000010 	.word	0x20000010
 8001eb4:	20000550 	.word	0x20000550

08001eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return uwTick;
 8001ebc:	4b03      	ldr	r3, [pc, #12]	@ (8001ecc <HAL_GetTick+0x14>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	20000550 	.word	0x20000550

08001ed0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001ed4:	4b03      	ldr	r3, [pc, #12]	@ (8001ee4 <HAL_GetTickPrio+0x14>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	2000000c 	.word	0x2000000c

08001ee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f2c <__NVIC_SetPriorityGrouping+0x44>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f04:	4013      	ands	r3, r2
 8001f06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f1a:	4a04      	ldr	r2, [pc, #16]	@ (8001f2c <__NVIC_SetPriorityGrouping+0x44>)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	60d3      	str	r3, [r2, #12]
}
 8001f20:	bf00      	nop
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f34:	4b04      	ldr	r3, [pc, #16]	@ (8001f48 <__NVIC_GetPriorityGrouping+0x18>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	0a1b      	lsrs	r3, r3, #8
 8001f3a:	f003 0307 	and.w	r3, r3, #7
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	db0b      	blt.n	8001f76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	f003 021f 	and.w	r2, r3, #31
 8001f64:	4907      	ldr	r1, [pc, #28]	@ (8001f84 <__NVIC_EnableIRQ+0x38>)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	095b      	lsrs	r3, r3, #5
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	e000e100 	.word	0xe000e100

08001f88 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	db12      	blt.n	8001fc0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	f003 021f 	and.w	r2, r3, #31
 8001fa0:	490a      	ldr	r1, [pc, #40]	@ (8001fcc <__NVIC_DisableIRQ+0x44>)
 8001fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa6:	095b      	lsrs	r3, r3, #5
 8001fa8:	2001      	movs	r0, #1
 8001faa:	fa00 f202 	lsl.w	r2, r0, r2
 8001fae:	3320      	adds	r3, #32
 8001fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001fb4:	f3bf 8f4f 	dsb	sy
}
 8001fb8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001fba:	f3bf 8f6f 	isb	sy
}
 8001fbe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	e000e100 	.word	0xe000e100

08001fd0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	db0c      	blt.n	8001ffc <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
 8001fe4:	f003 021f 	and.w	r2, r3, #31
 8001fe8:	4907      	ldr	r1, [pc, #28]	@ (8002008 <__NVIC_SetPendingIRQ+0x38>)
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	095b      	lsrs	r3, r3, #5
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ff6:	3340      	adds	r3, #64	@ 0x40
 8001ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	e000e100 	.word	0xe000e100

0800200c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201a:	2b00      	cmp	r3, #0
 800201c:	db0c      	blt.n	8002038 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800201e:	79fb      	ldrb	r3, [r7, #7]
 8002020:	f003 021f 	and.w	r2, r3, #31
 8002024:	4907      	ldr	r1, [pc, #28]	@ (8002044 <__NVIC_ClearPendingIRQ+0x38>)
 8002026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202a:	095b      	lsrs	r3, r3, #5
 800202c:	2001      	movs	r0, #1
 800202e:	fa00 f202 	lsl.w	r2, r0, r2
 8002032:	3360      	adds	r3, #96	@ 0x60
 8002034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000e100 	.word	0xe000e100

08002048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	6039      	str	r1, [r7, #0]
 8002052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002058:	2b00      	cmp	r3, #0
 800205a:	db0a      	blt.n	8002072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	b2da      	uxtb	r2, r3
 8002060:	490c      	ldr	r1, [pc, #48]	@ (8002094 <__NVIC_SetPriority+0x4c>)
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	0112      	lsls	r2, r2, #4
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	440b      	add	r3, r1
 800206c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002070:	e00a      	b.n	8002088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	b2da      	uxtb	r2, r3
 8002076:	4908      	ldr	r1, [pc, #32]	@ (8002098 <__NVIC_SetPriority+0x50>)
 8002078:	79fb      	ldrb	r3, [r7, #7]
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	3b04      	subs	r3, #4
 8002080:	0112      	lsls	r2, r2, #4
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	440b      	add	r3, r1
 8002086:	761a      	strb	r2, [r3, #24]
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	e000e100 	.word	0xe000e100
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800209c:	b480      	push	{r7}
 800209e:	b089      	sub	sp, #36	@ 0x24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f1c3 0307 	rsb	r3, r3, #7
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	bf28      	it	cs
 80020ba:	2304      	movcs	r3, #4
 80020bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	3304      	adds	r3, #4
 80020c2:	2b06      	cmp	r3, #6
 80020c4:	d902      	bls.n	80020cc <NVIC_EncodePriority+0x30>
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	3b03      	subs	r3, #3
 80020ca:	e000      	b.n	80020ce <NVIC_EncodePriority+0x32>
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d0:	f04f 32ff 	mov.w	r2, #4294967295
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43da      	mvns	r2, r3
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	401a      	ands	r2, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020e4:	f04f 31ff 	mov.w	r1, #4294967295
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	fa01 f303 	lsl.w	r3, r1, r3
 80020ee:	43d9      	mvns	r1, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f4:	4313      	orrs	r3, r2
         );
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3724      	adds	r7, #36	@ 0x24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff feec 	bl	8001ee8 <__NVIC_SetPriorityGrouping>
}
 8002110:	bf00      	nop
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
 8002124:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002126:	f7ff ff03 	bl	8001f30 <__NVIC_GetPriorityGrouping>
 800212a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	68b9      	ldr	r1, [r7, #8]
 8002130:	6978      	ldr	r0, [r7, #20]
 8002132:	f7ff ffb3 	bl	800209c <NVIC_EncodePriority>
 8002136:	4602      	mov	r2, r0
 8002138:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800213c:	4611      	mov	r1, r2
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff ff82 	bl	8002048 <__NVIC_SetPriority>
}
 8002144:	bf00      	nop
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff fef6 	bl	8001f4c <__NVIC_EnableIRQ>
}
 8002160:	bf00      	nop
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff ff06 	bl	8001f88 <__NVIC_DisableIRQ>
}
 800217c:	bf00      	nop
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff ff1c 	bl	8001fd0 <__NVIC_SetPendingIRQ>
}
 8002198:	bf00      	nop
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80021aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff ff2c 	bl	800200c <__NVIC_ClearPendingIRQ>
}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021bc:	b480      	push	{r7}
 80021be:	b087      	sub	sp, #28
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021c6:	2300      	movs	r3, #0
 80021c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ca:	e14c      	b.n	8002466 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	2101      	movs	r1, #1
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	fa01 f303 	lsl.w	r3, r1, r3
 80021d8:	4013      	ands	r3, r2
 80021da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 813e 	beq.w	8002460 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 0303 	and.w	r3, r3, #3
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d005      	beq.n	80021fc <HAL_GPIO_Init+0x40>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 0303 	and.w	r3, r3, #3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d130      	bne.n	800225e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	2203      	movs	r2, #3
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	4013      	ands	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	4313      	orrs	r3, r2
 8002224:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002232:	2201      	movs	r2, #1
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43db      	mvns	r3, r3
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	4013      	ands	r3, r2
 8002240:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	091b      	lsrs	r3, r3, #4
 8002248:	f003 0201 	and.w	r2, r3, #1
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	4313      	orrs	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	2b03      	cmp	r3, #3
 8002268:	d017      	beq.n	800229a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	2203      	movs	r2, #3
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43db      	mvns	r3, r3
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	4013      	ands	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	4313      	orrs	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d123      	bne.n	80022ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	08da      	lsrs	r2, r3, #3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	3208      	adds	r2, #8
 80022ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	220f      	movs	r2, #15
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	43db      	mvns	r3, r3
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	4013      	ands	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	691a      	ldr	r2, [r3, #16]
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	4313      	orrs	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	08da      	lsrs	r2, r3, #3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3208      	adds	r2, #8
 80022e8:	6939      	ldr	r1, [r7, #16]
 80022ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	2203      	movs	r2, #3
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4013      	ands	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f003 0203 	and.w	r2, r3, #3
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4313      	orrs	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 8098 	beq.w	8002460 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002330:	4a54      	ldr	r2, [pc, #336]	@ (8002484 <HAL_GPIO_Init+0x2c8>)
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	089b      	lsrs	r3, r3, #2
 8002336:	3302      	adds	r3, #2
 8002338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800233c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	220f      	movs	r2, #15
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	4013      	ands	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800235a:	d019      	beq.n	8002390 <HAL_GPIO_Init+0x1d4>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a4a      	ldr	r2, [pc, #296]	@ (8002488 <HAL_GPIO_Init+0x2cc>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d013      	beq.n	800238c <HAL_GPIO_Init+0x1d0>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a49      	ldr	r2, [pc, #292]	@ (800248c <HAL_GPIO_Init+0x2d0>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d00d      	beq.n	8002388 <HAL_GPIO_Init+0x1cc>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a48      	ldr	r2, [pc, #288]	@ (8002490 <HAL_GPIO_Init+0x2d4>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d007      	beq.n	8002384 <HAL_GPIO_Init+0x1c8>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a47      	ldr	r2, [pc, #284]	@ (8002494 <HAL_GPIO_Init+0x2d8>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d101      	bne.n	8002380 <HAL_GPIO_Init+0x1c4>
 800237c:	2304      	movs	r3, #4
 800237e:	e008      	b.n	8002392 <HAL_GPIO_Init+0x1d6>
 8002380:	2307      	movs	r3, #7
 8002382:	e006      	b.n	8002392 <HAL_GPIO_Init+0x1d6>
 8002384:	2303      	movs	r3, #3
 8002386:	e004      	b.n	8002392 <HAL_GPIO_Init+0x1d6>
 8002388:	2302      	movs	r3, #2
 800238a:	e002      	b.n	8002392 <HAL_GPIO_Init+0x1d6>
 800238c:	2301      	movs	r3, #1
 800238e:	e000      	b.n	8002392 <HAL_GPIO_Init+0x1d6>
 8002390:	2300      	movs	r3, #0
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	f002 0203 	and.w	r2, r2, #3
 8002398:	0092      	lsls	r2, r2, #2
 800239a:	4093      	lsls	r3, r2
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023a2:	4938      	ldr	r1, [pc, #224]	@ (8002484 <HAL_GPIO_Init+0x2c8>)
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	089b      	lsrs	r3, r3, #2
 80023a8:	3302      	adds	r3, #2
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023b0:	4b39      	ldr	r3, [pc, #228]	@ (8002498 <HAL_GPIO_Init+0x2dc>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	43db      	mvns	r3, r3
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4013      	ands	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023d4:	4a30      	ldr	r2, [pc, #192]	@ (8002498 <HAL_GPIO_Init+0x2dc>)
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80023da:	4b2f      	ldr	r3, [pc, #188]	@ (8002498 <HAL_GPIO_Init+0x2dc>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	43db      	mvns	r3, r3
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	4013      	ands	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023fe:	4a26      	ldr	r2, [pc, #152]	@ (8002498 <HAL_GPIO_Init+0x2dc>)
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002404:	4b24      	ldr	r3, [pc, #144]	@ (8002498 <HAL_GPIO_Init+0x2dc>)
 8002406:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800240a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	43db      	mvns	r3, r3
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4013      	ands	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	4313      	orrs	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800242a:	4a1b      	ldr	r2, [pc, #108]	@ (8002498 <HAL_GPIO_Init+0x2dc>)
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8002432:	4b19      	ldr	r3, [pc, #100]	@ (8002498 <HAL_GPIO_Init+0x2dc>)
 8002434:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002438:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	43db      	mvns	r3, r3
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	4013      	ands	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002458:	4a0f      	ldr	r2, [pc, #60]	@ (8002498 <HAL_GPIO_Init+0x2dc>)
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	3301      	adds	r3, #1
 8002464:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	fa22 f303 	lsr.w	r3, r2, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	f47f aeab 	bne.w	80021cc <HAL_GPIO_Init+0x10>
  }
}
 8002476:	bf00      	nop
 8002478:	bf00      	nop
 800247a:	371c      	adds	r7, #28
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	40010000 	.word	0x40010000
 8002488:	48000400 	.word	0x48000400
 800248c:	48000800 	.word	0x48000800
 8002490:	48000c00 	.word	0x48000c00
 8002494:	48001000 	.word	0x48001000
 8002498:	58000800 	.word	0x58000800

0800249c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	460b      	mov	r3, r1
 80024a6:	807b      	strh	r3, [r7, #2]
 80024a8:	4613      	mov	r3, r2
 80024aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024ac:	787b      	ldrb	r3, [r7, #1]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024b2:	887a      	ldrh	r2, [r7, #2]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024b8:	e002      	b.n	80024c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024ba:	887a      	ldrh	r2, [r7, #2]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80024d2:	4b0a      	ldr	r3, [pc, #40]	@ (80024fc <HAL_HSEM_IRQHandler+0x30>)
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80024d8:	4b08      	ldr	r3, [pc, #32]	@ (80024fc <HAL_HSEM_IRQHandler+0x30>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	43db      	mvns	r3, r3
 80024e0:	4906      	ldr	r1, [pc, #24]	@ (80024fc <HAL_HSEM_IRQHandler+0x30>)
 80024e2:	4013      	ands	r3, r2
 80024e4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80024e6:	4a05      	ldr	r2, [pc, #20]	@ (80024fc <HAL_HSEM_IRQHandler+0x30>)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 f807 	bl	8002500 <HAL_HSEM_FreeCallback>
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	58001500 	.word	0x58001500

08002500 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800251c:	2300      	movs	r3, #0
 800251e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d01e      	beq.n	8002564 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8002526:	4b13      	ldr	r3, [pc, #76]	@ (8002574 <HAL_IPCC_Init+0x60>)
 8002528:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d102      	bne.n	800253c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff fa6e 	bl	8001a18 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800253c:	68b8      	ldr	r0, [r7, #8]
 800253e:	f000 f85b 	bl	80025f8 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f82c 	bl	80025ac <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8002562:	e001      	b.n	8002568 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8002568:	7bfb      	ldrb	r3, [r7, #15]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	58000c00 	.word	0x58000c00

08002578 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	4613      	mov	r3, r2
 8002584:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8002586:	bf00      	nop
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002592:	b480      	push	{r7}
 8002594:	b085      	sub	sp, #20
 8002596:	af00      	add	r7, sp, #0
 8002598:	60f8      	str	r0, [r7, #12]
 800259a:	60b9      	str	r1, [r7, #8]
 800259c:	4613      	mov	r3, r2
 800259e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80025a0:	bf00      	nop
 80025a2:	3714      	adds	r7, #20
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80025b4:	2300      	movs	r3, #0
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	e00f      	b.n	80025da <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	4a0b      	ldr	r2, [pc, #44]	@ (80025f0 <IPCC_SetDefaultCallbacks+0x44>)
 80025c4:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	3306      	adds	r3, #6
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	4a08      	ldr	r2, [pc, #32]	@ (80025f4 <IPCC_SetDefaultCallbacks+0x48>)
 80025d2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	3301      	adds	r3, #1
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2b05      	cmp	r3, #5
 80025de:	d9ec      	bls.n	80025ba <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80025e0:	bf00      	nop
 80025e2:	bf00      	nop
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	08002579 	.word	0x08002579
 80025f4:	08002593 	.word	0x08002593

080025f8 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 800260c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	223f      	movs	r2, #63	@ 0x3f
 8002612:	609a      	str	r2, [r3, #8]
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e0c0      	b.n	80027b4 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d106      	bne.n	800264c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7ff fa76 	bl	8001b38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2203      	movs	r2, #3
 8002650:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4618      	mov	r0, r3
 800265a:	f003 f8dd 	bl	8005818 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800265e:	2300      	movs	r3, #0
 8002660:	73fb      	strb	r3, [r7, #15]
 8002662:	e03e      	b.n	80026e2 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002664:	7bfa      	ldrb	r2, [r7, #15]
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	440b      	add	r3, r1
 8002672:	3311      	adds	r3, #17
 8002674:	2201      	movs	r2, #1
 8002676:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002678:	7bfa      	ldrb	r2, [r7, #15]
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	4613      	mov	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	440b      	add	r3, r1
 8002686:	3310      	adds	r3, #16
 8002688:	7bfa      	ldrb	r2, [r7, #15]
 800268a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800268c:	7bfa      	ldrb	r2, [r7, #15]
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	440b      	add	r3, r1
 800269a:	3313      	adds	r3, #19
 800269c:	2200      	movs	r2, #0
 800269e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026a0:	7bfa      	ldrb	r2, [r7, #15]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	440b      	add	r3, r1
 80026ae:	3320      	adds	r3, #32
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026b4:	7bfa      	ldrb	r2, [r7, #15]
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4413      	add	r3, r2
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	440b      	add	r3, r1
 80026c2:	3324      	adds	r3, #36	@ 0x24
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	4613      	mov	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	440b      	add	r3, r1
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
 80026de:	3301      	adds	r3, #1
 80026e0:	73fb      	strb	r3, [r7, #15]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	791b      	ldrb	r3, [r3, #4]
 80026e6:	7bfa      	ldrb	r2, [r7, #15]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d3bb      	bcc.n	8002664 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ec:	2300      	movs	r3, #0
 80026ee:	73fb      	strb	r3, [r7, #15]
 80026f0:	e044      	b.n	800277c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026f2:	7bfa      	ldrb	r2, [r7, #15]
 80026f4:	6879      	ldr	r1, [r7, #4]
 80026f6:	4613      	mov	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	440b      	add	r3, r1
 8002700:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002704:	2200      	movs	r2, #0
 8002706:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002708:	7bfa      	ldrb	r2, [r7, #15]
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	4613      	mov	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	440b      	add	r3, r1
 8002716:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800271a:	7bfa      	ldrb	r2, [r7, #15]
 800271c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800271e:	7bfa      	ldrb	r2, [r7, #15]
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	4613      	mov	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	440b      	add	r3, r1
 800272c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002730:	2200      	movs	r2, #0
 8002732:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002734:	7bfa      	ldrb	r2, [r7, #15]
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	4613      	mov	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	440b      	add	r3, r1
 8002742:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800274a:	7bfa      	ldrb	r2, [r7, #15]
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	440b      	add	r3, r1
 8002758:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002760:	7bfa      	ldrb	r2, [r7, #15]
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	440b      	add	r3, r1
 800276e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002776:	7bfb      	ldrb	r3, [r7, #15]
 8002778:	3301      	adds	r3, #1
 800277a:	73fb      	strb	r3, [r7, #15]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	791b      	ldrb	r3, [r3, #4]
 8002780:	7bfa      	ldrb	r2, [r7, #15]
 8002782:	429a      	cmp	r2, r3
 8002784:	d3b5      	bcc.n	80026f2 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6818      	ldr	r0, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	3304      	adds	r3, #4
 800278e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002792:	f003 f85c 	bl	800584e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	7a9b      	ldrb	r3, [r3, #10]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d102      	bne.n	80027b2 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 f805 	bl	80027bc <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	f043 0301 	orr.w	r3, r3, #1
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	f043 0302 	orr.w	r3, r3, #2
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002814:	4b05      	ldr	r3, [pc, #20]	@ (800282c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a04      	ldr	r2, [pc, #16]	@ (800282c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800281a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800281e:	6013      	str	r3, [r2, #0]
}
 8002820:	bf00      	nop
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	58000400 	.word	0x58000400

08002830 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002834:	4b04      	ldr	r3, [pc, #16]	@ (8002848 <HAL_PWREx_GetVoltageRange+0x18>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800283c:	4618      	mov	r0, r3
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	58000400 	.word	0x58000400

0800284c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002850:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800285a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800285e:	d101      	bne.n	8002864 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002860:	2301      	movs	r3, #1
 8002862:	e000      	b.n	8002866 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <LL_RCC_HSE_Enable>:
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002874:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800287e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002882:	6013      	str	r3, [r2, #0]
}
 8002884:	bf00      	nop
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <LL_RCC_HSE_Disable>:
{
 800288e:	b480      	push	{r7}
 8002890:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002892:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800289c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028a0:	6013      	str	r3, [r2, #0]
}
 80028a2:	bf00      	nop
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <LL_RCC_HSE_IsReady>:
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80028b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80028be:	d101      	bne.n	80028c4 <LL_RCC_HSE_IsReady+0x18>
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <LL_RCC_HSE_IsReady+0x1a>
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <LL_RCC_HSI_Enable>:
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80028d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028e2:	6013      	str	r3, [r2, #0]
}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <LL_RCC_HSI_Disable>:
{
 80028ee:	b480      	push	{r7}
 80028f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80028f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002900:	6013      	str	r3, [r2, #0]
}
 8002902:	bf00      	nop
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <LL_RCC_HSI_IsReady>:
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002910:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800291a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800291e:	d101      	bne.n	8002924 <LL_RCC_HSI_IsReady+0x18>
 8002920:	2301      	movs	r3, #1
 8002922:	e000      	b.n	8002926 <LL_RCC_HSI_IsReady+0x1a>
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002938:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	061b      	lsls	r3, r3, #24
 8002946:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800294a:	4313      	orrs	r3, r2
 800294c:	604b      	str	r3, [r1, #4]
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <LL_RCC_HSI48_Enable>:
{
 800295a:	b480      	push	{r7}
 800295c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800295e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002962:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002966:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8002972:	bf00      	nop
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <LL_RCC_HSI48_Disable>:
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002980:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002984:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002988:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800298c:	f023 0301 	bic.w	r3, r3, #1
 8002990:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8002994:	bf00      	nop
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <LL_RCC_HSI48_IsReady>:
{
 800299e:	b480      	push	{r7}
 80029a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80029a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d101      	bne.n	80029b6 <LL_RCC_HSI48_IsReady+0x18>
 80029b2:	2301      	movs	r3, #1
 80029b4:	e000      	b.n	80029b8 <LL_RCC_HSI48_IsReady+0x1a>
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <LL_RCC_LSE_Enable>:
{
 80029c2:	b480      	push	{r7}
 80029c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80029c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029d2:	f043 0301 	orr.w	r3, r3, #1
 80029d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80029da:	bf00      	nop
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <LL_RCC_LSE_Disable>:
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80029e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029f4:	f023 0301 	bic.w	r3, r3, #1
 80029f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <LL_RCC_LSE_EnableBypass>:
{
 8002a06:	b480      	push	{r7}
 8002a08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a16:	f043 0304 	orr.w	r3, r3, #4
 8002a1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002a1e:	bf00      	nop
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <LL_RCC_LSE_DisableBypass>:
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a38:	f023 0304 	bic.w	r3, r3, #4
 8002a3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002a40:	bf00      	nop
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <LL_RCC_LSE_IsReady>:
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002a4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d101      	bne.n	8002a62 <LL_RCC_LSE_IsReady+0x18>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <LL_RCC_LSE_IsReady+0x1a>
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <LL_RCC_LSI1_Enable>:
{
 8002a6e:	b480      	push	{r7}
 8002a70:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002a72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a7a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a7e:	f043 0301 	orr.w	r3, r3, #1
 8002a82:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002a86:	bf00      	nop
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <LL_RCC_LSI1_Disable>:
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002a94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002aa0:	f023 0301 	bic.w	r3, r3, #1
 8002aa4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002aa8:	bf00      	nop
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <LL_RCC_LSI1_IsReady>:
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002ab6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d101      	bne.n	8002aca <LL_RCC_LSI1_IsReady+0x18>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <LL_RCC_LSI1_IsReady+0x1a>
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <LL_RCC_LSI2_Enable>:
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002ada:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ae2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ae6:	f043 0304 	orr.w	r3, r3, #4
 8002aea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002aee:	bf00      	nop
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <LL_RCC_LSI2_Disable>:
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002afc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b08:	f023 0304 	bic.w	r3, r3, #4
 8002b0c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002b10:	bf00      	nop
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <LL_RCC_LSI2_IsReady>:
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002b1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b26:	f003 0308 	and.w	r3, r3, #8
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d101      	bne.n	8002b32 <LL_RCC_LSI2_IsReady+0x18>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <LL_RCC_LSI2_IsReady+0x1a>
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <LL_RCC_LSI2_SetTrimming>:
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002b46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b4e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	021b      	lsls	r3, r3, #8
 8002b56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <LL_RCC_MSI_Enable>:
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002b70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b7a:	f043 0301 	orr.w	r3, r3, #1
 8002b7e:	6013      	str	r3, [r2, #0]
}
 8002b80:	bf00      	nop
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <LL_RCC_MSI_Disable>:
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002b8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b98:	f023 0301 	bic.w	r3, r3, #1
 8002b9c:	6013      	str	r3, [r2, #0]
}
 8002b9e:	bf00      	nop
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <LL_RCC_MSI_IsReady>:
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002bac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d101      	bne.n	8002bbe <LL_RCC_MSI_IsReady+0x16>
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e000      	b.n	8002bc0 <LL_RCC_MSI_IsReady+0x18>
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <LL_RCC_MSI_SetRange>:
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002bd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bdc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	600b      	str	r3, [r1, #0]
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <LL_RCC_MSI_GetRange>:
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002bf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c02:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2bb0      	cmp	r3, #176	@ 0xb0
 8002c08:	d901      	bls.n	8002c0e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002c0a:	23b0      	movs	r3, #176	@ 0xb0
 8002c0c:	607b      	str	r3, [r7, #4]
  return msiRange;
 8002c0e:	687b      	ldr	r3, [r7, #4]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <LL_RCC_MSI_SetCalibTrimming>:
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002c24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	021b      	lsls	r3, r3, #8
 8002c32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c36:	4313      	orrs	r3, r2
 8002c38:	604b      	str	r3, [r1, #4]
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <LL_RCC_SetSysClkSource>:
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002c4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f023 0203 	bic.w	r2, r3, #3
 8002c58:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	608b      	str	r3, [r1, #8]
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <LL_RCC_GetSysClkSource>:
{
 8002c6e:	b480      	push	{r7}
 8002c70:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002c72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f003 030c 	and.w	r3, r3, #12
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <LL_RCC_SetAHBPrescaler>:
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002c8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c98:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	608b      	str	r3, [r1, #8]
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <LL_C2_RCC_SetAHBPrescaler>:
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002cb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cba:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002cbe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cc2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <LL_RCC_SetAHB4Prescaler>:
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002ce2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ce6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002cea:	f023 020f 	bic.w	r2, r3, #15
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	091b      	lsrs	r3, r3, #4
 8002cf2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <LL_RCC_SetAPB1Prescaler>:
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002d10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d1a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	608b      	str	r3, [r1, #8]
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <LL_RCC_SetAPB2Prescaler>:
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002d38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	608b      	str	r3, [r1, #8]
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <LL_RCC_GetAHBPrescaler>:
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002d5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <LL_C2_RCC_GetAHBPrescaler>:
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8002d74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d78:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002d7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <LL_RCC_GetAHB4Prescaler>:
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002d8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d92:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002d96:	011b      	lsls	r3, r3, #4
 8002d98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <LL_RCC_GetAPB1Prescaler>:
{
 8002da6:	b480      	push	{r7}
 8002da8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002daa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <LL_RCC_GetAPB2Prescaler>:
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002dc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002dda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002de4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002de8:	6013      	str	r3, [r2, #0]
}
 8002dea:	bf00      	nop
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002df8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e06:	6013      	str	r3, [r2, #0]
}
 8002e08:	bf00      	nop
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002e12:	b480      	push	{r7}
 8002e14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002e16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e20:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e24:	d101      	bne.n	8002e2a <LL_RCC_PLL_IsReady+0x18>
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <LL_RCC_PLL_IsReady+0x1a>
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002e36:	b480      	push	{r7}
 8002e38:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002e3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	0a1b      	lsrs	r3, r3, #8
 8002e42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002e54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002e6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002e84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	f003 0303 	and.w	r3, r3, #3
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002e9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ea6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eaa:	d101      	bne.n	8002eb0 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002eac:	2301      	movs	r3, #1
 8002eae:	e000      	b.n	8002eb2 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002ec0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ec4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002ec8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ecc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ed0:	d101      	bne.n	8002ed6 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e000      	b.n	8002ed8 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002ee6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eea:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002eee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ef2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ef6:	d101      	bne.n	8002efc <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e000      	b.n	8002efe <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002f0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f1a:	d101      	bne.n	8002f20 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e000      	b.n	8002f22 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002f30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f3a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f3e:	d101      	bne.n	8002f44 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002f40:	2301      	movs	r3, #1
 8002f42:	e000      	b.n	8002f46 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f50:	b590      	push	{r4, r7, lr}
 8002f52:	b08d      	sub	sp, #52	@ 0x34
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e363      	b.n	800362a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0320 	and.w	r3, r3, #32
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 808d 	beq.w	800308a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f70:	f7ff fe7d 	bl	8002c6e <LL_RCC_GetSysClkSource>
 8002f74:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f76:	f7ff ff83 	bl	8002e80 <LL_RCC_PLL_GetMainSource>
 8002f7a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d005      	beq.n	8002f8e <HAL_RCC_OscConfig+0x3e>
 8002f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f84:	2b0c      	cmp	r3, #12
 8002f86:	d147      	bne.n	8003018 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d144      	bne.n	8003018 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e347      	b.n	800362a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8002f9e:	f7ff fe28 	bl	8002bf2 <LL_RCC_MSI_GetRange>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	429c      	cmp	r4, r3
 8002fa6:	d914      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fac:	4618      	mov	r0, r3
 8002fae:	f000 fd61 	bl	8003a74 <RCC_SetFlashLatencyFromMSIRange>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e336      	b.n	800362a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff fe02 	bl	8002bca <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff fe26 	bl	8002c1c <LL_RCC_MSI_SetCalibTrimming>
 8002fd0:	e013      	b.n	8002ffa <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff fdf7 	bl	8002bca <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff fe1b 	bl	8002c1c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 fd42 	bl	8003a74 <RCC_SetFlashLatencyFromMSIRange>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e317      	b.n	800362a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002ffa:	f000 fcc9 	bl	8003990 <HAL_RCC_GetHCLKFreq>
 8002ffe:	4603      	mov	r3, r0
 8003000:	4aa4      	ldr	r2, [pc, #656]	@ (8003294 <HAL_RCC_OscConfig+0x344>)
 8003002:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003004:	4ba4      	ldr	r3, [pc, #656]	@ (8003298 <HAL_RCC_OscConfig+0x348>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f7fe fe05 	bl	8001c18 <HAL_InitTick>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d039      	beq.n	8003088 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e308      	b.n	800362a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	69db      	ldr	r3, [r3, #28]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d01e      	beq.n	800305e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003020:	f7ff fda4 	bl	8002b6c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003024:	f7fe ff48 	bl	8001eb8 <HAL_GetTick>
 8003028:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800302c:	f7fe ff44 	bl	8001eb8 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e2f5      	b.n	800362a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800303e:	f7ff fdb3 	bl	8002ba8 <LL_RCC_MSI_IsReady>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0f1      	beq.n	800302c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff fdbc 	bl	8002bca <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff fde0 	bl	8002c1c <LL_RCC_MSI_SetCalibTrimming>
 800305c:	e015      	b.n	800308a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800305e:	f7ff fd94 	bl	8002b8a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003062:	f7fe ff29 	bl	8001eb8 <HAL_GetTick>
 8003066:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003068:	e008      	b.n	800307c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800306a:	f7fe ff25 	bl	8001eb8 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e2d6      	b.n	800362a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800307c:	f7ff fd94 	bl	8002ba8 <LL_RCC_MSI_IsReady>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f1      	bne.n	800306a <HAL_RCC_OscConfig+0x11a>
 8003086:	e000      	b.n	800308a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003088:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d047      	beq.n	8003126 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003096:	f7ff fdea 	bl	8002c6e <LL_RCC_GetSysClkSource>
 800309a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800309c:	f7ff fef0 	bl	8002e80 <LL_RCC_PLL_GetMainSource>
 80030a0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d005      	beq.n	80030b4 <HAL_RCC_OscConfig+0x164>
 80030a8:	6a3b      	ldr	r3, [r7, #32]
 80030aa:	2b0c      	cmp	r3, #12
 80030ac:	d108      	bne.n	80030c0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	2b03      	cmp	r3, #3
 80030b2:	d105      	bne.n	80030c0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d134      	bne.n	8003126 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e2b4      	b.n	800362a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030c8:	d102      	bne.n	80030d0 <HAL_RCC_OscConfig+0x180>
 80030ca:	f7ff fbd1 	bl	8002870 <LL_RCC_HSE_Enable>
 80030ce:	e001      	b.n	80030d4 <HAL_RCC_OscConfig+0x184>
 80030d0:	f7ff fbdd 	bl	800288e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d012      	beq.n	8003102 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030dc:	f7fe feec 	bl	8001eb8 <HAL_GetTick>
 80030e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030e4:	f7fe fee8 	bl	8001eb8 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b64      	cmp	r3, #100	@ 0x64
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e299      	b.n	800362a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80030f6:	f7ff fbd9 	bl	80028ac <LL_RCC_HSE_IsReady>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0f1      	beq.n	80030e4 <HAL_RCC_OscConfig+0x194>
 8003100:	e011      	b.n	8003126 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003102:	f7fe fed9 	bl	8001eb8 <HAL_GetTick>
 8003106:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800310a:	f7fe fed5 	bl	8001eb8 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b64      	cmp	r3, #100	@ 0x64
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e286      	b.n	800362a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800311c:	f7ff fbc6 	bl	80028ac <LL_RCC_HSE_IsReady>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1f1      	bne.n	800310a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d04c      	beq.n	80031cc <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003132:	f7ff fd9c 	bl	8002c6e <LL_RCC_GetSysClkSource>
 8003136:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003138:	f7ff fea2 	bl	8002e80 <LL_RCC_PLL_GetMainSource>
 800313c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	2b04      	cmp	r3, #4
 8003142:	d005      	beq.n	8003150 <HAL_RCC_OscConfig+0x200>
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	2b0c      	cmp	r3, #12
 8003148:	d10e      	bne.n	8003168 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	2b02      	cmp	r3, #2
 800314e:	d10b      	bne.n	8003168 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e266      	b.n	800362a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff fbe5 	bl	8002930 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003166:	e031      	b.n	80031cc <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d019      	beq.n	80031a4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003170:	f7ff fbae 	bl	80028d0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003174:	f7fe fea0 	bl	8001eb8 <HAL_GetTick>
 8003178:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800317c:	f7fe fe9c 	bl	8001eb8 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e24d      	b.n	800362a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800318e:	f7ff fbbd 	bl	800290c <LL_RCC_HSI_IsReady>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d0f1      	beq.n	800317c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff fbc7 	bl	8002930 <LL_RCC_HSI_SetCalibTrimming>
 80031a2:	e013      	b.n	80031cc <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031a4:	f7ff fba3 	bl	80028ee <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a8:	f7fe fe86 	bl	8001eb8 <HAL_GetTick>
 80031ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031b0:	f7fe fe82 	bl	8001eb8 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e233      	b.n	800362a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80031c2:	f7ff fba3 	bl	800290c <LL_RCC_HSI_IsReady>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1f1      	bne.n	80031b0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0308 	and.w	r3, r3, #8
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d106      	bne.n	80031e6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 80a3 	beq.w	800332c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d076      	beq.n	80032dc <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0310 	and.w	r3, r3, #16
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d046      	beq.n	8003288 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80031fa:	f7ff fc5a 	bl	8002ab2 <LL_RCC_LSI1_IsReady>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d113      	bne.n	800322c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003204:	f7ff fc33 	bl	8002a6e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003208:	f7fe fe56 	bl	8001eb8 <HAL_GetTick>
 800320c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003210:	f7fe fe52 	bl	8001eb8 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e203      	b.n	800362a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003222:	f7ff fc46 	bl	8002ab2 <LL_RCC_LSI1_IsReady>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0f1      	beq.n	8003210 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800322c:	f7ff fc53 	bl	8002ad6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003230:	f7fe fe42 	bl	8001eb8 <HAL_GetTick>
 8003234:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003238:	f7fe fe3e 	bl	8001eb8 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b03      	cmp	r3, #3
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e1ef      	b.n	800362a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800324a:	f7ff fc66 	bl	8002b1a <LL_RCC_LSI2_IsReady>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0f1      	beq.n	8003238 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff fc70 	bl	8002b3e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800325e:	f7ff fc17 	bl	8002a90 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003262:	f7fe fe29 	bl	8001eb8 <HAL_GetTick>
 8003266:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800326a:	f7fe fe25 	bl	8001eb8 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e1d6      	b.n	800362a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800327c:	f7ff fc19 	bl	8002ab2 <LL_RCC_LSI1_IsReady>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f1      	bne.n	800326a <HAL_RCC_OscConfig+0x31a>
 8003286:	e051      	b.n	800332c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003288:	f7ff fbf1 	bl	8002a6e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328c:	f7fe fe14 	bl	8001eb8 <HAL_GetTick>
 8003290:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003292:	e00c      	b.n	80032ae <HAL_RCC_OscConfig+0x35e>
 8003294:	20000008 	.word	0x20000008
 8003298:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800329c:	f7fe fe0c 	bl	8001eb8 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e1bd      	b.n	800362a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80032ae:	f7ff fc00 	bl	8002ab2 <LL_RCC_LSI1_IsReady>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0f1      	beq.n	800329c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80032b8:	f7ff fc1e 	bl	8002af8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80032be:	f7fe fdfb 	bl	8001eb8 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b03      	cmp	r3, #3
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e1ac      	b.n	800362a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80032d0:	f7ff fc23 	bl	8002b1a <LL_RCC_LSI2_IsReady>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1f1      	bne.n	80032be <HAL_RCC_OscConfig+0x36e>
 80032da:	e027      	b.n	800332c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80032dc:	f7ff fc0c 	bl	8002af8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e0:	f7fe fdea 	bl	8001eb8 <HAL_GetTick>
 80032e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80032e8:	f7fe fde6 	bl	8001eb8 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b03      	cmp	r3, #3
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e197      	b.n	800362a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80032fa:	f7ff fc0e 	bl	8002b1a <LL_RCC_LSI2_IsReady>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1f1      	bne.n	80032e8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003304:	f7ff fbc4 	bl	8002a90 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003308:	f7fe fdd6 	bl	8001eb8 <HAL_GetTick>
 800330c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003310:	f7fe fdd2 	bl	8001eb8 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e183      	b.n	800362a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003322:	f7ff fbc6 	bl	8002ab2 <LL_RCC_LSI1_IsReady>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1f1      	bne.n	8003310 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0304 	and.w	r3, r3, #4
 8003334:	2b00      	cmp	r3, #0
 8003336:	d05b      	beq.n	80033f0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003338:	4ba7      	ldr	r3, [pc, #668]	@ (80035d8 <HAL_RCC_OscConfig+0x688>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003340:	2b00      	cmp	r3, #0
 8003342:	d114      	bne.n	800336e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003344:	f7ff fa64 	bl	8002810 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003348:	f7fe fdb6 	bl	8001eb8 <HAL_GetTick>
 800334c:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003350:	f7fe fdb2 	bl	8001eb8 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e163      	b.n	800362a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003362:	4b9d      	ldr	r3, [pc, #628]	@ (80035d8 <HAL_RCC_OscConfig+0x688>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0f0      	beq.n	8003350 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d102      	bne.n	800337c <HAL_RCC_OscConfig+0x42c>
 8003376:	f7ff fb24 	bl	80029c2 <LL_RCC_LSE_Enable>
 800337a:	e00c      	b.n	8003396 <HAL_RCC_OscConfig+0x446>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	2b05      	cmp	r3, #5
 8003382:	d104      	bne.n	800338e <HAL_RCC_OscConfig+0x43e>
 8003384:	f7ff fb3f 	bl	8002a06 <LL_RCC_LSE_EnableBypass>
 8003388:	f7ff fb1b 	bl	80029c2 <LL_RCC_LSE_Enable>
 800338c:	e003      	b.n	8003396 <HAL_RCC_OscConfig+0x446>
 800338e:	f7ff fb29 	bl	80029e4 <LL_RCC_LSE_Disable>
 8003392:	f7ff fb49 	bl	8002a28 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d014      	beq.n	80033c8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339e:	f7fe fd8b 	bl	8001eb8 <HAL_GetTick>
 80033a2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80033a4:	e00a      	b.n	80033bc <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033a6:	f7fe fd87 	bl	8001eb8 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e136      	b.n	800362a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80033bc:	f7ff fb45 	bl	8002a4a <LL_RCC_LSE_IsReady>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0ef      	beq.n	80033a6 <HAL_RCC_OscConfig+0x456>
 80033c6:	e013      	b.n	80033f0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c8:	f7fe fd76 	bl	8001eb8 <HAL_GetTick>
 80033cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80033ce:	e00a      	b.n	80033e6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d0:	f7fe fd72 	bl	8001eb8 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033de:	4293      	cmp	r3, r2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e121      	b.n	800362a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80033e6:	f7ff fb30 	bl	8002a4a <LL_RCC_LSE_IsReady>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1ef      	bne.n	80033d0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d02c      	beq.n	8003456 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003400:	2b00      	cmp	r3, #0
 8003402:	d014      	beq.n	800342e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003404:	f7ff faa9 	bl	800295a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003408:	f7fe fd56 	bl	8001eb8 <HAL_GetTick>
 800340c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003410:	f7fe fd52 	bl	8001eb8 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e103      	b.n	800362a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003422:	f7ff fabc 	bl	800299e <LL_RCC_HSI48_IsReady>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0f1      	beq.n	8003410 <HAL_RCC_OscConfig+0x4c0>
 800342c:	e013      	b.n	8003456 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800342e:	f7ff faa5 	bl	800297c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003432:	f7fe fd41 	bl	8001eb8 <HAL_GetTick>
 8003436:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003438:	e008      	b.n	800344c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800343a:	f7fe fd3d 	bl	8001eb8 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d901      	bls.n	800344c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e0ee      	b.n	800362a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800344c:	f7ff faa7 	bl	800299e <LL_RCC_HSI48_IsReady>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f1      	bne.n	800343a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 80e4 	beq.w	8003628 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003460:	f7ff fc05 	bl	8002c6e <LL_RCC_GetSysClkSource>
 8003464:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003466:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003472:	2b02      	cmp	r3, #2
 8003474:	f040 80b4 	bne.w	80035e0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f003 0203 	and.w	r2, r3, #3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003482:	429a      	cmp	r2, r3
 8003484:	d123      	bne.n	80034ce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003490:	429a      	cmp	r2, r3
 8003492:	d11c      	bne.n	80034ce <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	0a1b      	lsrs	r3, r3, #8
 8003498:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d114      	bne.n	80034ce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d10d      	bne.n	80034ce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034bc:	429a      	cmp	r2, r3
 80034be:	d106      	bne.n	80034ce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d05d      	beq.n	800358a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	2b0c      	cmp	r3, #12
 80034d2:	d058      	beq.n	8003586 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80034d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e0a1      	b.n	800362a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80034e6:	f7ff fc85 	bl	8002df4 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034ea:	f7fe fce5 	bl	8001eb8 <HAL_GetTick>
 80034ee:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f2:	f7fe fce1 	bl	8001eb8 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e092      	b.n	800362a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003504:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1ef      	bne.n	80034f2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003512:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003516:	68da      	ldr	r2, [r3, #12]
 8003518:	4b30      	ldr	r3, [pc, #192]	@ (80035dc <HAL_RCC_OscConfig+0x68c>)
 800351a:	4013      	ands	r3, r2
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003524:	4311      	orrs	r1, r2
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800352a:	0212      	lsls	r2, r2, #8
 800352c:	4311      	orrs	r1, r2
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003532:	4311      	orrs	r1, r2
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003538:	4311      	orrs	r1, r2
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800353e:	430a      	orrs	r2, r1
 8003540:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003544:	4313      	orrs	r3, r2
 8003546:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003548:	f7ff fc45 	bl	8002dd6 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800354c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003556:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800355a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800355c:	f7fe fcac 	bl	8001eb8 <HAL_GetTick>
 8003560:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003564:	f7fe fca8 	bl	8001eb8 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e059      	b.n	800362a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003576:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0ef      	beq.n	8003564 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003584:	e050      	b.n	8003628 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e04f      	b.n	800362a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800358a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d147      	bne.n	8003628 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003598:	f7ff fc1d 	bl	8002dd6 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800359c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80035a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035ac:	f7fe fc84 	bl	8001eb8 <HAL_GetTick>
 80035b0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b4:	f7fe fc80 	bl	8001eb8 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e031      	b.n	800362a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0ef      	beq.n	80035b4 <HAL_RCC_OscConfig+0x664>
 80035d4:	e028      	b.n	8003628 <HAL_RCC_OscConfig+0x6d8>
 80035d6:	bf00      	nop
 80035d8:	58000400 	.word	0x58000400
 80035dc:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	2b0c      	cmp	r3, #12
 80035e4:	d01e      	beq.n	8003624 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e6:	f7ff fc05 	bl	8002df4 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ea:	f7fe fc65 	bl	8001eb8 <HAL_GetTick>
 80035ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035f0:	e008      	b.n	8003604 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f2:	f7fe fc61 	bl	8001eb8 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e012      	b.n	800362a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003604:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1ef      	bne.n	80035f2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003612:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003616:	68da      	ldr	r2, [r3, #12]
 8003618:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800361c:	4b05      	ldr	r3, [pc, #20]	@ (8003634 <HAL_RCC_OscConfig+0x6e4>)
 800361e:	4013      	ands	r3, r2
 8003620:	60cb      	str	r3, [r1, #12]
 8003622:	e001      	b.n	8003628 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e000      	b.n	800362a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3734      	adds	r7, #52	@ 0x34
 800362e:	46bd      	mov	sp, r7
 8003630:	bd90      	pop	{r4, r7, pc}
 8003632:	bf00      	nop
 8003634:	eefefffc 	.word	0xeefefffc

08003638 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e12d      	b.n	80038a8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800364c:	4b98      	ldr	r3, [pc, #608]	@ (80038b0 <HAL_RCC_ClockConfig+0x278>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	429a      	cmp	r2, r3
 8003658:	d91b      	bls.n	8003692 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800365a:	4b95      	ldr	r3, [pc, #596]	@ (80038b0 <HAL_RCC_ClockConfig+0x278>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f023 0207 	bic.w	r2, r3, #7
 8003662:	4993      	ldr	r1, [pc, #588]	@ (80038b0 <HAL_RCC_ClockConfig+0x278>)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	4313      	orrs	r3, r2
 8003668:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800366a:	f7fe fc25 	bl	8001eb8 <HAL_GetTick>
 800366e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003670:	e008      	b.n	8003684 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003672:	f7fe fc21 	bl	8001eb8 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e111      	b.n	80038a8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003684:	4b8a      	ldr	r3, [pc, #552]	@ (80038b0 <HAL_RCC_ClockConfig+0x278>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	429a      	cmp	r2, r3
 8003690:	d1ef      	bne.n	8003672 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d016      	beq.n	80036cc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff faef 	bl	8002c86 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80036a8:	f7fe fc06 	bl	8001eb8 <HAL_GetTick>
 80036ac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80036b0:	f7fe fc02 	bl	8001eb8 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e0f2      	b.n	80038a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80036c2:	f7ff fbe9 	bl	8002e98 <LL_RCC_IsActiveFlag_HPRE>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d0f1      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0320 	and.w	r3, r3, #32
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d016      	beq.n	8003706 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	4618      	mov	r0, r3
 80036de:	f7ff fae6 	bl	8002cae <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80036e2:	f7fe fbe9 	bl	8001eb8 <HAL_GetTick>
 80036e6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80036e8:	e008      	b.n	80036fc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80036ea:	f7fe fbe5 	bl	8001eb8 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d901      	bls.n	80036fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e0d5      	b.n	80038a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80036fc:	f7ff fbde 	bl	8002ebc <LL_RCC_IsActiveFlag_C2HPRE>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d0f1      	beq.n	80036ea <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800370e:	2b00      	cmp	r3, #0
 8003710:	d016      	beq.n	8003740 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff fadf 	bl	8002cda <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800371c:	f7fe fbcc 	bl	8001eb8 <HAL_GetTick>
 8003720:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003722:	e008      	b.n	8003736 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003724:	f7fe fbc8 	bl	8001eb8 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e0b8      	b.n	80038a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003736:	f7ff fbd4 	bl	8002ee2 <LL_RCC_IsActiveFlag_SHDHPRE>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0f1      	beq.n	8003724 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	2b00      	cmp	r3, #0
 800374a:	d016      	beq.n	800377a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff fad9 	bl	8002d08 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003756:	f7fe fbaf 	bl	8001eb8 <HAL_GetTick>
 800375a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800375c:	e008      	b.n	8003770 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800375e:	f7fe fbab 	bl	8001eb8 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e09b      	b.n	80038a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003770:	f7ff fbca 	bl	8002f08 <LL_RCC_IsActiveFlag_PPRE1>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0f1      	beq.n	800375e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0308 	and.w	r3, r3, #8
 8003782:	2b00      	cmp	r3, #0
 8003784:	d017      	beq.n	80037b6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	4618      	mov	r0, r3
 800378e:	f7ff facf 	bl	8002d30 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003792:	f7fe fb91 	bl	8001eb8 <HAL_GetTick>
 8003796:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003798:	e008      	b.n	80037ac <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800379a:	f7fe fb8d 	bl	8001eb8 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e07d      	b.n	80038a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80037ac:	f7ff fbbe 	bl	8002f2c <LL_RCC_IsActiveFlag_PPRE2>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0f1      	beq.n	800379a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d043      	beq.n	800384a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d106      	bne.n	80037d8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80037ca:	f7ff f86f 	bl	80028ac <LL_RCC_HSE_IsReady>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d11e      	bne.n	8003812 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e067      	b.n	80038a8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b03      	cmp	r3, #3
 80037de:	d106      	bne.n	80037ee <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80037e0:	f7ff fb17 	bl	8002e12 <LL_RCC_PLL_IsReady>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d113      	bne.n	8003812 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e05c      	b.n	80038a8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d106      	bne.n	8003804 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80037f6:	f7ff f9d7 	bl	8002ba8 <LL_RCC_MSI_IsReady>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d108      	bne.n	8003812 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e051      	b.n	80038a8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003804:	f7ff f882 	bl	800290c <LL_RCC_HSI_IsReady>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e04a      	b.n	80038a8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	4618      	mov	r0, r3
 8003818:	f7ff fa15 	bl	8002c46 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800381c:	f7fe fb4c 	bl	8001eb8 <HAL_GetTick>
 8003820:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003822:	e00a      	b.n	800383a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003824:	f7fe fb48 	bl	8001eb8 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003832:	4293      	cmp	r3, r2
 8003834:	d901      	bls.n	800383a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e036      	b.n	80038a8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800383a:	f7ff fa18 	bl	8002c6e <LL_RCC_GetSysClkSource>
 800383e:	4602      	mov	r2, r0
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	429a      	cmp	r2, r3
 8003848:	d1ec      	bne.n	8003824 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800384a:	4b19      	ldr	r3, [pc, #100]	@ (80038b0 <HAL_RCC_ClockConfig+0x278>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	429a      	cmp	r2, r3
 8003856:	d21b      	bcs.n	8003890 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003858:	4b15      	ldr	r3, [pc, #84]	@ (80038b0 <HAL_RCC_ClockConfig+0x278>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f023 0207 	bic.w	r2, r3, #7
 8003860:	4913      	ldr	r1, [pc, #76]	@ (80038b0 <HAL_RCC_ClockConfig+0x278>)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	4313      	orrs	r3, r2
 8003866:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003868:	f7fe fb26 	bl	8001eb8 <HAL_GetTick>
 800386c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800386e:	e008      	b.n	8003882 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003870:	f7fe fb22 	bl	8001eb8 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e012      	b.n	80038a8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003882:	4b0b      	ldr	r3, [pc, #44]	@ (80038b0 <HAL_RCC_ClockConfig+0x278>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	429a      	cmp	r2, r3
 800388e:	d1ef      	bne.n	8003870 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003890:	f000 f87e 	bl	8003990 <HAL_RCC_GetHCLKFreq>
 8003894:	4603      	mov	r3, r0
 8003896:	4a07      	ldr	r2, [pc, #28]	@ (80038b4 <HAL_RCC_ClockConfig+0x27c>)
 8003898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800389a:	f7fe fb19 	bl	8001ed0 <HAL_GetTickPrio>
 800389e:	4603      	mov	r3, r0
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7fe f9b9 	bl	8001c18 <HAL_InitTick>
 80038a6:	4603      	mov	r3, r0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	58004000 	.word	0x58004000
 80038b4:	20000008 	.word	0x20000008

080038b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038b8:	b590      	push	{r4, r7, lr}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038be:	f7ff f9d6 	bl	8002c6e <LL_RCC_GetSysClkSource>
 80038c2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10a      	bne.n	80038e0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80038ca:	f7ff f992 	bl	8002bf2 <LL_RCC_MSI_GetRange>
 80038ce:	4603      	mov	r3, r0
 80038d0:	091b      	lsrs	r3, r3, #4
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	4a2b      	ldr	r2, [pc, #172]	@ (8003984 <HAL_RCC_GetSysClockFreq+0xcc>)
 80038d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	e04b      	b.n	8003978 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d102      	bne.n	80038ec <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038e6:	4b28      	ldr	r3, [pc, #160]	@ (8003988 <HAL_RCC_GetSysClockFreq+0xd0>)
 80038e8:	60fb      	str	r3, [r7, #12]
 80038ea:	e045      	b.n	8003978 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b08      	cmp	r3, #8
 80038f0:	d10a      	bne.n	8003908 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80038f2:	f7fe ffab 	bl	800284c <LL_RCC_HSE_IsEnabledDiv2>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d102      	bne.n	8003902 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80038fc:	4b22      	ldr	r3, [pc, #136]	@ (8003988 <HAL_RCC_GetSysClockFreq+0xd0>)
 80038fe:	60fb      	str	r3, [r7, #12]
 8003900:	e03a      	b.n	8003978 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003902:	4b22      	ldr	r3, [pc, #136]	@ (800398c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003904:	60fb      	str	r3, [r7, #12]
 8003906:	e037      	b.n	8003978 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003908:	f7ff faba 	bl	8002e80 <LL_RCC_PLL_GetMainSource>
 800390c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2b02      	cmp	r3, #2
 8003912:	d003      	beq.n	800391c <HAL_RCC_GetSysClockFreq+0x64>
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	2b03      	cmp	r3, #3
 8003918:	d003      	beq.n	8003922 <HAL_RCC_GetSysClockFreq+0x6a>
 800391a:	e00d      	b.n	8003938 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800391c:	4b1a      	ldr	r3, [pc, #104]	@ (8003988 <HAL_RCC_GetSysClockFreq+0xd0>)
 800391e:	60bb      	str	r3, [r7, #8]
        break;
 8003920:	e015      	b.n	800394e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003922:	f7fe ff93 	bl	800284c <LL_RCC_HSE_IsEnabledDiv2>
 8003926:	4603      	mov	r3, r0
 8003928:	2b01      	cmp	r3, #1
 800392a:	d102      	bne.n	8003932 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800392c:	4b16      	ldr	r3, [pc, #88]	@ (8003988 <HAL_RCC_GetSysClockFreq+0xd0>)
 800392e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003930:	e00d      	b.n	800394e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003932:	4b16      	ldr	r3, [pc, #88]	@ (800398c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003934:	60bb      	str	r3, [r7, #8]
        break;
 8003936:	e00a      	b.n	800394e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003938:	f7ff f95b 	bl	8002bf2 <LL_RCC_MSI_GetRange>
 800393c:	4603      	mov	r3, r0
 800393e:	091b      	lsrs	r3, r3, #4
 8003940:	f003 030f 	and.w	r3, r3, #15
 8003944:	4a0f      	ldr	r2, [pc, #60]	@ (8003984 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800394a:	60bb      	str	r3, [r7, #8]
        break;
 800394c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800394e:	f7ff fa72 	bl	8002e36 <LL_RCC_PLL_GetN>
 8003952:	4602      	mov	r2, r0
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	fb03 f402 	mul.w	r4, r3, r2
 800395a:	f7ff fa85 	bl	8002e68 <LL_RCC_PLL_GetDivider>
 800395e:	4603      	mov	r3, r0
 8003960:	091b      	lsrs	r3, r3, #4
 8003962:	3301      	adds	r3, #1
 8003964:	fbb4 f4f3 	udiv	r4, r4, r3
 8003968:	f7ff fa72 	bl	8002e50 <LL_RCC_PLL_GetR>
 800396c:	4603      	mov	r3, r0
 800396e:	0f5b      	lsrs	r3, r3, #29
 8003970:	3301      	adds	r3, #1
 8003972:	fbb4 f3f3 	udiv	r3, r4, r3
 8003976:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003978:	68fb      	ldr	r3, [r7, #12]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3714      	adds	r7, #20
 800397e:	46bd      	mov	sp, r7
 8003980:	bd90      	pop	{r4, r7, pc}
 8003982:	bf00      	nop
 8003984:	08008c74 	.word	0x08008c74
 8003988:	00f42400 	.word	0x00f42400
 800398c:	01e84800 	.word	0x01e84800

08003990 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003990:	b598      	push	{r3, r4, r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003994:	f7ff ff90 	bl	80038b8 <HAL_RCC_GetSysClockFreq>
 8003998:	4604      	mov	r4, r0
 800399a:	f7ff f9dd 	bl	8002d58 <LL_RCC_GetAHBPrescaler>
 800399e:	4603      	mov	r3, r0
 80039a0:	091b      	lsrs	r3, r3, #4
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	4a03      	ldr	r2, [pc, #12]	@ (80039b4 <HAL_RCC_GetHCLKFreq+0x24>)
 80039a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ac:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	bd98      	pop	{r3, r4, r7, pc}
 80039b4:	08008c14 	.word	0x08008c14

080039b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039b8:	b598      	push	{r3, r4, r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80039bc:	f7ff ffe8 	bl	8003990 <HAL_RCC_GetHCLKFreq>
 80039c0:	4604      	mov	r4, r0
 80039c2:	f7ff f9f0 	bl	8002da6 <LL_RCC_GetAPB1Prescaler>
 80039c6:	4603      	mov	r3, r0
 80039c8:	0a1b      	lsrs	r3, r3, #8
 80039ca:	f003 0307 	and.w	r3, r3, #7
 80039ce:	4a04      	ldr	r2, [pc, #16]	@ (80039e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80039d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039d4:	f003 031f 	and.w	r3, r3, #31
 80039d8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80039dc:	4618      	mov	r0, r3
 80039de:	bd98      	pop	{r3, r4, r7, pc}
 80039e0:	08008c54 	.word	0x08008c54

080039e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039e4:	b598      	push	{r3, r4, r7, lr}
 80039e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80039e8:	f7ff ffd2 	bl	8003990 <HAL_RCC_GetHCLKFreq>
 80039ec:	4604      	mov	r4, r0
 80039ee:	f7ff f9e6 	bl	8002dbe <LL_RCC_GetAPB2Prescaler>
 80039f2:	4603      	mov	r3, r0
 80039f4:	0adb      	lsrs	r3, r3, #11
 80039f6:	f003 0307 	and.w	r3, r3, #7
 80039fa:	4a04      	ldr	r2, [pc, #16]	@ (8003a0c <HAL_RCC_GetPCLK2Freq+0x28>)
 80039fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a00:	f003 031f 	and.w	r3, r3, #31
 8003a04:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	bd98      	pop	{r3, r4, r7, pc}
 8003a0c:	08008c54 	.word	0x08008c54

08003a10 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	226f      	movs	r2, #111	@ 0x6f
 8003a1e:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8003a20:	f7ff f925 	bl	8002c6e <LL_RCC_GetSysClkSource>
 8003a24:	4602      	mov	r2, r0
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8003a2a:	f7ff f995 	bl	8002d58 <LL_RCC_GetAHBPrescaler>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8003a34:	f7ff f9b7 	bl	8002da6 <LL_RCC_GetAPB1Prescaler>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8003a3e:	f7ff f9be 	bl	8002dbe <LL_RCC_GetAPB2Prescaler>
 8003a42:	4602      	mov	r2, r0
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8003a48:	f7ff f992 	bl	8002d70 <LL_C2_RCC_GetAHBPrescaler>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8003a52:	f7ff f99a 	bl	8002d8a <LL_RCC_GetAHB4Prescaler>
 8003a56:	4602      	mov	r2, r0
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003a5c:	4b04      	ldr	r3, [pc, #16]	@ (8003a70 <HAL_RCC_GetClockConfig+0x60>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0207 	and.w	r2, r3, #7
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	601a      	str	r2, [r3, #0]
}
 8003a68:	bf00      	nop
 8003a6a:	3708      	adds	r7, #8
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	58004000 	.word	0x58004000

08003a74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003a74:	b590      	push	{r4, r7, lr}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2bb0      	cmp	r3, #176	@ 0xb0
 8003a80:	d903      	bls.n	8003a8a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003a82:	4b15      	ldr	r3, [pc, #84]	@ (8003ad8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a86:	60fb      	str	r3, [r7, #12]
 8003a88:	e007      	b.n	8003a9a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	091b      	lsrs	r3, r3, #4
 8003a8e:	f003 030f 	and.w	r3, r3, #15
 8003a92:	4a11      	ldr	r2, [pc, #68]	@ (8003ad8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a98:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003a9a:	f7ff f976 	bl	8002d8a <LL_RCC_GetAHB4Prescaler>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	091b      	lsrs	r3, r3, #4
 8003aa2:	f003 030f 	and.w	r3, r3, #15
 8003aa6:	4a0d      	ldr	r2, [pc, #52]	@ (8003adc <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8003ae0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8003abc:	0c9c      	lsrs	r4, r3, #18
 8003abe:	f7fe feb7 	bl	8002830 <HAL_PWREx_GetVoltageRange>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4620      	mov	r0, r4
 8003ac8:	f000 f80c 	bl	8003ae4 <RCC_SetFlashLatency>
 8003acc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3714      	adds	r7, #20
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd90      	pop	{r4, r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	08008c74 	.word	0x08008c74
 8003adc:	08008c14 	.word	0x08008c14
 8003ae0:	431bde83 	.word	0x431bde83

08003ae4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003ae4:	b590      	push	{r4, r7, lr}
 8003ae6:	b093      	sub	sp, #76	@ 0x4c
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003aee:	4b37      	ldr	r3, [pc, #220]	@ (8003bcc <RCC_SetFlashLatency+0xe8>)
 8003af0:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8003af4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003af6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003afa:	4a35      	ldr	r2, [pc, #212]	@ (8003bd0 <RCC_SetFlashLatency+0xec>)
 8003afc:	f107 031c 	add.w	r3, r7, #28
 8003b00:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b02:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003b06:	4b33      	ldr	r3, [pc, #204]	@ (8003bd4 <RCC_SetFlashLatency+0xf0>)
 8003b08:	f107 040c 	add.w	r4, r7, #12
 8003b0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003b12:	2300      	movs	r3, #0
 8003b14:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b1c:	d11a      	bne.n	8003b54 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003b1e:	2300      	movs	r3, #0
 8003b20:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b22:	e013      	b.n	8003b4c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003b24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	3348      	adds	r3, #72	@ 0x48
 8003b2a:	443b      	add	r3, r7
 8003b2c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d807      	bhi.n	8003b46 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003b36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	3348      	adds	r3, #72	@ 0x48
 8003b3c:	443b      	add	r3, r7
 8003b3e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003b42:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8003b44:	e020      	b.n	8003b88 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003b46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b48:	3301      	adds	r3, #1
 8003b4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b4e:	2b03      	cmp	r3, #3
 8003b50:	d9e8      	bls.n	8003b24 <RCC_SetFlashLatency+0x40>
 8003b52:	e019      	b.n	8003b88 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003b54:	2300      	movs	r3, #0
 8003b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b58:	e013      	b.n	8003b82 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	3348      	adds	r3, #72	@ 0x48
 8003b60:	443b      	add	r3, r7
 8003b62:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d807      	bhi.n	8003b7c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003b6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	3348      	adds	r3, #72	@ 0x48
 8003b72:	443b      	add	r3, r7
 8003b74:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003b78:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8003b7a:	e005      	b.n	8003b88 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003b7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b7e:	3301      	adds	r3, #1
 8003b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d9e8      	bls.n	8003b5a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003b88:	4b13      	ldr	r3, [pc, #76]	@ (8003bd8 <RCC_SetFlashLatency+0xf4>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f023 0207 	bic.w	r2, r3, #7
 8003b90:	4911      	ldr	r1, [pc, #68]	@ (8003bd8 <RCC_SetFlashLatency+0xf4>)
 8003b92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b94:	4313      	orrs	r3, r2
 8003b96:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003b98:	f7fe f98e 	bl	8001eb8 <HAL_GetTick>
 8003b9c:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003b9e:	e008      	b.n	8003bb2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003ba0:	f7fe f98a 	bl	8001eb8 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e007      	b.n	8003bc2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003bb2:	4b09      	ldr	r3, [pc, #36]	@ (8003bd8 <RCC_SetFlashLatency+0xf4>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d1ef      	bne.n	8003ba0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	374c      	adds	r7, #76	@ 0x4c
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd90      	pop	{r4, r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	08008a70 	.word	0x08008a70
 8003bd0:	08008a80 	.word	0x08008a80
 8003bd4:	08008a8c 	.word	0x08008a8c
 8003bd8:	58004000 	.word	0x58004000

08003bdc <LL_RCC_LSE_IsEnabled>:
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003be0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d101      	bne.n	8003bf4 <LL_RCC_LSE_IsEnabled+0x18>
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e000      	b.n	8003bf6 <LL_RCC_LSE_IsEnabled+0x1a>
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <LL_RCC_LSE_IsReady>:
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003c04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d101      	bne.n	8003c18 <LL_RCC_LSE_IsReady+0x18>
 8003c14:	2301      	movs	r3, #1
 8003c16:	e000      	b.n	8003c1a <LL_RCC_LSE_IsReady+0x1a>
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <LL_RCC_MSI_EnablePLLMode>:
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003c28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c32:	f043 0304 	orr.w	r3, r3, #4
 8003c36:	6013      	str	r3, [r2, #0]
}
 8003c38:	bf00      	nop
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <LL_RCC_SetRFWKPClockSource>:
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003c4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c52:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <LL_RCC_SetSMPSClockSource>:
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003c76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7c:	f023 0203 	bic.w	r2, r3, #3
 8003c80:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <LL_RCC_SetSMPSPrescaler>:
{
 8003c96:	b480      	push	{r7}
 8003c98:	b083      	sub	sp, #12
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003c9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003ca8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <LL_RCC_SetUSARTClockSource>:
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003cc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cce:	f023 0203 	bic.w	r2, r3, #3
 8003cd2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <LL_RCC_SetLPUARTClockSource>:
{
 8003cea:	b480      	push	{r7}
 8003cec:	b083      	sub	sp, #12
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003cf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cfa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003cfe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003d0a:	bf00      	nop
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <LL_RCC_SetI2CClockSource>:
{
 8003d16:	b480      	push	{r7}
 8003d18:	b083      	sub	sp, #12
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003d1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d22:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	091b      	lsrs	r3, r3, #4
 8003d2a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003d2e:	43db      	mvns	r3, r3
 8003d30:	401a      	ands	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	011b      	lsls	r3, r3, #4
 8003d36:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003d3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <LL_RCC_SetLPTIMClockSource>:
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003d58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d5c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	0c1b      	lsrs	r3, r3, #16
 8003d64:	041b      	lsls	r3, r3, #16
 8003d66:	43db      	mvns	r3, r3
 8003d68:	401a      	ands	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	041b      	lsls	r3, r3, #16
 8003d6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d72:	4313      	orrs	r3, r2
 8003d74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <LL_RCC_SetSAIClockSource>:
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003d8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d94:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d98:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <LL_RCC_SetRNGClockSource>:
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003db8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dc0:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003dc4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <LL_RCC_SetCLK48ClockSource>:
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003de4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dec:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003df0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <LL_RCC_SetUSBClockSource>:
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f7ff ffe3 	bl	8003ddc <LL_RCC_SetCLK48ClockSource>
}
 8003e16:	bf00      	nop
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <LL_RCC_SetADCClockSource>:
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003e26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e2e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003e32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003e3e:	bf00      	nop
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <LL_RCC_SetRTCClockSource>:
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003e52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e5a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003e6a:	bf00      	nop
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <LL_RCC_GetRTCClockSource>:
{
 8003e76:	b480      	push	{r7}
 8003e78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003e7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <LL_RCC_ForceBackupDomainReset>:
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003e94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ea4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003ea8:	bf00      	nop
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003eb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ebe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ec2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ec6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003eca:	bf00      	nop
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <LL_RCC_PLLSAI1_Enable>:
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003ed8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ee2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003ee6:	6013      	str	r3, [r2, #0]
}
 8003ee8:	bf00      	nop
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <LL_RCC_PLLSAI1_Disable>:
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003ef6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f00:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f04:	6013      	str	r3, [r2, #0]
}
 8003f06:	bf00      	nop
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <LL_RCC_PLLSAI1_IsReady>:
{
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003f14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f22:	d101      	bne.n	8003f28 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003f24:	2301      	movs	r3, #1
 8003f26:	e000      	b.n	8003f2a <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b088      	sub	sp, #32
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003f40:	2300      	movs	r3, #0
 8003f42:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d034      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f54:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003f58:	d021      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003f5a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003f5e:	d81b      	bhi.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f60:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f64:	d01d      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003f66:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f6a:	d815      	bhi.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00b      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003f70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f74:	d110      	bne.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003f76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f84:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003f86:	e00d      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3304      	adds	r3, #4
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 f94d 	bl	800422c <RCCEx_PLLSAI1_ConfigNP>
 8003f92:	4603      	mov	r3, r0
 8003f94:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003f96:	e005      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	77fb      	strb	r3, [r7, #31]
        break;
 8003f9c:	e002      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003f9e:	bf00      	nop
 8003fa0:	e000      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003fa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fa4:	7ffb      	ldrb	r3, [r7, #31]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d105      	bne.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7ff fee8 	bl	8003d84 <LL_RCC_SetSAIClockSource>
 8003fb4:	e001      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb6:	7ffb      	ldrb	r3, [r7, #31]
 8003fb8:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d046      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003fc6:	f7ff ff56 	bl	8003e76 <LL_RCC_GetRTCClockSource>
 8003fca:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d03c      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003fd6:	f7fe fc1b 	bl	8002810 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d105      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7ff ff30 	bl	8003e4a <LL_RCC_SetRTCClockSource>
 8003fea:	e02e      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003fec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ff4:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003ff6:	f7ff ff4b 	bl	8003e90 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003ffa:	f7ff ff5a 	bl	8003eb2 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004008:	4313      	orrs	r3, r2
 800400a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800400c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004016:	f7ff fde1 	bl	8003bdc <LL_RCC_LSE_IsEnabled>
 800401a:	4603      	mov	r3, r0
 800401c:	2b01      	cmp	r3, #1
 800401e:	d114      	bne.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004020:	f7fd ff4a 	bl	8001eb8 <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004026:	e00b      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004028:	f7fd ff46 	bl	8001eb8 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004036:	4293      	cmp	r3, r2
 8004038:	d902      	bls.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	77fb      	strb	r3, [r7, #31]
              break;
 800403e:	e004      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004040:	f7ff fdde 	bl	8003c00 <LL_RCC_LSE_IsReady>
 8004044:	4603      	mov	r3, r0
 8004046:	2b01      	cmp	r3, #1
 8004048:	d1ee      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800404a:	7ffb      	ldrb	r3, [r7, #31]
 800404c:	77bb      	strb	r3, [r7, #30]
 800404e:	e001      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004050:	7ffb      	ldrb	r3, [r7, #31]
 8004052:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	2b00      	cmp	r3, #0
 800405e:	d004      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff fe2a 	bl	8003cbe <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d004      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff fe35 	bl	8003cea <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0310 	and.w	r3, r3, #16
 8004088:	2b00      	cmp	r3, #0
 800408a:	d004      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff fe5d 	bl	8003d50 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0320 	and.w	r3, r3, #32
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d004      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7ff fe52 	bl	8003d50 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d004      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	4618      	mov	r0, r3
 80040be:	f7ff fe2a 	bl	8003d16 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0308 	and.w	r3, r3, #8
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d004      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7ff fe1f 	bl	8003d16 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d022      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7ff fe8d 	bl	8003e08 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040f6:	d107      	bne.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80040f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004102:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004106:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800410c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004110:	d10b      	bne.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	3304      	adds	r3, #4
 8004116:	4618      	mov	r0, r3
 8004118:	f000 f8e3 	bl	80042e2 <RCCEx_PLLSAI1_ConfigNQ>
 800411c:	4603      	mov	r3, r0
 800411e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004120:	7ffb      	ldrb	r3, [r7, #31]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8004126:	7ffb      	ldrb	r3, [r7, #31]
 8004128:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004132:	2b00      	cmp	r3, #0
 8004134:	d02b      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800413a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800413e:	d008      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004144:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004148:	d003      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800414e:	2b00      	cmp	r3, #0
 8004150:	d105      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff fe2a 	bl	8003db0 <LL_RCC_SetRNGClockSource>
 800415c:	e00a      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004162:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	2000      	movs	r0, #0
 800416a:	f7ff fe21 	bl	8003db0 <LL_RCC_SetRNGClockSource>
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f7ff fe34 	bl	8003ddc <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004178:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800417c:	d107      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800417e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004188:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800418c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004196:	2b00      	cmp	r3, #0
 8004198:	d022      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800419e:	4618      	mov	r0, r3
 80041a0:	f7ff fe3d 	bl	8003e1e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041ac:	d107      	bne.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80041ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041bc:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041c6:	d10b      	bne.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3304      	adds	r3, #4
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 f8e3 	bl	8004398 <RCCEx_PLLSAI1_ConfigNR>
 80041d2:	4603      	mov	r3, r0
 80041d4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80041d6:	7ffb      	ldrb	r3, [r7, #31]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d001      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80041dc:	7ffb      	ldrb	r3, [r7, #31]
 80041de:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d004      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7ff fd26 	bl	8003c42 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d009      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004206:	4618      	mov	r0, r3
 8004208:	f7ff fd45 	bl	8003c96 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004210:	4618      	mov	r0, r3
 8004212:	f7ff fd2c 	bl	8003c6e <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8004216:	7fbb      	ldrb	r3, [r7, #30]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3720      	adds	r7, #32
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8004224:	f7ff fcfe 	bl	8003c24 <LL_RCC_MSI_EnablePLLMode>
}
 8004228:	bf00      	nop
 800422a:	bd80      	pop	{r7, pc}

0800422c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004234:	2300      	movs	r3, #0
 8004236:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004238:	f7ff fe5b 	bl	8003ef2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800423c:	f7fd fe3c 	bl	8001eb8 <HAL_GetTick>
 8004240:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004242:	e009      	b.n	8004258 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004244:	f7fd fe38 	bl	8001eb8 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d902      	bls.n	8004258 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	73fb      	strb	r3, [r7, #15]
      break;
 8004256:	e004      	b.n	8004262 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004258:	f7ff fe5a 	bl	8003f10 <LL_RCC_PLLSAI1_IsReady>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1f0      	bne.n	8004244 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004262:	7bfb      	ldrb	r3, [r7, #15]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d137      	bne.n	80042d8 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004268:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	021b      	lsls	r3, r3, #8
 8004278:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800427c:	4313      	orrs	r3, r2
 800427e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004280:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004292:	4313      	orrs	r3, r2
 8004294:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004296:	f7ff fe1d 	bl	8003ed4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800429a:	f7fd fe0d 	bl	8001eb8 <HAL_GetTick>
 800429e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80042a0:	e009      	b.n	80042b6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042a2:	f7fd fe09 	bl	8001eb8 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d902      	bls.n	80042b6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	73fb      	strb	r3, [r7, #15]
        break;
 80042b4:	e004      	b.n	80042c0 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80042b6:	f7ff fe2b 	bl	8003f10 <LL_RCC_PLLSAI1_IsReady>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d1f0      	bne.n	80042a2 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d108      	bne.n	80042d8 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80042c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042ca:	691a      	ldr	r2, [r3, #16]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80042d4:	4313      	orrs	r3, r2
 80042d6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b084      	sub	sp, #16
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042ea:	2300      	movs	r3, #0
 80042ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80042ee:	f7ff fe00 	bl	8003ef2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80042f2:	f7fd fde1 	bl	8001eb8 <HAL_GetTick>
 80042f6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80042f8:	e009      	b.n	800430e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042fa:	f7fd fddd 	bl	8001eb8 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d902      	bls.n	800430e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	73fb      	strb	r3, [r7, #15]
      break;
 800430c:	e004      	b.n	8004318 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800430e:	f7ff fdff 	bl	8003f10 <LL_RCC_PLLSAI1_IsReady>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1f0      	bne.n	80042fa <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004318:	7bfb      	ldrb	r3, [r7, #15]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d137      	bne.n	800438e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800431e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	021b      	lsls	r3, r3, #8
 800432e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004332:	4313      	orrs	r3, r2
 8004334:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004336:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004348:	4313      	orrs	r3, r2
 800434a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800434c:	f7ff fdc2 	bl	8003ed4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004350:	f7fd fdb2 	bl	8001eb8 <HAL_GetTick>
 8004354:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004356:	e009      	b.n	800436c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004358:	f7fd fdae 	bl	8001eb8 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d902      	bls.n	800436c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	73fb      	strb	r3, [r7, #15]
        break;
 800436a:	e004      	b.n	8004376 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800436c:	f7ff fdd0 	bl	8003f10 <LL_RCC_PLLSAI1_IsReady>
 8004370:	4603      	mov	r3, r0
 8004372:	2b01      	cmp	r3, #1
 8004374:	d1f0      	bne.n	8004358 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004376:	7bfb      	ldrb	r3, [r7, #15]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d108      	bne.n	800438e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800437c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004380:	691a      	ldr	r2, [r3, #16]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800438a:	4313      	orrs	r3, r2
 800438c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800438e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004390:	4618      	mov	r0, r3
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043a0:	2300      	movs	r3, #0
 80043a2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80043a4:	f7ff fda5 	bl	8003ef2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80043a8:	f7fd fd86 	bl	8001eb8 <HAL_GetTick>
 80043ac:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80043ae:	e009      	b.n	80043c4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043b0:	f7fd fd82 	bl	8001eb8 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d902      	bls.n	80043c4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	73fb      	strb	r3, [r7, #15]
      break;
 80043c2:	e004      	b.n	80043ce <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80043c4:	f7ff fda4 	bl	8003f10 <LL_RCC_PLLSAI1_IsReady>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1f0      	bne.n	80043b0 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80043ce:	7bfb      	ldrb	r3, [r7, #15]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d137      	bne.n	8004444 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80043d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	021b      	lsls	r3, r3, #8
 80043e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80043e8:	4313      	orrs	r3, r2
 80043ea:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80043ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80043fe:	4313      	orrs	r3, r2
 8004400:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004402:	f7ff fd67 	bl	8003ed4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004406:	f7fd fd57 	bl	8001eb8 <HAL_GetTick>
 800440a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800440c:	e009      	b.n	8004422 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800440e:	f7fd fd53 	bl	8001eb8 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d902      	bls.n	8004422 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	73fb      	strb	r3, [r7, #15]
        break;
 8004420:	e004      	b.n	800442c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004422:	f7ff fd75 	bl	8003f10 <LL_RCC_PLLSAI1_IsReady>
 8004426:	4603      	mov	r3, r0
 8004428:	2b01      	cmp	r3, #1
 800442a:	d1f0      	bne.n	800440e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800442c:	7bfb      	ldrb	r3, [r7, #15]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d108      	bne.n	8004444 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004432:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004436:	691a      	ldr	r2, [r3, #16]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004440:	4313      	orrs	r3, r2
 8004442:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004444:	7bfb      	ldrb	r3, [r7, #15]
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
	...

08004450 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e09f      	b.n	80045a2 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d106      	bne.n	800447c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f7fd fae2 	bl	8001a40 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2202      	movs	r2, #2
 8004480:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004484:	4b49      	ldr	r3, [pc, #292]	@ (80045ac <HAL_RTC_Init+0x15c>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f003 0310 	and.w	r3, r3, #16
 800448c:	2b10      	cmp	r3, #16
 800448e:	d07e      	beq.n	800458e <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	22ca      	movs	r2, #202	@ 0xca
 8004496:	625a      	str	r2, [r3, #36]	@ 0x24
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2253      	movs	r2, #83	@ 0x53
 800449e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f8ab 	bl	80045fc <RTC_EnterInitMode>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00a      	beq.n	80044c2 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	22ff      	movs	r2, #255	@ 0xff
 80044b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2204      	movs	r2, #4
 80044b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	73fb      	strb	r3, [r7, #15]
 80044c0:	e067      	b.n	8004592 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	6812      	ldr	r2, [r2, #0]
 80044cc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80044d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044d4:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	6899      	ldr	r1, [r3, #8]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	431a      	orrs	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	431a      	orrs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	68d2      	ldr	r2, [r2, #12]
 80044fc:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	6919      	ldr	r1, [r3, #16]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	041a      	lsls	r2, r3, #16
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68da      	ldr	r2, [r3, #12]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004520:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 0203 	bic.w	r2, r2, #3
 8004530:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	69da      	ldr	r2, [r3, #28]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	431a      	orrs	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f003 0320 	and.w	r3, r3, #32
 8004554:	2b00      	cmp	r3, #0
 8004556:	d113      	bne.n	8004580 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 f829 	bl	80045b0 <HAL_RTC_WaitForSynchro>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00d      	beq.n	8004580 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	22ff      	movs	r2, #255	@ 0xff
 800456a:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2204      	movs	r2, #4
 8004570:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e010      	b.n	80045a2 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	22ff      	movs	r2, #255	@ 0xff
 8004586:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8004588:	2300      	movs	r3, #0
 800458a:	73fb      	strb	r3, [r7, #15]
 800458c:	e001      	b.n	8004592 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004592:	7bfb      	ldrb	r3, [r7, #15]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d103      	bne.n	80045a0 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 80045a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	40002800 	.word	0x40002800

080045b0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68da      	ldr	r2, [r3, #12]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80045c6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80045c8:	f7fd fc76 	bl	8001eb8 <HAL_GetTick>
 80045cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80045ce:	e009      	b.n	80045e4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80045d0:	f7fd fc72 	bl	8001eb8 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80045de:	d901      	bls.n	80045e4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e007      	b.n	80045f4 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f003 0320 	and.w	r3, r3, #32
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0ee      	beq.n	80045d0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3710      	adds	r7, #16
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800460e:	2b00      	cmp	r3, #0
 8004610:	d119      	bne.n	8004646 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f04f 32ff 	mov.w	r2, #4294967295
 800461a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800461c:	f7fd fc4c 	bl	8001eb8 <HAL_GetTick>
 8004620:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004622:	e009      	b.n	8004638 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004624:	f7fd fc48 	bl	8001eb8 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004632:	d901      	bls.n	8004638 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e007      	b.n	8004648 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004642:	2b00      	cmp	r3, #0
 8004644:	d0ee      	beq.n	8004624 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d101      	bne.n	800466a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8004666:	2302      	movs	r3, #2
 8004668:	e0a8      	b.n	80047bc <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2202      	movs	r2, #2
 8004676:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	22ca      	movs	r2, #202	@ 0xca
 8004680:	625a      	str	r2, [r3, #36]	@ 0x24
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2253      	movs	r2, #83	@ 0x53
 8004688:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004694:	2b00      	cmp	r3, #0
 8004696:	d020      	beq.n	80046da <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8004698:	f7fd fc0e 	bl	8001eb8 <HAL_GetTick>
 800469c:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800469e:	e015      	b.n	80046cc <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80046a0:	f7fd fc0a 	bl	8001eb8 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80046ae:	d90d      	bls.n	80046cc <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	22ff      	movs	r2, #255	@ 0xff
 80046b6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2203      	movs	r2, #3
 80046bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e077      	b.n	80047bc <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f003 0304 	and.w	r3, r3, #4
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1e2      	bne.n	80046a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046e8:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80046fa:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80046fc:	f7fd fbdc 	bl	8001eb8 <HAL_GetTick>
 8004700:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004702:	e015      	b.n	8004730 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004704:	f7fd fbd8 	bl	8001eb8 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004712:	d90d      	bls.n	8004730 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	22ff      	movs	r2, #255	@ 0xff
 800471a:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2203      	movs	r2, #3
 8004720:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e045      	b.n	80047bc <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f003 0304 	and.w	r3, r3, #4
 800473a:	2b00      	cmp	r3, #0
 800473c:	d0e2      	beq.n	8004704 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 0207 	bic.w	r2, r2, #7
 8004754:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6899      	ldr	r1, [r3, #8]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	430a      	orrs	r2, r1
 8004764:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8004766:	4b17      	ldr	r3, [pc, #92]	@ (80047c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004768:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800476c:	4a15      	ldr	r2, [pc, #84]	@ (80047c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800476e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004772:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8004776:	4b13      	ldr	r3, [pc, #76]	@ (80047c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a12      	ldr	r2, [pc, #72]	@ (80047c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800477c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004780:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004790:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689a      	ldr	r2, [r3, #8]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80047a0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	22ff      	movs	r2, #255	@ 0xff
 80047a8:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3718      	adds	r7, #24
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	58000800 	.word	0x58000800

080047c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e049      	b.n	800486e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d106      	bne.n	80047f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f841 	bl	8004876 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2202      	movs	r2, #2
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	3304      	adds	r3, #4
 8004804:	4619      	mov	r1, r3
 8004806:	4610      	mov	r0, r2
 8004808:	f000 f9be 	bl	8004b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004876:	b480      	push	{r7}
 8004878:	b083      	sub	sp, #12
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800487e:	bf00      	nop
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
	...

0800488c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b01      	cmp	r3, #1
 800489e:	d001      	beq.n	80048a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e036      	b.n	8004912 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2202      	movs	r2, #2
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0201 	orr.w	r2, r2, #1
 80048ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a17      	ldr	r2, [pc, #92]	@ (8004920 <HAL_TIM_Base_Start_IT+0x94>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d004      	beq.n	80048d0 <HAL_TIM_Base_Start_IT+0x44>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048ce:	d115      	bne.n	80048fc <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	4b13      	ldr	r3, [pc, #76]	@ (8004924 <HAL_TIM_Base_Start_IT+0x98>)
 80048d8:	4013      	ands	r3, r2
 80048da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2b06      	cmp	r3, #6
 80048e0:	d015      	beq.n	800490e <HAL_TIM_Base_Start_IT+0x82>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048e8:	d011      	beq.n	800490e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f042 0201 	orr.w	r2, r2, #1
 80048f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048fa:	e008      	b.n	800490e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 0201 	orr.w	r2, r2, #1
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	e000      	b.n	8004910 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800490e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3714      	adds	r7, #20
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	40012c00 	.word	0x40012c00
 8004924:	00010007 	.word	0x00010007

08004928 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d020      	beq.n	800498c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d01b      	beq.n	800498c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f06f 0202 	mvn.w	r2, #2
 800495c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	f003 0303 	and.w	r3, r3, #3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f8e9 	bl	8004b4a <HAL_TIM_IC_CaptureCallback>
 8004978:	e005      	b.n	8004986 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f8db 	bl	8004b36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 f8ec 	bl	8004b5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	f003 0304 	and.w	r3, r3, #4
 8004992:	2b00      	cmp	r3, #0
 8004994:	d020      	beq.n	80049d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f003 0304 	and.w	r3, r3, #4
 800499c:	2b00      	cmp	r3, #0
 800499e:	d01b      	beq.n	80049d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f06f 0204 	mvn.w	r2, #4
 80049a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2202      	movs	r2, #2
 80049ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f8c3 	bl	8004b4a <HAL_TIM_IC_CaptureCallback>
 80049c4:	e005      	b.n	80049d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f8b5 	bl	8004b36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f8c6 	bl	8004b5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	f003 0308 	and.w	r3, r3, #8
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d020      	beq.n	8004a24 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f003 0308 	and.w	r3, r3, #8
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d01b      	beq.n	8004a24 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f06f 0208 	mvn.w	r2, #8
 80049f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2204      	movs	r2, #4
 80049fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	f003 0303 	and.w	r3, r3, #3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f89d 	bl	8004b4a <HAL_TIM_IC_CaptureCallback>
 8004a10:	e005      	b.n	8004a1e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f88f 	bl	8004b36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 f8a0 	bl	8004b5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	f003 0310 	and.w	r3, r3, #16
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d020      	beq.n	8004a70 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f003 0310 	and.w	r3, r3, #16
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d01b      	beq.n	8004a70 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f06f 0210 	mvn.w	r2, #16
 8004a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2208      	movs	r2, #8
 8004a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f877 	bl	8004b4a <HAL_TIM_IC_CaptureCallback>
 8004a5c:	e005      	b.n	8004a6a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f869 	bl	8004b36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 f87a 	bl	8004b5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00c      	beq.n	8004a94 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d007      	beq.n	8004a94 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f06f 0201 	mvn.w	r2, #1
 8004a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f7fc ff28 	bl	80018e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d104      	bne.n	8004aa8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00c      	beq.n	8004ac2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d007      	beq.n	8004ac2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004aba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 f8dd 	bl	8004c7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00c      	beq.n	8004ae6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d007      	beq.n	8004ae6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004ade:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 f8d5 	bl	8004c90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00c      	beq.n	8004b0a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d007      	beq.n	8004b0a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004b02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f834 	bl	8004b72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	f003 0320 	and.w	r3, r3, #32
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00c      	beq.n	8004b2e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f003 0320 	and.w	r3, r3, #32
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d007      	beq.n	8004b2e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f06f 0220 	mvn.w	r2, #32
 8004b26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 f89d 	bl	8004c68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b2e:	bf00      	nop
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b3e:	bf00      	nop
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b083      	sub	sp, #12
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b52:	bf00      	nop
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b083      	sub	sp, #12
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b66:	bf00      	nop
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b72:	b480      	push	{r7}
 8004b74:	b083      	sub	sp, #12
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b7a:	bf00      	nop
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
	...

08004b88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a30      	ldr	r2, [pc, #192]	@ (8004c5c <TIM_Base_SetConfig+0xd4>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d003      	beq.n	8004ba8 <TIM_Base_SetConfig+0x20>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ba6:	d108      	bne.n	8004bba <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a27      	ldr	r2, [pc, #156]	@ (8004c5c <TIM_Base_SetConfig+0xd4>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d00b      	beq.n	8004bda <TIM_Base_SetConfig+0x52>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bc8:	d007      	beq.n	8004bda <TIM_Base_SetConfig+0x52>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a24      	ldr	r2, [pc, #144]	@ (8004c60 <TIM_Base_SetConfig+0xd8>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d003      	beq.n	8004bda <TIM_Base_SetConfig+0x52>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a23      	ldr	r2, [pc, #140]	@ (8004c64 <TIM_Base_SetConfig+0xdc>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d108      	bne.n	8004bec <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004be0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	689a      	ldr	r2, [r3, #8]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a12      	ldr	r2, [pc, #72]	@ (8004c5c <TIM_Base_SetConfig+0xd4>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d007      	beq.n	8004c28 <TIM_Base_SetConfig+0xa0>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a11      	ldr	r2, [pc, #68]	@ (8004c60 <TIM_Base_SetConfig+0xd8>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d003      	beq.n	8004c28 <TIM_Base_SetConfig+0xa0>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a10      	ldr	r2, [pc, #64]	@ (8004c64 <TIM_Base_SetConfig+0xdc>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d103      	bne.n	8004c30 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	691a      	ldr	r2, [r3, #16]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d105      	bne.n	8004c4e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	f023 0201 	bic.w	r2, r3, #1
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	611a      	str	r2, [r3, #16]
  }
}
 8004c4e:	bf00      	nop
 8004c50:	3714      	adds	r7, #20
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	40012c00 	.word	0x40012c00
 8004c60:	40014400 	.word	0x40014400
 8004c64:	40014800 	.word	0x40014800

08004c68 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <LL_RCC_GetUSARTClockSource>:
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004cac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cb0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4013      	ands	r3, r2
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <LL_RCC_GetLPUARTClockSource>:
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004ccc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cd0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4013      	ands	r3, r2
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e042      	b.n	8004d7c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d106      	bne.n	8004d0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f7fc fecf 	bl	8001aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2224      	movs	r2, #36	@ 0x24
 8004d12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 0201 	bic.w	r2, r2, #1
 8004d24:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d002      	beq.n	8004d34 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 fa50 	bl	80051d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f825 	bl	8004d84 <UART_SetConfig>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d101      	bne.n	8004d44 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e01b      	b.n	8004d7c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689a      	ldr	r2, [r3, #8]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f042 0201 	orr.w	r2, r2, #1
 8004d72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 facf 	bl	8005318 <UART_CheckIdleState>
 8004d7a:	4603      	mov	r3, r0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d88:	b08c      	sub	sp, #48	@ 0x30
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	689a      	ldr	r2, [r3, #8]
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	431a      	orrs	r2, r3
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	69db      	ldr	r3, [r3, #28]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	4baf      	ldr	r3, [pc, #700]	@ (8005070 <UART_SetConfig+0x2ec>)
 8004db4:	4013      	ands	r3, r2
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	6812      	ldr	r2, [r2, #0]
 8004dba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004dbc:	430b      	orrs	r3, r1
 8004dbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	68da      	ldr	r2, [r3, #12]
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4aa4      	ldr	r2, [pc, #656]	@ (8005074 <UART_SetConfig+0x2f0>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d004      	beq.n	8004df0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dec:	4313      	orrs	r3, r2
 8004dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004dfa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	6812      	ldr	r2, [r2, #0]
 8004e02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e04:	430b      	orrs	r3, r1
 8004e06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e0e:	f023 010f 	bic.w	r1, r3, #15
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a95      	ldr	r2, [pc, #596]	@ (8005078 <UART_SetConfig+0x2f4>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d125      	bne.n	8004e74 <UART_SetConfig+0xf0>
 8004e28:	2003      	movs	r0, #3
 8004e2a:	f7ff ff3b 	bl	8004ca4 <LL_RCC_GetUSARTClockSource>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b03      	cmp	r3, #3
 8004e32:	d81b      	bhi.n	8004e6c <UART_SetConfig+0xe8>
 8004e34:	a201      	add	r2, pc, #4	@ (adr r2, 8004e3c <UART_SetConfig+0xb8>)
 8004e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3a:	bf00      	nop
 8004e3c:	08004e4d 	.word	0x08004e4d
 8004e40:	08004e5d 	.word	0x08004e5d
 8004e44:	08004e55 	.word	0x08004e55
 8004e48:	08004e65 	.word	0x08004e65
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e52:	e042      	b.n	8004eda <UART_SetConfig+0x156>
 8004e54:	2302      	movs	r3, #2
 8004e56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e5a:	e03e      	b.n	8004eda <UART_SetConfig+0x156>
 8004e5c:	2304      	movs	r3, #4
 8004e5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e62:	e03a      	b.n	8004eda <UART_SetConfig+0x156>
 8004e64:	2308      	movs	r3, #8
 8004e66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e6a:	e036      	b.n	8004eda <UART_SetConfig+0x156>
 8004e6c:	2310      	movs	r3, #16
 8004e6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e72:	e032      	b.n	8004eda <UART_SetConfig+0x156>
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a7e      	ldr	r2, [pc, #504]	@ (8005074 <UART_SetConfig+0x2f0>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d12a      	bne.n	8004ed4 <UART_SetConfig+0x150>
 8004e7e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8004e82:	f7ff ff1f 	bl	8004cc4 <LL_RCC_GetLPUARTClockSource>
 8004e86:	4603      	mov	r3, r0
 8004e88:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e8c:	d01a      	beq.n	8004ec4 <UART_SetConfig+0x140>
 8004e8e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e92:	d81b      	bhi.n	8004ecc <UART_SetConfig+0x148>
 8004e94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e98:	d00c      	beq.n	8004eb4 <UART_SetConfig+0x130>
 8004e9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e9e:	d815      	bhi.n	8004ecc <UART_SetConfig+0x148>
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d003      	beq.n	8004eac <UART_SetConfig+0x128>
 8004ea4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ea8:	d008      	beq.n	8004ebc <UART_SetConfig+0x138>
 8004eaa:	e00f      	b.n	8004ecc <UART_SetConfig+0x148>
 8004eac:	2300      	movs	r3, #0
 8004eae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eb2:	e012      	b.n	8004eda <UART_SetConfig+0x156>
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eba:	e00e      	b.n	8004eda <UART_SetConfig+0x156>
 8004ebc:	2304      	movs	r3, #4
 8004ebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ec2:	e00a      	b.n	8004eda <UART_SetConfig+0x156>
 8004ec4:	2308      	movs	r3, #8
 8004ec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eca:	e006      	b.n	8004eda <UART_SetConfig+0x156>
 8004ecc:	2310      	movs	r3, #16
 8004ece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ed2:	e002      	b.n	8004eda <UART_SetConfig+0x156>
 8004ed4:	2310      	movs	r3, #16
 8004ed6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a65      	ldr	r2, [pc, #404]	@ (8005074 <UART_SetConfig+0x2f0>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	f040 8097 	bne.w	8005014 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ee6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004eea:	2b08      	cmp	r3, #8
 8004eec:	d823      	bhi.n	8004f36 <UART_SetConfig+0x1b2>
 8004eee:	a201      	add	r2, pc, #4	@ (adr r2, 8004ef4 <UART_SetConfig+0x170>)
 8004ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef4:	08004f19 	.word	0x08004f19
 8004ef8:	08004f37 	.word	0x08004f37
 8004efc:	08004f21 	.word	0x08004f21
 8004f00:	08004f37 	.word	0x08004f37
 8004f04:	08004f27 	.word	0x08004f27
 8004f08:	08004f37 	.word	0x08004f37
 8004f0c:	08004f37 	.word	0x08004f37
 8004f10:	08004f37 	.word	0x08004f37
 8004f14:	08004f2f 	.word	0x08004f2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f18:	f7fe fd4e 	bl	80039b8 <HAL_RCC_GetPCLK1Freq>
 8004f1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f1e:	e010      	b.n	8004f42 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f20:	4b56      	ldr	r3, [pc, #344]	@ (800507c <UART_SetConfig+0x2f8>)
 8004f22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f24:	e00d      	b.n	8004f42 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f26:	f7fe fcc7 	bl	80038b8 <HAL_RCC_GetSysClockFreq>
 8004f2a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f2c:	e009      	b.n	8004f42 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f34:	e005      	b.n	8004f42 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8004f36:	2300      	movs	r3, #0
 8004f38:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004f40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 812b 	beq.w	80051a0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4e:	4a4c      	ldr	r2, [pc, #304]	@ (8005080 <UART_SetConfig+0x2fc>)
 8004f50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f54:	461a      	mov	r2, r3
 8004f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f58:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f5c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	685a      	ldr	r2, [r3, #4]
 8004f62:	4613      	mov	r3, r2
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	4413      	add	r3, r2
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d305      	bcc.n	8004f7a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f74:	69ba      	ldr	r2, [r7, #24]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d903      	bls.n	8004f82 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004f80:	e10e      	b.n	80051a0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f84:	2200      	movs	r2, #0
 8004f86:	60bb      	str	r3, [r7, #8]
 8004f88:	60fa      	str	r2, [r7, #12]
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f8e:	4a3c      	ldr	r2, [pc, #240]	@ (8005080 <UART_SetConfig+0x2fc>)
 8004f90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	2200      	movs	r2, #0
 8004f98:	603b      	str	r3, [r7, #0]
 8004f9a:	607a      	str	r2, [r7, #4]
 8004f9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fa0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004fa4:	f7fb f8f2 	bl	800018c <__aeabi_uldivmod>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	460b      	mov	r3, r1
 8004fac:	4610      	mov	r0, r2
 8004fae:	4619      	mov	r1, r3
 8004fb0:	f04f 0200 	mov.w	r2, #0
 8004fb4:	f04f 0300 	mov.w	r3, #0
 8004fb8:	020b      	lsls	r3, r1, #8
 8004fba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004fbe:	0202      	lsls	r2, r0, #8
 8004fc0:	6979      	ldr	r1, [r7, #20]
 8004fc2:	6849      	ldr	r1, [r1, #4]
 8004fc4:	0849      	lsrs	r1, r1, #1
 8004fc6:	2000      	movs	r0, #0
 8004fc8:	460c      	mov	r4, r1
 8004fca:	4605      	mov	r5, r0
 8004fcc:	eb12 0804 	adds.w	r8, r2, r4
 8004fd0:	eb43 0905 	adc.w	r9, r3, r5
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	469a      	mov	sl, r3
 8004fdc:	4693      	mov	fp, r2
 8004fde:	4652      	mov	r2, sl
 8004fe0:	465b      	mov	r3, fp
 8004fe2:	4640      	mov	r0, r8
 8004fe4:	4649      	mov	r1, r9
 8004fe6:	f7fb f8d1 	bl	800018c <__aeabi_uldivmod>
 8004fea:	4602      	mov	r2, r0
 8004fec:	460b      	mov	r3, r1
 8004fee:	4613      	mov	r3, r2
 8004ff0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ff2:	6a3b      	ldr	r3, [r7, #32]
 8004ff4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ff8:	d308      	bcc.n	800500c <UART_SetConfig+0x288>
 8004ffa:	6a3b      	ldr	r3, [r7, #32]
 8004ffc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005000:	d204      	bcs.n	800500c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	6a3a      	ldr	r2, [r7, #32]
 8005008:	60da      	str	r2, [r3, #12]
 800500a:	e0c9      	b.n	80051a0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005012:	e0c5      	b.n	80051a0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	69db      	ldr	r3, [r3, #28]
 8005018:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800501c:	d16d      	bne.n	80050fa <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800501e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005022:	3b01      	subs	r3, #1
 8005024:	2b07      	cmp	r3, #7
 8005026:	d82d      	bhi.n	8005084 <UART_SetConfig+0x300>
 8005028:	a201      	add	r2, pc, #4	@ (adr r2, 8005030 <UART_SetConfig+0x2ac>)
 800502a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502e:	bf00      	nop
 8005030:	08005051 	.word	0x08005051
 8005034:	08005059 	.word	0x08005059
 8005038:	08005085 	.word	0x08005085
 800503c:	0800505f 	.word	0x0800505f
 8005040:	08005085 	.word	0x08005085
 8005044:	08005085 	.word	0x08005085
 8005048:	08005085 	.word	0x08005085
 800504c:	08005067 	.word	0x08005067
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005050:	f7fe fcc8 	bl	80039e4 <HAL_RCC_GetPCLK2Freq>
 8005054:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005056:	e01b      	b.n	8005090 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005058:	4b08      	ldr	r3, [pc, #32]	@ (800507c <UART_SetConfig+0x2f8>)
 800505a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800505c:	e018      	b.n	8005090 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800505e:	f7fe fc2b 	bl	80038b8 <HAL_RCC_GetSysClockFreq>
 8005062:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005064:	e014      	b.n	8005090 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005066:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800506a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800506c:	e010      	b.n	8005090 <UART_SetConfig+0x30c>
 800506e:	bf00      	nop
 8005070:	cfff69f3 	.word	0xcfff69f3
 8005074:	40008000 	.word	0x40008000
 8005078:	40013800 	.word	0x40013800
 800507c:	00f42400 	.word	0x00f42400
 8005080:	08008cb4 	.word	0x08008cb4
      default:
        pclk = 0U;
 8005084:	2300      	movs	r3, #0
 8005086:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800508e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005092:	2b00      	cmp	r3, #0
 8005094:	f000 8084 	beq.w	80051a0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800509c:	4a4b      	ldr	r2, [pc, #300]	@ (80051cc <UART_SetConfig+0x448>)
 800509e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050a2:	461a      	mov	r2, r3
 80050a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80050aa:	005a      	lsls	r2, r3, #1
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	085b      	lsrs	r3, r3, #1
 80050b2:	441a      	add	r2, r3
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050bc:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050be:	6a3b      	ldr	r3, [r7, #32]
 80050c0:	2b0f      	cmp	r3, #15
 80050c2:	d916      	bls.n	80050f2 <UART_SetConfig+0x36e>
 80050c4:	6a3b      	ldr	r3, [r7, #32]
 80050c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050ca:	d212      	bcs.n	80050f2 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050cc:	6a3b      	ldr	r3, [r7, #32]
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	f023 030f 	bic.w	r3, r3, #15
 80050d4:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050d6:	6a3b      	ldr	r3, [r7, #32]
 80050d8:	085b      	lsrs	r3, r3, #1
 80050da:	b29b      	uxth	r3, r3
 80050dc:	f003 0307 	and.w	r3, r3, #7
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	8bfb      	ldrh	r3, [r7, #30]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	8bfa      	ldrh	r2, [r7, #30]
 80050ee:	60da      	str	r2, [r3, #12]
 80050f0:	e056      	b.n	80051a0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80050f8:	e052      	b.n	80051a0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80050fe:	3b01      	subs	r3, #1
 8005100:	2b07      	cmp	r3, #7
 8005102:	d822      	bhi.n	800514a <UART_SetConfig+0x3c6>
 8005104:	a201      	add	r2, pc, #4	@ (adr r2, 800510c <UART_SetConfig+0x388>)
 8005106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510a:	bf00      	nop
 800510c:	0800512d 	.word	0x0800512d
 8005110:	08005135 	.word	0x08005135
 8005114:	0800514b 	.word	0x0800514b
 8005118:	0800513b 	.word	0x0800513b
 800511c:	0800514b 	.word	0x0800514b
 8005120:	0800514b 	.word	0x0800514b
 8005124:	0800514b 	.word	0x0800514b
 8005128:	08005143 	.word	0x08005143
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800512c:	f7fe fc5a 	bl	80039e4 <HAL_RCC_GetPCLK2Freq>
 8005130:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005132:	e010      	b.n	8005156 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005134:	4b26      	ldr	r3, [pc, #152]	@ (80051d0 <UART_SetConfig+0x44c>)
 8005136:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005138:	e00d      	b.n	8005156 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800513a:	f7fe fbbd 	bl	80038b8 <HAL_RCC_GetSysClockFreq>
 800513e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005140:	e009      	b.n	8005156 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005142:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005146:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005148:	e005      	b.n	8005156 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800514a:	2300      	movs	r3, #0
 800514c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005154:	bf00      	nop
    }

    if (pclk != 0U)
 8005156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005158:	2b00      	cmp	r3, #0
 800515a:	d021      	beq.n	80051a0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005160:	4a1a      	ldr	r2, [pc, #104]	@ (80051cc <UART_SetConfig+0x448>)
 8005162:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005166:	461a      	mov	r2, r3
 8005168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516a:	fbb3 f2f2 	udiv	r2, r3, r2
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	085b      	lsrs	r3, r3, #1
 8005174:	441a      	add	r2, r3
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	fbb2 f3f3 	udiv	r3, r2, r3
 800517e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005180:	6a3b      	ldr	r3, [r7, #32]
 8005182:	2b0f      	cmp	r3, #15
 8005184:	d909      	bls.n	800519a <UART_SetConfig+0x416>
 8005186:	6a3b      	ldr	r3, [r7, #32]
 8005188:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800518c:	d205      	bcs.n	800519a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800518e:	6a3b      	ldr	r3, [r7, #32]
 8005190:	b29a      	uxth	r2, r3
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	60da      	str	r2, [r3, #12]
 8005198:	e002      	b.n	80051a0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	2200      	movs	r2, #0
 80051b4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	2200      	movs	r2, #0
 80051ba:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80051bc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3730      	adds	r7, #48	@ 0x30
 80051c4:	46bd      	mov	sp, r7
 80051c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051ca:	bf00      	nop
 80051cc:	08008cb4 	.word	0x08008cb4
 80051d0:	00f42400 	.word	0x00f42400

080051d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e0:	f003 0308 	and.w	r3, r3, #8
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00a      	beq.n	80051fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00a      	beq.n	8005220 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00a      	beq.n	8005242 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	430a      	orrs	r2, r1
 8005240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005246:	f003 0304 	and.w	r3, r3, #4
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00a      	beq.n	8005264 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	430a      	orrs	r2, r1
 8005262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005268:	f003 0310 	and.w	r3, r3, #16
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00a      	beq.n	8005286 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	430a      	orrs	r2, r1
 8005284:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800528a:	f003 0320 	and.w	r3, r3, #32
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00a      	beq.n	80052a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	430a      	orrs	r2, r1
 80052a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d01a      	beq.n	80052ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	430a      	orrs	r2, r1
 80052c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052d2:	d10a      	bne.n	80052ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00a      	beq.n	800530c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	430a      	orrs	r2, r1
 800530a:	605a      	str	r2, [r3, #4]
  }
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b098      	sub	sp, #96	@ 0x60
 800531c:	af02      	add	r7, sp, #8
 800531e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005328:	f7fc fdc6 	bl	8001eb8 <HAL_GetTick>
 800532c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0308 	and.w	r3, r3, #8
 8005338:	2b08      	cmp	r3, #8
 800533a:	d12f      	bne.n	800539c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800533c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005344:	2200      	movs	r2, #0
 8005346:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f88e 	bl	800546c <UART_WaitOnFlagUntilTimeout>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d022      	beq.n	800539c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800535e:	e853 3f00 	ldrex	r3, [r3]
 8005362:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005366:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800536a:	653b      	str	r3, [r7, #80]	@ 0x50
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	461a      	mov	r2, r3
 8005372:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005374:	647b      	str	r3, [r7, #68]	@ 0x44
 8005376:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005378:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800537a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800537c:	e841 2300 	strex	r3, r2, [r1]
 8005380:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005382:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1e6      	bne.n	8005356 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2220      	movs	r2, #32
 800538c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e063      	b.n	8005464 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0304 	and.w	r3, r3, #4
 80053a6:	2b04      	cmp	r3, #4
 80053a8:	d149      	bne.n	800543e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053aa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80053ae:	9300      	str	r3, [sp, #0]
 80053b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053b2:	2200      	movs	r2, #0
 80053b4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 f857 	bl	800546c <UART_WaitOnFlagUntilTimeout>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d03c      	beq.n	800543e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053cc:	e853 3f00 	ldrex	r3, [r3]
 80053d0:	623b      	str	r3, [r7, #32]
   return(result);
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	461a      	mov	r2, r3
 80053e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80053e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053ea:	e841 2300 	strex	r3, r2, [r1]
 80053ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1e6      	bne.n	80053c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	3308      	adds	r3, #8
 80053fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	e853 3f00 	ldrex	r3, [r3]
 8005404:	60fb      	str	r3, [r7, #12]
   return(result);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f023 0301 	bic.w	r3, r3, #1
 800540c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	3308      	adds	r3, #8
 8005414:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005416:	61fa      	str	r2, [r7, #28]
 8005418:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541a:	69b9      	ldr	r1, [r7, #24]
 800541c:	69fa      	ldr	r2, [r7, #28]
 800541e:	e841 2300 	strex	r3, r2, [r1]
 8005422:	617b      	str	r3, [r7, #20]
   return(result);
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1e5      	bne.n	80053f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2220      	movs	r2, #32
 800542e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e012      	b.n	8005464 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2220      	movs	r2, #32
 8005442:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2220      	movs	r2, #32
 800544a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3758      	adds	r7, #88	@ 0x58
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	603b      	str	r3, [r7, #0]
 8005478:	4613      	mov	r3, r2
 800547a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800547c:	e04f      	b.n	800551e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005484:	d04b      	beq.n	800551e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005486:	f7fc fd17 	bl	8001eb8 <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	69ba      	ldr	r2, [r7, #24]
 8005492:	429a      	cmp	r2, r3
 8005494:	d302      	bcc.n	800549c <UART_WaitOnFlagUntilTimeout+0x30>
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d101      	bne.n	80054a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e04e      	b.n	800553e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0304 	and.w	r3, r3, #4
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d037      	beq.n	800551e <UART_WaitOnFlagUntilTimeout+0xb2>
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	2b80      	cmp	r3, #128	@ 0x80
 80054b2:	d034      	beq.n	800551e <UART_WaitOnFlagUntilTimeout+0xb2>
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	2b40      	cmp	r3, #64	@ 0x40
 80054b8:	d031      	beq.n	800551e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	69db      	ldr	r3, [r3, #28]
 80054c0:	f003 0308 	and.w	r3, r3, #8
 80054c4:	2b08      	cmp	r3, #8
 80054c6:	d110      	bne.n	80054ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2208      	movs	r2, #8
 80054ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f000 f838 	bl	8005546 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2208      	movs	r2, #8
 80054da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e029      	b.n	800553e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	69db      	ldr	r3, [r3, #28]
 80054f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054f8:	d111      	bne.n	800551e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005502:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f000 f81e 	bl	8005546 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2220      	movs	r2, #32
 800550e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e00f      	b.n	800553e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	69da      	ldr	r2, [r3, #28]
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	4013      	ands	r3, r2
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	429a      	cmp	r2, r3
 800552c:	bf0c      	ite	eq
 800552e:	2301      	moveq	r3, #1
 8005530:	2300      	movne	r3, #0
 8005532:	b2db      	uxtb	r3, r3
 8005534:	461a      	mov	r2, r3
 8005536:	79fb      	ldrb	r3, [r7, #7]
 8005538:	429a      	cmp	r2, r3
 800553a:	d0a0      	beq.n	800547e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005546:	b480      	push	{r7}
 8005548:	b095      	sub	sp, #84	@ 0x54
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005556:	e853 3f00 	ldrex	r3, [r3]
 800555a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800555c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005562:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	461a      	mov	r2, r3
 800556a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800556c:	643b      	str	r3, [r7, #64]	@ 0x40
 800556e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005570:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005572:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005574:	e841 2300 	strex	r3, r2, [r1]
 8005578:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800557a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1e6      	bne.n	800554e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	3308      	adds	r3, #8
 8005586:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005588:	6a3b      	ldr	r3, [r7, #32]
 800558a:	e853 3f00 	ldrex	r3, [r3]
 800558e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005596:	f023 0301 	bic.w	r3, r3, #1
 800559a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	3308      	adds	r3, #8
 80055a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055ac:	e841 2300 	strex	r3, r2, [r1]
 80055b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1e3      	bne.n	8005580 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d118      	bne.n	80055f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	e853 3f00 	ldrex	r3, [r3]
 80055cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	f023 0310 	bic.w	r3, r3, #16
 80055d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	461a      	mov	r2, r3
 80055dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055de:	61bb      	str	r3, [r7, #24]
 80055e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e2:	6979      	ldr	r1, [r7, #20]
 80055e4:	69ba      	ldr	r2, [r7, #24]
 80055e6:	e841 2300 	strex	r3, r2, [r1]
 80055ea:	613b      	str	r3, [r7, #16]
   return(result);
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1e6      	bne.n	80055c0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2220      	movs	r2, #32
 80055f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005606:	bf00      	nop
 8005608:	3754      	adds	r7, #84	@ 0x54
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005612:	b480      	push	{r7}
 8005614:	b085      	sub	sp, #20
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005620:	2b01      	cmp	r3, #1
 8005622:	d101      	bne.n	8005628 <HAL_UARTEx_DisableFifoMode+0x16>
 8005624:	2302      	movs	r3, #2
 8005626:	e027      	b.n	8005678 <HAL_UARTEx_DisableFifoMode+0x66>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2224      	movs	r2, #36	@ 0x24
 8005634:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f022 0201 	bic.w	r2, r2, #1
 800564e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005656:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2220      	movs	r2, #32
 800566a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3714      	adds	r7, #20
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005694:	2b01      	cmp	r3, #1
 8005696:	d101      	bne.n	800569c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005698:	2302      	movs	r3, #2
 800569a:	e02d      	b.n	80056f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2224      	movs	r2, #36	@ 0x24
 80056a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f022 0201 	bic.w	r2, r2, #1
 80056c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	430a      	orrs	r2, r1
 80056d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 f84f 	bl	800577c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2220      	movs	r2, #32
 80056ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005710:	2b01      	cmp	r3, #1
 8005712:	d101      	bne.n	8005718 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005714:	2302      	movs	r3, #2
 8005716:	e02d      	b.n	8005774 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2224      	movs	r2, #36	@ 0x24
 8005724:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f022 0201 	bic.w	r2, r2, #1
 800573e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	683a      	ldr	r2, [r7, #0]
 8005750:	430a      	orrs	r2, r1
 8005752:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 f811 	bl	800577c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2220      	movs	r2, #32
 8005766:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005788:	2b00      	cmp	r3, #0
 800578a:	d108      	bne.n	800579e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800579c:	e031      	b.n	8005802 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800579e:	2308      	movs	r3, #8
 80057a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80057a2:	2308      	movs	r3, #8
 80057a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	0e5b      	lsrs	r3, r3, #25
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	f003 0307 	and.w	r3, r3, #7
 80057b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	0f5b      	lsrs	r3, r3, #29
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	f003 0307 	and.w	r3, r3, #7
 80057c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057c6:	7bbb      	ldrb	r3, [r7, #14]
 80057c8:	7b3a      	ldrb	r2, [r7, #12]
 80057ca:	4911      	ldr	r1, [pc, #68]	@ (8005810 <UARTEx_SetNbDataToProcess+0x94>)
 80057cc:	5c8a      	ldrb	r2, [r1, r2]
 80057ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80057d2:	7b3a      	ldrb	r2, [r7, #12]
 80057d4:	490f      	ldr	r1, [pc, #60]	@ (8005814 <UARTEx_SetNbDataToProcess+0x98>)
 80057d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80057dc:	b29a      	uxth	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057e4:	7bfb      	ldrb	r3, [r7, #15]
 80057e6:	7b7a      	ldrb	r2, [r7, #13]
 80057e8:	4909      	ldr	r1, [pc, #36]	@ (8005810 <UARTEx_SetNbDataToProcess+0x94>)
 80057ea:	5c8a      	ldrb	r2, [r1, r2]
 80057ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80057f0:	7b7a      	ldrb	r2, [r7, #13]
 80057f2:	4908      	ldr	r1, [pc, #32]	@ (8005814 <UARTEx_SetNbDataToProcess+0x98>)
 80057f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005802:	bf00      	nop
 8005804:	3714      	adds	r7, #20
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	08008ccc 	.word	0x08008ccc
 8005814:	08008cd4 	.word	0x08008cd4

08005818 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005820:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005824:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800582c:	b29a      	uxth	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	b29b      	uxth	r3, r3
 8005832:	43db      	mvns	r3, r3
 8005834:	b29b      	uxth	r3, r3
 8005836:	4013      	ands	r3, r2
 8005838:	b29a      	uxth	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800584e:	b480      	push	{r7}
 8005850:	b085      	sub	sp, #20
 8005852:	af00      	add	r7, sp, #0
 8005854:	60f8      	str	r0, [r7, #12]
 8005856:	1d3b      	adds	r3, r7, #4
 8005858:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2201      	movs	r2, #1
 8005860:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3714      	adds	r7, #20
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b088      	sub	sp, #32
 800588e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005890:	2300      	movs	r3, #0
 8005892:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005894:	f107 0308 	add.w	r3, r7, #8
 8005898:	2218      	movs	r2, #24
 800589a:	2100      	movs	r1, #0
 800589c:	4618      	mov	r0, r3
 800589e:	f001 f92d 	bl	8006afc <Osal_MemSet>
  rq.ogf = 0x3f;
 80058a2:	233f      	movs	r3, #63	@ 0x3f
 80058a4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80058a6:	2381      	movs	r3, #129	@ 0x81
 80058a8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80058aa:	1dfb      	adds	r3, r7, #7
 80058ac:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80058ae:	2301      	movs	r3, #1
 80058b0:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80058b2:	f107 0308 	add.w	r3, r7, #8
 80058b6:	2100      	movs	r1, #0
 80058b8:	4618      	mov	r0, r3
 80058ba:	f001 fba9 	bl	8007010 <hci_send_req>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	da01      	bge.n	80058c8 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80058c4:	23ff      	movs	r3, #255	@ 0xff
 80058c6:	e000      	b.n	80058ca <aci_gap_set_non_discoverable+0x40>
  return status;
 80058c8:	79fb      	ldrb	r3, [r7, #7]
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3720      	adds	r7, #32
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 80058d2:	b5b0      	push	{r4, r5, r7, lr}
 80058d4:	b0ce      	sub	sp, #312	@ 0x138
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	4605      	mov	r5, r0
 80058da:	460c      	mov	r4, r1
 80058dc:	4610      	mov	r0, r2
 80058de:	4619      	mov	r1, r3
 80058e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80058e4:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80058e8:	462a      	mov	r2, r5
 80058ea:	701a      	strb	r2, [r3, #0]
 80058ec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80058f0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80058f4:	4622      	mov	r2, r4
 80058f6:	801a      	strh	r2, [r3, #0]
 80058f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80058fc:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8005900:	4602      	mov	r2, r0
 8005902:	801a      	strh	r2, [r3, #0]
 8005904:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005908:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800590c:	460a      	mov	r2, r1
 800590e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8005910:	f107 0310 	add.w	r3, r7, #16
 8005914:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8005918:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800591c:	3308      	adds	r3, #8
 800591e:	f107 0210 	add.w	r2, r7, #16
 8005922:	4413      	add	r3, r2
 8005924:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8005928:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800592c:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8005930:	4413      	add	r3, r2
 8005932:	3309      	adds	r3, #9
 8005934:	f107 0210 	add.w	r2, r7, #16
 8005938:	4413      	add	r3, r2
 800593a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800593e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005942:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005946:	2200      	movs	r2, #0
 8005948:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800594a:	2300      	movs	r3, #0
 800594c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8005950:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005954:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005958:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800595c:	7812      	ldrb	r2, [r2, #0]
 800595e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005960:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005964:	3301      	adds	r3, #1
 8005966:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800596a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800596e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005972:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8005976:	8812      	ldrh	r2, [r2, #0]
 8005978:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800597c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005980:	3302      	adds	r3, #2
 8005982:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8005986:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800598a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800598e:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8005992:	8812      	ldrh	r2, [r2, #0]
 8005994:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8005998:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800599c:	3302      	adds	r3, #2
 800599e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80059a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80059a6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80059aa:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80059ae:	7812      	ldrb	r2, [r2, #0]
 80059b0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80059b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80059b6:	3301      	adds	r3, #1
 80059b8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80059bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80059c0:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80059c4:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80059c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80059ca:	3301      	adds	r3, #1
 80059cc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80059d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80059d4:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80059d8:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80059da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80059de:	3301      	adds	r3, #1
 80059e0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80059e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80059e8:	3308      	adds	r3, #8
 80059ea:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80059ee:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 80059f2:	4618      	mov	r0, r3
 80059f4:	f001 f872 	bl	8006adc <Osal_MemCpy>
    index_input += Local_Name_Length;
 80059f8:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80059fc:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005a00:	4413      	add	r3, r2
 8005a02:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8005a06:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005a0a:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8005a0e:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8005a10:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005a14:	3301      	adds	r3, #1
 8005a16:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8005a1a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005a1e:	3301      	adds	r3, #1
 8005a20:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8005a24:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f001 f857 	bl	8006adc <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8005a2e:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8005a32:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005a36:	4413      	add	r3, r2
 8005a38:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8005a3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005a40:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8005a44:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8005a46:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005a4a:	3302      	adds	r3, #2
 8005a4c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8005a50:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005a54:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8005a58:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8005a5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005a5e:	3302      	adds	r3, #2
 8005a60:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005a64:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005a68:	2218      	movs	r2, #24
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f001 f845 	bl	8006afc <Osal_MemSet>
  rq.ogf = 0x3f;
 8005a72:	233f      	movs	r3, #63	@ 0x3f
 8005a74:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8005a78:	2383      	movs	r3, #131	@ 0x83
 8005a7a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005a7e:	f107 0310 	add.w	r3, r7, #16
 8005a82:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005a86:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005a8a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005a8e:	f107 030f 	add.w	r3, r7, #15
 8005a92:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005a96:	2301      	movs	r3, #1
 8005a98:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005a9c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005aa0:	2100      	movs	r1, #0
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f001 fab4 	bl	8007010 <hci_send_req>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	da01      	bge.n	8005ab2 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8005aae:	23ff      	movs	r3, #255	@ 0xff
 8005ab0:	e004      	b.n	8005abc <aci_gap_set_discoverable+0x1ea>
  return status;
 8005ab2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005ab6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005aba:	781b      	ldrb	r3, [r3, #0]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bdb0      	pop	{r4, r5, r7, pc}

08005ac6 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b0cc      	sub	sp, #304	@ 0x130
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	4602      	mov	r2, r0
 8005ace:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ad2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005ad6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8005ad8:	f107 0310 	add.w	r3, r7, #16
 8005adc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005ae0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ae4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005ae8:	2200      	movs	r2, #0
 8005aea:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005aec:	2300      	movs	r3, #0
 8005aee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8005af2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005af6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005afa:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005afe:	7812      	ldrb	r2, [r2, #0]
 8005b00:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005b02:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005b06:	3301      	adds	r3, #1
 8005b08:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005b0c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005b10:	2218      	movs	r2, #24
 8005b12:	2100      	movs	r1, #0
 8005b14:	4618      	mov	r0, r3
 8005b16:	f000 fff1 	bl	8006afc <Osal_MemSet>
  rq.ogf = 0x3f;
 8005b1a:	233f      	movs	r3, #63	@ 0x3f
 8005b1c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 8005b20:	2385      	movs	r3, #133	@ 0x85
 8005b22:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005b26:	f107 0310 	add.w	r3, r7, #16
 8005b2a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005b2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005b32:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005b36:	f107 030f 	add.w	r3, r7, #15
 8005b3a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005b44:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005b48:	2100      	movs	r1, #0
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f001 fa60 	bl	8007010 <hci_send_req>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	da01      	bge.n	8005b5a <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8005b56:	23ff      	movs	r3, #255	@ 0xff
 8005b58:	e004      	b.n	8005b64 <aci_gap_set_io_capability+0x9e>
  return status;
 8005b5a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005b5e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005b62:	781b      	ldrb	r3, [r3, #0]
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8005b6e:	b5b0      	push	{r4, r5, r7, lr}
 8005b70:	b0cc      	sub	sp, #304	@ 0x130
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	4605      	mov	r5, r0
 8005b76:	460c      	mov	r4, r1
 8005b78:	4610      	mov	r0, r2
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005b80:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005b84:	462a      	mov	r2, r5
 8005b86:	701a      	strb	r2, [r3, #0]
 8005b88:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005b8c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005b90:	4622      	mov	r2, r4
 8005b92:	701a      	strb	r2, [r3, #0]
 8005b94:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005b98:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	701a      	strb	r2, [r3, #0]
 8005ba0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ba4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005ba8:	460a      	mov	r2, r1
 8005baa:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8005bac:	f107 0310 	add.w	r3, r7, #16
 8005bb0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005bb4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005bb8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8005bc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005bca:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005bce:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005bd2:	7812      	ldrb	r2, [r2, #0]
 8005bd4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005bd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005bda:	3301      	adds	r3, #1
 8005bdc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8005be0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005be4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005be8:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005bec:	7812      	ldrb	r2, [r2, #0]
 8005bee:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005bf0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 8005bfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005bfe:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005c02:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8005c06:	7812      	ldrb	r2, [r2, #0]
 8005c08:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005c0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005c0e:	3301      	adds	r3, #1
 8005c10:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8005c14:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005c18:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005c1c:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8005c20:	7812      	ldrb	r2, [r2, #0]
 8005c22:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8005c24:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005c28:	3301      	adds	r3, #1
 8005c2a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8005c2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005c32:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8005c36:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005c38:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8005c42:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005c46:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8005c4a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005c4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005c50:	3301      	adds	r3, #1
 8005c52:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8005c56:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005c5a:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8005c5e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8005c60:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005c64:	3301      	adds	r3, #1
 8005c66:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8005c6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005c6e:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8005c72:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8005c76:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005c7a:	3304      	adds	r3, #4
 8005c7c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8005c80:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005c84:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8005c88:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8005c8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005c8e:	3301      	adds	r3, #1
 8005c90:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005c94:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005c98:	2218      	movs	r2, #24
 8005c9a:	2100      	movs	r1, #0
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f000 ff2d 	bl	8006afc <Osal_MemSet>
  rq.ogf = 0x3f;
 8005ca2:	233f      	movs	r3, #63	@ 0x3f
 8005ca4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 8005ca8:	2386      	movs	r3, #134	@ 0x86
 8005caa:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005cae:	f107 0310 	add.w	r3, r7, #16
 8005cb2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005cb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005cba:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005cbe:	f107 030f 	add.w	r3, r7, #15
 8005cc2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005ccc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f001 f99c 	bl	8007010 <hci_send_req>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	da01      	bge.n	8005ce2 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8005cde:	23ff      	movs	r3, #255	@ 0xff
 8005ce0:	e004      	b.n	8005cec <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8005ce2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ce6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005cea:	781b      	ldrb	r3, [r3, #0]
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bdb0      	pop	{r4, r5, r7, pc}

08005cf6 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b0cc      	sub	sp, #304	@ 0x130
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005d02:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005d06:	6019      	str	r1, [r3, #0]
 8005d08:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005d0c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005d10:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8005d12:	f107 0310 	add.w	r3, r7, #16
 8005d16:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005d1a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005d1e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005d22:	2200      	movs	r2, #0
 8005d24:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005d26:	2300      	movs	r3, #0
 8005d28:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8005d2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005d30:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005d34:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005d38:	8812      	ldrh	r2, [r2, #0]
 8005d3a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005d3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005d40:	3302      	adds	r3, #2
 8005d42:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 8005d46:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005d4a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005d4e:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8005d52:	6812      	ldr	r2, [r2, #0]
 8005d54:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8005d58:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005d5c:	3304      	adds	r3, #4
 8005d5e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005d62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005d66:	2218      	movs	r2, #24
 8005d68:	2100      	movs	r1, #0
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 fec6 	bl	8006afc <Osal_MemSet>
  rq.ogf = 0x3f;
 8005d70:	233f      	movs	r3, #63	@ 0x3f
 8005d72:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8005d76:	2388      	movs	r3, #136	@ 0x88
 8005d78:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005d7c:	f107 0310 	add.w	r3, r7, #16
 8005d80:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005d84:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005d88:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005d8c:	f107 030f 	add.w	r3, r7, #15
 8005d90:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005d94:	2301      	movs	r3, #1
 8005d96:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005d9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005d9e:	2100      	movs	r1, #0
 8005da0:	4618      	mov	r0, r3
 8005da2:	f001 f935 	bl	8007010 <hci_send_req>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	da01      	bge.n	8005db0 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8005dac:	23ff      	movs	r3, #255	@ 0xff
 8005dae:	e004      	b.n	8005dba <aci_gap_pass_key_resp+0xc4>
  return status;
 8005db0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005db4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005db8:	781b      	ldrb	r3, [r3, #0]
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8005dc4:	b590      	push	{r4, r7, lr}
 8005dc6:	b0cd      	sub	sp, #308	@ 0x134
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	4604      	mov	r4, r0
 8005dcc:	4608      	mov	r0, r1
 8005dce:	4611      	mov	r1, r2
 8005dd0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005dd4:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8005dd8:	6013      	str	r3, [r2, #0]
 8005dda:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005dde:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005de2:	4622      	mov	r2, r4
 8005de4:	701a      	strb	r2, [r3, #0]
 8005de6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005dea:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005dee:	4602      	mov	r2, r0
 8005df0:	701a      	strb	r2, [r3, #0]
 8005df2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005df6:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8005dfa:	460a      	mov	r2, r1
 8005dfc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8005dfe:	f107 0310 	add.w	r3, r7, #16
 8005e02:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005e06:	f107 0308 	add.w	r3, r7, #8
 8005e0a:	2207      	movs	r2, #7
 8005e0c:	2100      	movs	r1, #0
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f000 fe74 	bl	8006afc <Osal_MemSet>
  int index_input = 0;
 8005e14:	2300      	movs	r3, #0
 8005e16:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 8005e1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005e1e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005e22:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005e26:	7812      	ldrb	r2, [r2, #0]
 8005e28:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005e2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005e2e:	3301      	adds	r3, #1
 8005e30:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8005e34:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005e38:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005e3c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005e40:	7812      	ldrb	r2, [r2, #0]
 8005e42:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005e44:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005e48:	3301      	adds	r3, #1
 8005e4a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8005e4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005e52:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005e56:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8005e5a:	7812      	ldrb	r2, [r2, #0]
 8005e5c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005e5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005e62:	3301      	adds	r3, #1
 8005e64:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005e68:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005e6c:	2218      	movs	r2, #24
 8005e6e:	2100      	movs	r1, #0
 8005e70:	4618      	mov	r0, r3
 8005e72:	f000 fe43 	bl	8006afc <Osal_MemSet>
  rq.ogf = 0x3f;
 8005e76:	233f      	movs	r3, #63	@ 0x3f
 8005e78:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 8005e7c:	238a      	movs	r3, #138	@ 0x8a
 8005e7e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005e82:	f107 0310 	add.w	r3, r7, #16
 8005e86:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005e8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005e8e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8005e92:	f107 0308 	add.w	r3, r7, #8
 8005e96:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8005e9a:	2307      	movs	r3, #7
 8005e9c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005ea0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005ea4:	2100      	movs	r1, #0
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f001 f8b2 	bl	8007010 <hci_send_req>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	da01      	bge.n	8005eb6 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8005eb2:	23ff      	movs	r3, #255	@ 0xff
 8005eb4:	e02e      	b.n	8005f14 <aci_gap_init+0x150>
  if ( resp.Status )
 8005eb6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005eba:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d005      	beq.n	8005ed0 <aci_gap_init+0x10c>
    return resp.Status;
 8005ec4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ec8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	e021      	b.n	8005f14 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8005ed0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ed4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005ed8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ee2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8005eea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005eee:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005ef2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8005efc:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8005efe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005f02:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005f06:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005f10:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd90      	pop	{r4, r7, pc}

08005f1e <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b0cc      	sub	sp, #304	@ 0x130
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	4602      	mov	r2, r0
 8005f26:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005f2a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005f2e:	6019      	str	r1, [r3, #0]
 8005f30:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005f34:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005f38:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8005f3a:	f107 0310 	add.w	r3, r7, #16
 8005f3e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005f42:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005f46:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8005f54:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005f58:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005f5c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005f60:	7812      	ldrb	r2, [r2, #0]
 8005f62:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005f64:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005f68:	3301      	adds	r3, #1
 8005f6a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8005f6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005f72:	1c58      	adds	r0, r3, #1
 8005f74:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005f78:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005f7c:	781a      	ldrb	r2, [r3, #0]
 8005f7e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005f82:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005f86:	6819      	ldr	r1, [r3, #0]
 8005f88:	f000 fda8 	bl	8006adc <Osal_MemCpy>
  index_input += AdvDataLen;
 8005f8c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005f90:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005fa0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005fa4:	2218      	movs	r2, #24
 8005fa6:	2100      	movs	r1, #0
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f000 fda7 	bl	8006afc <Osal_MemSet>
  rq.ogf = 0x3f;
 8005fae:	233f      	movs	r3, #63	@ 0x3f
 8005fb0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8005fb4:	238e      	movs	r3, #142	@ 0x8e
 8005fb6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005fba:	f107 0310 	add.w	r3, r7, #16
 8005fbe:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005fc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005fc6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005fca:	f107 030f 	add.w	r3, r7, #15
 8005fce:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005fd8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005fdc:	2100      	movs	r1, #0
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f001 f816 	bl	8007010 <hci_send_req>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	da01      	bge.n	8005fee <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8005fea:	23ff      	movs	r3, #255	@ 0xff
 8005fec:	e004      	b.n	8005ff8 <aci_gap_update_adv_data+0xda>
  return status;
 8005fee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ff2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005ff6:	781b      	ldrb	r3, [r3, #0]
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8006002:	b580      	push	{r7, lr}
 8006004:	b088      	sub	sp, #32
 8006006:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006008:	2300      	movs	r3, #0
 800600a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800600c:	f107 0308 	add.w	r3, r7, #8
 8006010:	2218      	movs	r2, #24
 8006012:	2100      	movs	r1, #0
 8006014:	4618      	mov	r0, r3
 8006016:	f000 fd71 	bl	8006afc <Osal_MemSet>
  rq.ogf = 0x3f;
 800601a:	233f      	movs	r3, #63	@ 0x3f
 800601c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800601e:	2392      	movs	r3, #146	@ 0x92
 8006020:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006022:	1dfb      	adds	r3, r7, #7
 8006024:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006026:	2301      	movs	r3, #1
 8006028:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800602a:	f107 0308 	add.w	r3, r7, #8
 800602e:	2100      	movs	r1, #0
 8006030:	4618      	mov	r0, r3
 8006032:	f000 ffed 	bl	8007010 <hci_send_req>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	da01      	bge.n	8006040 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800603c:	23ff      	movs	r3, #255	@ 0xff
 800603e:	e000      	b.n	8006042 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8006040:	79fb      	ldrb	r3, [r7, #7]
}
 8006042:	4618      	mov	r0, r3
 8006044:	3720      	adds	r7, #32
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800604a:	b580      	push	{r7, lr}
 800604c:	b0cc      	sub	sp, #304	@ 0x130
 800604e:	af00      	add	r7, sp, #0
 8006050:	4602      	mov	r2, r0
 8006052:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006056:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800605a:	801a      	strh	r2, [r3, #0]
 800605c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006060:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8006064:	460a      	mov	r2, r1
 8006066:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8006068:	f107 0310 	add.w	r3, r7, #16
 800606c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006070:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006074:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006078:	2200      	movs	r2, #0
 800607a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800607c:	2300      	movs	r3, #0
 800607e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8006082:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006086:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800608a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800608e:	8812      	ldrh	r2, [r2, #0]
 8006090:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006092:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006096:	3302      	adds	r3, #2
 8006098:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800609c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80060a0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80060a4:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80060a8:	7812      	ldrb	r2, [r2, #0]
 80060aa:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80060ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80060b0:	3301      	adds	r3, #1
 80060b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80060b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80060ba:	2218      	movs	r2, #24
 80060bc:	2100      	movs	r1, #0
 80060be:	4618      	mov	r0, r3
 80060c0:	f000 fd1c 	bl	8006afc <Osal_MemSet>
  rq.ogf = 0x3f;
 80060c4:	233f      	movs	r3, #63	@ 0x3f
 80060c6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 80060ca:	23a5      	movs	r3, #165	@ 0xa5
 80060cc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80060d0:	f107 0310 	add.w	r3, r7, #16
 80060d4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80060d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80060dc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80060e0:	f107 030f 	add.w	r3, r7, #15
 80060e4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80060e8:	2301      	movs	r3, #1
 80060ea:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80060ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80060f2:	2100      	movs	r1, #0
 80060f4:	4618      	mov	r0, r3
 80060f6:	f000 ff8b 	bl	8007010 <hci_send_req>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	da01      	bge.n	8006104 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8006100:	23ff      	movs	r3, #255	@ 0xff
 8006102:	e004      	b.n	800610e <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8006104:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006108:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800610c:	781b      	ldrb	r3, [r3, #0]
}
 800610e:	4618      	mov	r0, r3
 8006110:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b088      	sub	sp, #32
 800611c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800611e:	2300      	movs	r3, #0
 8006120:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006122:	f107 0308 	add.w	r3, r7, #8
 8006126:	2218      	movs	r2, #24
 8006128:	2100      	movs	r1, #0
 800612a:	4618      	mov	r0, r3
 800612c:	f000 fce6 	bl	8006afc <Osal_MemSet>
  rq.ogf = 0x3f;
 8006130:	233f      	movs	r3, #63	@ 0x3f
 8006132:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8006134:	f240 1301 	movw	r3, #257	@ 0x101
 8006138:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800613a:	1dfb      	adds	r3, r7, #7
 800613c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800613e:	2301      	movs	r3, #1
 8006140:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006142:	f107 0308 	add.w	r3, r7, #8
 8006146:	2100      	movs	r1, #0
 8006148:	4618      	mov	r0, r3
 800614a:	f000 ff61 	bl	8007010 <hci_send_req>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	da01      	bge.n	8006158 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8006154:	23ff      	movs	r3, #255	@ 0xff
 8006156:	e000      	b.n	800615a <aci_gatt_init+0x42>
  return status;
 8006158:	79fb      	ldrb	r3, [r7, #7]
}
 800615a:	4618      	mov	r0, r3
 800615c:	3720      	adds	r7, #32
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8006162:	b590      	push	{r4, r7, lr}
 8006164:	b0cf      	sub	sp, #316	@ 0x13c
 8006166:	af00      	add	r7, sp, #0
 8006168:	4604      	mov	r4, r0
 800616a:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800616e:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8006172:	6001      	str	r1, [r0, #0]
 8006174:	4610      	mov	r0, r2
 8006176:	4619      	mov	r1, r3
 8006178:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800617c:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8006180:	4622      	mov	r2, r4
 8006182:	701a      	strb	r2, [r3, #0]
 8006184:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006188:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800618c:	4602      	mov	r2, r0
 800618e:	701a      	strb	r2, [r3, #0]
 8006190:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006194:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8006198:	460a      	mov	r2, r1
 800619a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800619c:	f107 0310 	add.w	r3, r7, #16
 80061a0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80061a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80061a8:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d00a      	beq.n	80061c8 <aci_gatt_add_service+0x66>
 80061b2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80061b6:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d101      	bne.n	80061c4 <aci_gatt_add_service+0x62>
 80061c0:	2311      	movs	r3, #17
 80061c2:	e002      	b.n	80061ca <aci_gatt_add_service+0x68>
 80061c4:	2301      	movs	r3, #1
 80061c6:	e000      	b.n	80061ca <aci_gatt_add_service+0x68>
 80061c8:	2303      	movs	r3, #3
 80061ca:	f107 0210 	add.w	r2, r7, #16
 80061ce:	4413      	add	r3, r2
 80061d0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80061d4:	f107 030c 	add.w	r3, r7, #12
 80061d8:	2203      	movs	r2, #3
 80061da:	2100      	movs	r1, #0
 80061dc:	4618      	mov	r0, r3
 80061de:	f000 fc8d 	bl	8006afc <Osal_MemSet>
  int index_input = 0;
 80061e2:	2300      	movs	r3, #0
 80061e4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80061e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80061ec:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80061f0:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 80061f4:	7812      	ldrb	r2, [r2, #0]
 80061f6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80061f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80061fc:	3301      	adds	r3, #1
 80061fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8006202:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006206:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d002      	beq.n	8006216 <aci_gatt_add_service+0xb4>
 8006210:	2b02      	cmp	r3, #2
 8006212:	d004      	beq.n	800621e <aci_gatt_add_service+0xbc>
 8006214:	e007      	b.n	8006226 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8006216:	2302      	movs	r3, #2
 8006218:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800621c:	e005      	b.n	800622a <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800621e:	2310      	movs	r3, #16
 8006220:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8006224:	e001      	b.n	800622a <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8006226:	2397      	movs	r3, #151	@ 0x97
 8006228:	e06c      	b.n	8006304 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800622a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800622e:	1c58      	adds	r0, r3, #1
 8006230:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8006234:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006238:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800623c:	6819      	ldr	r1, [r3, #0]
 800623e:	f000 fc4d 	bl	8006adc <Osal_MemCpy>
    index_input += size;
 8006242:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8006246:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800624a:	4413      	add	r3, r2
 800624c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8006250:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006254:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006258:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800625c:	7812      	ldrb	r2, [r2, #0]
 800625e:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8006260:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006264:	3301      	adds	r3, #1
 8006266:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800626a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800626e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006272:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8006276:	7812      	ldrb	r2, [r2, #0]
 8006278:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800627a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800627e:	3301      	adds	r3, #1
 8006280:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006284:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006288:	2218      	movs	r2, #24
 800628a:	2100      	movs	r1, #0
 800628c:	4618      	mov	r0, r3
 800628e:	f000 fc35 	bl	8006afc <Osal_MemSet>
  rq.ogf = 0x3f;
 8006292:	233f      	movs	r3, #63	@ 0x3f
 8006294:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8006298:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800629c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80062a0:	f107 0310 	add.w	r3, r7, #16
 80062a4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80062a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80062ac:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 80062b0:	f107 030c 	add.w	r3, r7, #12
 80062b4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 80062b8:	2303      	movs	r3, #3
 80062ba:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80062be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80062c2:	2100      	movs	r1, #0
 80062c4:	4618      	mov	r0, r3
 80062c6:	f000 fea3 	bl	8007010 <hci_send_req>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	da01      	bge.n	80062d4 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80062d0:	23ff      	movs	r3, #255	@ 0xff
 80062d2:	e017      	b.n	8006304 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 80062d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80062d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d005      	beq.n	80062ee <aci_gatt_add_service+0x18c>
    return resp.Status;
 80062e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80062e6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	e00a      	b.n	8006304 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 80062ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80062f2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80062f6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8006300:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800630a:	46bd      	mov	sp, r7
 800630c:	bd90      	pop	{r4, r7, pc}

0800630e <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800630e:	b590      	push	{r4, r7, lr}
 8006310:	b0d1      	sub	sp, #324	@ 0x144
 8006312:	af00      	add	r7, sp, #0
 8006314:	4604      	mov	r4, r0
 8006316:	4608      	mov	r0, r1
 8006318:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800631c:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8006320:	600a      	str	r2, [r1, #0]
 8006322:	4619      	mov	r1, r3
 8006324:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006328:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800632c:	4622      	mov	r2, r4
 800632e:	801a      	strh	r2, [r3, #0]
 8006330:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006334:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8006338:	4602      	mov	r2, r0
 800633a:	701a      	strb	r2, [r3, #0]
 800633c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006340:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8006344:	460a      	mov	r2, r1
 8006346:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8006348:	f107 0318 	add.w	r3, r7, #24
 800634c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8006350:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006354:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d00a      	beq.n	8006374 <aci_gatt_add_char+0x66>
 800635e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006362:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	2b02      	cmp	r3, #2
 800636a:	d101      	bne.n	8006370 <aci_gatt_add_char+0x62>
 800636c:	2313      	movs	r3, #19
 800636e:	e002      	b.n	8006376 <aci_gatt_add_char+0x68>
 8006370:	2303      	movs	r3, #3
 8006372:	e000      	b.n	8006376 <aci_gatt_add_char+0x68>
 8006374:	2305      	movs	r3, #5
 8006376:	f107 0218 	add.w	r2, r7, #24
 800637a:	4413      	add	r3, r2
 800637c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006380:	f107 0314 	add.w	r3, r7, #20
 8006384:	2203      	movs	r2, #3
 8006386:	2100      	movs	r1, #0
 8006388:	4618      	mov	r0, r3
 800638a:	f000 fbb7 	bl	8006afc <Osal_MemSet>
  int index_input = 0;
 800638e:	2300      	movs	r3, #0
 8006390:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8006394:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8006398:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800639c:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80063a0:	8812      	ldrh	r2, [r2, #0]
 80063a2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80063a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80063a8:	3302      	adds	r3, #2
 80063aa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 80063ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80063b2:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80063b6:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 80063ba:	7812      	ldrb	r2, [r2, #0]
 80063bc:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80063be:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80063c2:	3301      	adds	r3, #1
 80063c4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80063c8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80063cc:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d002      	beq.n	80063dc <aci_gatt_add_char+0xce>
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d004      	beq.n	80063e4 <aci_gatt_add_char+0xd6>
 80063da:	e007      	b.n	80063ec <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 80063dc:	2302      	movs	r3, #2
 80063de:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80063e2:	e005      	b.n	80063f0 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80063e4:	2310      	movs	r3, #16
 80063e6:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80063ea:	e001      	b.n	80063f0 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80063ec:	2397      	movs	r3, #151	@ 0x97
 80063ee:	e091      	b.n	8006514 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80063f0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80063f4:	1cd8      	adds	r0, r3, #3
 80063f6:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 80063fa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80063fe:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8006402:	6819      	ldr	r1, [r3, #0]
 8006404:	f000 fb6a 	bl	8006adc <Osal_MemCpy>
    index_input += size;
 8006408:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800640c:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8006410:	4413      	add	r3, r2
 8006412:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8006416:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800641a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800641e:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8006422:	8812      	ldrh	r2, [r2, #0]
 8006424:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006426:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800642a:	3302      	adds	r3, #2
 800642c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8006430:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006434:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8006438:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800643a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800643e:	3301      	adds	r3, #1
 8006440:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8006444:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006448:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800644c:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800644e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006452:	3301      	adds	r3, #1
 8006454:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8006458:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800645c:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8006460:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8006462:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006466:	3301      	adds	r3, #1
 8006468:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800646c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006470:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8006474:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8006476:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800647a:	3301      	adds	r3, #1
 800647c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8006480:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006484:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8006488:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800648a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800648e:	3301      	adds	r3, #1
 8006490:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006494:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8006498:	2218      	movs	r2, #24
 800649a:	2100      	movs	r1, #0
 800649c:	4618      	mov	r0, r3
 800649e:	f000 fb2d 	bl	8006afc <Osal_MemSet>
  rq.ogf = 0x3f;
 80064a2:	233f      	movs	r3, #63	@ 0x3f
 80064a4:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 80064a8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80064ac:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 80064b0:	f107 0318 	add.w	r3, r7, #24
 80064b4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 80064b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80064bc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 80064c0:	f107 0314 	add.w	r3, r7, #20
 80064c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 80064c8:	2303      	movs	r3, #3
 80064ca:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80064ce:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80064d2:	2100      	movs	r1, #0
 80064d4:	4618      	mov	r0, r3
 80064d6:	f000 fd9b 	bl	8007010 <hci_send_req>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	da01      	bge.n	80064e4 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 80064e0:	23ff      	movs	r3, #255	@ 0xff
 80064e2:	e017      	b.n	8006514 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 80064e4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80064e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d005      	beq.n	80064fe <aci_gatt_add_char+0x1f0>
    return resp.Status;
 80064f2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80064f6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	e00a      	b.n	8006514 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 80064fe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006502:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006506:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800650a:	b29a      	uxth	r2, r3
 800650c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8006510:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800651a:	46bd      	mov	sp, r7
 800651c:	bd90      	pop	{r4, r7, pc}

0800651e <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800651e:	b5b0      	push	{r4, r5, r7, lr}
 8006520:	b0cc      	sub	sp, #304	@ 0x130
 8006522:	af00      	add	r7, sp, #0
 8006524:	4605      	mov	r5, r0
 8006526:	460c      	mov	r4, r1
 8006528:	4610      	mov	r0, r2
 800652a:	4619      	mov	r1, r3
 800652c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006530:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006534:	462a      	mov	r2, r5
 8006536:	801a      	strh	r2, [r3, #0]
 8006538:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800653c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006540:	4622      	mov	r2, r4
 8006542:	801a      	strh	r2, [r3, #0]
 8006544:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006548:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800654c:	4602      	mov	r2, r0
 800654e:	701a      	strb	r2, [r3, #0]
 8006550:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006554:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8006558:	460a      	mov	r2, r1
 800655a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800655c:	f107 0310 	add.w	r3, r7, #16
 8006560:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006564:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006568:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800656c:	2200      	movs	r2, #0
 800656e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006570:	2300      	movs	r3, #0
 8006572:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8006576:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800657a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800657e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006582:	8812      	ldrh	r2, [r2, #0]
 8006584:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006586:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800658a:	3302      	adds	r3, #2
 800658c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8006590:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006594:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006598:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800659c:	8812      	ldrh	r2, [r2, #0]
 800659e:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80065a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80065a4:	3302      	adds	r3, #2
 80065a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 80065aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80065ae:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80065b2:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 80065b6:	7812      	ldrb	r2, [r2, #0]
 80065b8:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80065ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80065be:	3301      	adds	r3, #1
 80065c0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80065c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80065c8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80065cc:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 80065d0:	7812      	ldrb	r2, [r2, #0]
 80065d2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80065d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80065d8:	3301      	adds	r3, #1
 80065da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80065de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80065e2:	1d98      	adds	r0, r3, #6
 80065e4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80065e8:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	461a      	mov	r2, r3
 80065f0:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80065f4:	f000 fa72 	bl	8006adc <Osal_MemCpy>
  index_input += Char_Value_Length;
 80065f8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80065fc:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006606:	4413      	add	r3, r2
 8006608:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800660c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006610:	2218      	movs	r2, #24
 8006612:	2100      	movs	r1, #0
 8006614:	4618      	mov	r0, r3
 8006616:	f000 fa71 	bl	8006afc <Osal_MemSet>
  rq.ogf = 0x3f;
 800661a:	233f      	movs	r3, #63	@ 0x3f
 800661c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8006620:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8006624:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006628:	f107 0310 	add.w	r3, r7, #16
 800662c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006630:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006634:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006638:	f107 030f 	add.w	r3, r7, #15
 800663c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006640:	2301      	movs	r3, #1
 8006642:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006646:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800664a:	2100      	movs	r1, #0
 800664c:	4618      	mov	r0, r3
 800664e:	f000 fcdf 	bl	8007010 <hci_send_req>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	da01      	bge.n	800665c <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8006658:	23ff      	movs	r3, #255	@ 0xff
 800665a:	e004      	b.n	8006666 <aci_gatt_update_char_value+0x148>
  return status;
 800665c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006660:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006664:	781b      	ldrb	r3, [r3, #0]
}
 8006666:	4618      	mov	r0, r3
 8006668:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800666c:	46bd      	mov	sp, r7
 800666e:	bdb0      	pop	{r4, r5, r7, pc}

08006670 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b0cc      	sub	sp, #304	@ 0x130
 8006674:	af00      	add	r7, sp, #0
 8006676:	4602      	mov	r2, r0
 8006678:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800667c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006680:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8006682:	f107 0310 	add.w	r3, r7, #16
 8006686:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800668a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800668e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006692:	2200      	movs	r2, #0
 8006694:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006696:	2300      	movs	r3, #0
 8006698:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800669c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80066a0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80066a4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80066a8:	8812      	ldrh	r2, [r2, #0]
 80066aa:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80066ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80066b0:	3302      	adds	r3, #2
 80066b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80066b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80066ba:	2218      	movs	r2, #24
 80066bc:	2100      	movs	r1, #0
 80066be:	4618      	mov	r0, r3
 80066c0:	f000 fa1c 	bl	8006afc <Osal_MemSet>
  rq.ogf = 0x3f;
 80066c4:	233f      	movs	r3, #63	@ 0x3f
 80066c6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 80066ca:	f240 1325 	movw	r3, #293	@ 0x125
 80066ce:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80066d2:	f107 0310 	add.w	r3, r7, #16
 80066d6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80066da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80066de:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80066e2:	f107 030f 	add.w	r3, r7, #15
 80066e6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80066ea:	2301      	movs	r3, #1
 80066ec:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80066f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80066f4:	2100      	movs	r1, #0
 80066f6:	4618      	mov	r0, r3
 80066f8:	f000 fc8a 	bl	8007010 <hci_send_req>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	da01      	bge.n	8006706 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8006702:	23ff      	movs	r3, #255	@ 0xff
 8006704:	e004      	b.n	8006710 <aci_gatt_confirm_indication+0xa0>
  return status;
 8006706:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800670a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800670e:	781b      	ldrb	r3, [r3, #0]
}
 8006710:	4618      	mov	r0, r3
 8006712:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b0cc      	sub	sp, #304	@ 0x130
 800671e:	af00      	add	r7, sp, #0
 8006720:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006724:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006728:	601a      	str	r2, [r3, #0]
 800672a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800672e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006732:	4602      	mov	r2, r0
 8006734:	701a      	strb	r2, [r3, #0]
 8006736:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800673a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800673e:	460a      	mov	r2, r1
 8006740:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8006742:	f107 0310 	add.w	r3, r7, #16
 8006746:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800674a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800674e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006752:	2200      	movs	r2, #0
 8006754:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006756:	2300      	movs	r3, #0
 8006758:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800675c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006760:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006764:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006768:	7812      	ldrb	r2, [r2, #0]
 800676a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800676c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006770:	3301      	adds	r3, #1
 8006772:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 8006776:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800677a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800677e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006782:	7812      	ldrb	r2, [r2, #0]
 8006784:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006786:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800678a:	3301      	adds	r3, #1
 800678c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8006790:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006794:	1c98      	adds	r0, r3, #2
 8006796:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800679a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800679e:	781a      	ldrb	r2, [r3, #0]
 80067a0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80067a4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80067a8:	6819      	ldr	r1, [r3, #0]
 80067aa:	f000 f997 	bl	8006adc <Osal_MemCpy>
  index_input += Length;
 80067ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80067b2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80067bc:	4413      	add	r3, r2
 80067be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80067c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80067c6:	2218      	movs	r2, #24
 80067c8:	2100      	movs	r1, #0
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 f996 	bl	8006afc <Osal_MemSet>
  rq.ogf = 0x3f;
 80067d0:	233f      	movs	r3, #63	@ 0x3f
 80067d2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 80067d6:	230c      	movs	r3, #12
 80067d8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80067dc:	f107 0310 	add.w	r3, r7, #16
 80067e0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80067e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80067e8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80067ec:	f107 030f 	add.w	r3, r7, #15
 80067f0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80067f4:	2301      	movs	r3, #1
 80067f6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80067fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80067fe:	2100      	movs	r1, #0
 8006800:	4618      	mov	r0, r3
 8006802:	f000 fc05 	bl	8007010 <hci_send_req>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	da01      	bge.n	8006810 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800680c:	23ff      	movs	r3, #255	@ 0xff
 800680e:	e004      	b.n	800681a <aci_hal_write_config_data+0x100>
  return status;
 8006810:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006814:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006818:	781b      	ldrb	r3, [r3, #0]
}
 800681a:	4618      	mov	r0, r3
 800681c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b0cc      	sub	sp, #304	@ 0x130
 8006828:	af00      	add	r7, sp, #0
 800682a:	4602      	mov	r2, r0
 800682c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006830:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006834:	701a      	strb	r2, [r3, #0]
 8006836:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800683a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800683e:	460a      	mov	r2, r1
 8006840:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8006842:	f107 0310 	add.w	r3, r7, #16
 8006846:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800684a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800684e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006852:	2200      	movs	r2, #0
 8006854:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006856:	2300      	movs	r3, #0
 8006858:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800685c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006860:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006864:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006868:	7812      	ldrb	r2, [r2, #0]
 800686a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800686c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006870:	3301      	adds	r3, #1
 8006872:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 8006876:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800687a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800687e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006882:	7812      	ldrb	r2, [r2, #0]
 8006884:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006886:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800688a:	3301      	adds	r3, #1
 800688c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006890:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006894:	2218      	movs	r2, #24
 8006896:	2100      	movs	r1, #0
 8006898:	4618      	mov	r0, r3
 800689a:	f000 f92f 	bl	8006afc <Osal_MemSet>
  rq.ogf = 0x3f;
 800689e:	233f      	movs	r3, #63	@ 0x3f
 80068a0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 80068a4:	230f      	movs	r3, #15
 80068a6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80068aa:	f107 0310 	add.w	r3, r7, #16
 80068ae:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80068b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80068b6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80068ba:	f107 030f 	add.w	r3, r7, #15
 80068be:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80068c2:	2301      	movs	r3, #1
 80068c4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80068c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80068cc:	2100      	movs	r1, #0
 80068ce:	4618      	mov	r0, r3
 80068d0:	f000 fb9e 	bl	8007010 <hci_send_req>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	da01      	bge.n	80068de <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80068da:	23ff      	movs	r3, #255	@ 0xff
 80068dc:	e004      	b.n	80068e8 <aci_hal_set_tx_power_level+0xc4>
  return status;
 80068de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80068e2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80068e6:	781b      	ldrb	r3, [r3, #0]
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b0cc      	sub	sp, #304	@ 0x130
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	4602      	mov	r2, r0
 80068fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80068fe:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006902:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8006904:	f107 0310 	add.w	r3, r7, #16
 8006908:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800690c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006910:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006914:	2200      	movs	r2, #0
 8006916:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006918:	2300      	movs	r3, #0
 800691a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800691e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006922:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006926:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800692a:	8812      	ldrh	r2, [r2, #0]
 800692c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800692e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006932:	3302      	adds	r3, #2
 8006934:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006938:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800693c:	2218      	movs	r2, #24
 800693e:	2100      	movs	r1, #0
 8006940:	4618      	mov	r0, r3
 8006942:	f000 f8db 	bl	8006afc <Osal_MemSet>
  rq.ogf = 0x3f;
 8006946:	233f      	movs	r3, #63	@ 0x3f
 8006948:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800694c:	2318      	movs	r3, #24
 800694e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006952:	f107 0310 	add.w	r3, r7, #16
 8006956:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800695a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800695e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006962:	f107 030f 	add.w	r3, r7, #15
 8006966:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800696a:	2301      	movs	r3, #1
 800696c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006970:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006974:	2100      	movs	r1, #0
 8006976:	4618      	mov	r0, r3
 8006978:	f000 fb4a 	bl	8007010 <hci_send_req>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	da01      	bge.n	8006986 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8006982:	23ff      	movs	r3, #255	@ 0xff
 8006984:	e004      	b.n	8006990 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8006986:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800698a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800698e:	781b      	ldrb	r3, [r3, #0]
}
 8006990:	4618      	mov	r0, r3
 8006992:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b088      	sub	sp, #32
 800699e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80069a0:	2300      	movs	r3, #0
 80069a2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80069a4:	f107 0308 	add.w	r3, r7, #8
 80069a8:	2218      	movs	r2, #24
 80069aa:	2100      	movs	r1, #0
 80069ac:	4618      	mov	r0, r3
 80069ae:	f000 f8a5 	bl	8006afc <Osal_MemSet>
  rq.ogf = 0x03;
 80069b2:	2303      	movs	r3, #3
 80069b4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80069b6:	2303      	movs	r3, #3
 80069b8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80069ba:	1dfb      	adds	r3, r7, #7
 80069bc:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80069be:	2301      	movs	r3, #1
 80069c0:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80069c2:	f107 0308 	add.w	r3, r7, #8
 80069c6:	2100      	movs	r1, #0
 80069c8:	4618      	mov	r0, r3
 80069ca:	f000 fb21 	bl	8007010 <hci_send_req>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	da01      	bge.n	80069d8 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80069d4:	23ff      	movs	r3, #255	@ 0xff
 80069d6:	e000      	b.n	80069da <hci_reset+0x40>
  return status;
 80069d8:	79fb      	ldrb	r3, [r7, #7]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3720      	adds	r7, #32
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 80069e2:	b590      	push	{r4, r7, lr}
 80069e4:	b0cd      	sub	sp, #308	@ 0x134
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	4604      	mov	r4, r0
 80069ea:	4608      	mov	r0, r1
 80069ec:	4611      	mov	r1, r2
 80069ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80069f2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80069f6:	4622      	mov	r2, r4
 80069f8:	701a      	strb	r2, [r3, #0]
 80069fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80069fe:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006a02:	4602      	mov	r2, r0
 8006a04:	701a      	strb	r2, [r3, #0]
 8006a06:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006a0a:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8006a0e:	460a      	mov	r2, r1
 8006a10:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8006a12:	f107 0310 	add.w	r3, r7, #16
 8006a16:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006a1a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006a1e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006a22:	2200      	movs	r2, #0
 8006a24:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006a26:	2300      	movs	r3, #0
 8006a28:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8006a2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006a30:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006a34:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006a38:	7812      	ldrb	r2, [r2, #0]
 8006a3a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006a3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006a40:	3301      	adds	r3, #1
 8006a42:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8006a46:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006a4a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006a4e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006a52:	7812      	ldrb	r2, [r2, #0]
 8006a54:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006a56:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 8006a60:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006a64:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006a68:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8006a6c:	7812      	ldrb	r2, [r2, #0]
 8006a6e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006a70:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006a74:	3301      	adds	r3, #1
 8006a76:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006a7a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006a7e:	2218      	movs	r2, #24
 8006a80:	2100      	movs	r1, #0
 8006a82:	4618      	mov	r0, r3
 8006a84:	f000 f83a 	bl	8006afc <Osal_MemSet>
  rq.ogf = 0x08;
 8006a88:	2308      	movs	r3, #8
 8006a8a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 8006a8e:	2331      	movs	r3, #49	@ 0x31
 8006a90:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006a94:	f107 0310 	add.w	r3, r7, #16
 8006a98:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006a9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006aa0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006aa4:	f107 030f 	add.w	r3, r7, #15
 8006aa8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006aac:	2301      	movs	r3, #1
 8006aae:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006ab2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006ab6:	2100      	movs	r1, #0
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f000 faa9 	bl	8007010 <hci_send_req>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	da01      	bge.n	8006ac8 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8006ac4:	23ff      	movs	r3, #255	@ 0xff
 8006ac6:	e004      	b.n	8006ad2 <hci_le_set_default_phy+0xf0>
  return status;
 8006ac8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006acc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006ad0:	781b      	ldrb	r3, [r3, #0]
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd90      	pop	{r4, r7, pc}

08006adc <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	68b9      	ldr	r1, [r7, #8]
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f001 ff97 	bl	8008a20 <memcpy>
 8006af2:	4603      	mov	r3, r0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	68b9      	ldr	r1, [r7, #8]
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f001 ff5b 	bl	80089c8 <memset>
 8006b12:	4603      	mov	r3, r0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3710      	adds	r7, #16
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	af00      	add	r7, sp, #0
  return;
 8006b20:	bf00      	nop
}
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr

08006b2a <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	af00      	add	r7, sp, #0
  return;
 8006b2e:	bf00      	nop
}
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8006b38:	b480      	push	{r7}
 8006b3a:	af00      	add	r7, sp, #0
  return;
 8006b3c:	bf00      	nop
}
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8006b46:	b480      	push	{r7}
 8006b48:	af00      	add	r7, sp, #0
  return;
 8006b4a:	bf00      	nop
}
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8006b54:	b480      	push	{r7}
 8006b56:	af00      	add	r7, sp, #0
  return;
 8006b58:	bf00      	nop
}
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8006b62:	b480      	push	{r7}
 8006b64:	af00      	add	r7, sp, #0
  return;
 8006b66:	bf00      	nop
}
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8006b70:	b480      	push	{r7}
 8006b72:	af00      	add	r7, sp, #0
  return;
 8006b74:	bf00      	nop
}
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr

08006b7e <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8006b7e:	b480      	push	{r7}
 8006b80:	af00      	add	r7, sp, #0
  return;
 8006b82:	bf00      	nop
}
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	af00      	add	r7, sp, #0
  return;
 8006b90:	bf00      	nop
}
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr

08006b9a <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	af00      	add	r7, sp, #0
  return;
 8006b9e:	bf00      	nop
}
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8006ba8:	b480      	push	{r7}
 8006baa:	af00      	add	r7, sp, #0
  return;
 8006bac:	bf00      	nop
}
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	af00      	add	r7, sp, #0
  return;
 8006bba:	bf00      	nop
}
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	af00      	add	r7, sp, #0
  return;
 8006bc8:	bf00      	nop
}
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr

08006bd2 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8006bd2:	b480      	push	{r7}
 8006bd4:	af00      	add	r7, sp, #0
  return;
 8006bd6:	bf00      	nop
}
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8006be0:	b480      	push	{r7}
 8006be2:	af00      	add	r7, sp, #0
  return;
 8006be4:	bf00      	nop
}
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr

08006bee <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8006bee:	b480      	push	{r7}
 8006bf0:	af00      	add	r7, sp, #0
  return;
 8006bf2:	bf00      	nop
}
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	af00      	add	r7, sp, #0
  return;
 8006c00:	bf00      	nop
}
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
	...

08006c0c <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8006c10:	4b04      	ldr	r3, [pc, #16]	@ (8006c24 <SVCCTL_Init+0x18>)
 8006c12:	2200      	movs	r2, #0
 8006c14:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8006c16:	4b04      	ldr	r3, [pc, #16]	@ (8006c28 <SVCCTL_Init+0x1c>)
 8006c18:	2200      	movs	r2, #0
 8006c1a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8006c1c:	f000 f806 	bl	8006c2c <SVCCTL_SvcInit>

  return;
 8006c20:	bf00      	nop
}
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	2000002c 	.word	0x2000002c
 8006c28:	2000004c 	.word	0x2000004c

08006c2c <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	af00      	add	r7, sp, #0
  BAS_Init();
 8006c30:	f7ff ff74 	bl	8006b1c <BAS_Init>

  BLS_Init();
 8006c34:	f7ff ff79 	bl	8006b2a <BLS_Init>

  CRS_STM_Init();
 8006c38:	f7ff ff7e 	bl	8006b38 <CRS_STM_Init>

  DIS_Init();
 8006c3c:	f7ff ff83 	bl	8006b46 <DIS_Init>

  EDS_STM_Init();
 8006c40:	f7ff ff88 	bl	8006b54 <EDS_STM_Init>

  HIDS_Init();
 8006c44:	f7ff ff8d 	bl	8006b62 <HIDS_Init>

  HRS_Init();
 8006c48:	f7ff ff92 	bl	8006b70 <HRS_Init>

  HTS_Init();
 8006c4c:	f7ff ff97 	bl	8006b7e <HTS_Init>

  IAS_Init();
 8006c50:	f7ff ff9c 	bl	8006b8c <IAS_Init>

  LLS_Init();
 8006c54:	f7ff ffa1 	bl	8006b9a <LLS_Init>

  TPS_Init();
 8006c58:	f7ff ffa6 	bl	8006ba8 <TPS_Init>

  MOTENV_STM_Init();
 8006c5c:	f7ff ffab 	bl	8006bb6 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8006c60:	f7ff ffb0 	bl	8006bc4 <P2PS_STM_Init>

  ZDD_STM_Init();
 8006c64:	f7ff ffb5 	bl	8006bd2 <ZDD_STM_Init>

  OTAS_STM_Init();
 8006c68:	f7ff ffba 	bl	8006be0 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8006c6c:	f7ff ffc6 	bl	8006bfc <BVOPUS_STM_Init>

  MESH_Init();
 8006c70:	f7ff ffbd 	bl	8006bee <MESH_Init>

  SVCCTL_InitCustomSvc();
 8006c74:	f001 fa5e 	bl	8008134 <SVCCTL_InitCustomSvc>
  
  return;
 8006c78:	bf00      	nop
}
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8006c84:	4b09      	ldr	r3, [pc, #36]	@ (8006cac <SVCCTL_RegisterSvcHandler+0x30>)
 8006c86:	7f1b      	ldrb	r3, [r3, #28]
 8006c88:	4619      	mov	r1, r3
 8006c8a:	4a08      	ldr	r2, [pc, #32]	@ (8006cac <SVCCTL_RegisterSvcHandler+0x30>)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8006c92:	4b06      	ldr	r3, [pc, #24]	@ (8006cac <SVCCTL_RegisterSvcHandler+0x30>)
 8006c94:	7f1b      	ldrb	r3, [r3, #28]
 8006c96:	3301      	adds	r3, #1
 8006c98:	b2da      	uxtb	r2, r3
 8006c9a:	4b04      	ldr	r3, [pc, #16]	@ (8006cac <SVCCTL_RegisterSvcHandler+0x30>)
 8006c9c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8006c9e:	bf00      	nop
}
 8006ca0:	370c      	adds	r7, #12
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	2000002c 	.word	0x2000002c

08006cb0 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b086      	sub	sp, #24
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	3301      	adds	r3, #1
 8006cbc:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	2bff      	cmp	r3, #255	@ 0xff
 8006cc8:	d125      	bne.n	8006d16 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	3302      	adds	r3, #2
 8006cce:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	881b      	ldrh	r3, [r3, #0]
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006cda:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006cde:	d118      	bne.n	8006d12 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	757b      	strb	r3, [r7, #21]
 8006ce4:	e00d      	b.n	8006d02 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8006ce6:	7d7b      	ldrb	r3, [r7, #21]
 8006ce8:	4a1a      	ldr	r2, [pc, #104]	@ (8006d54 <SVCCTL_UserEvtRx+0xa4>)
 8006cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	4798      	blx	r3
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8006cf6:	7dfb      	ldrb	r3, [r7, #23]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d108      	bne.n	8006d0e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8006cfc:	7d7b      	ldrb	r3, [r7, #21]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	757b      	strb	r3, [r7, #21]
 8006d02:	4b14      	ldr	r3, [pc, #80]	@ (8006d54 <SVCCTL_UserEvtRx+0xa4>)
 8006d04:	7f1b      	ldrb	r3, [r3, #28]
 8006d06:	7d7a      	ldrb	r2, [r7, #21]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d3ec      	bcc.n	8006ce6 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8006d0c:	e002      	b.n	8006d14 <SVCCTL_UserEvtRx+0x64>
              break;
 8006d0e:	bf00      	nop
          break;
 8006d10:	e000      	b.n	8006d14 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8006d12:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8006d14:	e000      	b.n	8006d18 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8006d16:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8006d18:	7dfb      	ldrb	r3, [r7, #23]
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	d00f      	beq.n	8006d3e <SVCCTL_UserEvtRx+0x8e>
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	dc10      	bgt.n	8006d44 <SVCCTL_UserEvtRx+0x94>
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d002      	beq.n	8006d2c <SVCCTL_UserEvtRx+0x7c>
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d006      	beq.n	8006d38 <SVCCTL_UserEvtRx+0x88>
 8006d2a:	e00b      	b.n	8006d44 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 feef 	bl	8007b10 <SVCCTL_App_Notification>
 8006d32:	4603      	mov	r3, r0
 8006d34:	75bb      	strb	r3, [r7, #22]
      break;
 8006d36:	e008      	b.n	8006d4a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	75bb      	strb	r3, [r7, #22]
      break;
 8006d3c:	e005      	b.n	8006d4a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	75bb      	strb	r3, [r7, #22]
      break;
 8006d42:	e002      	b.n	8006d4a <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8006d44:	2301      	movs	r3, #1
 8006d46:	75bb      	strb	r3, [r7, #22]
      break;
 8006d48:	bf00      	nop
  }

  return (return_status);
 8006d4a:	7dbb      	ldrb	r3, [r7, #22]
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3718      	adds	r7, #24
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	2000002c 	.word	0x2000002c

08006d58 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b088      	sub	sp, #32
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8006d60:	f107 030c 	add.w	r3, r7, #12
 8006d64:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	212e      	movs	r1, #46	@ 0x2e
 8006d70:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8006d74:	f000 fae8 	bl	8007348 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	330b      	adds	r3, #11
 8006d7c:	78db      	ldrb	r3, [r3, #3]
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3720      	adds	r7, #32
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b088      	sub	sp, #32
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8006d8e:	f107 030c 	add.w	r3, r7, #12
 8006d92:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	210f      	movs	r1, #15
 8006d9e:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8006da2:	f000 fad1 	bl	8007348 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	330b      	adds	r3, #11
 8006daa:	78db      	ldrb	r3, [r3, #3]
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3720      	adds	r7, #32
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b088      	sub	sp, #32
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8006dbc:	f107 030c 	add.w	r3, r7, #12
 8006dc0:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	2110      	movs	r1, #16
 8006dc8:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8006dcc:	f000 fabc 	bl	8007348 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	330b      	adds	r3, #11
 8006dd4:	78db      	ldrb	r3, [r3, #3]
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3720      	adds	r7, #32
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
	...

08006de0 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8006de0:	b480      	push	{r7}
 8006de2:	b08b      	sub	sp, #44	@ 0x2c
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8006de8:	2300      	movs	r3, #0
 8006dea:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8006dec:	2300      	movs	r3, #0
 8006dee:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8006df0:	2300      	movs	r3, #0
 8006df2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8006df4:	2300      	movs	r3, #0
 8006df6:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8006e00:	2300      	movs	r3, #0
 8006e02:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8006e04:	2300      	movs	r3, #0
 8006e06:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8006e08:	4b4a      	ldr	r3, [pc, #296]	@ (8006f34 <SHCI_GetWirelessFwInfo+0x154>)
 8006e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e0c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006e10:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8006e1a:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a44      	ldr	r2, [pc, #272]	@ (8006f38 <SHCI_GetWirelessFwInfo+0x158>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d10f      	bne.n	8006e4c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	695b      	ldr	r3, [r3, #20]
 8006e30:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	69db      	ldr	r3, [r3, #28]
 8006e3c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	617b      	str	r3, [r7, #20]
 8006e4a:	e01a      	b.n	8006e82 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8006e54:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8006e58:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	695b      	ldr	r3, [r3, #20]
 8006e68:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8006e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e84:	0e1b      	lsrs	r3, r3, #24
 8006e86:	b2da      	uxtb	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8006e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e8e:	0c1b      	lsrs	r3, r3, #16
 8006e90:	b2da      	uxtb	r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8006e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e98:	0a1b      	lsrs	r3, r3, #8
 8006e9a:	b2da      	uxtb	r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea2:	091b      	lsrs	r3, r3, #4
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	f003 030f 	and.w	r3, r3, #15
 8006eaa:	b2da      	uxtb	r2, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	f003 030f 	and.w	r3, r3, #15
 8006eb8:	b2da      	uxtb	r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8006ebe:	6a3b      	ldr	r3, [r7, #32]
 8006ec0:	0e1b      	lsrs	r3, r3, #24
 8006ec2:	b2da      	uxtb	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8006ec8:	6a3b      	ldr	r3, [r7, #32]
 8006eca:	0c1b      	lsrs	r3, r3, #16
 8006ecc:	b2da      	uxtb	r2, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8006ed2:	6a3b      	ldr	r3, [r7, #32]
 8006ed4:	0a1b      	lsrs	r3, r3, #8
 8006ed6:	b2da      	uxtb	r2, r3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8006edc:	6a3b      	ldr	r3, [r7, #32]
 8006ede:	b2da      	uxtb	r2, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	b2da      	uxtb	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	0e1b      	lsrs	r3, r3, #24
 8006ef0:	b2da      	uxtb	r2, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	0c1b      	lsrs	r3, r3, #16
 8006efa:	b2da      	uxtb	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	0a1b      	lsrs	r3, r3, #8
 8006f04:	b2da      	uxtb	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	0e1b      	lsrs	r3, r3, #24
 8006f0e:	b2da      	uxtb	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	0c1b      	lsrs	r3, r3, #16
 8006f18:	b2da      	uxtb	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	b2da      	uxtb	r2, r3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	372c      	adds	r7, #44	@ 0x2c
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr
 8006f34:	58004000 	.word	0x58004000
 8006f38:	a94656b9 	.word	0xa94656b9

08006f3c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	4a08      	ldr	r2, [pc, #32]	@ (8006f6c <hci_init+0x30>)
 8006f4c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8006f4e:	4a08      	ldr	r2, [pc, #32]	@ (8006f70 <hci_init+0x34>)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8006f54:	4806      	ldr	r0, [pc, #24]	@ (8006f70 <hci_init+0x34>)
 8006f56:	f000 f979 	bl	800724c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f000 f8da 	bl	8007118 <TlInit>

  return;
 8006f64:	bf00      	nop
}
 8006f66:	3708      	adds	r7, #8
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	2000057c 	.word	0x2000057c
 8006f70:	20000554 	.word	0x20000554

08006f74 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8006f7a:	4822      	ldr	r0, [pc, #136]	@ (8007004 <hci_user_evt_proc+0x90>)
 8006f7c:	f000 fc9c 	bl	80078b8 <LST_is_empty>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d12b      	bne.n	8006fde <hci_user_evt_proc+0x6a>
 8006f86:	4b20      	ldr	r3, [pc, #128]	@ (8007008 <hci_user_evt_proc+0x94>)
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d027      	beq.n	8006fde <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8006f8e:	f107 030c 	add.w	r3, r7, #12
 8006f92:	4619      	mov	r1, r3
 8006f94:	481b      	ldr	r0, [pc, #108]	@ (8007004 <hci_user_evt_proc+0x90>)
 8006f96:	f000 fd1e 	bl	80079d6 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8006f9a:	4b1c      	ldr	r3, [pc, #112]	@ (800700c <hci_user_evt_proc+0x98>)
 8006f9c:	69db      	ldr	r3, [r3, #28]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00c      	beq.n	8006fbc <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8006faa:	4b18      	ldr	r3, [pc, #96]	@ (800700c <hci_user_evt_proc+0x98>)
 8006fac:	69db      	ldr	r3, [r3, #28]
 8006fae:	1d3a      	adds	r2, r7, #4
 8006fb0:	4610      	mov	r0, r2
 8006fb2:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8006fb4:	793a      	ldrb	r2, [r7, #4]
 8006fb6:	4b14      	ldr	r3, [pc, #80]	@ (8007008 <hci_user_evt_proc+0x94>)
 8006fb8:	701a      	strb	r2, [r3, #0]
 8006fba:	e002      	b.n	8006fc2 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006fbc:	4b12      	ldr	r3, [pc, #72]	@ (8007008 <hci_user_evt_proc+0x94>)
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8006fc2:	4b11      	ldr	r3, [pc, #68]	@ (8007008 <hci_user_evt_proc+0x94>)
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d004      	beq.n	8006fd4 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f000 fb9b 	bl	8007708 <TL_MM_EvtDone>
 8006fd2:	e004      	b.n	8006fde <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	480a      	ldr	r0, [pc, #40]	@ (8007004 <hci_user_evt_proc+0x90>)
 8006fda:	f000 fc8f 	bl	80078fc <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8006fde:	4809      	ldr	r0, [pc, #36]	@ (8007004 <hci_user_evt_proc+0x90>)
 8006fe0:	f000 fc6a 	bl	80078b8 <LST_is_empty>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d107      	bne.n	8006ffa <hci_user_evt_proc+0x86>
 8006fea:	4b07      	ldr	r3, [pc, #28]	@ (8007008 <hci_user_evt_proc+0x94>)
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d003      	beq.n	8006ffa <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8006ff2:	4804      	ldr	r0, [pc, #16]	@ (8007004 <hci_user_evt_proc+0x90>)
 8006ff4:	f000 ffb2 	bl	8007f5c <hci_notify_asynch_evt>
  }


  return;
 8006ff8:	bf00      	nop
 8006ffa:	bf00      	nop
}
 8006ffc:	3710      	adds	r7, #16
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	20000054 	.word	0x20000054
 8007008:	20000060 	.word	0x20000060
 800700c:	20000554 	.word	0x20000554

08007010 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b088      	sub	sp, #32
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	460b      	mov	r3, r1
 800701a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800701c:	2000      	movs	r0, #0
 800701e:	f000 f8d1 	bl	80071c4 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8007022:	2300      	movs	r3, #0
 8007024:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	885b      	ldrh	r3, [r3, #2]
 800702a:	b21b      	sxth	r3, r3
 800702c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007030:	b21a      	sxth	r2, r3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	881b      	ldrh	r3, [r3, #0]
 8007036:	029b      	lsls	r3, r3, #10
 8007038:	b21b      	sxth	r3, r3
 800703a:	4313      	orrs	r3, r2
 800703c:	b21b      	sxth	r3, r3
 800703e:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8007040:	4b33      	ldr	r3, [pc, #204]	@ (8007110 <hci_send_req+0x100>)
 8007042:	2201      	movs	r2, #1
 8007044:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	b2d9      	uxtb	r1, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	689a      	ldr	r2, [r3, #8]
 8007050:	8bbb      	ldrh	r3, [r7, #28]
 8007052:	4618      	mov	r0, r3
 8007054:	f000 f890 	bl	8007178 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8007058:	e04e      	b.n	80070f8 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800705a:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800705e:	f000 ff94 	bl	8007f8a <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8007062:	e043      	b.n	80070ec <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8007064:	f107 030c 	add.w	r3, r7, #12
 8007068:	4619      	mov	r1, r3
 800706a:	482a      	ldr	r0, [pc, #168]	@ (8007114 <hci_send_req+0x104>)
 800706c:	f000 fcb3 	bl	80079d6 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	7a5b      	ldrb	r3, [r3, #9]
 8007074:	2b0f      	cmp	r3, #15
 8007076:	d114      	bne.n	80070a2 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	330b      	adds	r3, #11
 800707c:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	885b      	ldrh	r3, [r3, #2]
 8007082:	b29b      	uxth	r3, r3
 8007084:	8bba      	ldrh	r2, [r7, #28]
 8007086:	429a      	cmp	r2, r3
 8007088:	d104      	bne.n	8007094 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	693a      	ldr	r2, [r7, #16]
 8007090:	7812      	ldrb	r2, [r2, #0]
 8007092:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	785b      	ldrb	r3, [r3, #1]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d027      	beq.n	80070ec <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800709c:	2301      	movs	r3, #1
 800709e:	77fb      	strb	r3, [r7, #31]
 80070a0:	e024      	b.n	80070ec <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	330b      	adds	r3, #11
 80070a6:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	8bba      	ldrh	r2, [r7, #28]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d114      	bne.n	80070e0 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	7a9b      	ldrb	r3, [r3, #10]
 80070ba:	3b03      	subs	r3, #3
 80070bc:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	695a      	ldr	r2, [r3, #20]
 80070c2:	7dfb      	ldrb	r3, [r7, #23]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	bfa8      	it	ge
 80070c8:	461a      	movge	r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6918      	ldr	r0, [r3, #16]
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	1cd9      	adds	r1, r3, #3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	695b      	ldr	r3, [r3, #20]
 80070da:	461a      	mov	r2, r3
 80070dc:	f001 fca0 	bl	8008a20 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d001      	beq.n	80070ec <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80070e8:	2301      	movs	r3, #1
 80070ea:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80070ec:	4809      	ldr	r0, [pc, #36]	@ (8007114 <hci_send_req+0x104>)
 80070ee:	f000 fbe3 	bl	80078b8 <LST_is_empty>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d0b5      	beq.n	8007064 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80070f8:	7ffb      	ldrb	r3, [r7, #31]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d0ad      	beq.n	800705a <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80070fe:	2001      	movs	r0, #1
 8007100:	f000 f860 	bl	80071c4 <NotifyCmdStatus>

  return 0;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3720      	adds	r7, #32
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	20000580 	.word	0x20000580
 8007114:	20000574 	.word	0x20000574

08007118 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8007120:	480f      	ldr	r0, [pc, #60]	@ (8007160 <TlInit+0x48>)
 8007122:	f000 fbb9 	bl	8007898 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8007126:	4a0f      	ldr	r2, [pc, #60]	@ (8007164 <TlInit+0x4c>)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800712c:	480e      	ldr	r0, [pc, #56]	@ (8007168 <TlInit+0x50>)
 800712e:	f000 fbb3 	bl	8007898 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8007132:	4b0e      	ldr	r3, [pc, #56]	@ (800716c <TlInit+0x54>)
 8007134:	2201      	movs	r2, #1
 8007136:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8007138:	4b0d      	ldr	r3, [pc, #52]	@ (8007170 <TlInit+0x58>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00a      	beq.n	8007156 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8007144:	4b0b      	ldr	r3, [pc, #44]	@ (8007174 <TlInit+0x5c>)
 8007146:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8007148:	4b09      	ldr	r3, [pc, #36]	@ (8007170 <TlInit+0x58>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f107 0208 	add.w	r2, r7, #8
 8007150:	4610      	mov	r0, r2
 8007152:	4798      	blx	r3
  }

  return;
 8007154:	bf00      	nop
 8007156:	bf00      	nop
}
 8007158:	3718      	adds	r7, #24
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	20000574 	.word	0x20000574
 8007164:	2000005c 	.word	0x2000005c
 8007168:	20000054 	.word	0x20000054
 800716c:	20000060 	.word	0x20000060
 8007170:	20000554 	.word	0x20000554
 8007174:	08007205 	.word	0x08007205

08007178 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	4603      	mov	r3, r0
 8007180:	603a      	str	r2, [r7, #0]
 8007182:	80fb      	strh	r3, [r7, #6]
 8007184:	460b      	mov	r3, r1
 8007186:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8007188:	4b0c      	ldr	r3, [pc, #48]	@ (80071bc <SendCmd+0x44>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	88fa      	ldrh	r2, [r7, #6]
 800718e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8007192:	4b0a      	ldr	r3, [pc, #40]	@ (80071bc <SendCmd+0x44>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	797a      	ldrb	r2, [r7, #5]
 8007198:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800719a:	4b08      	ldr	r3, [pc, #32]	@ (80071bc <SendCmd+0x44>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	330c      	adds	r3, #12
 80071a0:	797a      	ldrb	r2, [r7, #5]
 80071a2:	6839      	ldr	r1, [r7, #0]
 80071a4:	4618      	mov	r0, r3
 80071a6:	f001 fc3b 	bl	8008a20 <memcpy>

  hciContext.io.Send(0,0);
 80071aa:	4b05      	ldr	r3, [pc, #20]	@ (80071c0 <SendCmd+0x48>)
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	2100      	movs	r1, #0
 80071b0:	2000      	movs	r0, #0
 80071b2:	4798      	blx	r3

  return;
 80071b4:	bf00      	nop
}
 80071b6:	3708      	adds	r7, #8
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	2000005c 	.word	0x2000005c
 80071c0:	20000554 	.word	0x20000554

080071c4 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	4603      	mov	r3, r0
 80071cc:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80071ce:	79fb      	ldrb	r3, [r7, #7]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d108      	bne.n	80071e6 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80071d4:	4b0a      	ldr	r3, [pc, #40]	@ (8007200 <NotifyCmdStatus+0x3c>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00d      	beq.n	80071f8 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80071dc:	4b08      	ldr	r3, [pc, #32]	@ (8007200 <NotifyCmdStatus+0x3c>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2000      	movs	r0, #0
 80071e2:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80071e4:	e008      	b.n	80071f8 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80071e6:	4b06      	ldr	r3, [pc, #24]	@ (8007200 <NotifyCmdStatus+0x3c>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d004      	beq.n	80071f8 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80071ee:	4b04      	ldr	r3, [pc, #16]	@ (8007200 <NotifyCmdStatus+0x3c>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2001      	movs	r0, #1
 80071f4:	4798      	blx	r3
  return;
 80071f6:	bf00      	nop
 80071f8:	bf00      	nop
}
 80071fa:	3708      	adds	r7, #8
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	2000057c 	.word	0x2000057c

08007204 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	7a5b      	ldrb	r3, [r3, #9]
 8007210:	2b0f      	cmp	r3, #15
 8007212:	d003      	beq.n	800721c <TlEvtReceived+0x18>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	7a5b      	ldrb	r3, [r3, #9]
 8007218:	2b0e      	cmp	r3, #14
 800721a:	d107      	bne.n	800722c <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800721c:	6879      	ldr	r1, [r7, #4]
 800721e:	4809      	ldr	r0, [pc, #36]	@ (8007244 <TlEvtReceived+0x40>)
 8007220:	f000 fb92 	bl	8007948 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8007224:	2000      	movs	r0, #0
 8007226:	f000 fea5 	bl	8007f74 <hci_cmd_resp_release>
 800722a:	e006      	b.n	800723a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800722c:	6879      	ldr	r1, [r7, #4]
 800722e:	4806      	ldr	r0, [pc, #24]	@ (8007248 <TlEvtReceived+0x44>)
 8007230:	f000 fb8a 	bl	8007948 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8007234:	4804      	ldr	r0, [pc, #16]	@ (8007248 <TlEvtReceived+0x44>)
 8007236:	f000 fe91 	bl	8007f5c <hci_notify_asynch_evt>
  }

  return;
 800723a:	bf00      	nop
}
 800723c:	3708      	adds	r7, #8
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	20000574 	.word	0x20000574
 8007248:	20000054 	.word	0x20000054

0800724c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a05      	ldr	r2, [pc, #20]	@ (800726c <hci_register_io_bus+0x20>)
 8007258:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a04      	ldr	r2, [pc, #16]	@ (8007270 <hci_register_io_bus+0x24>)
 800725e:	611a      	str	r2, [r3, #16]

  return;
 8007260:	bf00      	nop
}
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr
 800726c:	08007565 	.word	0x08007565
 8007270:	080075cd 	.word	0x080075cd

08007274 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	4a08      	ldr	r2, [pc, #32]	@ (80072a4 <shci_init+0x30>)
 8007284:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8007286:	4a08      	ldr	r2, [pc, #32]	@ (80072a8 <shci_init+0x34>)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800728c:	4806      	ldr	r0, [pc, #24]	@ (80072a8 <shci_init+0x34>)
 800728e:	f000 f915 	bl	80074bc <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4618      	mov	r0, r3
 8007298:	f000 f898 	bl	80073cc <TlInit>

  return;
 800729c:	bf00      	nop
}
 800729e:	3708      	adds	r7, #8
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	200005a4 	.word	0x200005a4
 80072a8:	20000584 	.word	0x20000584

080072ac <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80072b2:	4822      	ldr	r0, [pc, #136]	@ (800733c <shci_user_evt_proc+0x90>)
 80072b4:	f000 fb00 	bl	80078b8 <LST_is_empty>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d12b      	bne.n	8007316 <shci_user_evt_proc+0x6a>
 80072be:	4b20      	ldr	r3, [pc, #128]	@ (8007340 <shci_user_evt_proc+0x94>)
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d027      	beq.n	8007316 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80072c6:	f107 030c 	add.w	r3, r7, #12
 80072ca:	4619      	mov	r1, r3
 80072cc:	481b      	ldr	r0, [pc, #108]	@ (800733c <shci_user_evt_proc+0x90>)
 80072ce:	f000 fb82 	bl	80079d6 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80072d2:	4b1c      	ldr	r3, [pc, #112]	@ (8007344 <shci_user_evt_proc+0x98>)
 80072d4:	69db      	ldr	r3, [r3, #28]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00c      	beq.n	80072f4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80072de:	2301      	movs	r3, #1
 80072e0:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80072e2:	4b18      	ldr	r3, [pc, #96]	@ (8007344 <shci_user_evt_proc+0x98>)
 80072e4:	69db      	ldr	r3, [r3, #28]
 80072e6:	1d3a      	adds	r2, r7, #4
 80072e8:	4610      	mov	r0, r2
 80072ea:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80072ec:	793a      	ldrb	r2, [r7, #4]
 80072ee:	4b14      	ldr	r3, [pc, #80]	@ (8007340 <shci_user_evt_proc+0x94>)
 80072f0:	701a      	strb	r2, [r3, #0]
 80072f2:	e002      	b.n	80072fa <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80072f4:	4b12      	ldr	r3, [pc, #72]	@ (8007340 <shci_user_evt_proc+0x94>)
 80072f6:	2201      	movs	r2, #1
 80072f8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80072fa:	4b11      	ldr	r3, [pc, #68]	@ (8007340 <shci_user_evt_proc+0x94>)
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d004      	beq.n	800730c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	4618      	mov	r0, r3
 8007306:	f000 f9ff 	bl	8007708 <TL_MM_EvtDone>
 800730a:	e004      	b.n	8007316 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	4619      	mov	r1, r3
 8007310:	480a      	ldr	r0, [pc, #40]	@ (800733c <shci_user_evt_proc+0x90>)
 8007312:	f000 faf3 	bl	80078fc <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8007316:	4809      	ldr	r0, [pc, #36]	@ (800733c <shci_user_evt_proc+0x90>)
 8007318:	f000 face 	bl	80078b8 <LST_is_empty>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d107      	bne.n	8007332 <shci_user_evt_proc+0x86>
 8007322:	4b07      	ldr	r3, [pc, #28]	@ (8007340 <shci_user_evt_proc+0x94>)
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d003      	beq.n	8007332 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800732a:	4804      	ldr	r0, [pc, #16]	@ (800733c <shci_user_evt_proc+0x90>)
 800732c:	f7f9 fac1 	bl	80008b2 <shci_notify_asynch_evt>
  }


  return;
 8007330:	bf00      	nop
 8007332:	bf00      	nop
}
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	20000064 	.word	0x20000064
 8007340:	20000074 	.word	0x20000074
 8007344:	20000584 	.word	0x20000584

08007348 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	60ba      	str	r2, [r7, #8]
 8007350:	607b      	str	r3, [r7, #4]
 8007352:	4603      	mov	r3, r0
 8007354:	81fb      	strh	r3, [r7, #14]
 8007356:	460b      	mov	r3, r1
 8007358:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800735a:	2000      	movs	r0, #0
 800735c:	f000 f868 	bl	8007430 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8007360:	4b17      	ldr	r3, [pc, #92]	@ (80073c0 <shci_send+0x78>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	89fa      	ldrh	r2, [r7, #14]
 8007366:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800736a:	4b15      	ldr	r3, [pc, #84]	@ (80073c0 <shci_send+0x78>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	7b7a      	ldrb	r2, [r7, #13]
 8007370:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8007372:	4b13      	ldr	r3, [pc, #76]	@ (80073c0 <shci_send+0x78>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	330c      	adds	r3, #12
 8007378:	7b7a      	ldrb	r2, [r7, #13]
 800737a:	68b9      	ldr	r1, [r7, #8]
 800737c:	4618      	mov	r0, r3
 800737e:	f001 fb4f 	bl	8008a20 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8007382:	4b10      	ldr	r3, [pc, #64]	@ (80073c4 <shci_send+0x7c>)
 8007384:	2201      	movs	r2, #1
 8007386:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8007388:	4b0f      	ldr	r3, [pc, #60]	@ (80073c8 <shci_send+0x80>)
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	2100      	movs	r1, #0
 800738e:	2000      	movs	r0, #0
 8007390:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8007392:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8007396:	f7f9 faa3 	bl	80008e0 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f103 0008 	add.w	r0, r3, #8
 80073a0:	4b07      	ldr	r3, [pc, #28]	@ (80073c0 <shci_send+0x78>)
 80073a2:	6819      	ldr	r1, [r3, #0]
 80073a4:	4b06      	ldr	r3, [pc, #24]	@ (80073c0 <shci_send+0x78>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	789b      	ldrb	r3, [r3, #2]
 80073aa:	3303      	adds	r3, #3
 80073ac:	461a      	mov	r2, r3
 80073ae:	f001 fb37 	bl	8008a20 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80073b2:	2001      	movs	r0, #1
 80073b4:	f000 f83c 	bl	8007430 <Cmd_SetStatus>

  return;
 80073b8:	bf00      	nop
}
 80073ba:	3710      	adds	r7, #16
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	20000070 	.word	0x20000070
 80073c4:	200005a8 	.word	0x200005a8
 80073c8:	20000584 	.word	0x20000584

080073cc <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b086      	sub	sp, #24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80073d4:	4a10      	ldr	r2, [pc, #64]	@ (8007418 <TlInit+0x4c>)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80073da:	4810      	ldr	r0, [pc, #64]	@ (800741c <TlInit+0x50>)
 80073dc:	f000 fa5c 	bl	8007898 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80073e0:	2001      	movs	r0, #1
 80073e2:	f000 f825 	bl	8007430 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80073e6:	4b0e      	ldr	r3, [pc, #56]	@ (8007420 <TlInit+0x54>)
 80073e8:	2201      	movs	r2, #1
 80073ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80073ec:	4b0d      	ldr	r3, [pc, #52]	@ (8007424 <TlInit+0x58>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00c      	beq.n	800740e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80073f8:	4b0b      	ldr	r3, [pc, #44]	@ (8007428 <TlInit+0x5c>)
 80073fa:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80073fc:	4b0b      	ldr	r3, [pc, #44]	@ (800742c <TlInit+0x60>)
 80073fe:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8007400:	4b08      	ldr	r3, [pc, #32]	@ (8007424 <TlInit+0x58>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f107 020c 	add.w	r2, r7, #12
 8007408:	4610      	mov	r0, r2
 800740a:	4798      	blx	r3
  }

  return;
 800740c:	bf00      	nop
 800740e:	bf00      	nop
}
 8007410:	3718      	adds	r7, #24
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	20000070 	.word	0x20000070
 800741c:	20000064 	.word	0x20000064
 8007420:	20000074 	.word	0x20000074
 8007424:	20000584 	.word	0x20000584
 8007428:	08007481 	.word	0x08007481
 800742c:	08007499 	.word	0x08007499

08007430 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	4603      	mov	r3, r0
 8007438:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800743a:	79fb      	ldrb	r3, [r7, #7]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d10b      	bne.n	8007458 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8007440:	4b0d      	ldr	r3, [pc, #52]	@ (8007478 <Cmd_SetStatus+0x48>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d003      	beq.n	8007450 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8007448:	4b0b      	ldr	r3, [pc, #44]	@ (8007478 <Cmd_SetStatus+0x48>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2000      	movs	r0, #0
 800744e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8007450:	4b0a      	ldr	r3, [pc, #40]	@ (800747c <Cmd_SetStatus+0x4c>)
 8007452:	2200      	movs	r2, #0
 8007454:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8007456:	e00b      	b.n	8007470 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8007458:	4b08      	ldr	r3, [pc, #32]	@ (800747c <Cmd_SetStatus+0x4c>)
 800745a:	2201      	movs	r2, #1
 800745c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800745e:	4b06      	ldr	r3, [pc, #24]	@ (8007478 <Cmd_SetStatus+0x48>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d004      	beq.n	8007470 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8007466:	4b04      	ldr	r3, [pc, #16]	@ (8007478 <Cmd_SetStatus+0x48>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2001      	movs	r0, #1
 800746c:	4798      	blx	r3
  return;
 800746e:	bf00      	nop
 8007470:	bf00      	nop
}
 8007472:	3708      	adds	r7, #8
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}
 8007478:	200005a4 	.word	0x200005a4
 800747c:	2000006c 	.word	0x2000006c

08007480 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8007488:	2000      	movs	r0, #0
 800748a:	f7f9 fa1e 	bl	80008ca <shci_cmd_resp_release>

  return;
 800748e:	bf00      	nop
}
 8007490:	3708      	adds	r7, #8
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
	...

08007498 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80074a0:	6879      	ldr	r1, [r7, #4]
 80074a2:	4805      	ldr	r0, [pc, #20]	@ (80074b8 <TlUserEvtReceived+0x20>)
 80074a4:	f000 fa50 	bl	8007948 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80074a8:	4803      	ldr	r0, [pc, #12]	@ (80074b8 <TlUserEvtReceived+0x20>)
 80074aa:	f7f9 fa02 	bl	80008b2 <shci_notify_asynch_evt>

  return;
 80074ae:	bf00      	nop
}
 80074b0:	3708      	adds	r7, #8
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	20000064 	.word	0x20000064

080074bc <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4a05      	ldr	r2, [pc, #20]	@ (80074dc <shci_register_io_bus+0x20>)
 80074c8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a04      	ldr	r2, [pc, #16]	@ (80074e0 <shci_register_io_bus+0x24>)
 80074ce:	611a      	str	r2, [r3, #16]

  return;
 80074d0:	bf00      	nop
}
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr
 80074dc:	08007605 	.word	0x08007605
 80074e0:	08007659 	.word	0x08007659

080074e4 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80074e8:	f000 ff70 	bl	80083cc <HW_IPCC_Enable>

  return;
 80074ec:	bf00      	nop
}
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <TL_Init>:


void TL_Init( void )
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80074f4:	4b10      	ldr	r3, [pc, #64]	@ (8007538 <TL_Init+0x48>)
 80074f6:	4a11      	ldr	r2, [pc, #68]	@ (800753c <TL_Init+0x4c>)
 80074f8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80074fa:	4b0f      	ldr	r3, [pc, #60]	@ (8007538 <TL_Init+0x48>)
 80074fc:	4a10      	ldr	r2, [pc, #64]	@ (8007540 <TL_Init+0x50>)
 80074fe:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8007500:	4b0d      	ldr	r3, [pc, #52]	@ (8007538 <TL_Init+0x48>)
 8007502:	4a10      	ldr	r2, [pc, #64]	@ (8007544 <TL_Init+0x54>)
 8007504:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8007506:	4b0c      	ldr	r3, [pc, #48]	@ (8007538 <TL_Init+0x48>)
 8007508:	4a0f      	ldr	r2, [pc, #60]	@ (8007548 <TL_Init+0x58>)
 800750a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800750c:	4b0a      	ldr	r3, [pc, #40]	@ (8007538 <TL_Init+0x48>)
 800750e:	4a0f      	ldr	r2, [pc, #60]	@ (800754c <TL_Init+0x5c>)
 8007510:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8007512:	4b09      	ldr	r3, [pc, #36]	@ (8007538 <TL_Init+0x48>)
 8007514:	4a0e      	ldr	r2, [pc, #56]	@ (8007550 <TL_Init+0x60>)
 8007516:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8007518:	4b07      	ldr	r3, [pc, #28]	@ (8007538 <TL_Init+0x48>)
 800751a:	4a0e      	ldr	r2, [pc, #56]	@ (8007554 <TL_Init+0x64>)
 800751c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800751e:	4b06      	ldr	r3, [pc, #24]	@ (8007538 <TL_Init+0x48>)
 8007520:	4a0d      	ldr	r2, [pc, #52]	@ (8007558 <TL_Init+0x68>)
 8007522:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8007524:	4b04      	ldr	r3, [pc, #16]	@ (8007538 <TL_Init+0x48>)
 8007526:	4a0d      	ldr	r2, [pc, #52]	@ (800755c <TL_Init+0x6c>)
 8007528:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800752a:	4b03      	ldr	r3, [pc, #12]	@ (8007538 <TL_Init+0x48>)
 800752c:	4a0c      	ldr	r2, [pc, #48]	@ (8007560 <TL_Init+0x70>)
 800752e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8007530:	f000 ff60 	bl	80083f4 <HW_IPCC_Init>

  return;
 8007534:	bf00      	nop
}
 8007536:	bd80      	pop	{r7, pc}
 8007538:	20030000 	.word	0x20030000
 800753c:	20030028 	.word	0x20030028
 8007540:	20030048 	.word	0x20030048
 8007544:	20030058 	.word	0x20030058
 8007548:	20030068 	.word	0x20030068
 800754c:	20030070 	.word	0x20030070
 8007550:	20030078 	.word	0x20030078
 8007554:	20030080 	.word	0x20030080
 8007558:	2003009c 	.word	0x2003009c
 800755c:	200300a0 	.word	0x200300a0
 8007560:	200300ac 	.word	0x200300ac

08007564 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8007570:	4811      	ldr	r0, [pc, #68]	@ (80075b8 <TL_BLE_Init+0x54>)
 8007572:	f000 f991 	bl	8007898 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8007576:	4b11      	ldr	r3, [pc, #68]	@ (80075bc <TL_BLE_Init+0x58>)
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	689a      	ldr	r2, [r3, #8]
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	68da      	ldr	r2, [r3, #12]
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	4a0c      	ldr	r2, [pc, #48]	@ (80075c0 <TL_BLE_Init+0x5c>)
 8007590:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	4a08      	ldr	r2, [pc, #32]	@ (80075b8 <TL_BLE_Init+0x54>)
 8007596:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8007598:	f000 ff42 	bl	8008420 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a08      	ldr	r2, [pc, #32]	@ (80075c4 <TL_BLE_Init+0x60>)
 80075a2:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	4a07      	ldr	r2, [pc, #28]	@ (80075c8 <TL_BLE_Init+0x64>)
 80075aa:	6013      	str	r3, [r2, #0]

  return 0;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	200300c8 	.word	0x200300c8
 80075bc:	20030000 	.word	0x20030000
 80075c0:	20030a58 	.word	0x20030a58
 80075c4:	200005b4 	.word	0x200005b4
 80075c8:	200005b8 	.word	0x200005b8

080075cc <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	460b      	mov	r3, r1
 80075d6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80075d8:	4b09      	ldr	r3, [pc, #36]	@ (8007600 <TL_BLE_SendCmd+0x34>)
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2201      	movs	r2, #1
 80075e0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80075e2:	4b07      	ldr	r3, [pc, #28]	@ (8007600 <TL_BLE_SendCmd+0x34>)
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4619      	mov	r1, r3
 80075ea:	2001      	movs	r0, #1
 80075ec:	f000 f8d6 	bl	800779c <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80075f0:	f000 ff20 	bl	8008434 <HW_IPCC_BLE_SendCmd>

  return 0;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3708      	adds	r7, #8
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	20030000 	.word	0x20030000

08007604 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8007610:	480d      	ldr	r0, [pc, #52]	@ (8007648 <TL_SYS_Init+0x44>)
 8007612:	f000 f941 	bl	8007898 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8007616:	4b0d      	ldr	r3, [pc, #52]	@ (800764c <TL_SYS_Init+0x48>)
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	689a      	ldr	r2, [r3, #8]
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	4a08      	ldr	r2, [pc, #32]	@ (8007648 <TL_SYS_Init+0x44>)
 8007628:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800762a:	f000 ff0d 	bl	8008448 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a07      	ldr	r2, [pc, #28]	@ (8007650 <TL_SYS_Init+0x4c>)
 8007634:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	4a06      	ldr	r2, [pc, #24]	@ (8007654 <TL_SYS_Init+0x50>)
 800763c:	6013      	str	r3, [r2, #0]

  return 0;
 800763e:	2300      	movs	r3, #0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3710      	adds	r7, #16
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	200300d0 	.word	0x200300d0
 800764c:	20030000 	.word	0x20030000
 8007650:	200005bc 	.word	0x200005bc
 8007654:	200005c0 	.word	0x200005c0

08007658 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	460b      	mov	r3, r1
 8007662:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8007664:	4b09      	ldr	r3, [pc, #36]	@ (800768c <TL_SYS_SendCmd+0x34>)
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2210      	movs	r2, #16
 800766c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800766e:	4b07      	ldr	r3, [pc, #28]	@ (800768c <TL_SYS_SendCmd+0x34>)
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4619      	mov	r1, r3
 8007676:	2004      	movs	r0, #4
 8007678:	f000 f890 	bl	800779c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800767c:	f000 feee 	bl	800845c <HW_IPCC_SYS_SendCmd>

  return 0;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3708      	adds	r7, #8
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	20030000 	.word	0x20030000

08007690 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8007698:	4817      	ldr	r0, [pc, #92]	@ (80076f8 <TL_MM_Init+0x68>)
 800769a:	f000 f8fd 	bl	8007898 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800769e:	4817      	ldr	r0, [pc, #92]	@ (80076fc <TL_MM_Init+0x6c>)
 80076a0:	f000 f8fa 	bl	8007898 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 80076a4:	4b16      	ldr	r3, [pc, #88]	@ (8007700 <TL_MM_Init+0x70>)
 80076a6:	691b      	ldr	r3, [r3, #16]
 80076a8:	4a16      	ldr	r2, [pc, #88]	@ (8007704 <TL_MM_Init+0x74>)
 80076aa:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80076ac:	4b15      	ldr	r3, [pc, #84]	@ (8007704 <TL_MM_Init+0x74>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	6892      	ldr	r2, [r2, #8]
 80076b4:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80076b6:	4b13      	ldr	r3, [pc, #76]	@ (8007704 <TL_MM_Init+0x74>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	68d2      	ldr	r2, [r2, #12]
 80076be:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80076c0:	4b10      	ldr	r3, [pc, #64]	@ (8007704 <TL_MM_Init+0x74>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a0c      	ldr	r2, [pc, #48]	@ (80076f8 <TL_MM_Init+0x68>)
 80076c6:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80076c8:	4b0e      	ldr	r3, [pc, #56]	@ (8007704 <TL_MM_Init+0x74>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	6812      	ldr	r2, [r2, #0]
 80076d0:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80076d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007704 <TL_MM_Init+0x74>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	6852      	ldr	r2, [r2, #4]
 80076da:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80076dc:	4b09      	ldr	r3, [pc, #36]	@ (8007704 <TL_MM_Init+0x74>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	6912      	ldr	r2, [r2, #16]
 80076e4:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80076e6:	4b07      	ldr	r3, [pc, #28]	@ (8007704 <TL_MM_Init+0x74>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	6952      	ldr	r2, [r2, #20]
 80076ee:	619a      	str	r2, [r3, #24]

  return;
 80076f0:	bf00      	nop
}
 80076f2:	3708      	adds	r7, #8
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	200300b8 	.word	0x200300b8
 80076fc:	200005ac 	.word	0x200005ac
 8007700:	20030000 	.word	0x20030000
 8007704:	200005c4 	.word	0x200005c4

08007708 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8007710:	6879      	ldr	r1, [r7, #4]
 8007712:	4807      	ldr	r0, [pc, #28]	@ (8007730 <TL_MM_EvtDone+0x28>)
 8007714:	f000 f918 	bl	8007948 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8007718:	6879      	ldr	r1, [r7, #4]
 800771a:	2000      	movs	r0, #0
 800771c:	f000 f83e 	bl	800779c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8007720:	4804      	ldr	r0, [pc, #16]	@ (8007734 <TL_MM_EvtDone+0x2c>)
 8007722:	f000 fea9 	bl	8008478 <HW_IPCC_MM_SendFreeBuf>

  return;
 8007726:	bf00      	nop
}
 8007728:	3708      	adds	r7, #8
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	200005ac 	.word	0x200005ac
 8007734:	08007739 	.word	0x08007739

08007738 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800773e:	e00c      	b.n	800775a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8007740:	1d3b      	adds	r3, r7, #4
 8007742:	4619      	mov	r1, r3
 8007744:	480a      	ldr	r0, [pc, #40]	@ (8007770 <SendFreeBuf+0x38>)
 8007746:	f000 f946 	bl	80079d6 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800774a:	4b0a      	ldr	r3, [pc, #40]	@ (8007774 <SendFreeBuf+0x3c>)
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	4611      	mov	r1, r2
 8007754:	4618      	mov	r0, r3
 8007756:	f000 f8f7 	bl	8007948 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800775a:	4805      	ldr	r0, [pc, #20]	@ (8007770 <SendFreeBuf+0x38>)
 800775c:	f000 f8ac 	bl	80078b8 <LST_is_empty>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d0ec      	beq.n	8007740 <SendFreeBuf+0x8>
  }

  return;
 8007766:	bf00      	nop
}
 8007768:	3708      	adds	r7, #8
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	200005ac 	.word	0x200005ac
 8007774:	20030000 	.word	0x20030000

08007778 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8007778:	b580      	push	{r7, lr}
 800777a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800777c:	4805      	ldr	r0, [pc, #20]	@ (8007794 <TL_TRACES_Init+0x1c>)
 800777e:	f000 f88b 	bl	8007898 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8007782:	4b05      	ldr	r3, [pc, #20]	@ (8007798 <TL_TRACES_Init+0x20>)
 8007784:	695b      	ldr	r3, [r3, #20]
 8007786:	4a03      	ldr	r2, [pc, #12]	@ (8007794 <TL_TRACES_Init+0x1c>)
 8007788:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800778a:	f000 fe97 	bl	80084bc <HW_IPCC_TRACES_Init>

  return;
 800778e:	bf00      	nop
}
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	200300c0 	.word	0x200300c0
 8007798:	20030000 	.word	0x20030000

0800779c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800779c:	b480      	push	{r7}
 800779e:	b085      	sub	sp, #20
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	4603      	mov	r3, r0
 80077a4:	6039      	str	r1, [r7, #0]
 80077a6:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 80077a8:	79fb      	ldrb	r3, [r7, #7]
 80077aa:	2b06      	cmp	r3, #6
 80077ac:	d845      	bhi.n	800783a <OutputDbgTrace+0x9e>
 80077ae:	a201      	add	r2, pc, #4	@ (adr r2, 80077b4 <OutputDbgTrace+0x18>)
 80077b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b4:	080077d1 	.word	0x080077d1
 80077b8:	080077f5 	.word	0x080077f5
 80077bc:	080077fb 	.word	0x080077fb
 80077c0:	0800780f 	.word	0x0800780f
 80077c4:	0800781b 	.word	0x0800781b
 80077c8:	08007821 	.word	0x08007821
 80077cc:	0800782f 	.word	0x0800782f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	7a5b      	ldrb	r3, [r3, #9]
 80077d8:	2bff      	cmp	r3, #255	@ 0xff
 80077da:	d005      	beq.n	80077e8 <OutputDbgTrace+0x4c>
 80077dc:	2bff      	cmp	r3, #255	@ 0xff
 80077de:	dc05      	bgt.n	80077ec <OutputDbgTrace+0x50>
 80077e0:	2b0e      	cmp	r3, #14
 80077e2:	d005      	beq.n	80077f0 <OutputDbgTrace+0x54>
 80077e4:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 80077e6:	e001      	b.n	80077ec <OutputDbgTrace+0x50>
          break;
 80077e8:	bf00      	nop
 80077ea:	e027      	b.n	800783c <OutputDbgTrace+0xa0>
          break;
 80077ec:	bf00      	nop
 80077ee:	e025      	b.n	800783c <OutputDbgTrace+0xa0>
          break;
 80077f0:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 80077f2:	e023      	b.n	800783c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80077f8:	e020      	b.n	800783c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	7a5b      	ldrb	r3, [r3, #9]
 8007802:	2b0e      	cmp	r3, #14
 8007804:	d001      	beq.n	800780a <OutputDbgTrace+0x6e>
 8007806:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8007808:	e000      	b.n	800780c <OutputDbgTrace+0x70>
          break;
 800780a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800780c:	e016      	b.n	800783c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	7a5b      	ldrb	r3, [r3, #9]
 8007816:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007818:	e010      	b.n	800783c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800781e:	e00d      	b.n	800783c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	7a5b      	ldrb	r3, [r3, #9]
 8007828:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800782a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800782c:	e006      	b.n	800783c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	7a5b      	ldrb	r3, [r3, #9]
 8007836:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007838:	e000      	b.n	800783c <OutputDbgTrace+0xa0>

    default:
      break;
 800783a:	bf00      	nop
  }

  return;
 800783c:	bf00      	nop
}
 800783e:	3714      	adds	r7, #20
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	4603      	mov	r3, r0
 8007850:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8007852:	4b0f      	ldr	r3, [pc, #60]	@ (8007890 <OTP_Read+0x48>)
 8007854:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8007856:	e002      	b.n	800785e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	3b08      	subs	r3, #8
 800785c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	3307      	adds	r3, #7
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	79fa      	ldrb	r2, [r7, #7]
 8007866:	429a      	cmp	r2, r3
 8007868:	d003      	beq.n	8007872 <OTP_Read+0x2a>
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	4a09      	ldr	r2, [pc, #36]	@ (8007894 <OTP_Read+0x4c>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d1f2      	bne.n	8007858 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	3307      	adds	r3, #7
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	79fa      	ldrb	r2, [r7, #7]
 800787a:	429a      	cmp	r2, r3
 800787c:	d001      	beq.n	8007882 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800787e:	2300      	movs	r3, #0
 8007880:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8007882:	68fb      	ldr	r3, [r7, #12]
}
 8007884:	4618      	mov	r0, r3
 8007886:	3714      	adds	r7, #20
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr
 8007890:	1fff73f8 	.word	0x1fff73f8
 8007894:	1fff7000 	.word	0x1fff7000

08007898 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	605a      	str	r2, [r3, #4]
}
 80078ac:	bf00      	nop
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b087      	sub	sp, #28
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078c0:	f3ef 8310 	mrs	r3, PRIMASK
 80078c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80078c6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80078c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80078ca:	b672      	cpsid	i
}
 80078cc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d102      	bne.n	80078de <LST_is_empty+0x26>
  {
    return_value = TRUE;
 80078d8:	2301      	movs	r3, #1
 80078da:	75fb      	strb	r3, [r7, #23]
 80078dc:	e001      	b.n	80078e2 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 80078de:	2300      	movs	r3, #0
 80078e0:	75fb      	strb	r3, [r7, #23]
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	f383 8810 	msr	PRIMASK, r3
}
 80078ec:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 80078ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	371c      	adds	r7, #28
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b087      	sub	sp, #28
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007906:	f3ef 8310 	mrs	r3, PRIMASK
 800790a:	60fb      	str	r3, [r7, #12]
  return(result);
 800790c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800790e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007910:	b672      	cpsid	i
}
 8007912:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	683a      	ldr	r2, [r7, #0]
 8007926:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	683a      	ldr	r2, [r7, #0]
 800792e:	605a      	str	r2, [r3, #4]
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	f383 8810 	msr	PRIMASK, r3
}
 800793a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800793c:	bf00      	nop
 800793e:	371c      	adds	r7, #28
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8007948:	b480      	push	{r7}
 800794a:	b087      	sub	sp, #28
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007952:	f3ef 8310 	mrs	r3, PRIMASK
 8007956:	60fb      	str	r3, [r7, #12]
  return(result);
 8007958:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800795a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800795c:	b672      	cpsid	i
}
 800795e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	685a      	ldr	r2, [r3, #4]
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	683a      	ldr	r2, [r7, #0]
 8007972:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	683a      	ldr	r2, [r7, #0]
 800797a:	601a      	str	r2, [r3, #0]
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	f383 8810 	msr	PRIMASK, r3
}
 8007986:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007988:	bf00      	nop
 800798a:	371c      	adds	r7, #28
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8007994:	b480      	push	{r7}
 8007996:	b087      	sub	sp, #28
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800799c:	f3ef 8310 	mrs	r3, PRIMASK
 80079a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80079a2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80079a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80079a6:	b672      	cpsid	i
}
 80079a8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	6812      	ldr	r2, [r2, #0]
 80079b2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	6852      	ldr	r2, [r2, #4]
 80079bc:	605a      	str	r2, [r3, #4]
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	f383 8810 	msr	PRIMASK, r3
}
 80079c8:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80079ca:	bf00      	nop
 80079cc:	371c      	adds	r7, #28
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr

080079d6 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b086      	sub	sp, #24
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
 80079de:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079e0:	f3ef 8310 	mrs	r3, PRIMASK
 80079e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80079e6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80079e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80079ea:	b672      	cpsid	i
}
 80079ec:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7ff ffca 	bl	8007994 <LST_remove_node>
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	f383 8810 	msr	PRIMASK, r3
}
 8007a0a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007a0c:	bf00      	nop
 8007a0e:	3718      	adds	r7, #24
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8007a14:	b480      	push	{r7}
 8007a16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8007a18:	4b03      	ldr	r3, [pc, #12]	@ (8007a28 <LL_FLASH_GetUDN+0x14>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr
 8007a26:	bf00      	nop
 8007a28:	1fff7580 	.word	0x1fff7580

08007a2c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8007a30:	4b03      	ldr	r3, [pc, #12]	@ (8007a40 <LL_FLASH_GetDeviceID+0x14>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	b2db      	uxtb	r3, r3
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr
 8007a40:	1fff7584 	.word	0x1fff7584

08007a44 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8007a44:	b480      	push	{r7}
 8007a46:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8007a48:	4b03      	ldr	r3, [pc, #12]	@ (8007a58 <LL_FLASH_GetSTCompanyID+0x14>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	0a1b      	lsrs	r3, r3, #8
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr
 8007a58:	1fff7584 	.word	0x1fff7584

08007a5c <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8007a5c:	b5b0      	push	{r4, r5, r7, lr}
 8007a5e:	b090      	sub	sp, #64	@ 0x40
 8007a60:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007a62:	2392      	movs	r3, #146	@ 0x92
 8007a64:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8007a68:	4b25      	ldr	r3, [pc, #148]	@ (8007b00 <APP_BLE_Init+0xa4>)
 8007a6a:	1d3c      	adds	r4, r7, #4
 8007a6c:	461d      	mov	r5, r3
 8007a6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a7a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007a7e:	c403      	stmia	r4!, {r0, r1}
 8007a80:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8007a82:	f000 f913 	bl	8007cac <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8007a86:	2101      	movs	r1, #1
 8007a88:	2002      	movs	r0, #2
 8007a8a:	f000 fd33 	bl	80084f4 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8007a8e:	4a1d      	ldr	r2, [pc, #116]	@ (8007b04 <APP_BLE_Init+0xa8>)
 8007a90:	2100      	movs	r1, #0
 8007a92:	2002      	movs	r0, #2
 8007a94:	f000 fe5a 	bl	800874c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8007a98:	1d3b      	adds	r3, r7, #4
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7ff f95c 	bl	8006d58 <SHCI_C2_BLE_Init>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8007aa6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d001      	beq.n	8007ab2 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8007aae:	f7f9 ff28 	bl	8001902 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8007ab2:	f000 f911 	bl	8007cd8 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8007ab6:	f7ff f8a9 	bl	8006c0c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007aba:	4b13      	ldr	r3, [pc, #76]	@ (8007b08 <APP_BLE_Init+0xac>)
 8007abc:	2200      	movs	r2, #0
 8007abe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8007ac2:	4b11      	ldr	r3, [pc, #68]	@ (8007b08 <APP_BLE_Init+0xac>)
 8007ac4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007ac8:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8007aca:	4a10      	ldr	r2, [pc, #64]	@ (8007b0c <APP_BLE_Init+0xb0>)
 8007acc:	2100      	movs	r1, #0
 8007ace:	2001      	movs	r0, #1
 8007ad0:	f000 fe3c 	bl	800874c <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8007ad4:	2006      	movs	r0, #6
 8007ad6:	f7fe ff0c 	bl	80068f2 <aci_hal_set_radio_activity_mask>
 8007ada:	4603      	mov	r3, r0
 8007adc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8007ae0:	f000 fab7 	bl	8008052 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8007ae4:	4b08      	ldr	r3, [pc, #32]	@ (8007b08 <APP_BLE_Init+0xac>)
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8007aea:	4b07      	ldr	r3, [pc, #28]	@ (8007b08 <APP_BLE_Init+0xac>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8007af0:	2001      	movs	r0, #1
 8007af2:	f000 f9a5 	bl	8007e40 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8007af6:	bf00      	nop
}
 8007af8:	3740      	adds	r7, #64	@ 0x40
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bdb0      	pop	{r4, r5, r7, pc}
 8007afe:	bf00      	nop
 8007b00:	08008a9c 	.word	0x08008a9c
 8007b04:	08006f75 	.word	0x08006f75
 8007b08:	200005d0 	.word	0x200005d0
 8007b0c:	08007f29 	.word	0x08007f29

08007b10 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b08a      	sub	sp, #40	@ 0x28
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8007b18:	2392      	movs	r3, #146	@ 0x92
 8007b1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	3301      	adds	r3, #1
 8007b22:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8007b24:	6a3b      	ldr	r3, [r7, #32]
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	2bff      	cmp	r3, #255	@ 0xff
 8007b2a:	d053      	beq.n	8007bd4 <SVCCTL_App_Notification+0xc4>
 8007b2c:	2bff      	cmp	r3, #255	@ 0xff
 8007b2e:	f300 80af 	bgt.w	8007c90 <SVCCTL_App_Notification+0x180>
 8007b32:	2b05      	cmp	r3, #5
 8007b34:	d002      	beq.n	8007b3c <SVCCTL_App_Notification+0x2c>
 8007b36:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b38:	d020      	beq.n	8007b7c <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8007b3a:	e0a9      	b.n	8007c90 <SVCCTL_App_Notification+0x180>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8007b3c:	6a3b      	ldr	r3, [r7, #32]
 8007b3e:	3302      	adds	r3, #2
 8007b40:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	4b55      	ldr	r3, [pc, #340]	@ (8007ca0 <SVCCTL_App_Notification+0x190>)
 8007b4c:	8adb      	ldrh	r3, [r3, #22]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d106      	bne.n	8007b60 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8007b52:	4b53      	ldr	r3, [pc, #332]	@ (8007ca0 <SVCCTL_App_Notification+0x190>)
 8007b54:	2200      	movs	r2, #0
 8007b56:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007b58:	4b51      	ldr	r3, [pc, #324]	@ (8007ca0 <SVCCTL_App_Notification+0x190>)
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8007b60:	2001      	movs	r0, #1
 8007b62:	f000 f96d 	bl	8007e40 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8007b66:	4b4f      	ldr	r3, [pc, #316]	@ (8007ca4 <SVCCTL_App_Notification+0x194>)
 8007b68:	2201      	movs	r2, #1
 8007b6a:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8007b6c:	4b4c      	ldr	r3, [pc, #304]	@ (8007ca0 <SVCCTL_App_Notification+0x190>)
 8007b6e:	8ada      	ldrh	r2, [r3, #22]
 8007b70:	4b4c      	ldr	r3, [pc, #304]	@ (8007ca4 <SVCCTL_App_Notification+0x194>)
 8007b72:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8007b74:	484b      	ldr	r0, [pc, #300]	@ (8007ca4 <SVCCTL_App_Notification+0x194>)
 8007b76:	f000 fa58 	bl	800802a <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8007b7a:	e08c      	b.n	8007c96 <SVCCTL_App_Notification+0x186>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8007b7c:	6a3b      	ldr	r3, [r7, #32]
 8007b7e:	3302      	adds	r3, #2
 8007b80:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d001      	beq.n	8007b8e <SVCCTL_App_Notification+0x7e>
 8007b8a:	2b03      	cmp	r3, #3
          break;
 8007b8c:	e021      	b.n	8007bd2 <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	3301      	adds	r3, #1
 8007b92:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8007b94:	4b42      	ldr	r3, [pc, #264]	@ (8007ca0 <SVCCTL_App_Notification+0x190>)
 8007b96:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007b9a:	2b04      	cmp	r3, #4
 8007b9c:	d104      	bne.n	8007ba8 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8007b9e:	4b40      	ldr	r3, [pc, #256]	@ (8007ca0 <SVCCTL_App_Notification+0x190>)
 8007ba0:	2206      	movs	r2, #6
 8007ba2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8007ba6:	e003      	b.n	8007bb0 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8007ba8:	4b3d      	ldr	r3, [pc, #244]	@ (8007ca0 <SVCCTL_App_Notification+0x190>)
 8007baa:	2205      	movs	r2, #5
 8007bac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	4b39      	ldr	r3, [pc, #228]	@ (8007ca0 <SVCCTL_App_Notification+0x190>)
 8007bba:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8007bbc:	4b39      	ldr	r3, [pc, #228]	@ (8007ca4 <SVCCTL_App_Notification+0x194>)
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8007bc2:	4b37      	ldr	r3, [pc, #220]	@ (8007ca0 <SVCCTL_App_Notification+0x190>)
 8007bc4:	8ada      	ldrh	r2, [r3, #22]
 8007bc6:	4b37      	ldr	r3, [pc, #220]	@ (8007ca4 <SVCCTL_App_Notification+0x194>)
 8007bc8:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8007bca:	4836      	ldr	r0, [pc, #216]	@ (8007ca4 <SVCCTL_App_Notification+0x194>)
 8007bcc:	f000 fa2d 	bl	800802a <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8007bd0:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8007bd2:	e060      	b.n	8007c96 <SVCCTL_App_Notification+0x186>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8007bd4:	6a3b      	ldr	r3, [r7, #32]
 8007bd6:	3302      	adds	r3, #2
 8007bd8:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	881b      	ldrh	r3, [r3, #0]
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d047      	beq.n	8007c78 <SVCCTL_App_Notification+0x168>
 8007be8:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8007bec:	4293      	cmp	r3, r2
 8007bee:	dc51      	bgt.n	8007c94 <SVCCTL_App_Notification+0x184>
 8007bf0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bf4:	d046      	beq.n	8007c84 <SVCCTL_App_Notification+0x174>
 8007bf6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bfa:	dc4b      	bgt.n	8007c94 <SVCCTL_App_Notification+0x184>
 8007bfc:	2b04      	cmp	r3, #4
 8007bfe:	d043      	beq.n	8007c88 <SVCCTL_App_Notification+0x178>
 8007c00:	2b04      	cmp	r3, #4
 8007c02:	db47      	blt.n	8007c94 <SVCCTL_App_Notification+0x184>
 8007c04:	f240 420a 	movw	r2, #1034	@ 0x40a
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	dc43      	bgt.n	8007c94 <SVCCTL_App_Notification+0x184>
 8007c0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c10:	dd40      	ble.n	8007c94 <SVCCTL_App_Notification+0x184>
 8007c12:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8007c16:	2b09      	cmp	r3, #9
 8007c18:	d83c      	bhi.n	8007c94 <SVCCTL_App_Notification+0x184>
 8007c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8007c20 <SVCCTL_App_Notification+0x110>)
 8007c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c20:	08007c71 	.word	0x08007c71
 8007c24:	08007c49 	.word	0x08007c49
 8007c28:	08007c95 	.word	0x08007c95
 8007c2c:	08007c95 	.word	0x08007c95
 8007c30:	08007c95 	.word	0x08007c95
 8007c34:	08007c95 	.word	0x08007c95
 8007c38:	08007c8d 	.word	0x08007c8d
 8007c3c:	08007c95 	.word	0x08007c95
 8007c40:	08007c5d 	.word	0x08007c5d
 8007c44:	08007c8d 	.word	0x08007c8d
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8007c48:	4b15      	ldr	r3, [pc, #84]	@ (8007ca0 <SVCCTL_App_Notification+0x190>)
 8007c4a:	8adb      	ldrh	r3, [r3, #22]
 8007c4c:	4916      	ldr	r1, [pc, #88]	@ (8007ca8 <SVCCTL_App_Notification+0x198>)
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f7fe f851 	bl	8005cf6 <aci_gap_pass_key_resp>
 8007c54:	4603      	mov	r3, r0
 8007c56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 8007c5a:	e018      	b.n	8007c8e <SVCCTL_App_Notification+0x17e>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8007c5c:	4b10      	ldr	r3, [pc, #64]	@ (8007ca0 <SVCCTL_App_Notification+0x190>)
 8007c5e:	8adb      	ldrh	r3, [r3, #22]
 8007c60:	2101      	movs	r1, #1
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7fe f9f1 	bl	800604a <aci_gap_numeric_comparison_value_confirm_yesno>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 8007c6e:	e00e      	b.n	8007c8e <SVCCTL_App_Notification+0x17e>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	3302      	adds	r3, #2
 8007c74:	61bb      	str	r3, [r7, #24]
          break;
 8007c76:	e00a      	b.n	8007c8e <SVCCTL_App_Notification+0x17e>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8007c78:	4b09      	ldr	r3, [pc, #36]	@ (8007ca0 <SVCCTL_App_Notification+0x190>)
 8007c7a:	8adb      	ldrh	r3, [r3, #22]
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7fe fcf7 	bl	8006670 <aci_gatt_confirm_indication>
        break;
 8007c82:	e004      	b.n	8007c8e <SVCCTL_App_Notification+0x17e>
          break;
 8007c84:	bf00      	nop
 8007c86:	e005      	b.n	8007c94 <SVCCTL_App_Notification+0x184>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8007c88:	bf00      	nop
 8007c8a:	e003      	b.n	8007c94 <SVCCTL_App_Notification+0x184>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8007c8c:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007c8e:	e001      	b.n	8007c94 <SVCCTL_App_Notification+0x184>
      break;
 8007c90:	bf00      	nop
 8007c92:	e000      	b.n	8007c96 <SVCCTL_App_Notification+0x186>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007c94:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8007c96:	2301      	movs	r3, #1
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3728      	adds	r7, #40	@ 0x28
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	200005d0 	.word	0x200005d0
 8007ca4:	20000654 	.word	0x20000654
 8007ca8:	0001b207 	.word	0x0001b207

08007cac <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8007cb2:	4b06      	ldr	r3, [pc, #24]	@ (8007ccc <Ble_Tl_Init+0x20>)
 8007cb4:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8007cb6:	4b06      	ldr	r3, [pc, #24]	@ (8007cd0 <Ble_Tl_Init+0x24>)
 8007cb8:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8007cba:	463b      	mov	r3, r7
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	4805      	ldr	r0, [pc, #20]	@ (8007cd4 <Ble_Tl_Init+0x28>)
 8007cc0:	f7ff f93c 	bl	8006f3c <hci_init>

  return;
 8007cc4:	bf00      	nop
}
 8007cc6:	3708      	adds	r7, #8
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	200300d8 	.word	0x200300d8
 8007cd0:	08007fd9 	.word	0x08007fd9
 8007cd4:	08007fa1 	.word	0x08007fa1

08007cd8 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8007cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cda:	b08d      	sub	sp, #52	@ 0x34
 8007cdc:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8007cde:	2300      	movs	r3, #0
 8007ce0:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007ce2:	2392      	movs	r3, #146	@ 0x92
 8007ce4:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8007ce6:	f7fe fe58 	bl	800699a <hci_reset>
 8007cea:	4603      	mov	r3, r0
 8007cec:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8007cee:	f000 f8d7 	bl	8007ea0 <BleGetBdAddress>
 8007cf2:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8007cf4:	693a      	ldr	r2, [r7, #16]
 8007cf6:	2106      	movs	r1, #6
 8007cf8:	2000      	movs	r0, #0
 8007cfa:	f7fe fd0e 	bl	800671a <aci_hal_write_config_data>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8007d02:	4a4a      	ldr	r2, [pc, #296]	@ (8007e2c <Ble_Hci_Gap_Gatt_Init+0x154>)
 8007d04:	2110      	movs	r1, #16
 8007d06:	2018      	movs	r0, #24
 8007d08:	f7fe fd07 	bl	800671a <aci_hal_write_config_data>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8007d10:	4a47      	ldr	r2, [pc, #284]	@ (8007e30 <Ble_Hci_Gap_Gatt_Init+0x158>)
 8007d12:	2110      	movs	r1, #16
 8007d14:	2008      	movs	r0, #8
 8007d16:	f7fe fd00 	bl	800671a <aci_hal_write_config_data>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8007d1e:	211f      	movs	r1, #31
 8007d20:	2001      	movs	r0, #1
 8007d22:	f7fe fd7f 	bl	8006824 <aci_hal_set_tx_power_level>
 8007d26:	4603      	mov	r3, r0
 8007d28:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8007d2a:	f7fe f9f5 	bl	8006118 <aci_gatt_init>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8007d32:	2300      	movs	r3, #0
 8007d34:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8007d36:	7bfb      	ldrb	r3, [r7, #15]
 8007d38:	f043 0301 	orr.w	r3, r3, #1
 8007d3c:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8007d3e:	7bfb      	ldrb	r3, [r7, #15]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d01f      	beq.n	8007d84 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8007d44:	4b3b      	ldr	r3, [pc, #236]	@ (8007e34 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8007d46:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8007d48:	1dba      	adds	r2, r7, #6
 8007d4a:	7bf8      	ldrb	r0, [r7, #15]
 8007d4c:	1cbb      	adds	r3, r7, #2
 8007d4e:	9301      	str	r3, [sp, #4]
 8007d50:	1d3b      	adds	r3, r7, #4
 8007d52:	9300      	str	r3, [sp, #0]
 8007d54:	4613      	mov	r3, r2
 8007d56:	2208      	movs	r2, #8
 8007d58:	2100      	movs	r1, #0
 8007d5a:	f7fe f833 	bl	8005dc4 <aci_gap_init>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8007d62:	88fc      	ldrh	r4, [r7, #6]
 8007d64:	88bd      	ldrh	r5, [r7, #4]
 8007d66:	68b8      	ldr	r0, [r7, #8]
 8007d68:	f7f8 fa08 	bl	800017c <strlen>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	b2da      	uxtb	r2, r3
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	9300      	str	r3, [sp, #0]
 8007d74:	4613      	mov	r3, r2
 8007d76:	2200      	movs	r2, #0
 8007d78:	4629      	mov	r1, r5
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	f7fe fbcf 	bl	800651e <aci_gatt_update_char_value>
 8007d80:	4603      	mov	r3, r0
 8007d82:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8007d84:	88f8      	ldrh	r0, [r7, #6]
 8007d86:	8879      	ldrh	r1, [r7, #2]
 8007d88:	463b      	mov	r3, r7
 8007d8a:	9300      	str	r3, [sp, #0]
 8007d8c:	2302      	movs	r3, #2
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f7fe fbc5 	bl	800651e <aci_gatt_update_char_value>
 8007d94:	4603      	mov	r3, r0
 8007d96:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8007d98:	2202      	movs	r2, #2
 8007d9a:	2102      	movs	r1, #2
 8007d9c:	2000      	movs	r0, #0
 8007d9e:	f7fe fe20 	bl	80069e2 <hci_le_set_default_phy>
 8007da2:	4603      	mov	r3, r0
 8007da4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8007da6:	4b24      	ldr	r3, [pc, #144]	@ (8007e38 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007da8:	2201      	movs	r2, #1
 8007daa:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8007dac:	4b22      	ldr	r3, [pc, #136]	@ (8007e38 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7fd fe88 	bl	8005ac6 <aci_gap_set_io_capability>
 8007db6:	4603      	mov	r3, r0
 8007db8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8007dba:	4b1f      	ldr	r3, [pc, #124]	@ (8007e38 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8007dc0:	4b1d      	ldr	r3, [pc, #116]	@ (8007e38 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007dc2:	2208      	movs	r2, #8
 8007dc4:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8007dc6:	4b1c      	ldr	r3, [pc, #112]	@ (8007e38 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007dc8:	2210      	movs	r2, #16
 8007dca:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8007dcc:	4b1a      	ldr	r3, [pc, #104]	@ (8007e38 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007dce:	2200      	movs	r2, #0
 8007dd0:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8007dd2:	4b19      	ldr	r3, [pc, #100]	@ (8007e38 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007dd4:	4a19      	ldr	r2, [pc, #100]	@ (8007e3c <Ble_Hci_Gap_Gatt_Init+0x164>)
 8007dd6:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8007dd8:	4b17      	ldr	r3, [pc, #92]	@ (8007e38 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007dda:	2200      	movs	r2, #0
 8007ddc:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8007dde:	4b16      	ldr	r3, [pc, #88]	@ (8007e38 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007de0:	789c      	ldrb	r4, [r3, #2]
 8007de2:	4b15      	ldr	r3, [pc, #84]	@ (8007e38 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007de4:	785d      	ldrb	r5, [r3, #1]
 8007de6:	4b14      	ldr	r3, [pc, #80]	@ (8007e38 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007de8:	791b      	ldrb	r3, [r3, #4]
 8007dea:	4a13      	ldr	r2, [pc, #76]	@ (8007e38 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007dec:	7952      	ldrb	r2, [r2, #5]
 8007dee:	4912      	ldr	r1, [pc, #72]	@ (8007e38 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007df0:	78c9      	ldrb	r1, [r1, #3]
 8007df2:	4811      	ldr	r0, [pc, #68]	@ (8007e38 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007df4:	6880      	ldr	r0, [r0, #8]
 8007df6:	2600      	movs	r6, #0
 8007df8:	9604      	str	r6, [sp, #16]
 8007dfa:	9003      	str	r0, [sp, #12]
 8007dfc:	9102      	str	r1, [sp, #8]
 8007dfe:	9201      	str	r2, [sp, #4]
 8007e00:	9300      	str	r3, [sp, #0]
 8007e02:	2300      	movs	r3, #0
 8007e04:	2201      	movs	r2, #1
 8007e06:	4629      	mov	r1, r5
 8007e08:	4620      	mov	r0, r4
 8007e0a:	f7fd feb0 	bl	8005b6e <aci_gap_set_authentication_requirement>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8007e12:	4b09      	ldr	r3, [pc, #36]	@ (8007e38 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007e14:	789b      	ldrb	r3, [r3, #2]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d003      	beq.n	8007e22 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8007e1a:	f7fe f8f2 	bl	8006002 <aci_gap_configure_filter_accept_list>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8007e22:	bf00      	nop
 8007e24:	371c      	adds	r7, #28
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	08008ce4 	.word	0x08008ce4
 8007e30:	08008cf4 	.word	0x08008cf4
 8007e34:	08008ad8 	.word	0x08008ad8
 8007e38:	200005d0 	.word	0x200005d0
 8007e3c:	0001b207 	.word	0x0001b207

08007e40 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b08c      	sub	sp, #48	@ 0x30
 8007e44:	af08      	add	r7, sp, #32
 8007e46:	4603      	mov	r3, r0
 8007e48:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007e4a:	2392      	movs	r3, #146	@ 0x92
 8007e4c:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8007e4e:	4a12      	ldr	r2, [pc, #72]	@ (8007e98 <Adv_Request+0x58>)
 8007e50:	79fb      	ldrb	r3, [r7, #7]
 8007e52:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8007e56:	2300      	movs	r3, #0
 8007e58:	9306      	str	r3, [sp, #24]
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	9305      	str	r3, [sp, #20]
 8007e5e:	2300      	movs	r3, #0
 8007e60:	9304      	str	r3, [sp, #16]
 8007e62:	2300      	movs	r3, #0
 8007e64:	9303      	str	r3, [sp, #12]
 8007e66:	2300      	movs	r3, #0
 8007e68:	9302      	str	r3, [sp, #8]
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	9301      	str	r3, [sp, #4]
 8007e6e:	2300      	movs	r3, #0
 8007e70:	9300      	str	r3, [sp, #0]
 8007e72:	2300      	movs	r3, #0
 8007e74:	22a0      	movs	r2, #160	@ 0xa0
 8007e76:	2180      	movs	r1, #128	@ 0x80
 8007e78:	2002      	movs	r0, #2
 8007e7a:	f7fd fd2a 	bl	80058d2 <aci_gap_set_discoverable>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8007e82:	4906      	ldr	r1, [pc, #24]	@ (8007e9c <Adv_Request+0x5c>)
 8007e84:	200d      	movs	r0, #13
 8007e86:	f7fe f84a 	bl	8005f1e <aci_gap_update_adv_data>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8007e8e:	bf00      	nop
}
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	200005d0 	.word	0x200005d0
 8007e9c:	20000014 	.word	0x20000014

08007ea0 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b086      	sub	sp, #24
 8007ea4:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8007ea6:	f7ff fdb5 	bl	8007a14 <LL_FLASH_GetUDN>
 8007eaa:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eb2:	d023      	beq.n	8007efc <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8007eb4:	f7ff fdc6 	bl	8007a44 <LL_FLASH_GetSTCompanyID>
 8007eb8:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8007eba:	f7ff fdb7 	bl	8007a2c <LL_FLASH_GetDeviceID>
 8007ebe:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	b2da      	uxtb	r2, r3
 8007ec4:	4b16      	ldr	r3, [pc, #88]	@ (8007f20 <BleGetBdAddress+0x80>)
 8007ec6:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	0a1b      	lsrs	r3, r3, #8
 8007ecc:	b2da      	uxtb	r2, r3
 8007ece:	4b14      	ldr	r3, [pc, #80]	@ (8007f20 <BleGetBdAddress+0x80>)
 8007ed0:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	b2da      	uxtb	r2, r3
 8007ed6:	4b12      	ldr	r3, [pc, #72]	@ (8007f20 <BleGetBdAddress+0x80>)
 8007ed8:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	b2da      	uxtb	r2, r3
 8007ede:	4b10      	ldr	r3, [pc, #64]	@ (8007f20 <BleGetBdAddress+0x80>)
 8007ee0:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	0a1b      	lsrs	r3, r3, #8
 8007ee6:	b2da      	uxtb	r2, r3
 8007ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8007f20 <BleGetBdAddress+0x80>)
 8007eea:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	0c1b      	lsrs	r3, r3, #16
 8007ef0:	b2da      	uxtb	r2, r3
 8007ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8007f20 <BleGetBdAddress+0x80>)
 8007ef4:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8007ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8007f20 <BleGetBdAddress+0x80>)
 8007ef8:	617b      	str	r3, [r7, #20]
 8007efa:	e00b      	b.n	8007f14 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8007efc:	2000      	movs	r0, #0
 8007efe:	f7ff fca3 	bl	8007848 <OTP_Read>
 8007f02:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d002      	beq.n	8007f10 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	617b      	str	r3, [r7, #20]
 8007f0e:	e001      	b.n	8007f14 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8007f10:	4b04      	ldr	r3, [pc, #16]	@ (8007f24 <BleGetBdAddress+0x84>)
 8007f12:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8007f14:	697b      	ldr	r3, [r7, #20]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3718      	adds	r7, #24
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	200005c8 	.word	0x200005c8
 8007f24:	08008cdc 	.word	0x08008cdc

08007f28 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8007f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8007f58 <Adv_Cancel+0x30>)
 8007f30:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007f34:	2b05      	cmp	r3, #5
 8007f36:	d00a      	beq.n	8007f4e <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007f38:	2392      	movs	r3, #146	@ 0x92
 8007f3a:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8007f3c:	f7fd fca5 	bl	800588a <aci_gap_set_non_discoverable>
 8007f40:	4603      	mov	r3, r0
 8007f42:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007f44:	4b04      	ldr	r3, [pc, #16]	@ (8007f58 <Adv_Cancel+0x30>)
 8007f46:	2200      	movs	r2, #0
 8007f48:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8007f4c:	bf00      	nop
 8007f4e:	bf00      	nop
}
 8007f50:	3708      	adds	r7, #8
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	200005d0 	.word	0x200005d0

08007f5c <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8007f64:	2100      	movs	r1, #0
 8007f66:	2002      	movs	r0, #2
 8007f68:	f000 fc12 	bl	8008790 <UTIL_SEQ_SetTask>

  return;
 8007f6c:	bf00      	nop
}
 8007f6e:	3708      	adds	r7, #8
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8007f7c:	2001      	movs	r0, #1
 8007f7e:	f000 fc73 	bl	8008868 <UTIL_SEQ_SetEvt>

  return;
 8007f82:	bf00      	nop
}
 8007f84:	3708      	adds	r7, #8
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b082      	sub	sp, #8
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8007f92:	2001      	movs	r0, #1
 8007f94:	f000 fc88 	bl	80088a8 <UTIL_SEQ_WaitEvt>

  return;
 8007f98:	bf00      	nop
}
 8007f9a:	3708      	adds	r7, #8
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	3308      	adds	r3, #8
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7fe fe7c 	bl	8006cb0 <SVCCTL_UserEvtRx>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8007fbc:	7afb      	ldrb	r3, [r7, #11]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d003      	beq.n	8007fca <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8007fc8:	e003      	b.n	8007fd2 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	701a      	strb	r2, [r3, #0]
  return;
 8007fd0:	bf00      	nop
}
 8007fd2:	3710      	adds	r7, #16
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	4603      	mov	r3, r0
 8007fe0:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8007fe2:	79fb      	ldrb	r3, [r7, #7]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d002      	beq.n	8007fee <BLE_StatusNot+0x16>
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d006      	beq.n	8007ffa <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8007fec:	e00b      	b.n	8008006 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8007fee:	2303      	movs	r3, #3
 8007ff0:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8007ff2:	68f8      	ldr	r0, [r7, #12]
 8007ff4:	f000 fbf8 	bl	80087e8 <UTIL_SEQ_PauseTask>
      break;
 8007ff8:	e005      	b.n	8008006 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8007ffa:	2303      	movs	r3, #3
 8007ffc:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8007ffe:	68f8      	ldr	r0, [r7, #12]
 8008000:	f000 fc12 	bl	8008828 <UTIL_SEQ_ResumeTask>
      break;
 8008004:	bf00      	nop
  }

  return;
 8008006:	bf00      	nop
}
 8008008:	3710      	adds	r7, #16
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800800e:	b480      	push	{r7}
 8008010:	b083      	sub	sp, #12
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	2b00      	cmp	r3, #0

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800801c:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800801e:	bf00      	nop
}
 8008020:	370c      	adds	r7, #12
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr

0800802a <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800802a:	b480      	push	{r7}
 800802c:	b083      	sub	sp, #12
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d002      	beq.n	8008040 <Custom_APP_Notification+0x16>
 800803a:	2b01      	cmp	r3, #1
 800803c:	d002      	beq.n	8008044 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800803e:	e002      	b.n	8008046 <Custom_APP_Notification+0x1c>
      break;
 8008040:	bf00      	nop
 8008042:	e000      	b.n	8008046 <Custom_APP_Notification+0x1c>
      break;
 8008044:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8008046:	bf00      	nop
}
 8008048:	370c      	adds	r7, #12
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr

08008052 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8008052:	b480      	push	{r7}
 8008054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8008056:	bf00      	nop
}
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b08c      	sub	sp, #48	@ 0x30
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8008068:	2300      	movs	r3, #0
 800806a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	3301      	adds	r3, #1
 8008072:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 8008074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	2bff      	cmp	r3, #255	@ 0xff
 800807a:	d154      	bne.n	8008126 <Custom_STM_Event_Handler+0xc6>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800807c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800807e:	3302      	adds	r3, #2
 8008080:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 8008082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008084:	881b      	ldrh	r3, [r3, #0]
 8008086:	b29b      	uxth	r3, r3
 8008088:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 800808c:	2b1a      	cmp	r3, #26
 800808e:	d848      	bhi.n	8008122 <Custom_STM_Event_Handler+0xc2>
 8008090:	a201      	add	r2, pc, #4	@ (adr r2, 8008098 <Custom_STM_Event_Handler+0x38>)
 8008092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008096:	bf00      	nop
 8008098:	08008123 	.word	0x08008123
 800809c:	08008123 	.word	0x08008123
 80080a0:	08008123 	.word	0x08008123
 80080a4:	08008123 	.word	0x08008123
 80080a8:	08008123 	.word	0x08008123
 80080ac:	08008123 	.word	0x08008123
 80080b0:	08008123 	.word	0x08008123
 80080b4:	08008123 	.word	0x08008123
 80080b8:	08008123 	.word	0x08008123
 80080bc:	08008123 	.word	0x08008123
 80080c0:	08008123 	.word	0x08008123
 80080c4:	08008123 	.word	0x08008123
 80080c8:	08008123 	.word	0x08008123
 80080cc:	08008123 	.word	0x08008123
 80080d0:	08008123 	.word	0x08008123
 80080d4:	08008123 	.word	0x08008123
 80080d8:	08008123 	.word	0x08008123
 80080dc:	08008123 	.word	0x08008123
 80080e0:	08008123 	.word	0x08008123
 80080e4:	08008123 	.word	0x08008123
 80080e8:	08008123 	.word	0x08008123
 80080ec:	08008123 	.word	0x08008123
 80080f0:	08008123 	.word	0x08008123
 80080f4:	08008123 	.word	0x08008123
 80080f8:	08008123 	.word	0x08008123
 80080fc:	08008123 	.word	0x08008123
 8008100:	08008105 	.word	0x08008105
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 8008104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008106:	3302      	adds	r3, #2
 8008108:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 800810a:	2300      	movs	r3, #0
 800810c:	733b      	strb	r3, [r7, #12]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 800810e:	6a3b      	ldr	r3, [r7, #32]
 8008110:	881b      	ldrh	r3, [r3, #0]
 8008112:	b29b      	uxth	r3, r3
 8008114:	83bb      	strh	r3, [r7, #28]
          Custom_STM_App_Notification(&Notification);
 8008116:	f107 030c 	add.w	r3, r7, #12
 800811a:	4618      	mov	r0, r3
 800811c:	f7ff ff77 	bl	800800e <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 8008120:	e000      	b.n	8008124 <Custom_STM_Event_Handler+0xc4>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8008122:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008124:	e000      	b.n	8008128 <Custom_STM_Event_Handler+0xc8>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8008126:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8008128:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 800812c:	4618      	mov	r0, r3
 800812e:	3730      	adds	r7, #48	@ 0x30
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b08c      	sub	sp, #48	@ 0x30
 8008138:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800813a:	2392      	movs	r3, #146	@ 0x92
 800813c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800813e:	4835      	ldr	r0, [pc, #212]	@ (8008214 <SVCCTL_InitCustomSvc+0xe0>)
 8008140:	f7fe fd9c 	bl	8006c7c <SVCCTL_RegisterSvcHandler>
   *                              = 3
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 3;
 8008144:	2303      	movs	r3, #3
 8008146:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_A_UUID(uuid.Char_UUID_128);
 8008148:	238f      	movs	r3, #143	@ 0x8f
 800814a:	713b      	strb	r3, [r7, #4]
 800814c:	23e5      	movs	r3, #229	@ 0xe5
 800814e:	717b      	strb	r3, [r7, #5]
 8008150:	23b3      	movs	r3, #179	@ 0xb3
 8008152:	71bb      	strb	r3, [r7, #6]
 8008154:	23d5      	movs	r3, #213	@ 0xd5
 8008156:	71fb      	strb	r3, [r7, #7]
 8008158:	232e      	movs	r3, #46	@ 0x2e
 800815a:	723b      	strb	r3, [r7, #8]
 800815c:	237f      	movs	r3, #127	@ 0x7f
 800815e:	727b      	strb	r3, [r7, #9]
 8008160:	234a      	movs	r3, #74	@ 0x4a
 8008162:	72bb      	strb	r3, [r7, #10]
 8008164:	2398      	movs	r3, #152	@ 0x98
 8008166:	72fb      	strb	r3, [r7, #11]
 8008168:	232a      	movs	r3, #42	@ 0x2a
 800816a:	733b      	strb	r3, [r7, #12]
 800816c:	2348      	movs	r3, #72	@ 0x48
 800816e:	737b      	strb	r3, [r7, #13]
 8008170:	237a      	movs	r3, #122	@ 0x7a
 8008172:	73bb      	strb	r3, [r7, #14]
 8008174:	23cc      	movs	r3, #204	@ 0xcc
 8008176:	73fb      	strb	r3, [r7, #15]
 8008178:	2300      	movs	r3, #0
 800817a:	743b      	strb	r3, [r7, #16]
 800817c:	2300      	movs	r3, #0
 800817e:	747b      	strb	r3, [r7, #17]
 8008180:	2300      	movs	r3, #0
 8008182:	74bb      	strb	r3, [r7, #18]
 8008184:	2300      	movs	r3, #0
 8008186:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8008188:	7dbb      	ldrb	r3, [r7, #22]
 800818a:	1d39      	adds	r1, r7, #4
 800818c:	4a22      	ldr	r2, [pc, #136]	@ (8008218 <SVCCTL_InitCustomSvc+0xe4>)
 800818e:	9200      	str	r2, [sp, #0]
 8008190:	2201      	movs	r2, #1
 8008192:	2002      	movs	r0, #2
 8008194:	f7fd ffe5 	bl	8006162 <aci_gatt_add_service>
 8008198:	4603      	mov	r3, r0
 800819a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  c
   */
  COPY_C_UUID(uuid.Char_UUID_128);
 800819c:	2319      	movs	r3, #25
 800819e:	713b      	strb	r3, [r7, #4]
 80081a0:	23ed      	movs	r3, #237	@ 0xed
 80081a2:	717b      	strb	r3, [r7, #5]
 80081a4:	2382      	movs	r3, #130	@ 0x82
 80081a6:	71bb      	strb	r3, [r7, #6]
 80081a8:	23ae      	movs	r3, #174	@ 0xae
 80081aa:	71fb      	strb	r3, [r7, #7]
 80081ac:	23ed      	movs	r3, #237	@ 0xed
 80081ae:	723b      	strb	r3, [r7, #8]
 80081b0:	2321      	movs	r3, #33	@ 0x21
 80081b2:	727b      	strb	r3, [r7, #9]
 80081b4:	234c      	movs	r3, #76	@ 0x4c
 80081b6:	72bb      	strb	r3, [r7, #10]
 80081b8:	239d      	movs	r3, #157	@ 0x9d
 80081ba:	72fb      	strb	r3, [r7, #11]
 80081bc:	2341      	movs	r3, #65	@ 0x41
 80081be:	733b      	strb	r3, [r7, #12]
 80081c0:	2345      	movs	r3, #69	@ 0x45
 80081c2:	737b      	strb	r3, [r7, #13]
 80081c4:	2322      	movs	r3, #34	@ 0x22
 80081c6:	73bb      	strb	r3, [r7, #14]
 80081c8:	238e      	movs	r3, #142	@ 0x8e
 80081ca:	73fb      	strb	r3, [r7, #15]
 80081cc:	2300      	movs	r3, #0
 80081ce:	743b      	strb	r3, [r7, #16]
 80081d0:	2300      	movs	r3, #0
 80081d2:	747b      	strb	r3, [r7, #17]
 80081d4:	2300      	movs	r3, #0
 80081d6:	74bb      	strb	r3, [r7, #18]
 80081d8:	2300      	movs	r3, #0
 80081da:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomBHdle,
 80081dc:	4b0e      	ldr	r3, [pc, #56]	@ (8008218 <SVCCTL_InitCustomSvc+0xe4>)
 80081de:	8818      	ldrh	r0, [r3, #0]
 80081e0:	4b0e      	ldr	r3, [pc, #56]	@ (800821c <SVCCTL_InitCustomSvc+0xe8>)
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	4619      	mov	r1, r3
 80081e6:	1d3a      	adds	r2, r7, #4
 80081e8:	4b0d      	ldr	r3, [pc, #52]	@ (8008220 <SVCCTL_InitCustomSvc+0xec>)
 80081ea:	9305      	str	r3, [sp, #20]
 80081ec:	2300      	movs	r3, #0
 80081ee:	9304      	str	r3, [sp, #16]
 80081f0:	2310      	movs	r3, #16
 80081f2:	9303      	str	r3, [sp, #12]
 80081f4:	2307      	movs	r3, #7
 80081f6:	9302      	str	r3, [sp, #8]
 80081f8:	2300      	movs	r3, #0
 80081fa:	9301      	str	r3, [sp, #4]
 80081fc:	2300      	movs	r3, #0
 80081fe:	9300      	str	r3, [sp, #0]
 8008200:	460b      	mov	r3, r1
 8008202:	2102      	movs	r1, #2
 8008204:	f7fe f883 	bl	800630e <aci_gatt_add_char>
 8008208:	4603      	mov	r3, r0
 800820a:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800820c:	bf00      	nop
}
 800820e:	3718      	adds	r7, #24
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}
 8008214:	08008061 	.word	0x08008061
 8008218:	20000658 	.word	0x20000658
 800821c:	20000021 	.word	0x20000021
 8008220:	2000065a 	.word	0x2000065a

08008224 <LL_PWR_EnableBootC2>:
{
 8008224:	b480      	push	{r7}
 8008226:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8008228:	4b05      	ldr	r3, [pc, #20]	@ (8008240 <LL_PWR_EnableBootC2+0x1c>)
 800822a:	68db      	ldr	r3, [r3, #12]
 800822c:	4a04      	ldr	r2, [pc, #16]	@ (8008240 <LL_PWR_EnableBootC2+0x1c>)
 800822e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008232:	60d3      	str	r3, [r2, #12]
}
 8008234:	bf00      	nop
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop
 8008240:	58000400 	.word	0x58000400

08008244 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800824c:	4b06      	ldr	r3, [pc, #24]	@ (8008268 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800824e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8008252:	4905      	ldr	r1, [pc, #20]	@ (8008268 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	4313      	orrs	r3, r2
 8008258:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800825c:	bf00      	nop
 800825e:	370c      	adds	r7, #12
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr
 8008268:	58000800 	.word	0x58000800

0800826c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8008274:	4b05      	ldr	r3, [pc, #20]	@ (800828c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8008276:	6a1a      	ldr	r2, [r3, #32]
 8008278:	4904      	ldr	r1, [pc, #16]	@ (800828c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4313      	orrs	r3, r2
 800827e:	620b      	str	r3, [r1, #32]
}
 8008280:	bf00      	nop
 8008282:	370c      	adds	r7, #12
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr
 800828c:	58000800 	.word	0x58000800

08008290 <LL_AHB3_GRP1_EnableClock>:
{
 8008290:	b480      	push	{r7}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8008298:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800829c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800829e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4313      	orrs	r3, r2
 80082a6:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80082a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4013      	ands	r3, r2
 80082b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80082b4:	68fb      	ldr	r3, [r7, #12]
}
 80082b6:	bf00      	nop
 80082b8:	3714      	adds	r7, #20
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr

080082c2 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80082c2:	b480      	push	{r7}
 80082c4:	b085      	sub	sp, #20
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80082ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082ce:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80082d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4313      	orrs	r3, r2
 80082da:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80082de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082e2:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4013      	ands	r3, r2
 80082ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80082ec:	68fb      	ldr	r3, [r7, #12]
}
 80082ee:	bf00      	nop
 80082f0:	3714      	adds	r7, #20
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr

080082fa <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 80082fa:	b480      	push	{r7}
 80082fc:	b083      	sub	sp, #12
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	601a      	str	r2, [r3, #0]
}
 800830e:	bf00      	nop
 8008310:	370c      	adds	r7, #12
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr

0800831a <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800831a:	b480      	push	{r7}
 800831c:	b083      	sub	sp, #12
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f043 0201 	orr.w	r2, r3, #1
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	601a      	str	r2, [r3, #0]
}
 800832e:	bf00      	nop
 8008330:	370c      	adds	r7, #12
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr

0800833a <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800833a:	b480      	push	{r7}
 800833c:	b083      	sub	sp, #12
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
 8008342:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	685a      	ldr	r2, [r3, #4]
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	041b      	lsls	r3, r3, #16
 800834c:	43db      	mvns	r3, r3
 800834e:	401a      	ands	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	605a      	str	r2, [r3, #4]
}
 8008354:	bf00      	nop
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	685a      	ldr	r2, [r3, #4]
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	43db      	mvns	r3, r3
 8008372:	401a      	ands	r2, r3
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	605a      	str	r2, [r3, #4]
}
 8008378:	bf00      	nop
 800837a:	370c      	adds	r7, #12
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	041a      	lsls	r2, r3, #16
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	609a      	str	r2, [r3, #8]
}
 8008396:	bf00      	nop
 8008398:	370c      	adds	r7, #12
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr

080083a2 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80083a2:	b480      	push	{r7}
 80083a4:	b083      	sub	sp, #12
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
 80083aa:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	68da      	ldr	r2, [r3, #12]
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	4013      	ands	r3, r2
 80083b4:	683a      	ldr	r2, [r7, #0]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d101      	bne.n	80083be <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80083ba:	2301      	movs	r3, #1
 80083bc:	e000      	b.n	80083c0 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80083be:	2300      	movs	r3, #0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <HW_IPCC_Enable>:
}
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 80083d0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80083d4:	f7ff ff75 	bl	80082c2 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80083d8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80083dc:	f7ff ff46 	bl	800826c <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80083e0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80083e4:	f7ff ff2e 	bl	8008244 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80083e8:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80083ea:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80083ec:	f7ff ff1a 	bl	8008224 <LL_PWR_EnableBootC2>

  return;
 80083f0:	bf00      	nop
}
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80083f8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80083fc:	f7ff ff48 	bl	8008290 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8008400:	4806      	ldr	r0, [pc, #24]	@ (800841c <HW_IPCC_Init+0x28>)
 8008402:	f7ff ff8a 	bl	800831a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8008406:	4805      	ldr	r0, [pc, #20]	@ (800841c <HW_IPCC_Init+0x28>)
 8008408:	f7ff ff77 	bl	80082fa <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800840c:	202c      	movs	r0, #44	@ 0x2c
 800840e:	f7f9 fe9d 	bl	800214c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8008412:	202d      	movs	r0, #45	@ 0x2d
 8008414:	f7f9 fe9a 	bl	800214c <HAL_NVIC_EnableIRQ>

  return;
 8008418:	bf00      	nop
}
 800841a:	bd80      	pop	{r7, pc}
 800841c:	58000c00 	.word	0x58000c00

08008420 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8008420:	b580      	push	{r7, lr}
 8008422:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8008424:	2101      	movs	r1, #1
 8008426:	4802      	ldr	r0, [pc, #8]	@ (8008430 <HW_IPCC_BLE_Init+0x10>)
 8008428:	f7ff ff9a 	bl	8008360 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800842c:	bf00      	nop
}
 800842e:	bd80      	pop	{r7, pc}
 8008430:	58000c00 	.word	0x58000c00

08008434 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8008434:	b580      	push	{r7, lr}
 8008436:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8008438:	2101      	movs	r1, #1
 800843a:	4802      	ldr	r0, [pc, #8]	@ (8008444 <HW_IPCC_BLE_SendCmd+0x10>)
 800843c:	f7ff ffa2 	bl	8008384 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8008440:	bf00      	nop
}
 8008442:	bd80      	pop	{r7, pc}
 8008444:	58000c00 	.word	0x58000c00

08008448 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8008448:	b580      	push	{r7, lr}
 800844a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800844c:	2102      	movs	r1, #2
 800844e:	4802      	ldr	r0, [pc, #8]	@ (8008458 <HW_IPCC_SYS_Init+0x10>)
 8008450:	f7ff ff86 	bl	8008360 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008454:	bf00      	nop
}
 8008456:	bd80      	pop	{r7, pc}
 8008458:	58000c00 	.word	0x58000c00

0800845c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800845c:	b580      	push	{r7, lr}
 800845e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008460:	2102      	movs	r1, #2
 8008462:	4804      	ldr	r0, [pc, #16]	@ (8008474 <HW_IPCC_SYS_SendCmd+0x18>)
 8008464:	f7ff ff8e 	bl	8008384 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008468:	2102      	movs	r1, #2
 800846a:	4802      	ldr	r0, [pc, #8]	@ (8008474 <HW_IPCC_SYS_SendCmd+0x18>)
 800846c:	f7ff ff65 	bl	800833a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8008470:	bf00      	nop
}
 8008472:	bd80      	pop	{r7, pc}
 8008474:	58000c00 	.word	0x58000c00

08008478 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8008480:	2108      	movs	r1, #8
 8008482:	480c      	ldr	r0, [pc, #48]	@ (80084b4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008484:	f7ff ff8d 	bl	80083a2 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d007      	beq.n	800849e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800848e:	4a0a      	ldr	r2, [pc, #40]	@ (80084b8 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008494:	2108      	movs	r1, #8
 8008496:	4807      	ldr	r0, [pc, #28]	@ (80084b4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008498:	f7ff ff4f 	bl	800833a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800849c:	e006      	b.n	80084ac <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80084a2:	2108      	movs	r1, #8
 80084a4:	4803      	ldr	r0, [pc, #12]	@ (80084b4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80084a6:	f7ff ff6d 	bl	8008384 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80084aa:	bf00      	nop
}
 80084ac:	3708      	adds	r7, #8
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	58000c00 	.word	0x58000c00
 80084b8:	2000065c 	.word	0x2000065c

080084bc <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80084c0:	2108      	movs	r1, #8
 80084c2:	4802      	ldr	r0, [pc, #8]	@ (80084cc <HW_IPCC_TRACES_Init+0x10>)
 80084c4:	f7ff ff4c 	bl	8008360 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80084c8:	bf00      	nop
}
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	58000c00 	.word	0x58000c00

080084d0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 80084d0:	b480      	push	{r7}
 80084d2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80084d4:	4b05      	ldr	r3, [pc, #20]	@ (80084ec <UTIL_LPM_Init+0x1c>)
 80084d6:	2200      	movs	r2, #0
 80084d8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80084da:	4b05      	ldr	r3, [pc, #20]	@ (80084f0 <UTIL_LPM_Init+0x20>)
 80084dc:	2200      	movs	r2, #0
 80084de:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80084e0:	bf00      	nop
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr
 80084ea:	bf00      	nop
 80084ec:	20000660 	.word	0x20000660
 80084f0:	20000664 	.word	0x20000664

080084f4 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80084f4:	b480      	push	{r7}
 80084f6:	b087      	sub	sp, #28
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	460b      	mov	r3, r1
 80084fe:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008500:	f3ef 8310 	mrs	r3, PRIMASK
 8008504:	613b      	str	r3, [r7, #16]
  return(result);
 8008506:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8008508:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800850a:	b672      	cpsid	i
}
 800850c:	bf00      	nop
  
  switch(state)
 800850e:	78fb      	ldrb	r3, [r7, #3]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d008      	beq.n	8008526 <UTIL_LPM_SetOffMode+0x32>
 8008514:	2b01      	cmp	r3, #1
 8008516:	d10e      	bne.n	8008536 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8008518:	4b0d      	ldr	r3, [pc, #52]	@ (8008550 <UTIL_LPM_SetOffMode+0x5c>)
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	4313      	orrs	r3, r2
 8008520:	4a0b      	ldr	r2, [pc, #44]	@ (8008550 <UTIL_LPM_SetOffMode+0x5c>)
 8008522:	6013      	str	r3, [r2, #0]
      break;
 8008524:	e008      	b.n	8008538 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	43da      	mvns	r2, r3
 800852a:	4b09      	ldr	r3, [pc, #36]	@ (8008550 <UTIL_LPM_SetOffMode+0x5c>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4013      	ands	r3, r2
 8008530:	4a07      	ldr	r2, [pc, #28]	@ (8008550 <UTIL_LPM_SetOffMode+0x5c>)
 8008532:	6013      	str	r3, [r2, #0]
      break;
 8008534:	e000      	b.n	8008538 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8008536:	bf00      	nop
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f383 8810 	msr	PRIMASK, r3
}
 8008542:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8008544:	bf00      	nop
 8008546:	371c      	adds	r7, #28
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr
 8008550:	20000664 	.word	0x20000664

08008554 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b090      	sub	sp, #64	@ 0x40
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800855c:	4b73      	ldr	r3, [pc, #460]	@ (800872c <UTIL_SEQ_Run+0x1d8>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8008562:	4b72      	ldr	r3, [pc, #456]	@ (800872c <UTIL_SEQ_Run+0x1d8>)
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4013      	ands	r3, r2
 800856a:	4a70      	ldr	r2, [pc, #448]	@ (800872c <UTIL_SEQ_Run+0x1d8>)
 800856c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800856e:	4b70      	ldr	r3, [pc, #448]	@ (8008730 <UTIL_SEQ_Run+0x1dc>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8008574:	4b6f      	ldr	r3, [pc, #444]	@ (8008734 <UTIL_SEQ_Run+0x1e0>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800857a:	4b6f      	ldr	r3, [pc, #444]	@ (8008738 <UTIL_SEQ_Run+0x1e4>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8008580:	4b6e      	ldr	r3, [pc, #440]	@ (800873c <UTIL_SEQ_Run+0x1e8>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8008586:	e08d      	b.n	80086a4 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8008588:	2300      	movs	r3, #0
 800858a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800858c:	e002      	b.n	8008594 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800858e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008590:	3301      	adds	r3, #1
 8008592:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8008594:	4a6a      	ldr	r2, [pc, #424]	@ (8008740 <UTIL_SEQ_Run+0x1ec>)
 8008596:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008598:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800859c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800859e:	401a      	ands	r2, r3
 80085a0:	4b62      	ldr	r3, [pc, #392]	@ (800872c <UTIL_SEQ_Run+0x1d8>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4013      	ands	r3, r2
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d0f1      	beq.n	800858e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 80085aa:	4a65      	ldr	r2, [pc, #404]	@ (8008740 <UTIL_SEQ_Run+0x1ec>)
 80085ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085ae:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80085b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b4:	401a      	ands	r2, r3
 80085b6:	4b5d      	ldr	r3, [pc, #372]	@ (800872c <UTIL_SEQ_Run+0x1d8>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4013      	ands	r3, r2
 80085bc:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80085be:	4a60      	ldr	r2, [pc, #384]	@ (8008740 <UTIL_SEQ_Run+0x1ec>)
 80085c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085c2:	00db      	lsls	r3, r3, #3
 80085c4:	4413      	add	r3, r2
 80085c6:	685a      	ldr	r2, [r3, #4]
 80085c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ca:	4013      	ands	r3, r2
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d106      	bne.n	80085de <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80085d0:	4a5b      	ldr	r2, [pc, #364]	@ (8008740 <UTIL_SEQ_Run+0x1ec>)
 80085d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085d4:	00db      	lsls	r3, r3, #3
 80085d6:	4413      	add	r3, r2
 80085d8:	f04f 32ff 	mov.w	r2, #4294967295
 80085dc:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80085de:	4a58      	ldr	r2, [pc, #352]	@ (8008740 <UTIL_SEQ_Run+0x1ec>)
 80085e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085e2:	00db      	lsls	r3, r3, #3
 80085e4:	4413      	add	r3, r2
 80085e6:	685a      	ldr	r2, [r3, #4]
 80085e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ea:	4013      	ands	r3, r2
 80085ec:	4618      	mov	r0, r3
 80085ee:	f000 f9b3 	bl	8008958 <SEQ_BitPosition>
 80085f2:	4603      	mov	r3, r0
 80085f4:	461a      	mov	r2, r3
 80085f6:	4b53      	ldr	r3, [pc, #332]	@ (8008744 <UTIL_SEQ_Run+0x1f0>)
 80085f8:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80085fa:	4a51      	ldr	r2, [pc, #324]	@ (8008740 <UTIL_SEQ_Run+0x1ec>)
 80085fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085fe:	00db      	lsls	r3, r3, #3
 8008600:	4413      	add	r3, r2
 8008602:	685a      	ldr	r2, [r3, #4]
 8008604:	4b4f      	ldr	r3, [pc, #316]	@ (8008744 <UTIL_SEQ_Run+0x1f0>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2101      	movs	r1, #1
 800860a:	fa01 f303 	lsl.w	r3, r1, r3
 800860e:	43db      	mvns	r3, r3
 8008610:	401a      	ands	r2, r3
 8008612:	494b      	ldr	r1, [pc, #300]	@ (8008740 <UTIL_SEQ_Run+0x1ec>)
 8008614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008616:	00db      	lsls	r3, r3, #3
 8008618:	440b      	add	r3, r1
 800861a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800861c:	f3ef 8310 	mrs	r3, PRIMASK
 8008620:	61bb      	str	r3, [r7, #24]
  return(result);
 8008622:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008624:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8008626:	b672      	cpsid	i
}
 8008628:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800862a:	4b46      	ldr	r3, [pc, #280]	@ (8008744 <UTIL_SEQ_Run+0x1f0>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2201      	movs	r2, #1
 8008630:	fa02 f303 	lsl.w	r3, r2, r3
 8008634:	43da      	mvns	r2, r3
 8008636:	4b3e      	ldr	r3, [pc, #248]	@ (8008730 <UTIL_SEQ_Run+0x1dc>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4013      	ands	r3, r2
 800863c:	4a3c      	ldr	r2, [pc, #240]	@ (8008730 <UTIL_SEQ_Run+0x1dc>)
 800863e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8008640:	2302      	movs	r3, #2
 8008642:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008644:	e013      	b.n	800866e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8008646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008648:	3b01      	subs	r3, #1
 800864a:	4a3d      	ldr	r2, [pc, #244]	@ (8008740 <UTIL_SEQ_Run+0x1ec>)
 800864c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8008650:	4b3c      	ldr	r3, [pc, #240]	@ (8008744 <UTIL_SEQ_Run+0x1f0>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2201      	movs	r2, #1
 8008656:	fa02 f303 	lsl.w	r3, r2, r3
 800865a:	43da      	mvns	r2, r3
 800865c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800865e:	3b01      	subs	r3, #1
 8008660:	400a      	ands	r2, r1
 8008662:	4937      	ldr	r1, [pc, #220]	@ (8008740 <UTIL_SEQ_Run+0x1ec>)
 8008664:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8008668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800866a:	3b01      	subs	r3, #1
 800866c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800866e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008670:	2b00      	cmp	r3, #0
 8008672:	d1e8      	bne.n	8008646 <UTIL_SEQ_Run+0xf2>
 8008674:	6a3b      	ldr	r3, [r7, #32]
 8008676:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	f383 8810 	msr	PRIMASK, r3
}
 800867e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8008680:	4b30      	ldr	r3, [pc, #192]	@ (8008744 <UTIL_SEQ_Run+0x1f0>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a30      	ldr	r2, [pc, #192]	@ (8008748 <UTIL_SEQ_Run+0x1f4>)
 8008686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800868a:	4798      	blx	r3

    local_taskset = TaskSet;
 800868c:	4b28      	ldr	r3, [pc, #160]	@ (8008730 <UTIL_SEQ_Run+0x1dc>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 8008692:	4b28      	ldr	r3, [pc, #160]	@ (8008734 <UTIL_SEQ_Run+0x1e0>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8008698:	4b27      	ldr	r3, [pc, #156]	@ (8008738 <UTIL_SEQ_Run+0x1e4>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800869e:	4b27      	ldr	r3, [pc, #156]	@ (800873c <UTIL_SEQ_Run+0x1e8>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80086a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80086a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a8:	401a      	ands	r2, r3
 80086aa:	4b20      	ldr	r3, [pc, #128]	@ (800872c <UTIL_SEQ_Run+0x1d8>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4013      	ands	r3, r2
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d005      	beq.n	80086c0 <UTIL_SEQ_Run+0x16c>
 80086b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80086b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086b8:	4013      	ands	r3, r2
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	f43f af64 	beq.w	8008588 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80086c0:	4b20      	ldr	r3, [pc, #128]	@ (8008744 <UTIL_SEQ_Run+0x1f0>)
 80086c2:	f04f 32ff 	mov.w	r2, #4294967295
 80086c6:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80086c8:	f000 f938 	bl	800893c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086cc:	f3ef 8310 	mrs	r3, PRIMASK
 80086d0:	613b      	str	r3, [r7, #16]
  return(result);
 80086d2:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 80086d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80086d6:	b672      	cpsid	i
}
 80086d8:	bf00      	nop
  local_taskset = TaskSet;
 80086da:	4b15      	ldr	r3, [pc, #84]	@ (8008730 <UTIL_SEQ_Run+0x1dc>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 80086e0:	4b14      	ldr	r3, [pc, #80]	@ (8008734 <UTIL_SEQ_Run+0x1e0>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 80086e6:	4b14      	ldr	r3, [pc, #80]	@ (8008738 <UTIL_SEQ_Run+0x1e4>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 80086ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80086ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f0:	401a      	ands	r2, r3
 80086f2:	4b0e      	ldr	r3, [pc, #56]	@ (800872c <UTIL_SEQ_Run+0x1d8>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4013      	ands	r3, r2
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d107      	bne.n	800870c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 80086fc:	4b0f      	ldr	r3, [pc, #60]	@ (800873c <UTIL_SEQ_Run+0x1e8>)
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008702:	4013      	ands	r3, r2
 8008704:	2b00      	cmp	r3, #0
 8008706:	d101      	bne.n	800870c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8008708:	f7f8 f8bf 	bl	800088a <UTIL_SEQ_Idle>
 800870c:	69fb      	ldr	r3, [r7, #28]
 800870e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f383 8810 	msr	PRIMASK, r3
}
 8008716:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8008718:	f000 f917 	bl	800894a <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800871c:	4a03      	ldr	r2, [pc, #12]	@ (800872c <UTIL_SEQ_Run+0x1d8>)
 800871e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008720:	6013      	str	r3, [r2, #0]

  return;
 8008722:	bf00      	nop
}
 8008724:	3740      	adds	r7, #64	@ 0x40
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	20000028 	.word	0x20000028
 8008730:	20000668 	.word	0x20000668
 8008734:	2000066c 	.word	0x2000066c
 8008738:	20000024 	.word	0x20000024
 800873c:	20000670 	.word	0x20000670
 8008740:	200006f8 	.word	0x200006f8
 8008744:	20000674 	.word	0x20000674
 8008748:	20000678 	.word	0x20000678

0800874c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b088      	sub	sp, #32
 8008750:	af00      	add	r7, sp, #0
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008758:	f3ef 8310 	mrs	r3, PRIMASK
 800875c:	617b      	str	r3, [r7, #20]
  return(result);
 800875e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8008760:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8008762:	b672      	cpsid	i
}
 8008764:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8008766:	68f8      	ldr	r0, [r7, #12]
 8008768:	f000 f8f6 	bl	8008958 <SEQ_BitPosition>
 800876c:	4603      	mov	r3, r0
 800876e:	4619      	mov	r1, r3
 8008770:	4a06      	ldr	r2, [pc, #24]	@ (800878c <UTIL_SEQ_RegTask+0x40>)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800877c:	69bb      	ldr	r3, [r7, #24]
 800877e:	f383 8810 	msr	PRIMASK, r3
}
 8008782:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8008784:	bf00      	nop
}
 8008786:	3720      	adds	r7, #32
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}
 800878c:	20000678 	.word	0x20000678

08008790 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8008790:	b480      	push	{r7}
 8008792:	b087      	sub	sp, #28
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800879a:	f3ef 8310 	mrs	r3, PRIMASK
 800879e:	60fb      	str	r3, [r7, #12]
  return(result);
 80087a0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80087a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80087a4:	b672      	cpsid	i
}
 80087a6:	bf00      	nop

  TaskSet |= TaskId_bm;
 80087a8:	4b0d      	ldr	r3, [pc, #52]	@ (80087e0 <UTIL_SEQ_SetTask+0x50>)
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	4a0b      	ldr	r2, [pc, #44]	@ (80087e0 <UTIL_SEQ_SetTask+0x50>)
 80087b2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80087b4:	4a0b      	ldr	r2, [pc, #44]	@ (80087e4 <UTIL_SEQ_SetTask+0x54>)
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	431a      	orrs	r2, r3
 80087c0:	4908      	ldr	r1, [pc, #32]	@ (80087e4 <UTIL_SEQ_SetTask+0x54>)
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	f383 8810 	msr	PRIMASK, r3
}
 80087d2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80087d4:	bf00      	nop
}
 80087d6:	371c      	adds	r7, #28
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr
 80087e0:	20000668 	.word	0x20000668
 80087e4:	200006f8 	.word	0x200006f8

080087e8 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80087e8:	b480      	push	{r7}
 80087ea:	b087      	sub	sp, #28
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087f0:	f3ef 8310 	mrs	r3, PRIMASK
 80087f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80087f6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80087f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80087fa:	b672      	cpsid	i
}
 80087fc:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	43da      	mvns	r2, r3
 8008802:	4b08      	ldr	r3, [pc, #32]	@ (8008824 <UTIL_SEQ_PauseTask+0x3c>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4013      	ands	r3, r2
 8008808:	4a06      	ldr	r2, [pc, #24]	@ (8008824 <UTIL_SEQ_PauseTask+0x3c>)
 800880a:	6013      	str	r3, [r2, #0]
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	f383 8810 	msr	PRIMASK, r3
}
 8008816:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008818:	bf00      	nop
}
 800881a:	371c      	adds	r7, #28
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr
 8008824:	20000024 	.word	0x20000024

08008828 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8008828:	b480      	push	{r7}
 800882a:	b087      	sub	sp, #28
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008830:	f3ef 8310 	mrs	r3, PRIMASK
 8008834:	60fb      	str	r3, [r7, #12]
  return(result);
 8008836:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008838:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800883a:	b672      	cpsid	i
}
 800883c:	bf00      	nop

  TaskMask |= TaskId_bm;
 800883e:	4b09      	ldr	r3, [pc, #36]	@ (8008864 <UTIL_SEQ_ResumeTask+0x3c>)
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4313      	orrs	r3, r2
 8008846:	4a07      	ldr	r2, [pc, #28]	@ (8008864 <UTIL_SEQ_ResumeTask+0x3c>)
 8008848:	6013      	str	r3, [r2, #0]
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	f383 8810 	msr	PRIMASK, r3
}
 8008854:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008856:	bf00      	nop
}
 8008858:	371c      	adds	r7, #28
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop
 8008864:	20000024 	.word	0x20000024

08008868 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8008868:	b480      	push	{r7}
 800886a:	b087      	sub	sp, #28
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008870:	f3ef 8310 	mrs	r3, PRIMASK
 8008874:	60fb      	str	r3, [r7, #12]
  return(result);
 8008876:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008878:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800887a:	b672      	cpsid	i
}
 800887c:	bf00      	nop

  EvtSet |= EvtId_bm;
 800887e:	4b09      	ldr	r3, [pc, #36]	@ (80088a4 <UTIL_SEQ_SetEvt+0x3c>)
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4313      	orrs	r3, r2
 8008886:	4a07      	ldr	r2, [pc, #28]	@ (80088a4 <UTIL_SEQ_SetEvt+0x3c>)
 8008888:	6013      	str	r3, [r2, #0]
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	f383 8810 	msr	PRIMASK, r3
}
 8008894:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008896:	bf00      	nop
}
 8008898:	371c      	adds	r7, #28
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	2000066c 	.word	0x2000066c

080088a8 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b088      	sub	sp, #32
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80088b0:	4b1f      	ldr	r3, [pc, #124]	@ (8008930 <UTIL_SEQ_WaitEvt+0x88>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 80088b6:	4b1e      	ldr	r3, [pc, #120]	@ (8008930 <UTIL_SEQ_WaitEvt+0x88>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088be:	d102      	bne.n	80088c6 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 80088c0:	2300      	movs	r3, #0
 80088c2:	61fb      	str	r3, [r7, #28]
 80088c4:	e005      	b.n	80088d2 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 80088c6:	4b1a      	ldr	r3, [pc, #104]	@ (8008930 <UTIL_SEQ_WaitEvt+0x88>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2201      	movs	r2, #1
 80088cc:	fa02 f303 	lsl.w	r3, r2, r3
 80088d0:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80088d2:	4b18      	ldr	r3, [pc, #96]	@ (8008934 <UTIL_SEQ_WaitEvt+0x8c>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 80088d8:	4a16      	ldr	r2, [pc, #88]	@ (8008934 <UTIL_SEQ_WaitEvt+0x8c>)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 80088de:	e003      	b.n	80088e8 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 80088e0:	6879      	ldr	r1, [r7, #4]
 80088e2:	69f8      	ldr	r0, [r7, #28]
 80088e4:	f7f7 ffd8 	bl	8000898 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 80088e8:	4b13      	ldr	r3, [pc, #76]	@ (8008938 <UTIL_SEQ_WaitEvt+0x90>)
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	4013      	ands	r3, r2
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d0f5      	beq.n	80088e0 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 80088f4:	4a0e      	ldr	r2, [pc, #56]	@ (8008930 <UTIL_SEQ_WaitEvt+0x88>)
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088fa:	f3ef 8310 	mrs	r3, PRIMASK
 80088fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8008900:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008902:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008904:	b672      	cpsid	i
}
 8008906:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	43da      	mvns	r2, r3
 800890c:	4b0a      	ldr	r3, [pc, #40]	@ (8008938 <UTIL_SEQ_WaitEvt+0x90>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4013      	ands	r3, r2
 8008912:	4a09      	ldr	r2, [pc, #36]	@ (8008938 <UTIL_SEQ_WaitEvt+0x90>)
 8008914:	6013      	str	r3, [r2, #0]
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f383 8810 	msr	PRIMASK, r3
}
 8008920:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8008922:	4a04      	ldr	r2, [pc, #16]	@ (8008934 <UTIL_SEQ_WaitEvt+0x8c>)
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	6013      	str	r3, [r2, #0]
  return;
 8008928:	bf00      	nop
}
 800892a:	3720      	adds	r7, #32
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}
 8008930:	20000674 	.word	0x20000674
 8008934:	20000670 	.word	0x20000670
 8008938:	2000066c 	.word	0x2000066c

0800893c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800893c:	b480      	push	{r7}
 800893e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8008940:	bf00      	nop
}
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr

0800894a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800894a:	b480      	push	{r7}
 800894c:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800894e:	bf00      	nop
}
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr

08008958 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8008958:	b480      	push	{r7}
 800895a:	b085      	sub	sp, #20
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8008960:	2300      	movs	r3, #0
 8008962:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800896e:	d204      	bcs.n	800897a <SEQ_BitPosition+0x22>
 8008970:	2310      	movs	r3, #16
 8008972:	73fb      	strb	r3, [r7, #15]
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	041b      	lsls	r3, r3, #16
 8008978:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008980:	d205      	bcs.n	800898e <SEQ_BitPosition+0x36>
 8008982:	7bfb      	ldrb	r3, [r7, #15]
 8008984:	3308      	adds	r3, #8
 8008986:	73fb      	strb	r3, [r7, #15]
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	021b      	lsls	r3, r3, #8
 800898c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008994:	d205      	bcs.n	80089a2 <SEQ_BitPosition+0x4a>
 8008996:	7bfb      	ldrb	r3, [r7, #15]
 8008998:	3304      	adds	r3, #4
 800899a:	73fb      	strb	r3, [r7, #15]
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	011b      	lsls	r3, r3, #4
 80089a0:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	0f1b      	lsrs	r3, r3, #28
 80089a6:	4a07      	ldr	r2, [pc, #28]	@ (80089c4 <SEQ_BitPosition+0x6c>)
 80089a8:	5cd2      	ldrb	r2, [r2, r3]
 80089aa:	7bfb      	ldrb	r3, [r7, #15]
 80089ac:	4413      	add	r3, r2
 80089ae:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80089b0:	7bfb      	ldrb	r3, [r7, #15]
 80089b2:	f1c3 031f 	rsb	r3, r3, #31
 80089b6:	b2db      	uxtb	r3, r3
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3714      	adds	r7, #20
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr
 80089c4:	08008d04 	.word	0x08008d04

080089c8 <memset>:
 80089c8:	4402      	add	r2, r0
 80089ca:	4603      	mov	r3, r0
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d100      	bne.n	80089d2 <memset+0xa>
 80089d0:	4770      	bx	lr
 80089d2:	f803 1b01 	strb.w	r1, [r3], #1
 80089d6:	e7f9      	b.n	80089cc <memset+0x4>

080089d8 <__libc_init_array>:
 80089d8:	b570      	push	{r4, r5, r6, lr}
 80089da:	4d0d      	ldr	r5, [pc, #52]	@ (8008a10 <__libc_init_array+0x38>)
 80089dc:	4c0d      	ldr	r4, [pc, #52]	@ (8008a14 <__libc_init_array+0x3c>)
 80089de:	1b64      	subs	r4, r4, r5
 80089e0:	10a4      	asrs	r4, r4, #2
 80089e2:	2600      	movs	r6, #0
 80089e4:	42a6      	cmp	r6, r4
 80089e6:	d109      	bne.n	80089fc <__libc_init_array+0x24>
 80089e8:	4d0b      	ldr	r5, [pc, #44]	@ (8008a18 <__libc_init_array+0x40>)
 80089ea:	4c0c      	ldr	r4, [pc, #48]	@ (8008a1c <__libc_init_array+0x44>)
 80089ec:	f000 f826 	bl	8008a3c <_init>
 80089f0:	1b64      	subs	r4, r4, r5
 80089f2:	10a4      	asrs	r4, r4, #2
 80089f4:	2600      	movs	r6, #0
 80089f6:	42a6      	cmp	r6, r4
 80089f8:	d105      	bne.n	8008a06 <__libc_init_array+0x2e>
 80089fa:	bd70      	pop	{r4, r5, r6, pc}
 80089fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a00:	4798      	blx	r3
 8008a02:	3601      	adds	r6, #1
 8008a04:	e7ee      	b.n	80089e4 <__libc_init_array+0xc>
 8008a06:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a0a:	4798      	blx	r3
 8008a0c:	3601      	adds	r6, #1
 8008a0e:	e7f2      	b.n	80089f6 <__libc_init_array+0x1e>
 8008a10:	08008d1c 	.word	0x08008d1c
 8008a14:	08008d1c 	.word	0x08008d1c
 8008a18:	08008d1c 	.word	0x08008d1c
 8008a1c:	08008d20 	.word	0x08008d20

08008a20 <memcpy>:
 8008a20:	440a      	add	r2, r1
 8008a22:	4291      	cmp	r1, r2
 8008a24:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a28:	d100      	bne.n	8008a2c <memcpy+0xc>
 8008a2a:	4770      	bx	lr
 8008a2c:	b510      	push	{r4, lr}
 8008a2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a36:	4291      	cmp	r1, r2
 8008a38:	d1f9      	bne.n	8008a2e <memcpy+0xe>
 8008a3a:	bd10      	pop	{r4, pc}

08008a3c <_init>:
 8008a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a3e:	bf00      	nop
 8008a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a42:	bc08      	pop	{r3}
 8008a44:	469e      	mov	lr, r3
 8008a46:	4770      	bx	lr

08008a48 <_fini>:
 8008a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a4a:	bf00      	nop
 8008a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a4e:	bc08      	pop	{r3}
 8008a50:	469e      	mov	lr, r3
 8008a52:	4770      	bx	lr
