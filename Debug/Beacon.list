
Beacon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c60  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  08008d9c  08008d9c  00009d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009058  08009058  0000a058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009060  08009060  0000a060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009064  08009064  0000a064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000028  20000008  08009068  0000b008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000030  08009090  0000b030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000068  080090c5  0000b068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000690  2000007c  080090d6  0000b07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000070c  080090d6  0000b70c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000ba67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0000c000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0000c000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  080090d6  0000b1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   00033448  00000000  00000000  0000ba97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000066e8  00000000  00000000  0003eedf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002dc8  00000000  00000000  000455c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000233f  00000000  00000000  00048390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002cfe6  00000000  00000000  0004a6cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000327f4  00000000  00000000  000776b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001044d4  00000000  00000000  000a9ea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001ae37d  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000c1a0  00000000  00000000  001ae3c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000052  00000000  00000000  001ba560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000007c 	.word	0x2000007c
 8000158:	00000000 	.word	0x00000000
 800015c:	08008d84 	.word	0x08008d84

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000080 	.word	0x20000080
 8000178:	08008d84 	.word	0x08008d84

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b96a 	b.w	8000478 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9d08      	ldr	r5, [sp, #32]
 80001c2:	460c      	mov	r4, r1
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d14e      	bne.n	8000266 <__udivmoddi4+0xaa>
 80001c8:	4694      	mov	ip, r2
 80001ca:	458c      	cmp	ip, r1
 80001cc:	4686      	mov	lr, r0
 80001ce:	fab2 f282 	clz	r2, r2
 80001d2:	d962      	bls.n	800029a <__udivmoddi4+0xde>
 80001d4:	b14a      	cbz	r2, 80001ea <__udivmoddi4+0x2e>
 80001d6:	f1c2 0320 	rsb	r3, r2, #32
 80001da:	4091      	lsls	r1, r2
 80001dc:	fa20 f303 	lsr.w	r3, r0, r3
 80001e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001e4:	4319      	orrs	r1, r3
 80001e6:	fa00 fe02 	lsl.w	lr, r0, r2
 80001ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001ee:	fa1f f68c 	uxth.w	r6, ip
 80001f2:	fbb1 f4f7 	udiv	r4, r1, r7
 80001f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001fa:	fb07 1114 	mls	r1, r7, r4, r1
 80001fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000202:	fb04 f106 	mul.w	r1, r4, r6
 8000206:	4299      	cmp	r1, r3
 8000208:	d90a      	bls.n	8000220 <__udivmoddi4+0x64>
 800020a:	eb1c 0303 	adds.w	r3, ip, r3
 800020e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000212:	f080 8112 	bcs.w	800043a <__udivmoddi4+0x27e>
 8000216:	4299      	cmp	r1, r3
 8000218:	f240 810f 	bls.w	800043a <__udivmoddi4+0x27e>
 800021c:	3c02      	subs	r4, #2
 800021e:	4463      	add	r3, ip
 8000220:	1a59      	subs	r1, r3, r1
 8000222:	fa1f f38e 	uxth.w	r3, lr
 8000226:	fbb1 f0f7 	udiv	r0, r1, r7
 800022a:	fb07 1110 	mls	r1, r7, r0, r1
 800022e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000232:	fb00 f606 	mul.w	r6, r0, r6
 8000236:	429e      	cmp	r6, r3
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0303 	adds.w	r3, ip, r3
 800023e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000242:	f080 80fc 	bcs.w	800043e <__udivmoddi4+0x282>
 8000246:	429e      	cmp	r6, r3
 8000248:	f240 80f9 	bls.w	800043e <__udivmoddi4+0x282>
 800024c:	4463      	add	r3, ip
 800024e:	3802      	subs	r0, #2
 8000250:	1b9b      	subs	r3, r3, r6
 8000252:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000256:	2100      	movs	r1, #0
 8000258:	b11d      	cbz	r5, 8000262 <__udivmoddi4+0xa6>
 800025a:	40d3      	lsrs	r3, r2
 800025c:	2200      	movs	r2, #0
 800025e:	e9c5 3200 	strd	r3, r2, [r5]
 8000262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000266:	428b      	cmp	r3, r1
 8000268:	d905      	bls.n	8000276 <__udivmoddi4+0xba>
 800026a:	b10d      	cbz	r5, 8000270 <__udivmoddi4+0xb4>
 800026c:	e9c5 0100 	strd	r0, r1, [r5]
 8000270:	2100      	movs	r1, #0
 8000272:	4608      	mov	r0, r1
 8000274:	e7f5      	b.n	8000262 <__udivmoddi4+0xa6>
 8000276:	fab3 f183 	clz	r1, r3
 800027a:	2900      	cmp	r1, #0
 800027c:	d146      	bne.n	800030c <__udivmoddi4+0x150>
 800027e:	42a3      	cmp	r3, r4
 8000280:	d302      	bcc.n	8000288 <__udivmoddi4+0xcc>
 8000282:	4290      	cmp	r0, r2
 8000284:	f0c0 80f0 	bcc.w	8000468 <__udivmoddi4+0x2ac>
 8000288:	1a86      	subs	r6, r0, r2
 800028a:	eb64 0303 	sbc.w	r3, r4, r3
 800028e:	2001      	movs	r0, #1
 8000290:	2d00      	cmp	r5, #0
 8000292:	d0e6      	beq.n	8000262 <__udivmoddi4+0xa6>
 8000294:	e9c5 6300 	strd	r6, r3, [r5]
 8000298:	e7e3      	b.n	8000262 <__udivmoddi4+0xa6>
 800029a:	2a00      	cmp	r2, #0
 800029c:	f040 8090 	bne.w	80003c0 <__udivmoddi4+0x204>
 80002a0:	eba1 040c 	sub.w	r4, r1, ip
 80002a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a8:	fa1f f78c 	uxth.w	r7, ip
 80002ac:	2101      	movs	r1, #1
 80002ae:	fbb4 f6f8 	udiv	r6, r4, r8
 80002b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002b6:	fb08 4416 	mls	r4, r8, r6, r4
 80002ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002be:	fb07 f006 	mul.w	r0, r7, r6
 80002c2:	4298      	cmp	r0, r3
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x11c>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 34ff 	add.w	r4, r6, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x11a>
 80002d0:	4298      	cmp	r0, r3
 80002d2:	f200 80cd 	bhi.w	8000470 <__udivmoddi4+0x2b4>
 80002d6:	4626      	mov	r6, r4
 80002d8:	1a1c      	subs	r4, r3, r0
 80002da:	fa1f f38e 	uxth.w	r3, lr
 80002de:	fbb4 f0f8 	udiv	r0, r4, r8
 80002e2:	fb08 4410 	mls	r4, r8, r0, r4
 80002e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002ea:	fb00 f707 	mul.w	r7, r0, r7
 80002ee:	429f      	cmp	r7, r3
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0x148>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f100 34ff 	add.w	r4, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x146>
 80002fc:	429f      	cmp	r7, r3
 80002fe:	f200 80b0 	bhi.w	8000462 <__udivmoddi4+0x2a6>
 8000302:	4620      	mov	r0, r4
 8000304:	1bdb      	subs	r3, r3, r7
 8000306:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030a:	e7a5      	b.n	8000258 <__udivmoddi4+0x9c>
 800030c:	f1c1 0620 	rsb	r6, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 f706 	lsr.w	r7, r2, r6
 8000316:	431f      	orrs	r7, r3
 8000318:	fa20 fc06 	lsr.w	ip, r0, r6
 800031c:	fa04 f301 	lsl.w	r3, r4, r1
 8000320:	ea43 030c 	orr.w	r3, r3, ip
 8000324:	40f4      	lsrs	r4, r6
 8000326:	fa00 f801 	lsl.w	r8, r0, r1
 800032a:	0c38      	lsrs	r0, r7, #16
 800032c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000330:	fbb4 fef0 	udiv	lr, r4, r0
 8000334:	fa1f fc87 	uxth.w	ip, r7
 8000338:	fb00 441e 	mls	r4, r0, lr, r4
 800033c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000340:	fb0e f90c 	mul.w	r9, lr, ip
 8000344:	45a1      	cmp	r9, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x1a6>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000352:	f080 8084 	bcs.w	800045e <__udivmoddi4+0x2a2>
 8000356:	45a1      	cmp	r9, r4
 8000358:	f240 8081 	bls.w	800045e <__udivmoddi4+0x2a2>
 800035c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000360:	443c      	add	r4, r7
 8000362:	eba4 0409 	sub.w	r4, r4, r9
 8000366:	fa1f f983 	uxth.w	r9, r3
 800036a:	fbb4 f3f0 	udiv	r3, r4, r0
 800036e:	fb00 4413 	mls	r4, r0, r3, r4
 8000372:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000376:	fb03 fc0c 	mul.w	ip, r3, ip
 800037a:	45a4      	cmp	ip, r4
 800037c:	d907      	bls.n	800038e <__udivmoddi4+0x1d2>
 800037e:	193c      	adds	r4, r7, r4
 8000380:	f103 30ff 	add.w	r0, r3, #4294967295
 8000384:	d267      	bcs.n	8000456 <__udivmoddi4+0x29a>
 8000386:	45a4      	cmp	ip, r4
 8000388:	d965      	bls.n	8000456 <__udivmoddi4+0x29a>
 800038a:	3b02      	subs	r3, #2
 800038c:	443c      	add	r4, r7
 800038e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000392:	fba0 9302 	umull	r9, r3, r0, r2
 8000396:	eba4 040c 	sub.w	r4, r4, ip
 800039a:	429c      	cmp	r4, r3
 800039c:	46ce      	mov	lr, r9
 800039e:	469c      	mov	ip, r3
 80003a0:	d351      	bcc.n	8000446 <__udivmoddi4+0x28a>
 80003a2:	d04e      	beq.n	8000442 <__udivmoddi4+0x286>
 80003a4:	b155      	cbz	r5, 80003bc <__udivmoddi4+0x200>
 80003a6:	ebb8 030e 	subs.w	r3, r8, lr
 80003aa:	eb64 040c 	sbc.w	r4, r4, ip
 80003ae:	fa04 f606 	lsl.w	r6, r4, r6
 80003b2:	40cb      	lsrs	r3, r1
 80003b4:	431e      	orrs	r6, r3
 80003b6:	40cc      	lsrs	r4, r1
 80003b8:	e9c5 6400 	strd	r6, r4, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	e750      	b.n	8000262 <__udivmoddi4+0xa6>
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f103 	lsr.w	r1, r0, r3
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	fa24 f303 	lsr.w	r3, r4, r3
 80003d0:	4094      	lsls	r4, r2
 80003d2:	430c      	orrs	r4, r1
 80003d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003d8:	fa00 fe02 	lsl.w	lr, r0, r2
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e4:	fb08 3110 	mls	r1, r8, r0, r3
 80003e8:	0c23      	lsrs	r3, r4, #16
 80003ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ee:	fb00 f107 	mul.w	r1, r0, r7
 80003f2:	4299      	cmp	r1, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x24c>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 36ff 	add.w	r6, r0, #4294967295
 80003fe:	d22c      	bcs.n	800045a <__udivmoddi4+0x29e>
 8000400:	4299      	cmp	r1, r3
 8000402:	d92a      	bls.n	800045a <__udivmoddi4+0x29e>
 8000404:	3802      	subs	r0, #2
 8000406:	4463      	add	r3, ip
 8000408:	1a5b      	subs	r3, r3, r1
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000410:	fb08 3311 	mls	r3, r8, r1, r3
 8000414:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000418:	fb01 f307 	mul.w	r3, r1, r7
 800041c:	42a3      	cmp	r3, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x276>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f101 36ff 	add.w	r6, r1, #4294967295
 8000428:	d213      	bcs.n	8000452 <__udivmoddi4+0x296>
 800042a:	42a3      	cmp	r3, r4
 800042c:	d911      	bls.n	8000452 <__udivmoddi4+0x296>
 800042e:	3902      	subs	r1, #2
 8000430:	4464      	add	r4, ip
 8000432:	1ae4      	subs	r4, r4, r3
 8000434:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000438:	e739      	b.n	80002ae <__udivmoddi4+0xf2>
 800043a:	4604      	mov	r4, r0
 800043c:	e6f0      	b.n	8000220 <__udivmoddi4+0x64>
 800043e:	4608      	mov	r0, r1
 8000440:	e706      	b.n	8000250 <__udivmoddi4+0x94>
 8000442:	45c8      	cmp	r8, r9
 8000444:	d2ae      	bcs.n	80003a4 <__udivmoddi4+0x1e8>
 8000446:	ebb9 0e02 	subs.w	lr, r9, r2
 800044a:	eb63 0c07 	sbc.w	ip, r3, r7
 800044e:	3801      	subs	r0, #1
 8000450:	e7a8      	b.n	80003a4 <__udivmoddi4+0x1e8>
 8000452:	4631      	mov	r1, r6
 8000454:	e7ed      	b.n	8000432 <__udivmoddi4+0x276>
 8000456:	4603      	mov	r3, r0
 8000458:	e799      	b.n	800038e <__udivmoddi4+0x1d2>
 800045a:	4630      	mov	r0, r6
 800045c:	e7d4      	b.n	8000408 <__udivmoddi4+0x24c>
 800045e:	46d6      	mov	lr, sl
 8000460:	e77f      	b.n	8000362 <__udivmoddi4+0x1a6>
 8000462:	4463      	add	r3, ip
 8000464:	3802      	subs	r0, #2
 8000466:	e74d      	b.n	8000304 <__udivmoddi4+0x148>
 8000468:	4606      	mov	r6, r0
 800046a:	4623      	mov	r3, r4
 800046c:	4608      	mov	r0, r1
 800046e:	e70f      	b.n	8000290 <__udivmoddi4+0xd4>
 8000470:	3e02      	subs	r6, #2
 8000472:	4463      	add	r3, ip
 8000474:	e730      	b.n	80002d8 <__udivmoddi4+0x11c>
 8000476:	bf00      	nop

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 800047c:	b5b0      	push	{r4, r5, r7, lr}
 800047e:	b088      	sub	sp, #32
 8000480:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000482:	4b0b      	ldr	r3, [pc, #44]	@ (80004b0 <APPD_EnableCPU2+0x34>)
 8000484:	1d3c      	adds	r4, r7, #4
 8000486:	461d      	mov	r5, r3
 8000488:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800048a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800048c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000490:	c403      	stmia	r4!, {r0, r1}
 8000492:	8022      	strh	r2, [r4, #0]
 8000494:	3402      	adds	r4, #2
 8000496:	0c13      	lsrs	r3, r2, #16
 8000498:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800049a:	f007 f9fb 	bl	8007894 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	4618      	mov	r0, r3
 80004a2:	f006 fc8c 	bl	8006dbe <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80004a6:	bf00      	nop
}
 80004a8:	3720      	adds	r7, #32
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bdb0      	pop	{r4, r5, r7, pc}
 80004ae:	bf00      	nop
 80004b0:	08008d9c 	.word	0x08008d9c

080004b4 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80004bc:	4b07      	ldr	r3, [pc, #28]	@ (80004dc <LL_C2_PWR_SetPowerMode+0x28>)
 80004be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80004c2:	f023 0207 	bic.w	r2, r3, #7
 80004c6:	4905      	ldr	r1, [pc, #20]	@ (80004dc <LL_C2_PWR_SetPowerMode+0x28>)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4313      	orrs	r3, r2
 80004cc:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80004d0:	bf00      	nop
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr
 80004dc:	58000400 	.word	0x58000400

080004e0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80004e8:	4b06      	ldr	r3, [pc, #24]	@ (8000504 <LL_EXTI_EnableIT_32_63+0x24>)
 80004ea:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80004ee:	4905      	ldr	r1, [pc, #20]	@ (8000504 <LL_EXTI_EnableIT_32_63+0x24>)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4313      	orrs	r3, r2
 80004f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80004f8:	bf00      	nop
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr
 8000504:	58000800 	.word	0x58000800

08000508 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000510:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000514:	4a0a      	ldr	r2, [pc, #40]	@ (8000540 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000516:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800051a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800051e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000522:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	021b      	lsls	r3, r3, #8
 800052a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800052e:	4313      	orrs	r3, r2
 8000530:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	cafecafe 	.word	0xcafecafe

08000544 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800054c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000550:	689b      	ldr	r3, [r3, #8]
 8000552:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000556:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4313      	orrs	r3, r2
 800055e:	608b      	str	r3, [r1, #8]
}
 8000560:	bf00      	nop
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr

0800056c <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000570:	4b04      	ldr	r3, [pc, #16]	@ (8000584 <LL_DBGMCU_GetDeviceID+0x18>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000578:	4618      	mov	r0, r3
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	e0042000 	.word	0xe0042000

08000588 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 800058c:	4b04      	ldr	r3, [pc, #16]	@ (80005a0 <LL_DBGMCU_GetRevisionID+0x18>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	0c1b      	lsrs	r3, r3, #16
 8000592:	b29b      	uxth	r3, r3
}
 8000594:	4618      	mov	r0, r3
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	e0042000 	.word	0xe0042000

080005a4 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	22ff      	movs	r2, #255	@ 0xff
 80005b0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80005b2:	bf00      	nop
 80005b4:	370c      	adds	r7, #12
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	22ca      	movs	r2, #202	@ 0xca
 80005ca:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2253      	movs	r2, #83	@ 0x53
 80005d0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80005d2:	bf00      	nop
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr

080005de <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80005de:	b480      	push	{r7}
 80005e0:	b083      	sub	sp, #12
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
 80005e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	689b      	ldr	r3, [r3, #8]
 80005ec:	f023 0207 	bic.w	r2, r3, #7
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	431a      	orrs	r2, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	609a      	str	r2, [r3, #8]
}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000608:	4b04      	ldr	r3, [pc, #16]	@ (800061c <MX_APPE_Config+0x18>)
 800060a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800060e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000610:	f000 f824 	bl	800065c <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000614:	f000 f829 	bl	800066a <Config_HSE>

  return;
 8000618:	bf00      	nop
}
 800061a:	bd80      	pop	{r7, pc}
 800061c:	58004000 	.word	0x58004000

08000620 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000624:	f000 f835 	bl	8000692 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000628:	f000 f84e 	bl	80006c8 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800062c:	4903      	ldr	r1, [pc, #12]	@ (800063c <MX_APPE_Init+0x1c>)
 800062e:	2000      	movs	r0, #0
 8000630:	f000 fd76 	bl	8001120 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000634:	f000 f856 	bl	80006e4 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000638:	bf00      	nop
}
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000174 	.word	0x20000174

08000640 <Init_Smps>:

void Init_Smps(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000644:	bf00      	nop
}
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr

0800064e <Init_Exti>:

void Init_Exti(void)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000652:	2050      	movs	r0, #80	@ 0x50
 8000654:	f7ff ff44 	bl	80004e0 <LL_EXTI_EnableIT_32_63>

  return;
 8000658:	bf00      	nop
}
 800065a:	bd80      	pop	{r7, pc}

0800065c <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000660:	bf00      	nop
}
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr

0800066a <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	b082      	sub	sp, #8
 800066e:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000670:	2000      	movs	r0, #0
 8000672:	f007 f99b 	bl	80079ac <OTP_Read>
 8000676:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d005      	beq.n	800068a <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	799b      	ldrb	r3, [r3, #6]
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff ff40 	bl	8000508 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000688:	bf00      	nop
 800068a:	bf00      	nop
}
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <System_Init>:

static void System_Init(void)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	af00      	add	r7, sp, #0
  Init_Smps();
 8000696:	f7ff ffd3 	bl	8000640 <Init_Smps>

  Init_Exti();
 800069a:	f7ff ffd8 	bl	800064e <Init_Exti>

  Init_Rtc();
 800069e:	f000 f803 	bl	80006a8 <Init_Rtc>

  return;
 80006a2:	bf00      	nop
}
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <Init_Rtc>:

static void Init_Rtc(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80006ac:	4805      	ldr	r0, [pc, #20]	@ (80006c4 <Init_Rtc+0x1c>)
 80006ae:	f7ff ff86 	bl	80005be <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80006b2:	2100      	movs	r1, #0
 80006b4:	4803      	ldr	r0, [pc, #12]	@ (80006c4 <Init_Rtc+0x1c>)
 80006b6:	f7ff ff92 	bl	80005de <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80006ba:	4802      	ldr	r0, [pc, #8]	@ (80006c4 <Init_Rtc+0x1c>)
 80006bc:	f7ff ff72 	bl	80005a4 <LL_RTC_EnableWriteProtection>

  return;
 80006c0:	bf00      	nop
}
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40002800 	.word	0x40002800

080006c8 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80006cc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80006d0:	f7ff ff38 	bl	8000544 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80006d4:	f008 f8a0 	bl	8008818 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80006d8:	2004      	movs	r0, #4
 80006da:	f7ff feeb 	bl	80004b4 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80006de:	bf00      	nop
}
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80006ea:	f006 ff1d 	bl	8007528 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80006ee:	4a11      	ldr	r2, [pc, #68]	@ (8000734 <appe_Tl_Init+0x50>)
 80006f0:	2100      	movs	r1, #0
 80006f2:	2004      	movs	r0, #4
 80006f4:	f008 f9ce 	bl	8008a94 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000738 <appe_Tl_Init+0x54>)
 80006fa:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	@ (800073c <appe_Tl_Init+0x58>)
 80006fe:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000700:	463b      	mov	r3, r7
 8000702:	4619      	mov	r1, r3
 8000704:	480e      	ldr	r0, [pc, #56]	@ (8000740 <appe_Tl_Init+0x5c>)
 8000706:	f006 fdd1 	bl	80072ac <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800070a:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <appe_Tl_Init+0x60>)
 800070c:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800070e:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <appe_Tl_Init+0x64>)
 8000710:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000712:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <appe_Tl_Init+0x68>)
 8000714:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000716:	f240 533c 	movw	r3, #1340	@ 0x53c
 800071a:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 800071c:	f107 0308 	add.w	r3, r7, #8
 8000720:	4618      	mov	r0, r3
 8000722:	f007 f843 	bl	80077ac <TL_MM_Init>

  TL_Enable();
 8000726:	f006 fef9 	bl	800751c <TL_Enable>

  return;
 800072a:	bf00      	nop
}
 800072c:	3720      	adds	r7, #32
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	080072e5 	.word	0x080072e5
 8000738:	20030734 	.word	0x20030734
 800073c:	08000751 	.word	0x08000751
 8000740:	08000769 	.word	0x08000769
 8000744:	2003094c 	.word	0x2003094c
 8000748:	20030840 	.word	0x20030840
 800074c:	200301f8 	.word	0x200301f8

08000750 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800075a:	bf00      	nop
}
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
	...

08000768 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	330b      	adds	r3, #11
 8000776:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	b29b      	uxth	r3, r3
 800077e:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8000782:	2b07      	cmp	r3, #7
 8000784:	d81f      	bhi.n	80007c6 <APPE_SysUserEvtRx+0x5e>
 8000786:	a201      	add	r2, pc, #4	@ (adr r2, 800078c <APPE_SysUserEvtRx+0x24>)
 8000788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800078c:	080007ad 	.word	0x080007ad
 8000790:	080007bf 	.word	0x080007bf
 8000794:	080007c7 	.word	0x080007c7
 8000798:	080007c7 	.word	0x080007c7
 800079c:	080007c7 	.word	0x080007c7
 80007a0:	080007c7 	.word	0x080007c7
 80007a4:	080007c7 	.word	0x080007c7
 80007a8:	080007c7 	.word	0x080007c7
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	4618      	mov	r0, r3
 80007b2:	f006 fb31 	bl	8006e18 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f000 f81b 	bl	80007f2 <APPE_SysEvtReadyProcessing>
    break;
 80007bc:	e004      	b.n	80007c8 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f000 f806 	bl	80007d0 <APPE_SysEvtError>
    break;
 80007c4:	e000      	b.n	80007c8 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 80007c6:	bf00      	nop
  }

  return;
 80007c8:	bf00      	nop
}
 80007ca:	3720      	adds	r7, #32
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	330b      	adds	r3, #11
 80007de:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	3302      	adds	r3, #2
 80007e4:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80007e6:	bf00      	nop
}
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b08a      	sub	sp, #40	@ 0x28
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80007fa:	f107 0308 	add.w	r3, r7, #8
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	330b      	adds	r3, #11
 8000816:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000818:	69fb      	ldr	r3, [r7, #28]
 800081a:	3302      	adds	r3, #2
 800081c:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800081e:	69bb      	ldr	r3, [r7, #24]
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d11d      	bne.n	8000862 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000826:	f7ff fe29 	bl	800047c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800082a:	230f      	movs	r3, #15
 800082c:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800082e:	237f      	movs	r3, #127	@ 0x7f
 8000830:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000832:	f7ff fea9 	bl	8000588 <LL_DBGMCU_GetRevisionID>
 8000836:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800083a:	b29b      	uxth	r3, r3
 800083c:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800083e:	f7ff fe95 	bl	800056c <LL_DBGMCU_GetDeviceID>
 8000842:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000844:	6a3b      	ldr	r3, [r7, #32]
 8000846:	b29b      	uxth	r3, r3
 8000848:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800084a:	f107 0308 	add.w	r3, r7, #8
 800084e:	4618      	mov	r0, r3
 8000850:	f006 facc 	bl	8006dec <SHCI_C2_Config>

    APP_BLE_Init();
 8000854:	f007 f9b4 	bl	8007bc0 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000858:	2100      	movs	r1, #0
 800085a:	2001      	movs	r0, #1
 800085c:	f007 ffee 	bl	800883c <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000860:	e007      	b.n	8000872 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000862:	69bb      	ldr	r3, [r7, #24]
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d103      	bne.n	8000872 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2200      	movs	r2, #0
 800086e:	701a      	strb	r2, [r3, #0]
  return;
 8000870:	bf00      	nop
 8000872:	bf00      	nop
}
 8000874:	3728      	adds	r7, #40	@ 0x28
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800087e:	f04f 30ff 	mov.w	r0, #4294967295
 8000882:	f008 f80b 	bl	800889c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}

0800088a <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800088e:	bf00      	nop
}
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80008a2:	f04f 30ff 	mov.w	r0, #4294967295
 80008a6:	f007 fff9 	bl	800889c <UTIL_SEQ_Run>
  return;
 80008aa:	bf00      	nop
}
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b082      	sub	sp, #8
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80008ba:	2100      	movs	r1, #0
 80008bc:	2004      	movs	r0, #4
 80008be:	f008 f90b 	bl	8008ad8 <UTIL_SEQ_SetTask>
  return;
 80008c2:	bf00      	nop
}
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80008d2:	2002      	movs	r0, #2
 80008d4:	f008 f96c 	bl	8008bb0 <UTIL_SEQ_SetEvt>
  return;
 80008d8:	bf00      	nop
}
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80008e8:	2002      	movs	r0, #2
 80008ea:	f008 f981 	bl	8008bf0 <UTIL_SEQ_WaitEvt>
  return;
 80008ee:	bf00      	nop
}
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <LL_EXTI_EnableIT_0_31>:
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000900:	4b06      	ldr	r3, [pc, #24]	@ (800091c <LL_EXTI_EnableIT_0_31+0x24>)
 8000902:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8000906:	4905      	ldr	r1, [pc, #20]	@ (800091c <LL_EXTI_EnableIT_0_31+0x24>)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4313      	orrs	r3, r2
 800090c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	58000800 	.word	0x58000800

08000920 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000928:	4b05      	ldr	r3, [pc, #20]	@ (8000940 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	4904      	ldr	r1, [pc, #16]	@ (8000940 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4313      	orrs	r3, r2
 8000932:	600b      	str	r3, [r1, #0]

}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	58000800 	.word	0x58000800

08000944 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800094a:	4b0d      	ldr	r3, [pc, #52]	@ (8000980 <ReadRtcSsrValue+0x3c>)
 800094c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800094e:	b29b      	uxth	r3, r3
 8000950:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000952:	4b0b      	ldr	r3, [pc, #44]	@ (8000980 <ReadRtcSsrValue+0x3c>)
 8000954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000956:	b29b      	uxth	r3, r3
 8000958:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800095a:	e005      	b.n	8000968 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000960:	4b07      	ldr	r3, [pc, #28]	@ (8000980 <ReadRtcSsrValue+0x3c>)
 8000962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000964:	b29b      	uxth	r3, r3
 8000966:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	429a      	cmp	r2, r3
 800096e:	d1f5      	bne.n	800095c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000970:	683b      	ldr	r3, [r7, #0]
}
 8000972:	4618      	mov	r0, r3
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	40002800 	.word	0x40002800

08000984 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	460a      	mov	r2, r1
 800098e:	71fb      	strb	r3, [r7, #7]
 8000990:	4613      	mov	r3, r2
 8000992:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000994:	79ba      	ldrb	r2, [r7, #6]
 8000996:	491d      	ldr	r1, [pc, #116]	@ (8000a0c <LinkTimerAfter+0x88>)
 8000998:	4613      	mov	r3, r2
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	4413      	add	r3, r2
 800099e:	00db      	lsls	r3, r3, #3
 80009a0:	440b      	add	r3, r1
 80009a2:	3315      	adds	r3, #21
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80009a8:	7bfb      	ldrb	r3, [r7, #15]
 80009aa:	2b06      	cmp	r3, #6
 80009ac:	d009      	beq.n	80009c2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80009ae:	7bfa      	ldrb	r2, [r7, #15]
 80009b0:	4916      	ldr	r1, [pc, #88]	@ (8000a0c <LinkTimerAfter+0x88>)
 80009b2:	4613      	mov	r3, r2
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	4413      	add	r3, r2
 80009b8:	00db      	lsls	r3, r3, #3
 80009ba:	440b      	add	r3, r1
 80009bc:	3314      	adds	r3, #20
 80009be:	79fa      	ldrb	r2, [r7, #7]
 80009c0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80009c2:	79fa      	ldrb	r2, [r7, #7]
 80009c4:	4911      	ldr	r1, [pc, #68]	@ (8000a0c <LinkTimerAfter+0x88>)
 80009c6:	4613      	mov	r3, r2
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	4413      	add	r3, r2
 80009cc:	00db      	lsls	r3, r3, #3
 80009ce:	440b      	add	r3, r1
 80009d0:	3315      	adds	r3, #21
 80009d2:	7bfa      	ldrb	r2, [r7, #15]
 80009d4:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80009d6:	79fa      	ldrb	r2, [r7, #7]
 80009d8:	490c      	ldr	r1, [pc, #48]	@ (8000a0c <LinkTimerAfter+0x88>)
 80009da:	4613      	mov	r3, r2
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	4413      	add	r3, r2
 80009e0:	00db      	lsls	r3, r3, #3
 80009e2:	440b      	add	r3, r1
 80009e4:	3314      	adds	r3, #20
 80009e6:	79ba      	ldrb	r2, [r7, #6]
 80009e8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80009ea:	79ba      	ldrb	r2, [r7, #6]
 80009ec:	4907      	ldr	r1, [pc, #28]	@ (8000a0c <LinkTimerAfter+0x88>)
 80009ee:	4613      	mov	r3, r2
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	4413      	add	r3, r2
 80009f4:	00db      	lsls	r3, r3, #3
 80009f6:	440b      	add	r3, r1
 80009f8:	3315      	adds	r3, #21
 80009fa:	79fa      	ldrb	r2, [r7, #7]
 80009fc:	701a      	strb	r2, [r3, #0]

  return;
 80009fe:	bf00      	nop
}
 8000a00:	3714      	adds	r7, #20
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	20000098 	.word	0x20000098

08000a10 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	460a      	mov	r2, r1
 8000a1a:	71fb      	strb	r3, [r7, #7]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000a20:	4b29      	ldr	r3, [pc, #164]	@ (8000ac8 <LinkTimerBefore+0xb8>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	79ba      	ldrb	r2, [r7, #6]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d032      	beq.n	8000a92 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000a2c:	79ba      	ldrb	r2, [r7, #6]
 8000a2e:	4927      	ldr	r1, [pc, #156]	@ (8000acc <LinkTimerBefore+0xbc>)
 8000a30:	4613      	mov	r3, r2
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	4413      	add	r3, r2
 8000a36:	00db      	lsls	r3, r3, #3
 8000a38:	440b      	add	r3, r1
 8000a3a:	3314      	adds	r3, #20
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000a40:	7bfa      	ldrb	r2, [r7, #15]
 8000a42:	4922      	ldr	r1, [pc, #136]	@ (8000acc <LinkTimerBefore+0xbc>)
 8000a44:	4613      	mov	r3, r2
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	4413      	add	r3, r2
 8000a4a:	00db      	lsls	r3, r3, #3
 8000a4c:	440b      	add	r3, r1
 8000a4e:	3315      	adds	r3, #21
 8000a50:	79fa      	ldrb	r2, [r7, #7]
 8000a52:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000a54:	79fa      	ldrb	r2, [r7, #7]
 8000a56:	491d      	ldr	r1, [pc, #116]	@ (8000acc <LinkTimerBefore+0xbc>)
 8000a58:	4613      	mov	r3, r2
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	4413      	add	r3, r2
 8000a5e:	00db      	lsls	r3, r3, #3
 8000a60:	440b      	add	r3, r1
 8000a62:	3315      	adds	r3, #21
 8000a64:	79ba      	ldrb	r2, [r7, #6]
 8000a66:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000a68:	79fa      	ldrb	r2, [r7, #7]
 8000a6a:	4918      	ldr	r1, [pc, #96]	@ (8000acc <LinkTimerBefore+0xbc>)
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	4413      	add	r3, r2
 8000a72:	00db      	lsls	r3, r3, #3
 8000a74:	440b      	add	r3, r1
 8000a76:	3314      	adds	r3, #20
 8000a78:	7bfa      	ldrb	r2, [r7, #15]
 8000a7a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000a7c:	79ba      	ldrb	r2, [r7, #6]
 8000a7e:	4913      	ldr	r1, [pc, #76]	@ (8000acc <LinkTimerBefore+0xbc>)
 8000a80:	4613      	mov	r3, r2
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	4413      	add	r3, r2
 8000a86:	00db      	lsls	r3, r3, #3
 8000a88:	440b      	add	r3, r1
 8000a8a:	3314      	adds	r3, #20
 8000a8c:	79fa      	ldrb	r2, [r7, #7]
 8000a8e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000a90:	e014      	b.n	8000abc <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000a92:	79fa      	ldrb	r2, [r7, #7]
 8000a94:	490d      	ldr	r1, [pc, #52]	@ (8000acc <LinkTimerBefore+0xbc>)
 8000a96:	4613      	mov	r3, r2
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	4413      	add	r3, r2
 8000a9c:	00db      	lsls	r3, r3, #3
 8000a9e:	440b      	add	r3, r1
 8000aa0:	3315      	adds	r3, #21
 8000aa2:	79ba      	ldrb	r2, [r7, #6]
 8000aa4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000aa6:	79ba      	ldrb	r2, [r7, #6]
 8000aa8:	4908      	ldr	r1, [pc, #32]	@ (8000acc <LinkTimerBefore+0xbc>)
 8000aaa:	4613      	mov	r3, r2
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	4413      	add	r3, r2
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	440b      	add	r3, r1
 8000ab4:	3314      	adds	r3, #20
 8000ab6:	79fa      	ldrb	r2, [r7, #7]
 8000ab8:	701a      	strb	r2, [r3, #0]
  return;
 8000aba:	bf00      	nop
}
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	20000128 	.word	0x20000128
 8000acc:	20000098 	.word	0x20000098

08000ad0 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ada:	4b4e      	ldr	r3, [pc, #312]	@ (8000c14 <linkTimer+0x144>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	2b06      	cmp	r3, #6
 8000ae2:	d118      	bne.n	8000b16 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000ae4:	4b4b      	ldr	r3, [pc, #300]	@ (8000c14 <linkTimer+0x144>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	4b4b      	ldr	r3, [pc, #300]	@ (8000c18 <linkTimer+0x148>)
 8000aec:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000aee:	4a49      	ldr	r2, [pc, #292]	@ (8000c14 <linkTimer+0x144>)
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000af4:	79fa      	ldrb	r2, [r7, #7]
 8000af6:	4949      	ldr	r1, [pc, #292]	@ (8000c1c <linkTimer+0x14c>)
 8000af8:	4613      	mov	r3, r2
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	4413      	add	r3, r2
 8000afe:	00db      	lsls	r3, r3, #3
 8000b00:	440b      	add	r3, r1
 8000b02:	3315      	adds	r3, #21
 8000b04:	2206      	movs	r2, #6
 8000b06:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000b08:	4b45      	ldr	r3, [pc, #276]	@ (8000c20 <linkTimer+0x150>)
 8000b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8000b0e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	81fb      	strh	r3, [r7, #14]
 8000b14:	e078      	b.n	8000c08 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000b16:	f000 f909 	bl	8000d2c <ReturnTimeElapsed>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000b1e:	79fa      	ldrb	r2, [r7, #7]
 8000b20:	493e      	ldr	r1, [pc, #248]	@ (8000c1c <linkTimer+0x14c>)
 8000b22:	4613      	mov	r3, r2
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	4413      	add	r3, r2
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	440b      	add	r3, r1
 8000b2c:	3308      	adds	r3, #8
 8000b2e:	6819      	ldr	r1, [r3, #0]
 8000b30:	89fb      	ldrh	r3, [r7, #14]
 8000b32:	79fa      	ldrb	r2, [r7, #7]
 8000b34:	4419      	add	r1, r3
 8000b36:	4839      	ldr	r0, [pc, #228]	@ (8000c1c <linkTimer+0x14c>)
 8000b38:	4613      	mov	r3, r2
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	4413      	add	r3, r2
 8000b3e:	00db      	lsls	r3, r3, #3
 8000b40:	4403      	add	r3, r0
 8000b42:	3308      	adds	r3, #8
 8000b44:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000b46:	79fa      	ldrb	r2, [r7, #7]
 8000b48:	4934      	ldr	r1, [pc, #208]	@ (8000c1c <linkTimer+0x14c>)
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	4413      	add	r3, r2
 8000b50:	00db      	lsls	r3, r3, #3
 8000b52:	440b      	add	r3, r1
 8000b54:	3308      	adds	r3, #8
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000b5a:	4b2e      	ldr	r3, [pc, #184]	@ (8000c14 <linkTimer+0x144>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	4619      	mov	r1, r3
 8000b62:	4a2e      	ldr	r2, [pc, #184]	@ (8000c1c <linkTimer+0x14c>)
 8000b64:	460b      	mov	r3, r1
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	440b      	add	r3, r1
 8000b6a:	00db      	lsls	r3, r3, #3
 8000b6c:	4413      	add	r3, r2
 8000b6e:	3308      	adds	r3, #8
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	68ba      	ldr	r2, [r7, #8]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d337      	bcc.n	8000be8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000b78:	4b26      	ldr	r3, [pc, #152]	@ (8000c14 <linkTimer+0x144>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000b7e:	7b7a      	ldrb	r2, [r7, #13]
 8000b80:	4926      	ldr	r1, [pc, #152]	@ (8000c1c <linkTimer+0x14c>)
 8000b82:	4613      	mov	r3, r2
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	4413      	add	r3, r2
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	440b      	add	r3, r1
 8000b8c:	3315      	adds	r3, #21
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000b92:	e013      	b.n	8000bbc <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000b94:	7b7a      	ldrb	r2, [r7, #13]
 8000b96:	4921      	ldr	r1, [pc, #132]	@ (8000c1c <linkTimer+0x14c>)
 8000b98:	4613      	mov	r3, r2
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	4413      	add	r3, r2
 8000b9e:	00db      	lsls	r3, r3, #3
 8000ba0:	440b      	add	r3, r1
 8000ba2:	3315      	adds	r3, #21
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000ba8:	7b7a      	ldrb	r2, [r7, #13]
 8000baa:	491c      	ldr	r1, [pc, #112]	@ (8000c1c <linkTimer+0x14c>)
 8000bac:	4613      	mov	r3, r2
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	4413      	add	r3, r2
 8000bb2:	00db      	lsls	r3, r3, #3
 8000bb4:	440b      	add	r3, r1
 8000bb6:	3315      	adds	r3, #21
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000bbc:	7b3b      	ldrb	r3, [r7, #12]
 8000bbe:	2b06      	cmp	r3, #6
 8000bc0:	d00b      	beq.n	8000bda <linkTimer+0x10a>
 8000bc2:	7b3a      	ldrb	r2, [r7, #12]
 8000bc4:	4915      	ldr	r1, [pc, #84]	@ (8000c1c <linkTimer+0x14c>)
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	4413      	add	r3, r2
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	440b      	add	r3, r1
 8000bd0:	3308      	adds	r3, #8
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	68ba      	ldr	r2, [r7, #8]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d2dc      	bcs.n	8000b94 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000bda:	7b7a      	ldrb	r2, [r7, #13]
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	4611      	mov	r1, r2
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fecf 	bl	8000984 <LinkTimerAfter>
 8000be6:	e00f      	b.n	8000c08 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000be8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c14 <linkTimer+0x144>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	4611      	mov	r1, r2
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff ff0c 	bl	8000a10 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <linkTimer+0x144>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <linkTimer+0x148>)
 8000c00:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000c02:	4a04      	ldr	r2, [pc, #16]	@ (8000c14 <linkTimer+0x144>)
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000c08:	89fb      	ldrh	r3, [r7, #14]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000128 	.word	0x20000128
 8000c18:	20000129 	.word	0x20000129
 8000c1c:	20000098 	.word	0x20000098
 8000c20:	2000012c 	.word	0x2000012c

08000c24 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	460a      	mov	r2, r1
 8000c2e:	71fb      	strb	r3, [r7, #7]
 8000c30:	4613      	mov	r3, r2
 8000c32:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000c34:	4b39      	ldr	r3, [pc, #228]	@ (8000d1c <UnlinkTimer+0xf8>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	79fa      	ldrb	r2, [r7, #7]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d111      	bne.n	8000c64 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000c40:	4b36      	ldr	r3, [pc, #216]	@ (8000d1c <UnlinkTimer+0xf8>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4b36      	ldr	r3, [pc, #216]	@ (8000d20 <UnlinkTimer+0xfc>)
 8000c48:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000c4a:	79fa      	ldrb	r2, [r7, #7]
 8000c4c:	4935      	ldr	r1, [pc, #212]	@ (8000d24 <UnlinkTimer+0x100>)
 8000c4e:	4613      	mov	r3, r2
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	4413      	add	r3, r2
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	440b      	add	r3, r1
 8000c58:	3315      	adds	r3, #21
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d1c <UnlinkTimer+0xf8>)
 8000c60:	701a      	strb	r2, [r3, #0]
 8000c62:	e03e      	b.n	8000ce2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000c64:	79fa      	ldrb	r2, [r7, #7]
 8000c66:	492f      	ldr	r1, [pc, #188]	@ (8000d24 <UnlinkTimer+0x100>)
 8000c68:	4613      	mov	r3, r2
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	4413      	add	r3, r2
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	440b      	add	r3, r1
 8000c72:	3314      	adds	r3, #20
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000c78:	79fa      	ldrb	r2, [r7, #7]
 8000c7a:	492a      	ldr	r1, [pc, #168]	@ (8000d24 <UnlinkTimer+0x100>)
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	4413      	add	r3, r2
 8000c82:	00db      	lsls	r3, r3, #3
 8000c84:	440b      	add	r3, r1
 8000c86:	3315      	adds	r3, #21
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000c8c:	79f9      	ldrb	r1, [r7, #7]
 8000c8e:	7bfa      	ldrb	r2, [r7, #15]
 8000c90:	4824      	ldr	r0, [pc, #144]	@ (8000d24 <UnlinkTimer+0x100>)
 8000c92:	460b      	mov	r3, r1
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	440b      	add	r3, r1
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	4403      	add	r3, r0
 8000c9c:	3315      	adds	r3, #21
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	b2d8      	uxtb	r0, r3
 8000ca2:	4920      	ldr	r1, [pc, #128]	@ (8000d24 <UnlinkTimer+0x100>)
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	4413      	add	r3, r2
 8000caa:	00db      	lsls	r3, r3, #3
 8000cac:	440b      	add	r3, r1
 8000cae:	3315      	adds	r3, #21
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000cb4:	7bbb      	ldrb	r3, [r7, #14]
 8000cb6:	2b06      	cmp	r3, #6
 8000cb8:	d013      	beq.n	8000ce2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000cba:	79f9      	ldrb	r1, [r7, #7]
 8000cbc:	7bba      	ldrb	r2, [r7, #14]
 8000cbe:	4819      	ldr	r0, [pc, #100]	@ (8000d24 <UnlinkTimer+0x100>)
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	440b      	add	r3, r1
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	4403      	add	r3, r0
 8000cca:	3314      	adds	r3, #20
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	b2d8      	uxtb	r0, r3
 8000cd0:	4914      	ldr	r1, [pc, #80]	@ (8000d24 <UnlinkTimer+0x100>)
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	4413      	add	r3, r2
 8000cd8:	00db      	lsls	r3, r3, #3
 8000cda:	440b      	add	r3, r1
 8000cdc:	3314      	adds	r3, #20
 8000cde:	4602      	mov	r2, r0
 8000ce0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000ce2:	79fa      	ldrb	r2, [r7, #7]
 8000ce4:	490f      	ldr	r1, [pc, #60]	@ (8000d24 <UnlinkTimer+0x100>)
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	4413      	add	r3, r2
 8000cec:	00db      	lsls	r3, r3, #3
 8000cee:	440b      	add	r3, r1
 8000cf0:	330c      	adds	r3, #12
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000cf6:	4b09      	ldr	r3, [pc, #36]	@ (8000d1c <UnlinkTimer+0xf8>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	2b06      	cmp	r3, #6
 8000cfe:	d107      	bne.n	8000d10 <UnlinkTimer+0xec>
 8000d00:	79bb      	ldrb	r3, [r7, #6]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d104      	bne.n	8000d10 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000d06:	4b08      	ldr	r3, [pc, #32]	@ (8000d28 <UnlinkTimer+0x104>)
 8000d08:	f04f 32ff 	mov.w	r2, #4294967295
 8000d0c:	601a      	str	r2, [r3, #0]
  }

  return;
 8000d0e:	bf00      	nop
 8000d10:	bf00      	nop
}
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	20000128 	.word	0x20000128
 8000d20:	20000129 	.word	0x20000129
 8000d24:	20000098 	.word	0x20000098
 8000d28:	2000012c 	.word	0x2000012c

08000d2c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000d32:	4b1a      	ldr	r3, [pc, #104]	@ (8000d9c <ReturnTimeElapsed+0x70>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d3a:	d026      	beq.n	8000d8a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000d3c:	f7ff fe02 	bl	8000944 <ReadRtcSsrValue>
 8000d40:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000d42:	4b16      	ldr	r3, [pc, #88]	@ (8000d9c <ReturnTimeElapsed+0x70>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d805      	bhi.n	8000d58 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000d4c:	4b13      	ldr	r3, [pc, #76]	@ (8000d9c <ReturnTimeElapsed+0x70>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	e00a      	b.n	8000d6e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000d58:	4b11      	ldr	r3, [pc, #68]	@ (8000da0 <ReturnTimeElapsed+0x74>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000d64:	4b0d      	ldr	r3, [pc, #52]	@ (8000d9c <ReturnTimeElapsed+0x70>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	683a      	ldr	r2, [r7, #0]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000da4 <ReturnTimeElapsed+0x78>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	461a      	mov	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	fb02 f303 	mul.w	r3, r2, r3
 8000d7a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000da8 <ReturnTimeElapsed+0x7c>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	40d3      	lsrs	r3, r2
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	e001      	b.n	8000d8e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	b29b      	uxth	r3, r3
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	2000012c 	.word	0x2000012c
 8000da0:	20000134 	.word	0x20000134
 8000da4:	20000132 	.word	0x20000132
 8000da8:	20000131 	.word	0x20000131

08000dac <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d108      	bne.n	8000dce <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000dbc:	f7ff fdc2 	bl	8000944 <ReadRtcSsrValue>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	4a21      	ldr	r2, [pc, #132]	@ (8000e48 <RestartWakeupCounter+0x9c>)
 8000dc4:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000dc6:	2003      	movs	r0, #3
 8000dc8:	f001 f9f8 	bl	80021bc <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000dcc:	e039      	b.n	8000e42 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000dce:	88fb      	ldrh	r3, [r7, #6]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d803      	bhi.n	8000ddc <RestartWakeupCounter+0x30>
 8000dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e4c <RestartWakeupCounter+0xa0>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d002      	beq.n	8000de2 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000ddc:	88fb      	ldrh	r3, [r7, #6]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000de2:	bf00      	nop
 8000de4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e50 <RestartWakeupCounter+0xa4>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	f003 0304 	and.w	r3, r3, #4
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d0f8      	beq.n	8000de4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000df2:	4b17      	ldr	r3, [pc, #92]	@ (8000e50 <RestartWakeupCounter+0xa4>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	4b15      	ldr	r3, [pc, #84]	@ (8000e50 <RestartWakeupCounter+0xa4>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8000e02:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000e04:	4b13      	ldr	r3, [pc, #76]	@ (8000e54 <RestartWakeupCounter+0xa8>)
 8000e06:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000e0a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000e0c:	2003      	movs	r0, #3
 8000e0e:	f001 f9e3 	bl	80021d8 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000e12:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <RestartWakeupCounter+0xac>)
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	0c1b      	lsrs	r3, r3, #16
 8000e18:	041b      	lsls	r3, r3, #16
 8000e1a:	88fa      	ldrh	r2, [r7, #6]
 8000e1c:	490e      	ldr	r1, [pc, #56]	@ (8000e58 <RestartWakeupCounter+0xac>)
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000e22:	f7ff fd8f 	bl	8000944 <ReadRtcSsrValue>
 8000e26:	4603      	mov	r3, r0
 8000e28:	4a07      	ldr	r2, [pc, #28]	@ (8000e48 <RestartWakeupCounter+0x9c>)
 8000e2a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8000e2c:	4b08      	ldr	r3, [pc, #32]	@ (8000e50 <RestartWakeupCounter+0xa4>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	689a      	ldr	r2, [r3, #8]
 8000e32:	4b07      	ldr	r3, [pc, #28]	@ (8000e50 <RestartWakeupCounter+0xa4>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000e3a:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000e3c:	f3af 8000 	nop.w
  return ;
 8000e40:	bf00      	nop
}
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	2000012c 	.word	0x2000012c
 8000e4c:	20000131 	.word	0x20000131
 8000e50:	20000174 	.word	0x20000174
 8000e54:	58000800 	.word	0x58000800
 8000e58:	40002800 	.word	0x40002800

08000e5c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000e62:	4b45      	ldr	r3, [pc, #276]	@ (8000f78 <RescheduleTimerList+0x11c>)
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e6e:	d107      	bne.n	8000e80 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8000e70:	bf00      	nop
 8000e72:	4b42      	ldr	r3, [pc, #264]	@ (8000f7c <RescheduleTimerList+0x120>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	f003 0304 	and.w	r3, r3, #4
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d1f8      	bne.n	8000e72 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8000e80:	4b3e      	ldr	r3, [pc, #248]	@ (8000f7c <RescheduleTimerList+0x120>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	689a      	ldr	r2, [r3, #8]
 8000e86:	4b3d      	ldr	r3, [pc, #244]	@ (8000f7c <RescheduleTimerList+0x120>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000e8e:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000e90:	4b3b      	ldr	r3, [pc, #236]	@ (8000f80 <RescheduleTimerList+0x124>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000e96:	7bfa      	ldrb	r2, [r7, #15]
 8000e98:	493a      	ldr	r1, [pc, #232]	@ (8000f84 <RescheduleTimerList+0x128>)
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	4413      	add	r3, r2
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	440b      	add	r3, r1
 8000ea4:	3308      	adds	r3, #8
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000eaa:	f7ff ff3f 	bl	8000d2c <ReturnTimeElapsed>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000eb2:	88fb      	ldrh	r3, [r7, #6]
 8000eb4:	68ba      	ldr	r2, [r7, #8]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d205      	bcs.n	8000ec6 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000ebe:	4b32      	ldr	r3, [pc, #200]	@ (8000f88 <RescheduleTimerList+0x12c>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	701a      	strb	r2, [r3, #0]
 8000ec4:	e04d      	b.n	8000f62 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	4a30      	ldr	r2, [pc, #192]	@ (8000f8c <RescheduleTimerList+0x130>)
 8000eca:	8812      	ldrh	r2, [r2, #0]
 8000ecc:	b292      	uxth	r2, r2
 8000ece:	4413      	add	r3, r2
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d906      	bls.n	8000ee6 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000ed8:	4b2c      	ldr	r3, [pc, #176]	@ (8000f8c <RescheduleTimerList+0x130>)
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000ede:	4b2a      	ldr	r3, [pc, #168]	@ (8000f88 <RescheduleTimerList+0x12c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
 8000ee4:	e03d      	b.n	8000f62 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	88fb      	ldrh	r3, [r7, #6]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000ef0:	4b25      	ldr	r3, [pc, #148]	@ (8000f88 <RescheduleTimerList+0x12c>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ef6:	e034      	b.n	8000f62 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000ef8:	7bfa      	ldrb	r2, [r7, #15]
 8000efa:	4922      	ldr	r1, [pc, #136]	@ (8000f84 <RescheduleTimerList+0x128>)
 8000efc:	4613      	mov	r3, r2
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	4413      	add	r3, r2
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	440b      	add	r3, r1
 8000f06:	3308      	adds	r3, #8
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d20a      	bcs.n	8000f26 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000f10:	7bfa      	ldrb	r2, [r7, #15]
 8000f12:	491c      	ldr	r1, [pc, #112]	@ (8000f84 <RescheduleTimerList+0x128>)
 8000f14:	4613      	mov	r3, r2
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	4413      	add	r3, r2
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	440b      	add	r3, r1
 8000f1e:	3308      	adds	r3, #8
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	e013      	b.n	8000f4e <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000f26:	7bfa      	ldrb	r2, [r7, #15]
 8000f28:	4916      	ldr	r1, [pc, #88]	@ (8000f84 <RescheduleTimerList+0x128>)
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	4413      	add	r3, r2
 8000f30:	00db      	lsls	r3, r3, #3
 8000f32:	440b      	add	r3, r1
 8000f34:	3308      	adds	r3, #8
 8000f36:	6819      	ldr	r1, [r3, #0]
 8000f38:	88fb      	ldrh	r3, [r7, #6]
 8000f3a:	7bfa      	ldrb	r2, [r7, #15]
 8000f3c:	1ac9      	subs	r1, r1, r3
 8000f3e:	4811      	ldr	r0, [pc, #68]	@ (8000f84 <RescheduleTimerList+0x128>)
 8000f40:	4613      	mov	r3, r2
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	4413      	add	r3, r2
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	4403      	add	r3, r0
 8000f4a:	3308      	adds	r3, #8
 8000f4c:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000f4e:	7bfa      	ldrb	r2, [r7, #15]
 8000f50:	490c      	ldr	r1, [pc, #48]	@ (8000f84 <RescheduleTimerList+0x128>)
 8000f52:	4613      	mov	r3, r2
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	4413      	add	r3, r2
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	440b      	add	r3, r1
 8000f5c:	3315      	adds	r3, #21
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	2b06      	cmp	r3, #6
 8000f66:	d1c7      	bne.n	8000ef8 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000f68:	89bb      	ldrh	r3, [r7, #12]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff ff1e 	bl	8000dac <RestartWakeupCounter>

  return ;
 8000f70:	bf00      	nop
}
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40002800 	.word	0x40002800
 8000f7c:	20000174 	.word	0x20000174
 8000f80:	20000128 	.word	0x20000128
 8000f84:	20000098 	.word	0x20000098
 8000f88:	20000130 	.word	0x20000130
 8000f8c:	20000136 	.word	0x20000136

08000f90 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	@ 0x28
 8000f94:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000f96:	f3ef 8310 	mrs	r3, PRIMASK
 8000f9a:	617b      	str	r3, [r7, #20]
  return(result);
 8000f9c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000f9e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa0:	b672      	cpsid	i
}
 8000fa2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000fa4:	4b59      	ldr	r3, [pc, #356]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	22ca      	movs	r2, #202	@ 0xca
 8000faa:	625a      	str	r2, [r3, #36]	@ 0x24
 8000fac:	4b57      	ldr	r3, [pc, #348]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2253      	movs	r2, #83	@ 0x53
 8000fb2:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8000fb4:	4b55      	ldr	r3, [pc, #340]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	689a      	ldr	r2, [r3, #8]
 8000fba:	4b54      	ldr	r3, [pc, #336]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000fc2:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000fc4:	4b52      	ldr	r3, [pc, #328]	@ (8001110 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000fcc:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000fd0:	4950      	ldr	r1, [pc, #320]	@ (8001114 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	4413      	add	r3, r2
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	440b      	add	r3, r1
 8000fdc:	330c      	adds	r3, #12
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d16e      	bne.n	80010c4 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000fe6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000fea:	494a      	ldr	r1, [pc, #296]	@ (8001114 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000fec:	4613      	mov	r3, r2
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	4413      	add	r3, r2
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	440b      	add	r3, r1
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000ffa:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000ffe:	4945      	ldr	r1, [pc, #276]	@ (8001114 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001000:	4613      	mov	r3, r2
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	4413      	add	r3, r2
 8001006:	00db      	lsls	r3, r3, #3
 8001008:	440b      	add	r3, r1
 800100a:	3310      	adds	r3, #16
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001010:	4b41      	ldr	r3, [pc, #260]	@ (8001118 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d04c      	beq.n	80010b4 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800101a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800101e:	493d      	ldr	r1, [pc, #244]	@ (8001114 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001020:	4613      	mov	r3, r2
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	4413      	add	r3, r2
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	440b      	add	r3, r1
 800102a:	330d      	adds	r3, #13
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	b2db      	uxtb	r3, r3
 8001030:	2b01      	cmp	r3, #1
 8001032:	d124      	bne.n	800107e <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001034:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001038:	2101      	movs	r1, #1
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fdf2 	bl	8000c24 <UnlinkTimer>
 8001040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001042:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	f383 8810 	msr	PRIMASK, r3
}
 800104a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 800104c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001050:	4930      	ldr	r1, [pc, #192]	@ (8001114 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001052:	4613      	mov	r3, r2
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	4413      	add	r3, r2
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	440b      	add	r3, r1
 800105c:	3304      	adds	r3, #4
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001064:	4611      	mov	r1, r2
 8001066:	4618      	mov	r0, r3
 8001068:	f000 f9b8 	bl	80013dc <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800106c:	4b27      	ldr	r3, [pc, #156]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	22ca      	movs	r2, #202	@ 0xca
 8001072:	625a      	str	r2, [r3, #36]	@ 0x24
 8001074:	4b25      	ldr	r3, [pc, #148]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2253      	movs	r2, #83	@ 0x53
 800107a:	625a      	str	r2, [r3, #36]	@ 0x24
 800107c:	e012      	b.n	80010a4 <HW_TS_RTC_Wakeup_Handler+0x114>
 800107e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001080:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	f383 8810 	msr	PRIMASK, r3
}
 8001088:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800108a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800108e:	4618      	mov	r0, r3
 8001090:	f000 f920 	bl	80012d4 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001094:	4b1d      	ldr	r3, [pc, #116]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	22ca      	movs	r2, #202	@ 0xca
 800109a:	625a      	str	r2, [r3, #36]	@ 0x24
 800109c:	4b1b      	ldr	r3, [pc, #108]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2253      	movs	r2, #83	@ 0x53
 80010a2:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80010a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80010a8:	69fa      	ldr	r2, [r7, #28]
 80010aa:	4619      	mov	r1, r3
 80010ac:	69b8      	ldr	r0, [r7, #24]
 80010ae:	f000 fa1b 	bl	80014e8 <HW_TS_RTC_Int_AppNot>
 80010b2:	e022      	b.n	80010fa <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80010b4:	f7ff fed2 	bl	8000e5c <RescheduleTimerList>
 80010b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ba:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	f383 8810 	msr	PRIMASK, r3
}
 80010c2:	e01a      	b.n	80010fa <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80010c4:	bf00      	nop
 80010c6:	4b11      	ldr	r3, [pc, #68]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	f003 0304 	and.w	r3, r3, #4
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d0f8      	beq.n	80010c6 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80010d4:	4b0d      	ldr	r3, [pc, #52]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	4b0b      	ldr	r3, [pc, #44]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80010e4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80010e6:	4b0d      	ldr	r3, [pc, #52]	@ (800111c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80010e8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f383 8810 	msr	PRIMASK, r3
}
 80010f8:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80010fa:	4b04      	ldr	r3, [pc, #16]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	22ff      	movs	r2, #255	@ 0xff
 8001100:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8001102:	bf00      	nop
}
 8001104:	3728      	adds	r7, #40	@ 0x28
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000174 	.word	0x20000174
 8001110:	20000128 	.word	0x20000128
 8001114:	20000098 	.word	0x20000098
 8001118:	20000130 	.word	0x20000130
 800111c:	58000800 	.word	0x58000800

08001120 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800112c:	4b5e      	ldr	r3, [pc, #376]	@ (80012a8 <HW_TS_Init+0x188>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	22ca      	movs	r2, #202	@ 0xca
 8001132:	625a      	str	r2, [r3, #36]	@ 0x24
 8001134:	4b5c      	ldr	r3, [pc, #368]	@ (80012a8 <HW_TS_Init+0x188>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2253      	movs	r2, #83	@ 0x53
 800113a:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800113c:	4b5b      	ldr	r3, [pc, #364]	@ (80012ac <HW_TS_Init+0x18c>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	4a5a      	ldr	r2, [pc, #360]	@ (80012ac <HW_TS_Init+0x18c>)
 8001142:	f043 0320 	orr.w	r3, r3, #32
 8001146:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001148:	4b58      	ldr	r3, [pc, #352]	@ (80012ac <HW_TS_Init+0x18c>)
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	b2db      	uxtb	r3, r3
 8001154:	f1c3 0304 	rsb	r3, r3, #4
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4b55      	ldr	r3, [pc, #340]	@ (80012b0 <HW_TS_Init+0x190>)
 800115c:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800115e:	4b53      	ldr	r3, [pc, #332]	@ (80012ac <HW_TS_Init+0x18c>)
 8001160:	691b      	ldr	r3, [r3, #16]
 8001162:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001166:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 800116a:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	fa92 f2a2 	rbit	r2, r2
 8001172:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001174:	68fa      	ldr	r2, [r7, #12]
 8001176:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001178:	697a      	ldr	r2, [r7, #20]
 800117a:	2a00      	cmp	r2, #0
 800117c:	d101      	bne.n	8001182 <HW_TS_Init+0x62>
  {
    return 32U;
 800117e:	2220      	movs	r2, #32
 8001180:	e003      	b.n	800118a <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	fab2 f282 	clz	r2, r2
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	40d3      	lsrs	r3, r2
 800118c:	b2db      	uxtb	r3, r3
 800118e:	3301      	adds	r3, #1
 8001190:	b2da      	uxtb	r2, r3
 8001192:	4b48      	ldr	r3, [pc, #288]	@ (80012b4 <HW_TS_Init+0x194>)
 8001194:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001196:	4b45      	ldr	r3, [pc, #276]	@ (80012ac <HW_TS_Init+0x18c>)
 8001198:	691b      	ldr	r3, [r3, #16]
 800119a:	b29b      	uxth	r3, r3
 800119c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	3301      	adds	r3, #1
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	4b44      	ldr	r3, [pc, #272]	@ (80012b8 <HW_TS_Init+0x198>)
 80011a8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80011aa:	4b43      	ldr	r3, [pc, #268]	@ (80012b8 <HW_TS_Init+0x198>)
 80011ac:	881b      	ldrh	r3, [r3, #0]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	4a40      	ldr	r2, [pc, #256]	@ (80012b4 <HW_TS_Init+0x194>)
 80011b2:	7812      	ldrb	r2, [r2, #0]
 80011b4:	fb02 f303 	mul.w	r3, r2, r3
 80011b8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80011bc:	4a3c      	ldr	r2, [pc, #240]	@ (80012b0 <HW_TS_Init+0x190>)
 80011be:	7812      	ldrb	r2, [r2, #0]
 80011c0:	40d3      	lsrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d904      	bls.n	80011d8 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80011ce:	4b3b      	ldr	r3, [pc, #236]	@ (80012bc <HW_TS_Init+0x19c>)
 80011d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011d4:	801a      	strh	r2, [r3, #0]
 80011d6:	e003      	b.n	80011e0 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	b29a      	uxth	r2, r3
 80011dc:	4b37      	ldr	r3, [pc, #220]	@ (80012bc <HW_TS_Init+0x19c>)
 80011de:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80011e0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80011e4:	f7ff fb9c 	bl	8000920 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80011e8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80011ec:	f7ff fb84 	bl	80008f8 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d13d      	bne.n	8001272 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80011f6:	4b32      	ldr	r3, [pc, #200]	@ (80012c0 <HW_TS_Init+0x1a0>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80011fc:	4b31      	ldr	r3, [pc, #196]	@ (80012c4 <HW_TS_Init+0x1a4>)
 80011fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001202:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001204:	2300      	movs	r3, #0
 8001206:	77fb      	strb	r3, [r7, #31]
 8001208:	e00c      	b.n	8001224 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800120a:	7ffa      	ldrb	r2, [r7, #31]
 800120c:	492e      	ldr	r1, [pc, #184]	@ (80012c8 <HW_TS_Init+0x1a8>)
 800120e:	4613      	mov	r3, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	4413      	add	r3, r2
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	440b      	add	r3, r1
 8001218:	330c      	adds	r3, #12
 800121a:	2200      	movs	r2, #0
 800121c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800121e:	7ffb      	ldrb	r3, [r7, #31]
 8001220:	3301      	adds	r3, #1
 8001222:	77fb      	strb	r3, [r7, #31]
 8001224:	7ffb      	ldrb	r3, [r7, #31]
 8001226:	2b05      	cmp	r3, #5
 8001228:	d9ef      	bls.n	800120a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800122a:	4b28      	ldr	r3, [pc, #160]	@ (80012cc <HW_TS_Init+0x1ac>)
 800122c:	2206      	movs	r2, #6
 800122e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001230:	4b1d      	ldr	r3, [pc, #116]	@ (80012a8 <HW_TS_Init+0x188>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	4b1c      	ldr	r3, [pc, #112]	@ (80012a8 <HW_TS_Init+0x188>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800123e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001240:	4b19      	ldr	r3, [pc, #100]	@ (80012a8 <HW_TS_Init+0x188>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	b2da      	uxtb	r2, r3
 8001248:	4b17      	ldr	r3, [pc, #92]	@ (80012a8 <HW_TS_Init+0x188>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001250:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001252:	4b1f      	ldr	r3, [pc, #124]	@ (80012d0 <HW_TS_Init+0x1b0>)
 8001254:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001258:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800125a:	2003      	movs	r0, #3
 800125c:	f000 ffbc 	bl	80021d8 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001260:	4b11      	ldr	r3, [pc, #68]	@ (80012a8 <HW_TS_Init+0x188>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689a      	ldr	r2, [r3, #8]
 8001266:	4b10      	ldr	r3, [pc, #64]	@ (80012a8 <HW_TS_Init+0x188>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	e009      	b.n	8001286 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001272:	4b0d      	ldr	r3, [pc, #52]	@ (80012a8 <HW_TS_Init+0x188>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800127c:	2b00      	cmp	r3, #0
 800127e:	d002      	beq.n	8001286 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001280:	2003      	movs	r0, #3
 8001282:	f000 ff9b 	bl	80021bc <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001286:	4b08      	ldr	r3, [pc, #32]	@ (80012a8 <HW_TS_Init+0x188>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	22ff      	movs	r2, #255	@ 0xff
 800128c:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800128e:	2200      	movs	r2, #0
 8001290:	2103      	movs	r1, #3
 8001292:	2003      	movs	r0, #3
 8001294:	f000 ff5c 	bl	8002150 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001298:	2003      	movs	r0, #3
 800129a:	f000 ff73 	bl	8002184 <HAL_NVIC_EnableIRQ>

  return;
 800129e:	bf00      	nop
}
 80012a0:	3720      	adds	r7, #32
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000174 	.word	0x20000174
 80012ac:	40002800 	.word	0x40002800
 80012b0:	20000131 	.word	0x20000131
 80012b4:	20000132 	.word	0x20000132
 80012b8:	20000134 	.word	0x20000134
 80012bc:	20000136 	.word	0x20000136
 80012c0:	20000130 	.word	0x20000130
 80012c4:	2000012c 	.word	0x2000012c
 80012c8:	20000098 	.word	0x20000098
 80012cc:	20000128 	.word	0x20000128
 80012d0:	58000800 	.word	0x58000800

080012d4 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80012de:	f3ef 8310 	mrs	r3, PRIMASK
 80012e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80012e4:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80012e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80012e8:	b672      	cpsid	i
}
 80012ea:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80012ec:	2003      	movs	r0, #3
 80012ee:	f000 ff57 	bl	80021a0 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80012f2:	4b34      	ldr	r3, [pc, #208]	@ (80013c4 <HW_TS_Stop+0xf0>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	22ca      	movs	r2, #202	@ 0xca
 80012f8:	625a      	str	r2, [r3, #36]	@ 0x24
 80012fa:	4b32      	ldr	r3, [pc, #200]	@ (80013c4 <HW_TS_Stop+0xf0>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2253      	movs	r2, #83	@ 0x53
 8001300:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001302:	79fa      	ldrb	r2, [r7, #7]
 8001304:	4930      	ldr	r1, [pc, #192]	@ (80013c8 <HW_TS_Stop+0xf4>)
 8001306:	4613      	mov	r3, r2
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	4413      	add	r3, r2
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	440b      	add	r3, r1
 8001310:	330c      	adds	r3, #12
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d142      	bne.n	80013a0 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fc80 	bl	8000c24 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001324:	4b29      	ldr	r3, [pc, #164]	@ (80013cc <HW_TS_Stop+0xf8>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800132a:	7cfb      	ldrb	r3, [r7, #19]
 800132c:	2b06      	cmp	r3, #6
 800132e:	d12f      	bne.n	8001390 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001330:	4b27      	ldr	r3, [pc, #156]	@ (80013d0 <HW_TS_Stop+0xfc>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001338:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800133c:	d107      	bne.n	800134e <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800133e:	bf00      	nop
 8001340:	4b20      	ldr	r3, [pc, #128]	@ (80013c4 <HW_TS_Stop+0xf0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1f8      	bne.n	8001340 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800134e:	4b1d      	ldr	r3, [pc, #116]	@ (80013c4 <HW_TS_Stop+0xf0>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	4b1b      	ldr	r3, [pc, #108]	@ (80013c4 <HW_TS_Stop+0xf0>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800135c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800135e:	bf00      	nop
 8001360:	4b18      	ldr	r3, [pc, #96]	@ (80013c4 <HW_TS_Stop+0xf0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f8      	beq.n	8001360 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800136e:	4b15      	ldr	r3, [pc, #84]	@ (80013c4 <HW_TS_Stop+0xf0>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4b13      	ldr	r3, [pc, #76]	@ (80013c4 <HW_TS_Stop+0xf0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800137e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001380:	4b14      	ldr	r3, [pc, #80]	@ (80013d4 <HW_TS_Stop+0x100>)
 8001382:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001386:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001388:	2003      	movs	r0, #3
 800138a:	f000 ff25 	bl	80021d8 <HAL_NVIC_ClearPendingIRQ>
 800138e:	e007      	b.n	80013a0 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001390:	4b11      	ldr	r3, [pc, #68]	@ (80013d8 <HW_TS_Stop+0x104>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	b2db      	uxtb	r3, r3
 8001396:	7cfa      	ldrb	r2, [r7, #19]
 8001398:	429a      	cmp	r2, r3
 800139a:	d001      	beq.n	80013a0 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 800139c:	f7ff fd5e 	bl	8000e5c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80013a0:	4b08      	ldr	r3, [pc, #32]	@ (80013c4 <HW_TS_Stop+0xf0>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	22ff      	movs	r2, #255	@ 0xff
 80013a6:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80013a8:	2003      	movs	r0, #3
 80013aa:	f000 feeb 	bl	8002184 <HAL_NVIC_EnableIRQ>
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	f383 8810 	msr	PRIMASK, r3
}
 80013b8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80013ba:	bf00      	nop
}
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000174 	.word	0x20000174
 80013c8:	20000098 	.word	0x20000098
 80013cc:	20000128 	.word	0x20000128
 80013d0:	40002800 	.word	0x40002800
 80013d4:	58000800 	.word	0x58000800
 80013d8:	20000129 	.word	0x20000129

080013dc <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	6039      	str	r1, [r7, #0]
 80013e6:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80013e8:	79fa      	ldrb	r2, [r7, #7]
 80013ea:	493b      	ldr	r1, [pc, #236]	@ (80014d8 <HW_TS_Start+0xfc>)
 80013ec:	4613      	mov	r3, r2
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	4413      	add	r3, r2
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	440b      	add	r3, r1
 80013f6:	330c      	adds	r3, #12
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d103      	bne.n	8001408 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff ff66 	bl	80012d4 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001408:	f3ef 8310 	mrs	r3, PRIMASK
 800140c:	60fb      	str	r3, [r7, #12]
  return(result);
 800140e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001410:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001412:	b672      	cpsid	i
}
 8001414:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001416:	2003      	movs	r0, #3
 8001418:	f000 fec2 	bl	80021a0 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800141c:	4b2f      	ldr	r3, [pc, #188]	@ (80014dc <HW_TS_Start+0x100>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	22ca      	movs	r2, #202	@ 0xca
 8001422:	625a      	str	r2, [r3, #36]	@ 0x24
 8001424:	4b2d      	ldr	r3, [pc, #180]	@ (80014dc <HW_TS_Start+0x100>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2253      	movs	r2, #83	@ 0x53
 800142a:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800142c:	79fa      	ldrb	r2, [r7, #7]
 800142e:	492a      	ldr	r1, [pc, #168]	@ (80014d8 <HW_TS_Start+0xfc>)
 8001430:	4613      	mov	r3, r2
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	4413      	add	r3, r2
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	440b      	add	r3, r1
 800143a:	330c      	adds	r3, #12
 800143c:	2202      	movs	r2, #2
 800143e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001440:	79fa      	ldrb	r2, [r7, #7]
 8001442:	4925      	ldr	r1, [pc, #148]	@ (80014d8 <HW_TS_Start+0xfc>)
 8001444:	4613      	mov	r3, r2
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	4413      	add	r3, r2
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	440b      	add	r3, r1
 800144e:	3308      	adds	r3, #8
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001454:	79fa      	ldrb	r2, [r7, #7]
 8001456:	4920      	ldr	r1, [pc, #128]	@ (80014d8 <HW_TS_Start+0xfc>)
 8001458:	4613      	mov	r3, r2
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	4413      	add	r3, r2
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	440b      	add	r3, r1
 8001462:	3304      	adds	r3, #4
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fb30 	bl	8000ad0 <linkTimer>
 8001470:	4603      	mov	r3, r0
 8001472:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001474:	4b1a      	ldr	r3, [pc, #104]	@ (80014e0 <HW_TS_Start+0x104>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800147a:	4b1a      	ldr	r3, [pc, #104]	@ (80014e4 <HW_TS_Start+0x108>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	b2db      	uxtb	r3, r3
 8001480:	7c7a      	ldrb	r2, [r7, #17]
 8001482:	429a      	cmp	r2, r3
 8001484:	d002      	beq.n	800148c <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8001486:	f7ff fce9 	bl	8000e5c <RescheduleTimerList>
 800148a:	e013      	b.n	80014b4 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800148c:	79fa      	ldrb	r2, [r7, #7]
 800148e:	4912      	ldr	r1, [pc, #72]	@ (80014d8 <HW_TS_Start+0xfc>)
 8001490:	4613      	mov	r3, r2
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	4413      	add	r3, r2
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	440b      	add	r3, r1
 800149a:	3308      	adds	r3, #8
 800149c:	6819      	ldr	r1, [r3, #0]
 800149e:	8a7b      	ldrh	r3, [r7, #18]
 80014a0:	79fa      	ldrb	r2, [r7, #7]
 80014a2:	1ac9      	subs	r1, r1, r3
 80014a4:	480c      	ldr	r0, [pc, #48]	@ (80014d8 <HW_TS_Start+0xfc>)
 80014a6:	4613      	mov	r3, r2
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	4413      	add	r3, r2
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	4403      	add	r3, r0
 80014b0:	3308      	adds	r3, #8
 80014b2:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80014b4:	4b09      	ldr	r3, [pc, #36]	@ (80014dc <HW_TS_Start+0x100>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	22ff      	movs	r2, #255	@ 0xff
 80014ba:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80014bc:	2003      	movs	r0, #3
 80014be:	f000 fe61 	bl	8002184 <HAL_NVIC_EnableIRQ>
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	f383 8810 	msr	PRIMASK, r3
}
 80014cc:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80014ce:	bf00      	nop
}
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000098 	.word	0x20000098
 80014dc:	20000174 	.word	0x20000174
 80014e0:	20000128 	.word	0x20000128
 80014e4:	20000129 	.word	0x20000129

080014e8 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	460b      	mov	r3, r1
 80014f2:	607a      	str	r2, [r7, #4]
 80014f4:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4798      	blx	r3

  return;
 80014fa:	bf00      	nop
}
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <LL_RCC_LSE_SetDriveCapability>:
{
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800150a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800150e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001512:	f023 0218 	bic.w	r2, r3, #24
 8001516:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4313      	orrs	r3, r2
 800151e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800152e:	b480      	push	{r7}
 8001530:	b085      	sub	sp, #20
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001536:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800153a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800153c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4313      	orrs	r3, r2
 8001544:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001546:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800154a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4013      	ands	r3, r2
 8001550:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001552:	68fb      	ldr	r3, [r7, #12]
}
 8001554:	bf00      	nop
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001564:	f000 fc90 	bl	8001e88 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001568:	f7ff f84c 	bl	8000604 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800156c:	f000 f814 	bl	8001598 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001570:	f000 f88a 	bl	8001688 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001574:	f000 f8a8 	bl	80016c8 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001578:	f000 f96c 	bl	8001854 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800157c:	f000 f8f4 	bl	8001768 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8001580:	f000 f940 	bl	8001804 <MX_USB_PCD_Init>
  MX_RTC_Init();
 8001584:	f000 f8bc 	bl	8001700 <MX_RTC_Init>
  MX_RF_Init();
 8001588:	f000 f8b2 	bl	80016f0 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 800158c:	f7ff f848 	bl	8000620 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001590:	f7ff f973 	bl	800087a <MX_APPE_Process>
 8001594:	e7fc      	b.n	8001590 <main+0x30>
	...

08001598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b09a      	sub	sp, #104	@ 0x68
 800159c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800159e:	f107 0320 	add.w	r3, r7, #32
 80015a2:	2248      	movs	r2, #72	@ 0x48
 80015a4:	2100      	movs	r1, #0
 80015a6:	4618      	mov	r0, r3
 80015a8:	f007 fbb2 	bl	8008d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	60da      	str	r2, [r3, #12]
 80015b8:	611a      	str	r2, [r3, #16]
 80015ba:	615a      	str	r2, [r3, #20]
 80015bc:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80015be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80015cc:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80015ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	f023 0303 	bic.w	r3, r3, #3
 80015d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015e2:	f001 f931 	bl	8002848 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80015e6:	2000      	movs	r0, #0
 80015e8:	f7ff ff8b 	bl	8001502 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015ec:	4b25      	ldr	r3, [pc, #148]	@ (8001684 <SystemClock_Config+0xec>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015f4:	4a23      	ldr	r2, [pc, #140]	@ (8001684 <SystemClock_Config+0xec>)
 80015f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015fa:	6013      	str	r3, [r2, #0]
 80015fc:	4b21      	ldr	r3, [pc, #132]	@ (8001684 <SystemClock_Config+0xec>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001604:	603b      	str	r3, [r7, #0]
 8001606:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8001608:	232f      	movs	r3, #47	@ 0x2f
 800160a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800160c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001610:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001612:	2301      	movs	r3, #1
 8001614:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001616:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800161a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800161c:	2301      	movs	r3, #1
 800161e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001620:	2340      	movs	r3, #64	@ 0x40
 8001622:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001624:	2300      	movs	r3, #0
 8001626:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001628:	2360      	movs	r3, #96	@ 0x60
 800162a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800162c:	2305      	movs	r3, #5
 800162e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001630:	2300      	movs	r3, #0
 8001632:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001634:	f107 0320 	add.w	r3, r7, #32
 8001638:	4618      	mov	r0, r3
 800163a:	f001 fca5 	bl	8002f88 <HAL_RCC_OscConfig>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001644:	f000 f95d 	bl	8001902 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001648:	236f      	movs	r3, #111	@ 0x6f
 800164a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800164c:	2302      	movs	r3, #2
 800164e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001654:	2300      	movs	r3, #0
 8001656:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800165c:	2300      	movs	r3, #0
 800165e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001660:	2300      	movs	r3, #0
 8001662:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	2101      	movs	r1, #1
 8001668:	4618      	mov	r0, r3
 800166a:	f002 f801 	bl	8003670 <HAL_RCC_ClockConfig>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8001674:	f000 f945 	bl	8001902 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001678:	f002 fdee 	bl	8004258 <HAL_RCCEx_EnableMSIPLLMode>
}
 800167c:	bf00      	nop
 800167e:	3768      	adds	r7, #104	@ 0x68
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	58000400 	.word	0x58000400

08001688 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b094      	sub	sp, #80	@ 0x50
 800168c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800168e:	463b      	mov	r3, r7
 8001690:	2250      	movs	r2, #80	@ 0x50
 8001692:	2100      	movs	r1, #0
 8001694:	4618      	mov	r0, r3
 8001696:	f007 fb3b 	bl	8008d10 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800169a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800169e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 80016a0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80016a4:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80016a6:	2300      	movs	r3, #0
 80016a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ae:	463b      	mov	r3, r7
 80016b0:	4618      	mov	r0, r3
 80016b2:	f002 fc5b 	bl	8003f6c <HAL_RCCEx_PeriphCLKConfig>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80016bc:	f000 f921 	bl	8001902 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80016c0:	bf00      	nop
 80016c2:	3750      	adds	r7, #80	@ 0x50
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80016cc:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <MX_IPCC_Init+0x20>)
 80016ce:	4a07      	ldr	r2, [pc, #28]	@ (80016ec <MX_IPCC_Init+0x24>)
 80016d0:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80016d2:	4805      	ldr	r0, [pc, #20]	@ (80016e8 <MX_IPCC_Init+0x20>)
 80016d4:	f000 ff3a 	bl	800254c <HAL_IPCC_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80016de:	f000 f910 	bl	8001902 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000138 	.word	0x20000138
 80016ec:	58000c00 	.word	0x58000c00

080016f0 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001704:	4b16      	ldr	r3, [pc, #88]	@ (8001760 <MX_RTC_Init+0x60>)
 8001706:	4a17      	ldr	r2, [pc, #92]	@ (8001764 <MX_RTC_Init+0x64>)
 8001708:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800170a:	4b15      	ldr	r3, [pc, #84]	@ (8001760 <MX_RTC_Init+0x60>)
 800170c:	2200      	movs	r2, #0
 800170e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001710:	4b13      	ldr	r3, [pc, #76]	@ (8001760 <MX_RTC_Init+0x60>)
 8001712:	220f      	movs	r2, #15
 8001714:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001716:	4b12      	ldr	r3, [pc, #72]	@ (8001760 <MX_RTC_Init+0x60>)
 8001718:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800171c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800171e:	4b10      	ldr	r3, [pc, #64]	@ (8001760 <MX_RTC_Init+0x60>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001724:	4b0e      	ldr	r3, [pc, #56]	@ (8001760 <MX_RTC_Init+0x60>)
 8001726:	2200      	movs	r2, #0
 8001728:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800172a:	4b0d      	ldr	r3, [pc, #52]	@ (8001760 <MX_RTC_Init+0x60>)
 800172c:	2200      	movs	r2, #0
 800172e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001730:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <MX_RTC_Init+0x60>)
 8001732:	2200      	movs	r2, #0
 8001734:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001736:	480a      	ldr	r0, [pc, #40]	@ (8001760 <MX_RTC_Init+0x60>)
 8001738:	f002 fea6 	bl	8004488 <HAL_RTC_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001742:	f000 f8de 	bl	8001902 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001746:	2200      	movs	r2, #0
 8001748:	2100      	movs	r1, #0
 800174a:	4805      	ldr	r0, [pc, #20]	@ (8001760 <MX_RTC_Init+0x60>)
 800174c:	f002 ff9c 	bl	8004688 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001756:	f000 f8d4 	bl	8001902 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000174 	.word	0x20000174
 8001764:	40002800 	.word	0x40002800

08001768 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800176c:	4b23      	ldr	r3, [pc, #140]	@ (80017fc <MX_USART1_UART_Init+0x94>)
 800176e:	4a24      	ldr	r2, [pc, #144]	@ (8001800 <MX_USART1_UART_Init+0x98>)
 8001770:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001772:	4b22      	ldr	r3, [pc, #136]	@ (80017fc <MX_USART1_UART_Init+0x94>)
 8001774:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001778:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 800177a:	4b20      	ldr	r3, [pc, #128]	@ (80017fc <MX_USART1_UART_Init+0x94>)
 800177c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001780:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001782:	4b1e      	ldr	r3, [pc, #120]	@ (80017fc <MX_USART1_UART_Init+0x94>)
 8001784:	2200      	movs	r2, #0
 8001786:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001788:	4b1c      	ldr	r3, [pc, #112]	@ (80017fc <MX_USART1_UART_Init+0x94>)
 800178a:	2200      	movs	r2, #0
 800178c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800178e:	4b1b      	ldr	r3, [pc, #108]	@ (80017fc <MX_USART1_UART_Init+0x94>)
 8001790:	220c      	movs	r2, #12
 8001792:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001794:	4b19      	ldr	r3, [pc, #100]	@ (80017fc <MX_USART1_UART_Init+0x94>)
 8001796:	2200      	movs	r2, #0
 8001798:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800179a:	4b18      	ldr	r3, [pc, #96]	@ (80017fc <MX_USART1_UART_Init+0x94>)
 800179c:	2200      	movs	r2, #0
 800179e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017a0:	4b16      	ldr	r3, [pc, #88]	@ (80017fc <MX_USART1_UART_Init+0x94>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017a6:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <MX_USART1_UART_Init+0x94>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017ac:	4b13      	ldr	r3, [pc, #76]	@ (80017fc <MX_USART1_UART_Init+0x94>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017b2:	4812      	ldr	r0, [pc, #72]	@ (80017fc <MX_USART1_UART_Init+0x94>)
 80017b4:	f003 fab2 	bl	8004d1c <HAL_UART_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80017be:	f000 f8a0 	bl	8001902 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017c2:	2100      	movs	r1, #0
 80017c4:	480d      	ldr	r0, [pc, #52]	@ (80017fc <MX_USART1_UART_Init+0x94>)
 80017c6:	f003 ff79 	bl	80056bc <HAL_UARTEx_SetTxFifoThreshold>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80017d0:	f000 f897 	bl	8001902 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017d4:	2100      	movs	r1, #0
 80017d6:	4809      	ldr	r0, [pc, #36]	@ (80017fc <MX_USART1_UART_Init+0x94>)
 80017d8:	f003 ffae 	bl	8005738 <HAL_UARTEx_SetRxFifoThreshold>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80017e2:	f000 f88e 	bl	8001902 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80017e6:	4805      	ldr	r0, [pc, #20]	@ (80017fc <MX_USART1_UART_Init+0x94>)
 80017e8:	f003 ff2f 	bl	800564a <HAL_UARTEx_DisableFifoMode>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80017f2:	f000 f886 	bl	8001902 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000198 	.word	0x20000198
 8001800:	40013800 	.word	0x40013800

08001804 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001808:	4b10      	ldr	r3, [pc, #64]	@ (800184c <MX_USB_PCD_Init+0x48>)
 800180a:	4a11      	ldr	r2, [pc, #68]	@ (8001850 <MX_USB_PCD_Init+0x4c>)
 800180c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800180e:	4b0f      	ldr	r3, [pc, #60]	@ (800184c <MX_USB_PCD_Init+0x48>)
 8001810:	2208      	movs	r2, #8
 8001812:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001814:	4b0d      	ldr	r3, [pc, #52]	@ (800184c <MX_USB_PCD_Init+0x48>)
 8001816:	2202      	movs	r2, #2
 8001818:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800181a:	4b0c      	ldr	r3, [pc, #48]	@ (800184c <MX_USB_PCD_Init+0x48>)
 800181c:	2202      	movs	r2, #2
 800181e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001820:	4b0a      	ldr	r3, [pc, #40]	@ (800184c <MX_USB_PCD_Init+0x48>)
 8001822:	2200      	movs	r2, #0
 8001824:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001826:	4b09      	ldr	r3, [pc, #36]	@ (800184c <MX_USB_PCD_Init+0x48>)
 8001828:	2200      	movs	r2, #0
 800182a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800182c:	4b07      	ldr	r3, [pc, #28]	@ (800184c <MX_USB_PCD_Init+0x48>)
 800182e:	2200      	movs	r2, #0
 8001830:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001832:	4b06      	ldr	r3, [pc, #24]	@ (800184c <MX_USB_PCD_Init+0x48>)
 8001834:	2200      	movs	r2, #0
 8001836:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001838:	4804      	ldr	r0, [pc, #16]	@ (800184c <MX_USB_PCD_Init+0x48>)
 800183a:	f000 ff0d 	bl	8002658 <HAL_PCD_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001844:	f000 f85d 	bl	8001902 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}
 800184c:	2000022c 	.word	0x2000022c
 8001850:	40006800 	.word	0x40006800

08001854 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185a:	1d3b      	adds	r3, r7, #4
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001868:	2004      	movs	r0, #4
 800186a:	f7ff fe60 	bl	800152e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800186e:	2002      	movs	r0, #2
 8001870:	f7ff fe5d 	bl	800152e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001874:	2001      	movs	r0, #1
 8001876:	f7ff fe5a 	bl	800152e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800187a:	2008      	movs	r0, #8
 800187c:	f7ff fe57 	bl	800152e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001880:	2200      	movs	r2, #0
 8001882:	2123      	movs	r1, #35	@ 0x23
 8001884:	4814      	ldr	r0, [pc, #80]	@ (80018d8 <MX_GPIO_Init+0x84>)
 8001886:	f000 fe25 	bl	80024d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800188a:	2310      	movs	r3, #16
 800188c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800188e:	2300      	movs	r3, #0
 8001890:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001896:	1d3b      	adds	r3, r7, #4
 8001898:	4619      	mov	r1, r3
 800189a:	4810      	ldr	r0, [pc, #64]	@ (80018dc <MX_GPIO_Init+0x88>)
 800189c:	f000 fcaa 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80018a0:	2323      	movs	r3, #35	@ 0x23
 80018a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a4:	2301      	movs	r3, #1
 80018a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ac:	2300      	movs	r3, #0
 80018ae:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b0:	1d3b      	adds	r3, r7, #4
 80018b2:	4619      	mov	r1, r3
 80018b4:	4808      	ldr	r0, [pc, #32]	@ (80018d8 <MX_GPIO_Init+0x84>)
 80018b6:	f000 fc9d 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80018ba:	2303      	movs	r3, #3
 80018bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018c6:	1d3b      	adds	r3, r7, #4
 80018c8:	4619      	mov	r1, r3
 80018ca:	4805      	ldr	r0, [pc, #20]	@ (80018e0 <MX_GPIO_Init+0x8c>)
 80018cc:	f000 fc92 	bl	80021f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018d0:	bf00      	nop
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	48000400 	.word	0x48000400
 80018dc:	48000800 	.word	0x48000800
 80018e0:	48000c00 	.word	0x48000c00

080018e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018f4:	d101      	bne.n	80018fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018f6:	f000 fae7 	bl	8001ec8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001906:	b672      	cpsid	i
}
 8001908:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800190a:	bf00      	nop
 800190c:	e7fd      	b.n	800190a <Error_Handler+0x8>

0800190e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001912:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800191a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800191e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001922:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001926:	bf00      	nop
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <LL_AHB2_GRP1_EnableClock>:
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001938:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800193c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800193e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4313      	orrs	r3, r2
 8001946:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001948:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800194c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4013      	ands	r3, r2
 8001952:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001954:	68fb      	ldr	r3, [r7, #12]
}
 8001956:	bf00      	nop
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001962:	b480      	push	{r7}
 8001964:	b085      	sub	sp, #20
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800196a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800196e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001970:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4313      	orrs	r3, r2
 8001978:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800197a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800197e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4013      	ands	r3, r2
 8001984:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001986:	68fb      	ldr	r3, [r7, #12]
}
 8001988:	bf00      	nop
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800199c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019a0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80019a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80019ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4013      	ands	r3, r2
 80019b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019b8:	68fb      	ldr	r3, [r7, #12]
}
 80019ba:	bf00      	nop
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b085      	sub	sp, #20
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80019ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019d2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80019d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4313      	orrs	r3, r2
 80019dc:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80019de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019e2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4013      	ands	r3, r2
 80019e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019ea:	68fb      	ldr	r3, [r7, #12]
}
 80019ec:	bf00      	nop
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80019fc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001a00:	f7ff ffaf 	bl	8001962 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001a04:	2200      	movs	r2, #0
 8001a06:	2100      	movs	r1, #0
 8001a08:	202e      	movs	r0, #46	@ 0x2e
 8001a0a:	f000 fba1 	bl	8002150 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001a0e:	202e      	movs	r0, #46	@ 0x2e
 8001a10:	f000 fbb8 	bl	8002184 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a0d      	ldr	r2, [pc, #52]	@ (8001a5c <HAL_IPCC_MspInit+0x44>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d113      	bne.n	8001a52 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001a2a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8001a2e:	f7ff ff98 	bl	8001962 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2100      	movs	r1, #0
 8001a36:	202c      	movs	r0, #44	@ 0x2c
 8001a38:	f000 fb8a 	bl	8002150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001a3c:	202c      	movs	r0, #44	@ 0x2c
 8001a3e:	f000 fba1 	bl	8002184 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001a42:	2200      	movs	r2, #0
 8001a44:	2100      	movs	r1, #0
 8001a46:	202d      	movs	r0, #45	@ 0x2d
 8001a48:	f000 fb82 	bl	8002150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001a4c:	202d      	movs	r0, #45	@ 0x2d
 8001a4e:	f000 fb99 	bl	8002184 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	58000c00 	.word	0x58000c00

08001a60 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b096      	sub	sp, #88	@ 0x58
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a68:	f107 0308 	add.w	r3, r7, #8
 8001a6c:	2250      	movs	r2, #80	@ 0x50
 8001a6e:	2100      	movs	r1, #0
 8001a70:	4618      	mov	r0, r3
 8001a72:	f007 f94d 	bl	8008d10 <memset>
  if(hrtc->Instance==RTC)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a13      	ldr	r2, [pc, #76]	@ (8001ac8 <HAL_RTC_MspInit+0x68>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d11f      	bne.n	8001ac0 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 8001a80:	f000 fee2 	bl	8002848 <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a84:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001a88:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001a8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a8e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a90:	f107 0308 	add.w	r3, r7, #8
 8001a94:	4618      	mov	r0, r3
 8001a96:	f002 fa69 	bl	8003f6c <HAL_RCCEx_PeriphCLKConfig>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 8001aa0:	f7ff ff2f 	bl	8001902 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001aa4:	f7ff ff33 	bl	800190e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001aa8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001aac:	f7ff ff72 	bl	8001994 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	2003      	movs	r0, #3
 8001ab6:	f000 fb4b 	bl	8002150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001aba:	2003      	movs	r0, #3
 8001abc:	f000 fb62 	bl	8002184 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001ac0:	bf00      	nop
 8001ac2:	3758      	adds	r7, #88	@ 0x58
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40002800 	.word	0x40002800

08001acc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b09c      	sub	sp, #112	@ 0x70
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ae4:	f107 030c 	add.w	r3, r7, #12
 8001ae8:	2250      	movs	r2, #80	@ 0x50
 8001aea:	2100      	movs	r1, #0
 8001aec:	4618      	mov	r0, r3
 8001aee:	f007 f90f 	bl	8008d10 <memset>
  if(huart->Instance==USART1)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a16      	ldr	r2, [pc, #88]	@ (8001b50 <HAL_UART_MspInit+0x84>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d124      	bne.n	8001b46 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001afc:	2301      	movs	r3, #1
 8001afe:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b00:	2300      	movs	r3, #0
 8001b02:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b04:	f107 030c 	add.w	r3, r7, #12
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f002 fa2f 	bl	8003f6c <HAL_RCCEx_PeriphCLKConfig>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b14:	f7ff fef5 	bl	8001902 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b18:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001b1c:	f7ff ff53 	bl	80019c6 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b20:	2002      	movs	r0, #2
 8001b22:	f7ff ff05 	bl	8001930 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001b26:	23c0      	movs	r3, #192	@ 0xc0
 8001b28:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b32:	2300      	movs	r3, #0
 8001b34:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b36:	2307      	movs	r3, #7
 8001b38:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4804      	ldr	r0, [pc, #16]	@ (8001b54 <HAL_UART_MspInit+0x88>)
 8001b42:	f000 fb57 	bl	80021f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b46:	bf00      	nop
 8001b48:	3770      	adds	r7, #112	@ 0x70
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40013800 	.word	0x40013800
 8001b54:	48000400 	.word	0x48000400

08001b58 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b09c      	sub	sp, #112	@ 0x70
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b60:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b70:	f107 030c 	add.w	r3, r7, #12
 8001b74:	2250      	movs	r2, #80	@ 0x50
 8001b76:	2100      	movs	r1, #0
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f007 f8c9 	bl	8008d10 <memset>
  if(hpcd->Instance==USB)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a1f      	ldr	r2, [pc, #124]	@ (8001c00 <HAL_PCD_MspInit+0xa8>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d136      	bne.n	8001bf6 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001b88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b8c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8001b8e:	2318      	movs	r3, #24
 8001b90:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001b92:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b96:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001b98:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b9c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001b9e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001ba2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8001ba4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ba8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001baa:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001bae:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bb0:	f107 030c 	add.w	r3, r7, #12
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f002 f9d9 	bl	8003f6c <HAL_RCCEx_PeriphCLKConfig>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8001bc0:	f7ff fe9f 	bl	8001902 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	f7ff feb3 	bl	8001930 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001bca:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001bce:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001bdc:	230a      	movs	r3, #10
 8001bde:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001be4:	4619      	mov	r1, r3
 8001be6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bea:	f000 fb03 	bl	80021f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001bee:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8001bf2:	f7ff fecf 	bl	8001994 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001bf6:	bf00      	nop
 8001bf8:	3770      	adds	r7, #112	@ 0x70
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40006800 	.word	0x40006800

08001c04 <LL_APB1_GRP1_EnableClock>:
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001c0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c10:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001c12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001c1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c20:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4013      	ands	r3, r2
 8001c26:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c28:	68fb      	ldr	r3, [r7, #12]
}
 8001c2a:	bf00      	nop
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08c      	sub	sp, #48	@ 0x30
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	201c      	movs	r0, #28
 8001c4e:	f000 fa7f 	bl	8002150 <HAL_NVIC_SetPriority>
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c52:	201c      	movs	r0, #28
 8001c54:	f000 fa96 	bl	8002184 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001c58:	2001      	movs	r0, #1
 8001c5a:	f7ff ffd3 	bl	8001c04 <LL_APB1_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c5e:	f107 0208 	add.w	r2, r7, #8
 8001c62:	f107 030c 	add.w	r3, r7, #12
 8001c66:	4611      	mov	r1, r2
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f001 feed 	bl	8003a48 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c6e:	f001 febf 	bl	80039f0 <HAL_RCC_GetPCLK1Freq>
 8001c72:	62f8      	str	r0, [r7, #44]	@ 0x2c

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c76:	4a13      	ldr	r2, [pc, #76]	@ (8001cc4 <HAL_InitTick+0x8c>)
 8001c78:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7c:	0c9b      	lsrs	r3, r3, #18
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001c82:	4b11      	ldr	r3, [pc, #68]	@ (8001cc8 <HAL_InitTick+0x90>)
 8001c84:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c88:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001c8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc8 <HAL_InitTick+0x90>)
 8001c8c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c90:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001c92:	4a0d      	ldr	r2, [pc, #52]	@ (8001cc8 <HAL_InitTick+0x90>)
 8001c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c96:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001c98:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc8 <HAL_InitTick+0x90>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc8 <HAL_InitTick+0x90>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8001ca4:	4808      	ldr	r0, [pc, #32]	@ (8001cc8 <HAL_InitTick+0x90>)
 8001ca6:	f002 fdab 	bl	8004800 <HAL_TIM_Base_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d104      	bne.n	8001cba <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8001cb0:	4805      	ldr	r0, [pc, #20]	@ (8001cc8 <HAL_InitTick+0x90>)
 8001cb2:	f002 fe07 	bl	80048c4 <HAL_TIM_Base_Start_IT>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	e000      	b.n	8001cbc <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3730      	adds	r7, #48	@ 0x30
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	431bde83 	.word	0x431bde83
 8001cc8:	20000508 	.word	0x20000508

08001ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cd0:	bf00      	nop
 8001cd2:	e7fd      	b.n	8001cd0 <NMI_Handler+0x4>

08001cd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cd8:	bf00      	nop
 8001cda:	e7fd      	b.n	8001cd8 <HardFault_Handler+0x4>

08001cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ce0:	bf00      	nop
 8001ce2:	e7fd      	b.n	8001ce0 <MemManage_Handler+0x4>

08001ce4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ce8:	bf00      	nop
 8001cea:	e7fd      	b.n	8001ce8 <BusFault_Handler+0x4>

08001cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf0:	bf00      	nop
 8001cf2:	e7fd      	b.n	8001cf0 <UsageFault_Handler+0x4>

08001cf4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d02:	b480      	push	{r7}
 8001d04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001d30:	f7ff f92e 	bl	8000f90 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d3c:	4802      	ldr	r0, [pc, #8]	@ (8001d48 <TIM2_IRQHandler+0x10>)
 8001d3e:	f002 fe0f 	bl	8004960 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000508 	.word	0x20000508

08001d4c <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001d50:	f006 fc24 	bl	800859c <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001d54:	bf00      	nop
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001d5c:	f006 fc54 	bl	8008608 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001d60:	bf00      	nop
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001d68:	f000 fbcc 	bl	8002504 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001d6c:	bf00      	nop
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001d74:	4b24      	ldr	r3, [pc, #144]	@ (8001e08 <SystemInit+0x98>)
 8001d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d7a:	4a23      	ldr	r2, [pc, #140]	@ (8001e08 <SystemInit+0x98>)
 8001d7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001d84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001d94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d98:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001d9c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001d9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001da8:	4b18      	ldr	r3, [pc, #96]	@ (8001e0c <SystemInit+0x9c>)
 8001daa:	4013      	ands	r3, r2
 8001dac:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001dae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001db6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001dba:	f023 0305 	bic.w	r3, r3, #5
 8001dbe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001dc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001dca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001dce:	f023 0301 	bic.w	r3, r3, #1
 8001dd2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001dd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dda:	4a0d      	ldr	r2, [pc, #52]	@ (8001e10 <SystemInit+0xa0>)
 8001ddc:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001dde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001de2:	4a0b      	ldr	r2, [pc, #44]	@ (8001e10 <SystemInit+0xa0>)
 8001de4:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001de6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001df0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001df4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001df6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	619a      	str	r2, [r3, #24]
}
 8001dfe:	bf00      	nop
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	e000ed00 	.word	0xe000ed00
 8001e0c:	faf6fefb 	.word	0xfaf6fefb
 8001e10:	22041000 	.word	0x22041000

08001e14 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001e14:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e16:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e18:	3304      	adds	r3, #4

08001e1a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e1a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e1c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001e1e:	d3f9      	bcc.n	8001e14 <CopyDataInit>
  bx lr
 8001e20:	4770      	bx	lr

08001e22 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001e22:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001e24:	3004      	adds	r0, #4

08001e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001e26:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001e28:	d3fb      	bcc.n	8001e22 <FillZerobss>
  bx lr
 8001e2a:	4770      	bx	lr

08001e2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e2c:	480c      	ldr	r0, [pc, #48]	@ (8001e60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e2e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e30:	f7ff ff9e 	bl	8001d70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001e34:	480b      	ldr	r0, [pc, #44]	@ (8001e64 <LoopForever+0x6>)
 8001e36:	490c      	ldr	r1, [pc, #48]	@ (8001e68 <LoopForever+0xa>)
 8001e38:	4a0c      	ldr	r2, [pc, #48]	@ (8001e6c <LoopForever+0xe>)
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	f7ff ffed 	bl	8001e1a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001e40:	480b      	ldr	r0, [pc, #44]	@ (8001e70 <LoopForever+0x12>)
 8001e42:	490c      	ldr	r1, [pc, #48]	@ (8001e74 <LoopForever+0x16>)
 8001e44:	4a0c      	ldr	r2, [pc, #48]	@ (8001e78 <LoopForever+0x1a>)
 8001e46:	2300      	movs	r3, #0
 8001e48:	f7ff ffe7 	bl	8001e1a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001e4c:	480b      	ldr	r0, [pc, #44]	@ (8001e7c <LoopForever+0x1e>)
 8001e4e:	490c      	ldr	r1, [pc, #48]	@ (8001e80 <LoopForever+0x22>)
 8001e50:	2300      	movs	r3, #0
 8001e52:	f7ff ffe8 	bl	8001e26 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e56:	f006 ff63 	bl	8008d20 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001e5a:	f7ff fb81 	bl	8001560 <main>

08001e5e <LoopForever>:

LoopForever:
  b LoopForever
 8001e5e:	e7fe      	b.n	8001e5e <LoopForever>
  ldr   r0, =_estack
 8001e60:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001e64:	20000008 	.word	0x20000008
 8001e68:	20000030 	.word	0x20000030
 8001e6c:	08009068 	.word	0x08009068
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001e70:	200301e4 	.word	0x200301e4
 8001e74:	20030a67 	.word	0x20030a67
 8001e78:	080090d6 	.word	0x080090d6
  INIT_BSS _sbss, _ebss
 8001e7c:	2000007c 	.word	0x2000007c
 8001e80:	2000070c 	.word	0x2000070c

08001e84 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e84:	e7fe      	b.n	8001e84 <ADC1_IRQHandler>
	...

08001e88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e92:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec4 <HAL_Init+0x3c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a0b      	ldr	r2, [pc, #44]	@ (8001ec4 <HAL_Init+0x3c>)
 8001e98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e9c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e9e:	2003      	movs	r0, #3
 8001ea0:	f000 f94b 	bl	800213a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ea4:	200f      	movs	r0, #15
 8001ea6:	f7ff fec7 	bl	8001c38 <HAL_InitTick>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d002      	beq.n	8001eb6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	71fb      	strb	r3, [r7, #7]
 8001eb4:	e001      	b.n	8001eba <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001eb6:	f7ff fd9f 	bl	80019f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001eba:	79fb      	ldrb	r3, [r7, #7]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	58004000 	.word	0x58004000

08001ec8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ecc:	4b06      	ldr	r3, [pc, #24]	@ (8001ee8 <HAL_IncTick+0x20>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4b06      	ldr	r3, [pc, #24]	@ (8001eec <HAL_IncTick+0x24>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	4a04      	ldr	r2, [pc, #16]	@ (8001eec <HAL_IncTick+0x24>)
 8001eda:	6013      	str	r3, [r2, #0]
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	20000010 	.word	0x20000010
 8001eec:	20000554 	.word	0x20000554

08001ef0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ef4:	4b03      	ldr	r3, [pc, #12]	@ (8001f04 <HAL_GetTick+0x14>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	20000554 	.word	0x20000554

08001f08 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001f0c:	4b03      	ldr	r3, [pc, #12]	@ (8001f1c <HAL_GetTickPrio+0x14>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	2000000c 	.word	0x2000000c

08001f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f30:	4b0c      	ldr	r3, [pc, #48]	@ (8001f64 <__NVIC_SetPriorityGrouping+0x44>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f52:	4a04      	ldr	r2, [pc, #16]	@ (8001f64 <__NVIC_SetPriorityGrouping+0x44>)
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	60d3      	str	r3, [r2, #12]
}
 8001f58:	bf00      	nop
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f6c:	4b04      	ldr	r3, [pc, #16]	@ (8001f80 <__NVIC_GetPriorityGrouping+0x18>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	0a1b      	lsrs	r3, r3, #8
 8001f72:	f003 0307 	and.w	r3, r3, #7
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	db0b      	blt.n	8001fae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	f003 021f 	and.w	r2, r3, #31
 8001f9c:	4907      	ldr	r1, [pc, #28]	@ (8001fbc <__NVIC_EnableIRQ+0x38>)
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	095b      	lsrs	r3, r3, #5
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8001faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	e000e100 	.word	0xe000e100

08001fc0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	db12      	blt.n	8001ff8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	f003 021f 	and.w	r2, r3, #31
 8001fd8:	490a      	ldr	r1, [pc, #40]	@ (8002004 <__NVIC_DisableIRQ+0x44>)
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	095b      	lsrs	r3, r3, #5
 8001fe0:	2001      	movs	r0, #1
 8001fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fe6:	3320      	adds	r3, #32
 8001fe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001fec:	f3bf 8f4f 	dsb	sy
}
 8001ff0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ff2:	f3bf 8f6f 	isb	sy
}
 8001ff6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000e100 	.word	0xe000e100

08002008 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002016:	2b00      	cmp	r3, #0
 8002018:	db0c      	blt.n	8002034 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	f003 021f 	and.w	r2, r3, #31
 8002020:	4907      	ldr	r1, [pc, #28]	@ (8002040 <__NVIC_SetPendingIRQ+0x38>)
 8002022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002026:	095b      	lsrs	r3, r3, #5
 8002028:	2001      	movs	r0, #1
 800202a:	fa00 f202 	lsl.w	r2, r0, r2
 800202e:	3340      	adds	r3, #64	@ 0x40
 8002030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	e000e100 	.word	0xe000e100

08002044 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800204e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002052:	2b00      	cmp	r3, #0
 8002054:	db0c      	blt.n	8002070 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	f003 021f 	and.w	r2, r3, #31
 800205c:	4907      	ldr	r1, [pc, #28]	@ (800207c <__NVIC_ClearPendingIRQ+0x38>)
 800205e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002062:	095b      	lsrs	r3, r3, #5
 8002064:	2001      	movs	r0, #1
 8002066:	fa00 f202 	lsl.w	r2, r0, r2
 800206a:	3360      	adds	r3, #96	@ 0x60
 800206c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	e000e100 	.word	0xe000e100

08002080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	6039      	str	r1, [r7, #0]
 800208a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800208c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002090:	2b00      	cmp	r3, #0
 8002092:	db0a      	blt.n	80020aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	b2da      	uxtb	r2, r3
 8002098:	490c      	ldr	r1, [pc, #48]	@ (80020cc <__NVIC_SetPriority+0x4c>)
 800209a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209e:	0112      	lsls	r2, r2, #4
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	440b      	add	r3, r1
 80020a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020a8:	e00a      	b.n	80020c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	4908      	ldr	r1, [pc, #32]	@ (80020d0 <__NVIC_SetPriority+0x50>)
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	3b04      	subs	r3, #4
 80020b8:	0112      	lsls	r2, r2, #4
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	440b      	add	r3, r1
 80020be:	761a      	strb	r2, [r3, #24]
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	e000e100 	.word	0xe000e100
 80020d0:	e000ed00 	.word	0xe000ed00

080020d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b089      	sub	sp, #36	@ 0x24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	f1c3 0307 	rsb	r3, r3, #7
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	bf28      	it	cs
 80020f2:	2304      	movcs	r3, #4
 80020f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	3304      	adds	r3, #4
 80020fa:	2b06      	cmp	r3, #6
 80020fc:	d902      	bls.n	8002104 <NVIC_EncodePriority+0x30>
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	3b03      	subs	r3, #3
 8002102:	e000      	b.n	8002106 <NVIC_EncodePriority+0x32>
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002108:	f04f 32ff 	mov.w	r2, #4294967295
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43da      	mvns	r2, r3
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	401a      	ands	r2, r3
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800211c:	f04f 31ff 	mov.w	r1, #4294967295
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	fa01 f303 	lsl.w	r3, r1, r3
 8002126:	43d9      	mvns	r1, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800212c:	4313      	orrs	r3, r2
         );
}
 800212e:	4618      	mov	r0, r3
 8002130:	3724      	adds	r7, #36	@ 0x24
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff feec 	bl	8001f20 <__NVIC_SetPriorityGrouping>
}
 8002148:	bf00      	nop
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
 800215c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800215e:	f7ff ff03 	bl	8001f68 <__NVIC_GetPriorityGrouping>
 8002162:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	68b9      	ldr	r1, [r7, #8]
 8002168:	6978      	ldr	r0, [r7, #20]
 800216a:	f7ff ffb3 	bl	80020d4 <NVIC_EncodePriority>
 800216e:	4602      	mov	r2, r0
 8002170:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002174:	4611      	mov	r1, r2
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff ff82 	bl	8002080 <__NVIC_SetPriority>
}
 800217c:	bf00      	nop
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff fef6 	bl	8001f84 <__NVIC_EnableIRQ>
}
 8002198:	bf00      	nop
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80021aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff ff06 	bl	8001fc0 <__NVIC_DisableIRQ>
}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80021c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff ff1c 	bl	8002008 <__NVIC_SetPendingIRQ>
}
 80021d0:	bf00      	nop
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	4603      	mov	r3, r0
 80021e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80021e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff ff2c 	bl	8002044 <__NVIC_ClearPendingIRQ>
}
 80021ec:	bf00      	nop
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002202:	e14c      	b.n	800249e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	2101      	movs	r1, #1
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	fa01 f303 	lsl.w	r3, r1, r3
 8002210:	4013      	ands	r3, r2
 8002212:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 813e 	beq.w	8002498 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 0303 	and.w	r3, r3, #3
 8002224:	2b01      	cmp	r3, #1
 8002226:	d005      	beq.n	8002234 <HAL_GPIO_Init+0x40>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 0303 	and.w	r3, r3, #3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d130      	bne.n	8002296 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	2203      	movs	r2, #3
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	4013      	ands	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	68da      	ldr	r2, [r3, #12]
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800226a:	2201      	movs	r2, #1
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43db      	mvns	r3, r3
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	4013      	ands	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	091b      	lsrs	r3, r3, #4
 8002280:	f003 0201 	and.w	r2, r3, #1
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	2b03      	cmp	r3, #3
 80022a0:	d017      	beq.n	80022d2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	2203      	movs	r2, #3
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43db      	mvns	r3, r3
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	4013      	ands	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d123      	bne.n	8002326 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	08da      	lsrs	r2, r3, #3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	3208      	adds	r2, #8
 80022e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	220f      	movs	r2, #15
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43db      	mvns	r3, r3
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	4013      	ands	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	691a      	ldr	r2, [r3, #16]
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	4313      	orrs	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	08da      	lsrs	r2, r3, #3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3208      	adds	r2, #8
 8002320:	6939      	ldr	r1, [r7, #16]
 8002322:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	2203      	movs	r2, #3
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43db      	mvns	r3, r3
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	4013      	ands	r3, r2
 800233c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 0203 	and.w	r2, r3, #3
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002362:	2b00      	cmp	r3, #0
 8002364:	f000 8098 	beq.w	8002498 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002368:	4a54      	ldr	r2, [pc, #336]	@ (80024bc <HAL_GPIO_Init+0x2c8>)
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	089b      	lsrs	r3, r3, #2
 800236e:	3302      	adds	r3, #2
 8002370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002374:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f003 0303 	and.w	r3, r3, #3
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	220f      	movs	r2, #15
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4013      	ands	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002392:	d019      	beq.n	80023c8 <HAL_GPIO_Init+0x1d4>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a4a      	ldr	r2, [pc, #296]	@ (80024c0 <HAL_GPIO_Init+0x2cc>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d013      	beq.n	80023c4 <HAL_GPIO_Init+0x1d0>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a49      	ldr	r2, [pc, #292]	@ (80024c4 <HAL_GPIO_Init+0x2d0>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d00d      	beq.n	80023c0 <HAL_GPIO_Init+0x1cc>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a48      	ldr	r2, [pc, #288]	@ (80024c8 <HAL_GPIO_Init+0x2d4>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d007      	beq.n	80023bc <HAL_GPIO_Init+0x1c8>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a47      	ldr	r2, [pc, #284]	@ (80024cc <HAL_GPIO_Init+0x2d8>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d101      	bne.n	80023b8 <HAL_GPIO_Init+0x1c4>
 80023b4:	2304      	movs	r3, #4
 80023b6:	e008      	b.n	80023ca <HAL_GPIO_Init+0x1d6>
 80023b8:	2307      	movs	r3, #7
 80023ba:	e006      	b.n	80023ca <HAL_GPIO_Init+0x1d6>
 80023bc:	2303      	movs	r3, #3
 80023be:	e004      	b.n	80023ca <HAL_GPIO_Init+0x1d6>
 80023c0:	2302      	movs	r3, #2
 80023c2:	e002      	b.n	80023ca <HAL_GPIO_Init+0x1d6>
 80023c4:	2301      	movs	r3, #1
 80023c6:	e000      	b.n	80023ca <HAL_GPIO_Init+0x1d6>
 80023c8:	2300      	movs	r3, #0
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	f002 0203 	and.w	r2, r2, #3
 80023d0:	0092      	lsls	r2, r2, #2
 80023d2:	4093      	lsls	r3, r2
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023da:	4938      	ldr	r1, [pc, #224]	@ (80024bc <HAL_GPIO_Init+0x2c8>)
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	089b      	lsrs	r3, r3, #2
 80023e0:	3302      	adds	r3, #2
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023e8:	4b39      	ldr	r3, [pc, #228]	@ (80024d0 <HAL_GPIO_Init+0x2dc>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	43db      	mvns	r3, r3
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	4013      	ands	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	4313      	orrs	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800240c:	4a30      	ldr	r2, [pc, #192]	@ (80024d0 <HAL_GPIO_Init+0x2dc>)
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002412:	4b2f      	ldr	r3, [pc, #188]	@ (80024d0 <HAL_GPIO_Init+0x2dc>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	43db      	mvns	r3, r3
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	4013      	ands	r3, r2
 8002420:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4313      	orrs	r3, r2
 8002434:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002436:	4a26      	ldr	r2, [pc, #152]	@ (80024d0 <HAL_GPIO_Init+0x2dc>)
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800243c:	4b24      	ldr	r3, [pc, #144]	@ (80024d0 <HAL_GPIO_Init+0x2dc>)
 800243e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002442:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	43db      	mvns	r3, r3
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	4013      	ands	r3, r2
 800244c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4313      	orrs	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002462:	4a1b      	ldr	r2, [pc, #108]	@ (80024d0 <HAL_GPIO_Init+0x2dc>)
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800246a:	4b19      	ldr	r3, [pc, #100]	@ (80024d0 <HAL_GPIO_Init+0x2dc>)
 800246c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002470:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	43db      	mvns	r3, r3
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4013      	ands	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	4313      	orrs	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002490:	4a0f      	ldr	r2, [pc, #60]	@ (80024d0 <HAL_GPIO_Init+0x2dc>)
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	3301      	adds	r3, #1
 800249c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	fa22 f303 	lsr.w	r3, r2, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f47f aeab 	bne.w	8002204 <HAL_GPIO_Init+0x10>
  }
}
 80024ae:	bf00      	nop
 80024b0:	bf00      	nop
 80024b2:	371c      	adds	r7, #28
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	40010000 	.word	0x40010000
 80024c0:	48000400 	.word	0x48000400
 80024c4:	48000800 	.word	0x48000800
 80024c8:	48000c00 	.word	0x48000c00
 80024cc:	48001000 	.word	0x48001000
 80024d0:	58000800 	.word	0x58000800

080024d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	460b      	mov	r3, r1
 80024de:	807b      	strh	r3, [r7, #2]
 80024e0:	4613      	mov	r3, r2
 80024e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024e4:	787b      	ldrb	r3, [r7, #1]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024ea:	887a      	ldrh	r2, [r7, #2]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024f0:	e002      	b.n	80024f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024f2:	887a      	ldrh	r2, [r7, #2]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800250a:	4b0a      	ldr	r3, [pc, #40]	@ (8002534 <HAL_HSEM_IRQHandler+0x30>)
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002510:	4b08      	ldr	r3, [pc, #32]	@ (8002534 <HAL_HSEM_IRQHandler+0x30>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	43db      	mvns	r3, r3
 8002518:	4906      	ldr	r1, [pc, #24]	@ (8002534 <HAL_HSEM_IRQHandler+0x30>)
 800251a:	4013      	ands	r3, r2
 800251c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800251e:	4a05      	ldr	r2, [pc, #20]	@ (8002534 <HAL_HSEM_IRQHandler+0x30>)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f807 	bl	8002538 <HAL_HSEM_FreeCallback>
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	58001500 	.word	0x58001500

08002538 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8002554:	2300      	movs	r3, #0
 8002556:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d01e      	beq.n	800259c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800255e:	4b13      	ldr	r3, [pc, #76]	@ (80025ac <HAL_IPCC_Init+0x60>)
 8002560:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d102      	bne.n	8002574 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7ff fa52 	bl	8001a18 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8002574:	68b8      	ldr	r0, [r7, #8]
 8002576:	f000 f85b 	bl	8002630 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f82c 	bl	80025e4 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800259a:	e001      	b.n	80025a0 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	58000c00 	.word	0x58000c00

080025b0 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	4613      	mov	r3, r2
 80025bc:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80025be:	bf00      	nop
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b085      	sub	sp, #20
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	60f8      	str	r0, [r7, #12]
 80025d2:	60b9      	str	r1, [r7, #8]
 80025d4:	4613      	mov	r3, r2
 80025d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80025d8:	bf00      	nop
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	e00f      	b.n	8002612 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	4a0b      	ldr	r2, [pc, #44]	@ (8002628 <IPCC_SetDefaultCallbacks+0x44>)
 80025fc:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	3306      	adds	r3, #6
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4413      	add	r3, r2
 8002608:	4a08      	ldr	r2, [pc, #32]	@ (800262c <IPCC_SetDefaultCallbacks+0x48>)
 800260a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	3301      	adds	r3, #1
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2b05      	cmp	r3, #5
 8002616:	d9ec      	bls.n	80025f2 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8002618:	bf00      	nop
 800261a:	bf00      	nop
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	080025b1 	.word	0x080025b1
 800262c:	080025cb 	.word	0x080025cb

08002630 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8002644:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	223f      	movs	r2, #63	@ 0x3f
 800264a:	609a      	str	r2, [r3, #8]
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e0c0      	b.n	80027ec <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d106      	bne.n	8002684 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff fa6a 	bl	8001b58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2203      	movs	r2, #3
 8002688:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4618      	mov	r0, r3
 8002692:	f003 f8dd 	bl	8005850 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002696:	2300      	movs	r3, #0
 8002698:	73fb      	strb	r3, [r7, #15]
 800269a:	e03e      	b.n	800271a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800269c:	7bfa      	ldrb	r2, [r7, #15]
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	440b      	add	r3, r1
 80026aa:	3311      	adds	r3, #17
 80026ac:	2201      	movs	r2, #1
 80026ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026b0:	7bfa      	ldrb	r2, [r7, #15]
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	4613      	mov	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	440b      	add	r3, r1
 80026be:	3310      	adds	r3, #16
 80026c0:	7bfa      	ldrb	r2, [r7, #15]
 80026c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026c4:	7bfa      	ldrb	r2, [r7, #15]
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	4613      	mov	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	440b      	add	r3, r1
 80026d2:	3313      	adds	r3, #19
 80026d4:	2200      	movs	r2, #0
 80026d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026d8:	7bfa      	ldrb	r2, [r7, #15]
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	4613      	mov	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	440b      	add	r3, r1
 80026e6:	3320      	adds	r3, #32
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026ec:	7bfa      	ldrb	r2, [r7, #15]
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4413      	add	r3, r2
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	440b      	add	r3, r1
 80026fa:	3324      	adds	r3, #36	@ 0x24
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002700:	7bfb      	ldrb	r3, [r7, #15]
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	1c5a      	adds	r2, r3, #1
 8002706:	4613      	mov	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	440b      	add	r3, r1
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002714:	7bfb      	ldrb	r3, [r7, #15]
 8002716:	3301      	adds	r3, #1
 8002718:	73fb      	strb	r3, [r7, #15]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	791b      	ldrb	r3, [r3, #4]
 800271e:	7bfa      	ldrb	r2, [r7, #15]
 8002720:	429a      	cmp	r2, r3
 8002722:	d3bb      	bcc.n	800269c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002724:	2300      	movs	r3, #0
 8002726:	73fb      	strb	r3, [r7, #15]
 8002728:	e044      	b.n	80027b4 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800272a:	7bfa      	ldrb	r2, [r7, #15]
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	440b      	add	r3, r1
 8002738:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800273c:	2200      	movs	r2, #0
 800273e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002740:	7bfa      	ldrb	r2, [r7, #15]
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	4613      	mov	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	440b      	add	r3, r1
 800274e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002752:	7bfa      	ldrb	r2, [r7, #15]
 8002754:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002756:	7bfa      	ldrb	r2, [r7, #15]
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	4613      	mov	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4413      	add	r3, r2
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	440b      	add	r3, r1
 8002764:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002768:	2200      	movs	r2, #0
 800276a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800276c:	7bfa      	ldrb	r2, [r7, #15]
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	4613      	mov	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	440b      	add	r3, r1
 800277a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002782:	7bfa      	ldrb	r2, [r7, #15]
 8002784:	6879      	ldr	r1, [r7, #4]
 8002786:	4613      	mov	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	440b      	add	r3, r1
 8002790:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002798:	7bfa      	ldrb	r2, [r7, #15]
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	4613      	mov	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	440b      	add	r3, r1
 80027a6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ae:	7bfb      	ldrb	r3, [r7, #15]
 80027b0:	3301      	adds	r3, #1
 80027b2:	73fb      	strb	r3, [r7, #15]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	791b      	ldrb	r3, [r3, #4]
 80027b8:	7bfa      	ldrb	r2, [r7, #15]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d3b5      	bcc.n	800272a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6818      	ldr	r0, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	3304      	adds	r3, #4
 80027c6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80027ca:	f003 f85c 	bl	8005886 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	7a9b      	ldrb	r3, [r3, #10]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d102      	bne.n	80027ea <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 f805 	bl	80027f4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002818:	b29b      	uxth	r3, r3
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	b29a      	uxth	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800282c:	b29b      	uxth	r3, r3
 800282e:	f043 0302 	orr.w	r3, r3, #2
 8002832:	b29a      	uxth	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800284c:	4b05      	ldr	r3, [pc, #20]	@ (8002864 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a04      	ldr	r2, [pc, #16]	@ (8002864 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002852:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002856:	6013      	str	r3, [r2, #0]
}
 8002858:	bf00      	nop
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	58000400 	.word	0x58000400

08002868 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800286c:	4b04      	ldr	r3, [pc, #16]	@ (8002880 <HAL_PWREx_GetVoltageRange+0x18>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002874:	4618      	mov	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	58000400 	.word	0x58000400

08002884 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002888:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002892:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002896:	d101      	bne.n	800289c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002898:	2301      	movs	r3, #1
 800289a:	e000      	b.n	800289e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <LL_RCC_HSE_Enable>:
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80028ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028ba:	6013      	str	r3, [r2, #0]
}
 80028bc:	bf00      	nop
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <LL_RCC_HSE_Disable>:
{
 80028c6:	b480      	push	{r7}
 80028c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80028ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028d8:	6013      	str	r3, [r2, #0]
}
 80028da:	bf00      	nop
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <LL_RCC_HSE_IsReady>:
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80028e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80028f6:	d101      	bne.n	80028fc <LL_RCC_HSE_IsReady+0x18>
 80028f8:	2301      	movs	r3, #1
 80028fa:	e000      	b.n	80028fe <LL_RCC_HSE_IsReady+0x1a>
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <LL_RCC_HSI_Enable>:
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800290c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002916:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800291a:	6013      	str	r3, [r2, #0]
}
 800291c:	bf00      	nop
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <LL_RCC_HSI_Disable>:
{
 8002926:	b480      	push	{r7}
 8002928:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800292a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002934:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002938:	6013      	str	r3, [r2, #0]
}
 800293a:	bf00      	nop
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <LL_RCC_HSI_IsReady>:
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002948:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002952:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002956:	d101      	bne.n	800295c <LL_RCC_HSI_IsReady+0x18>
 8002958:	2301      	movs	r3, #1
 800295a:	e000      	b.n	800295e <LL_RCC_HSI_IsReady+0x1a>
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002970:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	061b      	lsls	r3, r3, #24
 800297e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002982:	4313      	orrs	r3, r2
 8002984:	604b      	str	r3, [r1, #4]
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <LL_RCC_HSI48_Enable>:
{
 8002992:	b480      	push	{r7}
 8002994:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002996:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800299a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800299e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029a2:	f043 0301 	orr.w	r3, r3, #1
 80029a6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80029aa:	bf00      	nop
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <LL_RCC_HSI48_Disable>:
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80029b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80029c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029c4:	f023 0301 	bic.w	r3, r3, #1
 80029c8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80029cc:	bf00      	nop
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <LL_RCC_HSI48_IsReady>:
{
 80029d6:	b480      	push	{r7}
 80029d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80029da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d101      	bne.n	80029ee <LL_RCC_HSI48_IsReady+0x18>
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <LL_RCC_HSI48_IsReady+0x1a>
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <LL_RCC_LSE_Enable>:
{
 80029fa:	b480      	push	{r7}
 80029fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80029fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a06:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a0a:	f043 0301 	orr.w	r3, r3, #1
 8002a0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002a12:	bf00      	nop
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <LL_RCC_LSE_Disable>:
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a2c:	f023 0301 	bic.w	r3, r3, #1
 8002a30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002a34:	bf00      	nop
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <LL_RCC_LSE_EnableBypass>:
{
 8002a3e:	b480      	push	{r7}
 8002a40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a4e:	f043 0304 	orr.w	r3, r3, #4
 8002a52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002a56:	bf00      	nop
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <LL_RCC_LSE_DisableBypass>:
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a70:	f023 0304 	bic.w	r3, r3, #4
 8002a74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002a78:	bf00      	nop
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <LL_RCC_LSE_IsReady>:
{
 8002a82:	b480      	push	{r7}
 8002a84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002a86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d101      	bne.n	8002a9a <LL_RCC_LSE_IsReady+0x18>
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <LL_RCC_LSE_IsReady+0x1a>
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <LL_RCC_LSI1_Enable>:
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002aaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ab2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ab6:	f043 0301 	orr.w	r3, r3, #1
 8002aba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002abe:	bf00      	nop
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <LL_RCC_LSI1_Disable>:
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002acc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ad4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ad8:	f023 0301 	bic.w	r3, r3, #1
 8002adc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002ae0:	bf00      	nop
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <LL_RCC_LSI1_IsReady>:
{
 8002aea:	b480      	push	{r7}
 8002aec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002aee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d101      	bne.n	8002b02 <LL_RCC_LSI1_IsReady+0x18>
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <LL_RCC_LSI1_IsReady+0x1a>
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <LL_RCC_LSI2_Enable>:
{
 8002b0e:	b480      	push	{r7}
 8002b10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002b12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b1e:	f043 0304 	orr.w	r3, r3, #4
 8002b22:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002b26:	bf00      	nop
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <LL_RCC_LSI2_Disable>:
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002b34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b40:	f023 0304 	bic.w	r3, r3, #4
 8002b44:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002b48:	bf00      	nop
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <LL_RCC_LSI2_IsReady>:
{
 8002b52:	b480      	push	{r7}
 8002b54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002b56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d101      	bne.n	8002b6a <LL_RCC_LSI2_IsReady+0x18>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <LL_RCC_LSI2_IsReady+0x1a>
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <LL_RCC_LSI2_SetTrimming>:
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002b7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b86:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	021b      	lsls	r3, r3, #8
 8002b8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b92:	4313      	orrs	r3, r2
 8002b94:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <LL_RCC_MSI_Enable>:
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002ba8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bb2:	f043 0301 	orr.w	r3, r3, #1
 8002bb6:	6013      	str	r3, [r2, #0]
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <LL_RCC_MSI_Disable>:
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002bc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bd0:	f023 0301 	bic.w	r3, r3, #1
 8002bd4:	6013      	str	r3, [r2, #0]
}
 8002bd6:	bf00      	nop
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <LL_RCC_MSI_IsReady>:
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002be4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d101      	bne.n	8002bf6 <LL_RCC_MSI_IsReady+0x16>
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e000      	b.n	8002bf8 <LL_RCC_MSI_IsReady+0x18>
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <LL_RCC_MSI_SetRange>:
{
 8002c02:	b480      	push	{r7}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002c0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c14:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	600b      	str	r3, [r1, #0]
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <LL_RCC_MSI_GetRange>:
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002c30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c3a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2bb0      	cmp	r3, #176	@ 0xb0
 8002c40:	d901      	bls.n	8002c46 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002c42:	23b0      	movs	r3, #176	@ 0xb0
 8002c44:	607b      	str	r3, [r7, #4]
  return msiRange;
 8002c46:	687b      	ldr	r3, [r7, #4]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002c5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	021b      	lsls	r3, r3, #8
 8002c6a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	604b      	str	r3, [r1, #4]
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <LL_RCC_SetSysClkSource>:
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002c86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f023 0203 	bic.w	r2, r3, #3
 8002c90:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	608b      	str	r3, [r1, #8]
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <LL_RCC_GetSysClkSource>:
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002caa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 030c 	and.w	r3, r3, #12
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <LL_RCC_SetAHBPrescaler>:
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002cc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cd0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	608b      	str	r3, [r1, #8]
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <LL_C2_RCC_SetAHBPrescaler>:
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002cee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cf2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002cf6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cfa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <LL_RCC_SetAHB4Prescaler>:
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002d1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d1e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002d22:	f023 020f 	bic.w	r2, r3, #15
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	091b      	lsrs	r3, r3, #4
 8002d2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <LL_RCC_SetAPB1Prescaler>:
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002d48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	608b      	str	r3, [r1, #8]
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <LL_RCC_SetAPB2Prescaler>:
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002d70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	608b      	str	r3, [r1, #8]
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <LL_RCC_GetAHBPrescaler>:
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002d94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <LL_C2_RCC_GetAHBPrescaler>:
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8002dac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002db0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002db4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr

08002dc2 <LL_RCC_GetAHB4Prescaler>:
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002dc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dca:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <LL_RCC_GetAPB1Prescaler>:
{
 8002dde:	b480      	push	{r7}
 8002de0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002de2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <LL_RCC_GetAPB2Prescaler>:
{
 8002df6:	b480      	push	{r7}
 8002df8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002dfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002e12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e1c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e20:	6013      	str	r3, [r2, #0]
}
 8002e22:	bf00      	nop
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002e30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e3e:	6013      	str	r3, [r2, #0]
}
 8002e40:	bf00      	nop
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002e4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e58:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e5c:	d101      	bne.n	8002e62 <LL_RCC_PLL_IsReady+0x18>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <LL_RCC_PLL_IsReady+0x1a>
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002e72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	0a1b      	lsrs	r3, r3, #8
 8002e7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002e8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002ea4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002ebc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f003 0303 	and.w	r3, r3, #3
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002ed4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ede:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ee2:	d101      	bne.n	8002ee8 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e000      	b.n	8002eea <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002ef8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002efc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002f00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f08:	d101      	bne.n	8002f0e <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002f1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f22:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002f26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f2e:	d101      	bne.n	8002f34 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002f30:	2301      	movs	r3, #1
 8002f32:	e000      	b.n	8002f36 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002f44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f52:	d101      	bne.n	8002f58 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002f54:	2301      	movs	r3, #1
 8002f56:	e000      	b.n	8002f5a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002f68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f72:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f76:	d101      	bne.n	8002f7c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e000      	b.n	8002f7e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f88:	b590      	push	{r4, r7, lr}
 8002f8a:	b08d      	sub	sp, #52	@ 0x34
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e363      	b.n	8003662 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0320 	and.w	r3, r3, #32
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f000 808d 	beq.w	80030c2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fa8:	f7ff fe7d 	bl	8002ca6 <LL_RCC_GetSysClkSource>
 8002fac:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fae:	f7ff ff83 	bl	8002eb8 <LL_RCC_PLL_GetMainSource>
 8002fb2:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d005      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x3e>
 8002fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fbc:	2b0c      	cmp	r3, #12
 8002fbe:	d147      	bne.n	8003050 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d144      	bne.n	8003050 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e347      	b.n	8003662 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8002fd6:	f7ff fe28 	bl	8002c2a <LL_RCC_MSI_GetRange>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	429c      	cmp	r4, r3
 8002fde:	d914      	bls.n	800300a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f000 fd61 	bl	8003aac <RCC_SetFlashLatencyFromMSIRange>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e336      	b.n	8003662 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff fe02 	bl	8002c02 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff fe26 	bl	8002c54 <LL_RCC_MSI_SetCalibTrimming>
 8003008:	e013      	b.n	8003032 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff fdf7 	bl	8002c02 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff fe1b 	bl	8002c54 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003022:	4618      	mov	r0, r3
 8003024:	f000 fd42 	bl	8003aac <RCC_SetFlashLatencyFromMSIRange>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e317      	b.n	8003662 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003032:	f000 fcc9 	bl	80039c8 <HAL_RCC_GetHCLKFreq>
 8003036:	4603      	mov	r3, r0
 8003038:	4aa4      	ldr	r2, [pc, #656]	@ (80032cc <HAL_RCC_OscConfig+0x344>)
 800303a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800303c:	4ba4      	ldr	r3, [pc, #656]	@ (80032d0 <HAL_RCC_OscConfig+0x348>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f7fe fdf9 	bl	8001c38 <HAL_InitTick>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d039      	beq.n	80030c0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e308      	b.n	8003662 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	69db      	ldr	r3, [r3, #28]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d01e      	beq.n	8003096 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003058:	f7ff fda4 	bl	8002ba4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800305c:	f7fe ff48 	bl	8001ef0 <HAL_GetTick>
 8003060:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003064:	f7fe ff44 	bl	8001ef0 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e2f5      	b.n	8003662 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003076:	f7ff fdb3 	bl	8002be0 <LL_RCC_MSI_IsReady>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0f1      	beq.n	8003064 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff fdbc 	bl	8002c02 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff fde0 	bl	8002c54 <LL_RCC_MSI_SetCalibTrimming>
 8003094:	e015      	b.n	80030c2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003096:	f7ff fd94 	bl	8002bc2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800309a:	f7fe ff29 	bl	8001ef0 <HAL_GetTick>
 800309e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030a2:	f7fe ff25 	bl	8001ef0 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e2d6      	b.n	8003662 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80030b4:	f7ff fd94 	bl	8002be0 <LL_RCC_MSI_IsReady>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f1      	bne.n	80030a2 <HAL_RCC_OscConfig+0x11a>
 80030be:	e000      	b.n	80030c2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80030c0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d047      	beq.n	800315e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030ce:	f7ff fdea 	bl	8002ca6 <LL_RCC_GetSysClkSource>
 80030d2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030d4:	f7ff fef0 	bl	8002eb8 <LL_RCC_PLL_GetMainSource>
 80030d8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d005      	beq.n	80030ec <HAL_RCC_OscConfig+0x164>
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	2b0c      	cmp	r3, #12
 80030e4:	d108      	bne.n	80030f8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	2b03      	cmp	r3, #3
 80030ea:	d105      	bne.n	80030f8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d134      	bne.n	800315e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e2b4      	b.n	8003662 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003100:	d102      	bne.n	8003108 <HAL_RCC_OscConfig+0x180>
 8003102:	f7ff fbd1 	bl	80028a8 <LL_RCC_HSE_Enable>
 8003106:	e001      	b.n	800310c <HAL_RCC_OscConfig+0x184>
 8003108:	f7ff fbdd 	bl	80028c6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d012      	beq.n	800313a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003114:	f7fe feec 	bl	8001ef0 <HAL_GetTick>
 8003118:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800311c:	f7fe fee8 	bl	8001ef0 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b64      	cmp	r3, #100	@ 0x64
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e299      	b.n	8003662 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800312e:	f7ff fbd9 	bl	80028e4 <LL_RCC_HSE_IsReady>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d0f1      	beq.n	800311c <HAL_RCC_OscConfig+0x194>
 8003138:	e011      	b.n	800315e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313a:	f7fe fed9 	bl	8001ef0 <HAL_GetTick>
 800313e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003142:	f7fe fed5 	bl	8001ef0 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b64      	cmp	r3, #100	@ 0x64
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e286      	b.n	8003662 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003154:	f7ff fbc6 	bl	80028e4 <LL_RCC_HSE_IsReady>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f1      	bne.n	8003142 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d04c      	beq.n	8003204 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800316a:	f7ff fd9c 	bl	8002ca6 <LL_RCC_GetSysClkSource>
 800316e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003170:	f7ff fea2 	bl	8002eb8 <LL_RCC_PLL_GetMainSource>
 8003174:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	2b04      	cmp	r3, #4
 800317a:	d005      	beq.n	8003188 <HAL_RCC_OscConfig+0x200>
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	2b0c      	cmp	r3, #12
 8003180:	d10e      	bne.n	80031a0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2b02      	cmp	r3, #2
 8003186:	d10b      	bne.n	80031a0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e266      	b.n	8003662 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff fbe5 	bl	8002968 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800319e:	e031      	b.n	8003204 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d019      	beq.n	80031dc <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031a8:	f7ff fbae 	bl	8002908 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ac:	f7fe fea0 	bl	8001ef0 <HAL_GetTick>
 80031b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031b4:	f7fe fe9c 	bl	8001ef0 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e24d      	b.n	8003662 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80031c6:	f7ff fbbd 	bl	8002944 <LL_RCC_HSI_IsReady>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d0f1      	beq.n	80031b4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff fbc7 	bl	8002968 <LL_RCC_HSI_SetCalibTrimming>
 80031da:	e013      	b.n	8003204 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031dc:	f7ff fba3 	bl	8002926 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e0:	f7fe fe86 	bl	8001ef0 <HAL_GetTick>
 80031e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031e8:	f7fe fe82 	bl	8001ef0 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e233      	b.n	8003662 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80031fa:	f7ff fba3 	bl	8002944 <LL_RCC_HSI_IsReady>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1f1      	bne.n	80031e8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0308 	and.w	r3, r3, #8
 800320c:	2b00      	cmp	r3, #0
 800320e:	d106      	bne.n	800321e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 80a3 	beq.w	8003364 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d076      	beq.n	8003314 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0310 	and.w	r3, r3, #16
 800322e:	2b00      	cmp	r3, #0
 8003230:	d046      	beq.n	80032c0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003232:	f7ff fc5a 	bl	8002aea <LL_RCC_LSI1_IsReady>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d113      	bne.n	8003264 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800323c:	f7ff fc33 	bl	8002aa6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003240:	f7fe fe56 	bl	8001ef0 <HAL_GetTick>
 8003244:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003248:	f7fe fe52 	bl	8001ef0 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e203      	b.n	8003662 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800325a:	f7ff fc46 	bl	8002aea <LL_RCC_LSI1_IsReady>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0f1      	beq.n	8003248 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003264:	f7ff fc53 	bl	8002b0e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003268:	f7fe fe42 	bl	8001ef0 <HAL_GetTick>
 800326c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003270:	f7fe fe3e 	bl	8001ef0 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b03      	cmp	r3, #3
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e1ef      	b.n	8003662 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003282:	f7ff fc66 	bl	8002b52 <LL_RCC_LSI2_IsReady>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d0f1      	beq.n	8003270 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff fc70 	bl	8002b76 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003296:	f7ff fc17 	bl	8002ac8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329a:	f7fe fe29 	bl	8001ef0 <HAL_GetTick>
 800329e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80032a2:	f7fe fe25 	bl	8001ef0 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e1d6      	b.n	8003662 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80032b4:	f7ff fc19 	bl	8002aea <LL_RCC_LSI1_IsReady>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1f1      	bne.n	80032a2 <HAL_RCC_OscConfig+0x31a>
 80032be:	e051      	b.n	8003364 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80032c0:	f7ff fbf1 	bl	8002aa6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c4:	f7fe fe14 	bl	8001ef0 <HAL_GetTick>
 80032c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80032ca:	e00c      	b.n	80032e6 <HAL_RCC_OscConfig+0x35e>
 80032cc:	20000008 	.word	0x20000008
 80032d0:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80032d4:	f7fe fe0c 	bl	8001ef0 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e1bd      	b.n	8003662 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80032e6:	f7ff fc00 	bl	8002aea <LL_RCC_LSI1_IsReady>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0f1      	beq.n	80032d4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80032f0:	f7ff fc1e 	bl	8002b30 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80032f6:	f7fe fdfb 	bl	8001ef0 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b03      	cmp	r3, #3
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e1ac      	b.n	8003662 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003308:	f7ff fc23 	bl	8002b52 <LL_RCC_LSI2_IsReady>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f1      	bne.n	80032f6 <HAL_RCC_OscConfig+0x36e>
 8003312:	e027      	b.n	8003364 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003314:	f7ff fc0c 	bl	8002b30 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003318:	f7fe fdea 	bl	8001ef0 <HAL_GetTick>
 800331c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003320:	f7fe fde6 	bl	8001ef0 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b03      	cmp	r3, #3
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e197      	b.n	8003662 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003332:	f7ff fc0e 	bl	8002b52 <LL_RCC_LSI2_IsReady>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1f1      	bne.n	8003320 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800333c:	f7ff fbc4 	bl	8002ac8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003340:	f7fe fdd6 	bl	8001ef0 <HAL_GetTick>
 8003344:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003348:	f7fe fdd2 	bl	8001ef0 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e183      	b.n	8003662 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800335a:	f7ff fbc6 	bl	8002aea <LL_RCC_LSI1_IsReady>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1f1      	bne.n	8003348 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b00      	cmp	r3, #0
 800336e:	d05b      	beq.n	8003428 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003370:	4ba7      	ldr	r3, [pc, #668]	@ (8003610 <HAL_RCC_OscConfig+0x688>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003378:	2b00      	cmp	r3, #0
 800337a:	d114      	bne.n	80033a6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800337c:	f7ff fa64 	bl	8002848 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003380:	f7fe fdb6 	bl	8001ef0 <HAL_GetTick>
 8003384:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003388:	f7fe fdb2 	bl	8001ef0 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e163      	b.n	8003662 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800339a:	4b9d      	ldr	r3, [pc, #628]	@ (8003610 <HAL_RCC_OscConfig+0x688>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0f0      	beq.n	8003388 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d102      	bne.n	80033b4 <HAL_RCC_OscConfig+0x42c>
 80033ae:	f7ff fb24 	bl	80029fa <LL_RCC_LSE_Enable>
 80033b2:	e00c      	b.n	80033ce <HAL_RCC_OscConfig+0x446>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	2b05      	cmp	r3, #5
 80033ba:	d104      	bne.n	80033c6 <HAL_RCC_OscConfig+0x43e>
 80033bc:	f7ff fb3f 	bl	8002a3e <LL_RCC_LSE_EnableBypass>
 80033c0:	f7ff fb1b 	bl	80029fa <LL_RCC_LSE_Enable>
 80033c4:	e003      	b.n	80033ce <HAL_RCC_OscConfig+0x446>
 80033c6:	f7ff fb29 	bl	8002a1c <LL_RCC_LSE_Disable>
 80033ca:	f7ff fb49 	bl	8002a60 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d014      	beq.n	8003400 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d6:	f7fe fd8b 	bl	8001ef0 <HAL_GetTick>
 80033da:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80033dc:	e00a      	b.n	80033f4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033de:	f7fe fd87 	bl	8001ef0 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e136      	b.n	8003662 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80033f4:	f7ff fb45 	bl	8002a82 <LL_RCC_LSE_IsReady>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0ef      	beq.n	80033de <HAL_RCC_OscConfig+0x456>
 80033fe:	e013      	b.n	8003428 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003400:	f7fe fd76 	bl	8001ef0 <HAL_GetTick>
 8003404:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003406:	e00a      	b.n	800341e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003408:	f7fe fd72 	bl	8001ef0 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003416:	4293      	cmp	r3, r2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e121      	b.n	8003662 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800341e:	f7ff fb30 	bl	8002a82 <LL_RCC_LSE_IsReady>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1ef      	bne.n	8003408 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003430:	2b00      	cmp	r3, #0
 8003432:	d02c      	beq.n	800348e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003438:	2b00      	cmp	r3, #0
 800343a:	d014      	beq.n	8003466 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800343c:	f7ff faa9 	bl	8002992 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003440:	f7fe fd56 	bl	8001ef0 <HAL_GetTick>
 8003444:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003448:	f7fe fd52 	bl	8001ef0 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e103      	b.n	8003662 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800345a:	f7ff fabc 	bl	80029d6 <LL_RCC_HSI48_IsReady>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0f1      	beq.n	8003448 <HAL_RCC_OscConfig+0x4c0>
 8003464:	e013      	b.n	800348e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003466:	f7ff faa5 	bl	80029b4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800346a:	f7fe fd41 	bl	8001ef0 <HAL_GetTick>
 800346e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003470:	e008      	b.n	8003484 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003472:	f7fe fd3d 	bl	8001ef0 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e0ee      	b.n	8003662 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003484:	f7ff faa7 	bl	80029d6 <LL_RCC_HSI48_IsReady>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1f1      	bne.n	8003472 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 80e4 	beq.w	8003660 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003498:	f7ff fc05 	bl	8002ca6 <LL_RCC_GetSysClkSource>
 800349c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800349e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	f040 80b4 	bne.w	8003618 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f003 0203 	and.w	r2, r3, #3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d123      	bne.n	8003506 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d11c      	bne.n	8003506 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	0a1b      	lsrs	r3, r3, #8
 80034d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034d8:	429a      	cmp	r2, r3
 80034da:	d114      	bne.n	8003506 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d10d      	bne.n	8003506 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d106      	bne.n	8003506 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003502:	429a      	cmp	r2, r3
 8003504:	d05d      	beq.n	80035c2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	2b0c      	cmp	r3, #12
 800350a:	d058      	beq.n	80035be <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800350c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e0a1      	b.n	8003662 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800351e:	f7ff fc85 	bl	8002e2c <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003522:	f7fe fce5 	bl	8001ef0 <HAL_GetTick>
 8003526:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003528:	e008      	b.n	800353c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800352a:	f7fe fce1 	bl	8001ef0 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e092      	b.n	8003662 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800353c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1ef      	bne.n	800352a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800354a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800354e:	68da      	ldr	r2, [r3, #12]
 8003550:	4b30      	ldr	r3, [pc, #192]	@ (8003614 <HAL_RCC_OscConfig+0x68c>)
 8003552:	4013      	ands	r3, r2
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800355c:	4311      	orrs	r1, r2
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003562:	0212      	lsls	r2, r2, #8
 8003564:	4311      	orrs	r1, r2
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800356a:	4311      	orrs	r1, r2
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003570:	4311      	orrs	r1, r2
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003576:	430a      	orrs	r2, r1
 8003578:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800357c:	4313      	orrs	r3, r2
 800357e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003580:	f7ff fc45 	bl	8002e0e <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003584:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800358e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003592:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003594:	f7fe fcac 	bl	8001ef0 <HAL_GetTick>
 8003598:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800359c:	f7fe fca8 	bl	8001ef0 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e059      	b.n	8003662 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d0ef      	beq.n	800359c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035bc:	e050      	b.n	8003660 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e04f      	b.n	8003662 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d147      	bne.n	8003660 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80035d0:	f7ff fc1d 	bl	8002e0e <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80035de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035e4:	f7fe fc84 	bl	8001ef0 <HAL_GetTick>
 80035e8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ec:	f7fe fc80 	bl	8001ef0 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e031      	b.n	8003662 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d0ef      	beq.n	80035ec <HAL_RCC_OscConfig+0x664>
 800360c:	e028      	b.n	8003660 <HAL_RCC_OscConfig+0x6d8>
 800360e:	bf00      	nop
 8003610:	58000400 	.word	0x58000400
 8003614:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	2b0c      	cmp	r3, #12
 800361c:	d01e      	beq.n	800365c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800361e:	f7ff fc05 	bl	8002e2c <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003622:	f7fe fc65 	bl	8001ef0 <HAL_GetTick>
 8003626:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003628:	e008      	b.n	800363c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800362a:	f7fe fc61 	bl	8001ef0 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e012      	b.n	8003662 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800363c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1ef      	bne.n	800362a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800364a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003654:	4b05      	ldr	r3, [pc, #20]	@ (800366c <HAL_RCC_OscConfig+0x6e4>)
 8003656:	4013      	ands	r3, r2
 8003658:	60cb      	str	r3, [r1, #12]
 800365a:	e001      	b.n	8003660 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e000      	b.n	8003662 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3734      	adds	r7, #52	@ 0x34
 8003666:	46bd      	mov	sp, r7
 8003668:	bd90      	pop	{r4, r7, pc}
 800366a:	bf00      	nop
 800366c:	eefefffc 	.word	0xeefefffc

08003670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e12d      	b.n	80038e0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003684:	4b98      	ldr	r3, [pc, #608]	@ (80038e8 <HAL_RCC_ClockConfig+0x278>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	429a      	cmp	r2, r3
 8003690:	d91b      	bls.n	80036ca <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003692:	4b95      	ldr	r3, [pc, #596]	@ (80038e8 <HAL_RCC_ClockConfig+0x278>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f023 0207 	bic.w	r2, r3, #7
 800369a:	4993      	ldr	r1, [pc, #588]	@ (80038e8 <HAL_RCC_ClockConfig+0x278>)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	4313      	orrs	r3, r2
 80036a0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036a2:	f7fe fc25 	bl	8001ef0 <HAL_GetTick>
 80036a6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80036aa:	f7fe fc21 	bl	8001ef0 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e111      	b.n	80038e0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036bc:	4b8a      	ldr	r3, [pc, #552]	@ (80038e8 <HAL_RCC_ClockConfig+0x278>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d1ef      	bne.n	80036aa <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d016      	beq.n	8003704 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff faef 	bl	8002cbe <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80036e0:	f7fe fc06 	bl	8001ef0 <HAL_GetTick>
 80036e4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80036e8:	f7fe fc02 	bl	8001ef0 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e0f2      	b.n	80038e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80036fa:	f7ff fbe9 	bl	8002ed0 <LL_RCC_IsActiveFlag_HPRE>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0f1      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0320 	and.w	r3, r3, #32
 800370c:	2b00      	cmp	r3, #0
 800370e:	d016      	beq.n	800373e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	4618      	mov	r0, r3
 8003716:	f7ff fae6 	bl	8002ce6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800371a:	f7fe fbe9 	bl	8001ef0 <HAL_GetTick>
 800371e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003720:	e008      	b.n	8003734 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003722:	f7fe fbe5 	bl	8001ef0 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e0d5      	b.n	80038e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003734:	f7ff fbde 	bl	8002ef4 <LL_RCC_IsActiveFlag_C2HPRE>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0f1      	beq.n	8003722 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003746:	2b00      	cmp	r3, #0
 8003748:	d016      	beq.n	8003778 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	4618      	mov	r0, r3
 8003750:	f7ff fadf 	bl	8002d12 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003754:	f7fe fbcc 	bl	8001ef0 <HAL_GetTick>
 8003758:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800375a:	e008      	b.n	800376e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800375c:	f7fe fbc8 	bl	8001ef0 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e0b8      	b.n	80038e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800376e:	f7ff fbd4 	bl	8002f1a <LL_RCC_IsActiveFlag_SHDHPRE>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d0f1      	beq.n	800375c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b00      	cmp	r3, #0
 8003782:	d016      	beq.n	80037b2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	4618      	mov	r0, r3
 800378a:	f7ff fad9 	bl	8002d40 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800378e:	f7fe fbaf 	bl	8001ef0 <HAL_GetTick>
 8003792:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003794:	e008      	b.n	80037a8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003796:	f7fe fbab 	bl	8001ef0 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e09b      	b.n	80038e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80037a8:	f7ff fbca 	bl	8002f40 <LL_RCC_IsActiveFlag_PPRE1>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0f1      	beq.n	8003796 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0308 	and.w	r3, r3, #8
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d017      	beq.n	80037ee <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff facf 	bl	8002d68 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80037ca:	f7fe fb91 	bl	8001ef0 <HAL_GetTick>
 80037ce:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80037d2:	f7fe fb8d 	bl	8001ef0 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e07d      	b.n	80038e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80037e4:	f7ff fbbe 	bl	8002f64 <LL_RCC_IsActiveFlag_PPRE2>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0f1      	beq.n	80037d2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d043      	beq.n	8003882 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d106      	bne.n	8003810 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003802:	f7ff f86f 	bl	80028e4 <LL_RCC_HSE_IsReady>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d11e      	bne.n	800384a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e067      	b.n	80038e0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	2b03      	cmp	r3, #3
 8003816:	d106      	bne.n	8003826 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003818:	f7ff fb17 	bl	8002e4a <LL_RCC_PLL_IsReady>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d113      	bne.n	800384a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e05c      	b.n	80038e0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d106      	bne.n	800383c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800382e:	f7ff f9d7 	bl	8002be0 <LL_RCC_MSI_IsReady>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d108      	bne.n	800384a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e051      	b.n	80038e0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800383c:	f7ff f882 	bl	8002944 <LL_RCC_HSI_IsReady>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e04a      	b.n	80038e0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	4618      	mov	r0, r3
 8003850:	f7ff fa15 	bl	8002c7e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003854:	f7fe fb4c 	bl	8001ef0 <HAL_GetTick>
 8003858:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800385a:	e00a      	b.n	8003872 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800385c:	f7fe fb48 	bl	8001ef0 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800386a:	4293      	cmp	r3, r2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e036      	b.n	80038e0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003872:	f7ff fa18 	bl	8002ca6 <LL_RCC_GetSysClkSource>
 8003876:	4602      	mov	r2, r0
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	429a      	cmp	r2, r3
 8003880:	d1ec      	bne.n	800385c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003882:	4b19      	ldr	r3, [pc, #100]	@ (80038e8 <HAL_RCC_ClockConfig+0x278>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	429a      	cmp	r2, r3
 800388e:	d21b      	bcs.n	80038c8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003890:	4b15      	ldr	r3, [pc, #84]	@ (80038e8 <HAL_RCC_ClockConfig+0x278>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f023 0207 	bic.w	r2, r3, #7
 8003898:	4913      	ldr	r1, [pc, #76]	@ (80038e8 <HAL_RCC_ClockConfig+0x278>)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	4313      	orrs	r3, r2
 800389e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038a0:	f7fe fb26 	bl	8001ef0 <HAL_GetTick>
 80038a4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80038a8:	f7fe fb22 	bl	8001ef0 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e012      	b.n	80038e0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ba:	4b0b      	ldr	r3, [pc, #44]	@ (80038e8 <HAL_RCC_ClockConfig+0x278>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0307 	and.w	r3, r3, #7
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d1ef      	bne.n	80038a8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80038c8:	f000 f87e 	bl	80039c8 <HAL_RCC_GetHCLKFreq>
 80038cc:	4603      	mov	r3, r0
 80038ce:	4a07      	ldr	r2, [pc, #28]	@ (80038ec <HAL_RCC_ClockConfig+0x27c>)
 80038d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80038d2:	f7fe fb19 	bl	8001f08 <HAL_GetTickPrio>
 80038d6:	4603      	mov	r3, r0
 80038d8:	4618      	mov	r0, r3
 80038da:	f7fe f9ad 	bl	8001c38 <HAL_InitTick>
 80038de:	4603      	mov	r3, r0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	58004000 	.word	0x58004000
 80038ec:	20000008 	.word	0x20000008

080038f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038f0:	b590      	push	{r4, r7, lr}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038f6:	f7ff f9d6 	bl	8002ca6 <LL_RCC_GetSysClkSource>
 80038fa:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10a      	bne.n	8003918 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003902:	f7ff f992 	bl	8002c2a <LL_RCC_MSI_GetRange>
 8003906:	4603      	mov	r3, r0
 8003908:	091b      	lsrs	r3, r3, #4
 800390a:	f003 030f 	and.w	r3, r3, #15
 800390e:	4a2b      	ldr	r2, [pc, #172]	@ (80039bc <HAL_RCC_GetSysClockFreq+0xcc>)
 8003910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003914:	60fb      	str	r3, [r7, #12]
 8003916:	e04b      	b.n	80039b0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b04      	cmp	r3, #4
 800391c:	d102      	bne.n	8003924 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800391e:	4b28      	ldr	r3, [pc, #160]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	e045      	b.n	80039b0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b08      	cmp	r3, #8
 8003928:	d10a      	bne.n	8003940 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800392a:	f7fe ffab 	bl	8002884 <LL_RCC_HSE_IsEnabledDiv2>
 800392e:	4603      	mov	r3, r0
 8003930:	2b01      	cmp	r3, #1
 8003932:	d102      	bne.n	800393a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003934:	4b22      	ldr	r3, [pc, #136]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003936:	60fb      	str	r3, [r7, #12]
 8003938:	e03a      	b.n	80039b0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800393a:	4b22      	ldr	r3, [pc, #136]	@ (80039c4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800393c:	60fb      	str	r3, [r7, #12]
 800393e:	e037      	b.n	80039b0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003940:	f7ff faba 	bl	8002eb8 <LL_RCC_PLL_GetMainSource>
 8003944:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2b02      	cmp	r3, #2
 800394a:	d003      	beq.n	8003954 <HAL_RCC_GetSysClockFreq+0x64>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	2b03      	cmp	r3, #3
 8003950:	d003      	beq.n	800395a <HAL_RCC_GetSysClockFreq+0x6a>
 8003952:	e00d      	b.n	8003970 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003954:	4b1a      	ldr	r3, [pc, #104]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003956:	60bb      	str	r3, [r7, #8]
        break;
 8003958:	e015      	b.n	8003986 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800395a:	f7fe ff93 	bl	8002884 <LL_RCC_HSE_IsEnabledDiv2>
 800395e:	4603      	mov	r3, r0
 8003960:	2b01      	cmp	r3, #1
 8003962:	d102      	bne.n	800396a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003964:	4b16      	ldr	r3, [pc, #88]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003966:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003968:	e00d      	b.n	8003986 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800396a:	4b16      	ldr	r3, [pc, #88]	@ (80039c4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800396c:	60bb      	str	r3, [r7, #8]
        break;
 800396e:	e00a      	b.n	8003986 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003970:	f7ff f95b 	bl	8002c2a <LL_RCC_MSI_GetRange>
 8003974:	4603      	mov	r3, r0
 8003976:	091b      	lsrs	r3, r3, #4
 8003978:	f003 030f 	and.w	r3, r3, #15
 800397c:	4a0f      	ldr	r2, [pc, #60]	@ (80039bc <HAL_RCC_GetSysClockFreq+0xcc>)
 800397e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003982:	60bb      	str	r3, [r7, #8]
        break;
 8003984:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003986:	f7ff fa72 	bl	8002e6e <LL_RCC_PLL_GetN>
 800398a:	4602      	mov	r2, r0
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	fb03 f402 	mul.w	r4, r3, r2
 8003992:	f7ff fa85 	bl	8002ea0 <LL_RCC_PLL_GetDivider>
 8003996:	4603      	mov	r3, r0
 8003998:	091b      	lsrs	r3, r3, #4
 800399a:	3301      	adds	r3, #1
 800399c:	fbb4 f4f3 	udiv	r4, r4, r3
 80039a0:	f7ff fa72 	bl	8002e88 <LL_RCC_PLL_GetR>
 80039a4:	4603      	mov	r3, r0
 80039a6:	0f5b      	lsrs	r3, r3, #29
 80039a8:	3301      	adds	r3, #1
 80039aa:	fbb4 f3f3 	udiv	r3, r4, r3
 80039ae:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80039b0:	68fb      	ldr	r3, [r7, #12]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3714      	adds	r7, #20
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd90      	pop	{r4, r7, pc}
 80039ba:	bf00      	nop
 80039bc:	08008fb8 	.word	0x08008fb8
 80039c0:	00f42400 	.word	0x00f42400
 80039c4:	01e84800 	.word	0x01e84800

080039c8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039c8:	b598      	push	{r3, r4, r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80039cc:	f7ff ff90 	bl	80038f0 <HAL_RCC_GetSysClockFreq>
 80039d0:	4604      	mov	r4, r0
 80039d2:	f7ff f9dd 	bl	8002d90 <LL_RCC_GetAHBPrescaler>
 80039d6:	4603      	mov	r3, r0
 80039d8:	091b      	lsrs	r3, r3, #4
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	4a03      	ldr	r2, [pc, #12]	@ (80039ec <HAL_RCC_GetHCLKFreq+0x24>)
 80039e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039e4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	bd98      	pop	{r3, r4, r7, pc}
 80039ec:	08008f58 	.word	0x08008f58

080039f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039f0:	b598      	push	{r3, r4, r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80039f4:	f7ff ffe8 	bl	80039c8 <HAL_RCC_GetHCLKFreq>
 80039f8:	4604      	mov	r4, r0
 80039fa:	f7ff f9f0 	bl	8002dde <LL_RCC_GetAPB1Prescaler>
 80039fe:	4603      	mov	r3, r0
 8003a00:	0a1b      	lsrs	r3, r3, #8
 8003a02:	f003 0307 	and.w	r3, r3, #7
 8003a06:	4a04      	ldr	r2, [pc, #16]	@ (8003a18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a0c:	f003 031f 	and.w	r3, r3, #31
 8003a10:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	bd98      	pop	{r3, r4, r7, pc}
 8003a18:	08008f98 	.word	0x08008f98

08003a1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a1c:	b598      	push	{r3, r4, r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003a20:	f7ff ffd2 	bl	80039c8 <HAL_RCC_GetHCLKFreq>
 8003a24:	4604      	mov	r4, r0
 8003a26:	f7ff f9e6 	bl	8002df6 <LL_RCC_GetAPB2Prescaler>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	0adb      	lsrs	r3, r3, #11
 8003a2e:	f003 0307 	and.w	r3, r3, #7
 8003a32:	4a04      	ldr	r2, [pc, #16]	@ (8003a44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a38:	f003 031f 	and.w	r3, r3, #31
 8003a3c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	bd98      	pop	{r3, r4, r7, pc}
 8003a44:	08008f98 	.word	0x08008f98

08003a48 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	226f      	movs	r2, #111	@ 0x6f
 8003a56:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 8003a58:	f7ff f925 	bl	8002ca6 <LL_RCC_GetSysClkSource>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 8003a62:	f7ff f995 	bl	8002d90 <LL_RCC_GetAHBPrescaler>
 8003a66:	4602      	mov	r2, r0
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 8003a6c:	f7ff f9b7 	bl	8002dde <LL_RCC_GetAPB1Prescaler>
 8003a70:	4602      	mov	r2, r0
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 8003a76:	f7ff f9be 	bl	8002df6 <LL_RCC_GetAPB2Prescaler>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8003a80:	f7ff f992 	bl	8002da8 <LL_C2_RCC_GetAHBPrescaler>
 8003a84:	4602      	mov	r2, r0
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8003a8a:	f7ff f99a 	bl	8002dc2 <LL_RCC_GetAHB4Prescaler>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003a94:	4b04      	ldr	r3, [pc, #16]	@ (8003aa8 <HAL_RCC_GetClockConfig+0x60>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0207 	and.w	r2, r3, #7
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	601a      	str	r2, [r3, #0]
}
 8003aa0:	bf00      	nop
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	58004000 	.word	0x58004000

08003aac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003aac:	b590      	push	{r4, r7, lr}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2bb0      	cmp	r3, #176	@ 0xb0
 8003ab8:	d903      	bls.n	8003ac2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003aba:	4b15      	ldr	r3, [pc, #84]	@ (8003b10 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	e007      	b.n	8003ad2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	091b      	lsrs	r3, r3, #4
 8003ac6:	f003 030f 	and.w	r3, r3, #15
 8003aca:	4a11      	ldr	r2, [pc, #68]	@ (8003b10 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ad0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003ad2:	f7ff f976 	bl	8002dc2 <LL_RCC_GetAHB4Prescaler>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	091b      	lsrs	r3, r3, #4
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	4a0d      	ldr	r2, [pc, #52]	@ (8003b14 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aea:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	4a0a      	ldr	r2, [pc, #40]	@ (8003b18 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003af0:	fba2 2303 	umull	r2, r3, r2, r3
 8003af4:	0c9c      	lsrs	r4, r3, #18
 8003af6:	f7fe feb7 	bl	8002868 <HAL_PWREx_GetVoltageRange>
 8003afa:	4603      	mov	r3, r0
 8003afc:	4619      	mov	r1, r3
 8003afe:	4620      	mov	r0, r4
 8003b00:	f000 f80c 	bl	8003b1c <RCC_SetFlashLatency>
 8003b04:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd90      	pop	{r4, r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	08008fb8 	.word	0x08008fb8
 8003b14:	08008f58 	.word	0x08008f58
 8003b18:	431bde83 	.word	0x431bde83

08003b1c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003b1c:	b590      	push	{r4, r7, lr}
 8003b1e:	b093      	sub	sp, #76	@ 0x4c
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003b26:	4b37      	ldr	r3, [pc, #220]	@ (8003c04 <RCC_SetFlashLatency+0xe8>)
 8003b28:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8003b2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003b32:	4a35      	ldr	r2, [pc, #212]	@ (8003c08 <RCC_SetFlashLatency+0xec>)
 8003b34:	f107 031c 	add.w	r3, r7, #28
 8003b38:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003b3e:	4b33      	ldr	r3, [pc, #204]	@ (8003c0c <RCC_SetFlashLatency+0xf0>)
 8003b40:	f107 040c 	add.w	r4, r7, #12
 8003b44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b54:	d11a      	bne.n	8003b8c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003b56:	2300      	movs	r3, #0
 8003b58:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b5a:	e013      	b.n	8003b84 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003b5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	3348      	adds	r3, #72	@ 0x48
 8003b62:	443b      	add	r3, r7
 8003b64:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d807      	bhi.n	8003b7e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003b6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	3348      	adds	r3, #72	@ 0x48
 8003b74:	443b      	add	r3, r7
 8003b76:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003b7a:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8003b7c:	e020      	b.n	8003bc0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003b7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b80:	3301      	adds	r3, #1
 8003b82:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b86:	2b03      	cmp	r3, #3
 8003b88:	d9e8      	bls.n	8003b5c <RCC_SetFlashLatency+0x40>
 8003b8a:	e019      	b.n	8003bc0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b90:	e013      	b.n	8003bba <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003b92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	3348      	adds	r3, #72	@ 0x48
 8003b98:	443b      	add	r3, r7
 8003b9a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d807      	bhi.n	8003bb4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003ba4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	3348      	adds	r3, #72	@ 0x48
 8003baa:	443b      	add	r3, r7
 8003bac:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003bb0:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8003bb2:	e005      	b.n	8003bc0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003bb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d9e8      	bls.n	8003b92 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003bc0:	4b13      	ldr	r3, [pc, #76]	@ (8003c10 <RCC_SetFlashLatency+0xf4>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f023 0207 	bic.w	r2, r3, #7
 8003bc8:	4911      	ldr	r1, [pc, #68]	@ (8003c10 <RCC_SetFlashLatency+0xf4>)
 8003bca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003bd0:	f7fe f98e 	bl	8001ef0 <HAL_GetTick>
 8003bd4:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003bd6:	e008      	b.n	8003bea <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003bd8:	f7fe f98a 	bl	8001ef0 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e007      	b.n	8003bfa <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003bea:	4b09      	ldr	r3, [pc, #36]	@ (8003c10 <RCC_SetFlashLatency+0xf4>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0307 	and.w	r3, r3, #7
 8003bf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d1ef      	bne.n	8003bd8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	374c      	adds	r7, #76	@ 0x4c
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd90      	pop	{r4, r7, pc}
 8003c02:	bf00      	nop
 8003c04:	08008db8 	.word	0x08008db8
 8003c08:	08008dc8 	.word	0x08008dc8
 8003c0c:	08008dd4 	.word	0x08008dd4
 8003c10:	58004000 	.word	0x58004000

08003c14 <LL_RCC_LSE_IsEnabled>:
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003c18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d101      	bne.n	8003c2c <LL_RCC_LSE_IsEnabled+0x18>
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e000      	b.n	8003c2e <LL_RCC_LSE_IsEnabled+0x1a>
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <LL_RCC_LSE_IsReady>:
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003c3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d101      	bne.n	8003c50 <LL_RCC_LSE_IsReady+0x18>
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e000      	b.n	8003c52 <LL_RCC_LSE_IsReady+0x1a>
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <LL_RCC_MSI_EnablePLLMode>:
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003c60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c6a:	f043 0304 	orr.w	r3, r3, #4
 8003c6e:	6013      	str	r3, [r2, #0]
}
 8003c70:	bf00      	nop
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <LL_RCC_SetRFWKPClockSource>:
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003c82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c8a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <LL_RCC_SetSMPSClockSource>:
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003cae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb4:	f023 0203 	bic.w	r2, r3, #3
 8003cb8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <LL_RCC_SetSMPSPrescaler>:
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003cd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cdc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003ce0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003cea:	bf00      	nop
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <LL_RCC_SetUSARTClockSource>:
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b083      	sub	sp, #12
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003cfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d06:	f023 0203 	bic.w	r2, r3, #3
 8003d0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr

08003d22 <LL_RCC_SetLPUARTClockSource>:
{
 8003d22:	b480      	push	{r7}
 8003d24:	b083      	sub	sp, #12
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003d2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d32:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003d36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <LL_RCC_SetI2CClockSource>:
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003d56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d5a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	091b      	lsrs	r3, r3, #4
 8003d62:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003d66:	43db      	mvns	r3, r3
 8003d68:	401a      	ands	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003d72:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d76:	4313      	orrs	r3, r2
 8003d78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <LL_RCC_SetLPTIMClockSource>:
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003d90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d94:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	0c1b      	lsrs	r3, r3, #16
 8003d9c:	041b      	lsls	r3, r3, #16
 8003d9e:	43db      	mvns	r3, r3
 8003da0:	401a      	ands	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	041b      	lsls	r3, r3, #16
 8003da6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <LL_RCC_SetSAIClockSource>:
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003dc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dcc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003dd0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <LL_RCC_SetRNGClockSource>:
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003df0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df8:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003dfc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <LL_RCC_SetCLK48ClockSource>:
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003e1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e24:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e28:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <LL_RCC_SetUSBClockSource>:
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7ff ffe3 	bl	8003e14 <LL_RCC_SetCLK48ClockSource>
}
 8003e4e:	bf00      	nop
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <LL_RCC_SetADCClockSource>:
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003e5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e66:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003e6a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003e76:	bf00      	nop
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr

08003e82 <LL_RCC_SetRTCClockSource>:
{
 8003e82:	b480      	push	{r7}
 8003e84:	b083      	sub	sp, #12
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003e8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e92:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003ea2:	bf00      	nop
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <LL_RCC_GetRTCClockSource>:
{
 8003eae:	b480      	push	{r7}
 8003eb0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003eb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <LL_RCC_ForceBackupDomainReset>:
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003ecc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ed4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ed8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003edc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003ee0:	bf00      	nop
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <LL_RCC_ReleaseBackupDomainReset>:
{
 8003eea:	b480      	push	{r7}
 8003eec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003eee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ef6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003efa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003efe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003f02:	bf00      	nop
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <LL_RCC_PLLSAI1_Enable>:
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003f10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f1a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003f1e:	6013      	str	r3, [r2, #0]
}
 8003f20:	bf00      	nop
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <LL_RCC_PLLSAI1_Disable>:
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003f2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f38:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f3c:	6013      	str	r3, [r2, #0]
}
 8003f3e:	bf00      	nop
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <LL_RCC_PLLSAI1_IsReady>:
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003f4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f5a:	d101      	bne.n	8003f60 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e000      	b.n	8003f62 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b088      	sub	sp, #32
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003f74:	2300      	movs	r3, #0
 8003f76:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003f78:	2300      	movs	r3, #0
 8003f7a:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d034      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f8c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003f90:	d021      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003f92:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003f96:	d81b      	bhi.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f98:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f9c:	d01d      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003f9e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003fa2:	d815      	bhi.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00b      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003fa8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fac:	d110      	bne.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003fae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003fb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fbc:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003fbe:	e00d      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f000 f94d 	bl	8004264 <RCCEx_PLLSAI1_ConfigNP>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003fce:	e005      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	77fb      	strb	r3, [r7, #31]
        break;
 8003fd4:	e002      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003fd6:	bf00      	nop
 8003fd8:	e000      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003fda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fdc:	7ffb      	ldrb	r3, [r7, #31]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d105      	bne.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7ff fee8 	bl	8003dbc <LL_RCC_SetSAIClockSource>
 8003fec:	e001      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fee:	7ffb      	ldrb	r3, [r7, #31]
 8003ff0:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d046      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003ffe:	f7ff ff56 	bl	8003eae <LL_RCC_GetRTCClockSource>
 8004002:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	429a      	cmp	r2, r3
 800400c:	d03c      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800400e:	f7fe fc1b 	bl	8002848 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d105      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401c:	4618      	mov	r0, r3
 800401e:	f7ff ff30 	bl	8003e82 <LL_RCC_SetRTCClockSource>
 8004022:	e02e      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004024:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004028:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800402c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800402e:	f7ff ff4b 	bl	8003ec8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004032:	f7ff ff5a 	bl	8003eea <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004040:	4313      	orrs	r3, r2
 8004042:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004044:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800404e:	f7ff fde1 	bl	8003c14 <LL_RCC_LSE_IsEnabled>
 8004052:	4603      	mov	r3, r0
 8004054:	2b01      	cmp	r3, #1
 8004056:	d114      	bne.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004058:	f7fd ff4a 	bl	8001ef0 <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800405e:	e00b      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004060:	f7fd ff46 	bl	8001ef0 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800406e:	4293      	cmp	r3, r2
 8004070:	d902      	bls.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	77fb      	strb	r3, [r7, #31]
              break;
 8004076:	e004      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004078:	f7ff fdde 	bl	8003c38 <LL_RCC_LSE_IsReady>
 800407c:	4603      	mov	r3, r0
 800407e:	2b01      	cmp	r3, #1
 8004080:	d1ee      	bne.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004082:	7ffb      	ldrb	r3, [r7, #31]
 8004084:	77bb      	strb	r3, [r7, #30]
 8004086:	e001      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004088:	7ffb      	ldrb	r3, [r7, #31]
 800408a:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b00      	cmp	r3, #0
 8004096:	d004      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	4618      	mov	r0, r3
 800409e:	f7ff fe2a 	bl	8003cf6 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d004      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7ff fe35 	bl	8003d22 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0310 	and.w	r3, r3, #16
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d004      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7ff fe5d 	bl	8003d88 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0320 	and.w	r3, r3, #32
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d004      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040de:	4618      	mov	r0, r3
 80040e0:	f7ff fe52 	bl	8003d88 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d004      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7ff fe2a 	bl	8003d4e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0308 	and.w	r3, r3, #8
 8004102:	2b00      	cmp	r3, #0
 8004104:	d004      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410a:	4618      	mov	r0, r3
 800410c:	f7ff fe1f 	bl	8003d4e <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004118:	2b00      	cmp	r3, #0
 800411a:	d022      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004120:	4618      	mov	r0, r3
 8004122:	f7ff fe8d 	bl	8003e40 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800412a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800412e:	d107      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004130:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800413a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800413e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004144:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004148:	d10b      	bne.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	3304      	adds	r3, #4
 800414e:	4618      	mov	r0, r3
 8004150:	f000 f8e3 	bl	800431a <RCCEx_PLLSAI1_ConfigNQ>
 8004154:	4603      	mov	r3, r0
 8004156:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004158:	7ffb      	ldrb	r3, [r7, #31]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800415e:	7ffb      	ldrb	r3, [r7, #31]
 8004160:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800416a:	2b00      	cmp	r3, #0
 800416c:	d02b      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004172:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004176:	d008      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800417c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004180:	d003      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004186:	2b00      	cmp	r3, #0
 8004188:	d105      	bne.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800418e:	4618      	mov	r0, r3
 8004190:	f7ff fe2a 	bl	8003de8 <LL_RCC_SetRNGClockSource>
 8004194:	e00a      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800419a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800419e:	60fb      	str	r3, [r7, #12]
 80041a0:	2000      	movs	r0, #0
 80041a2:	f7ff fe21 	bl	8003de8 <LL_RCC_SetRNGClockSource>
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f7ff fe34 	bl	8003e14 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b0:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80041b4:	d107      	bne.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80041b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041c4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d022      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7ff fe3d 	bl	8003e56 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041e4:	d107      	bne.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80041e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041f4:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041fe:	d10b      	bne.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	3304      	adds	r3, #4
 8004204:	4618      	mov	r0, r3
 8004206:	f000 f8e3 	bl	80043d0 <RCCEx_PLLSAI1_ConfigNR>
 800420a:	4603      	mov	r3, r0
 800420c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800420e:	7ffb      	ldrb	r3, [r7, #31]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8004214:	7ffb      	ldrb	r3, [r7, #31]
 8004216:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d004      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004228:	4618      	mov	r0, r3
 800422a:	f7ff fd26 	bl	8003c7a <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d009      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff fd45 	bl	8003cce <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004248:	4618      	mov	r0, r3
 800424a:	f7ff fd2c 	bl	8003ca6 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800424e:	7fbb      	ldrb	r3, [r7, #30]
}
 8004250:	4618      	mov	r0, r3
 8004252:	3720      	adds	r7, #32
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800425c:	f7ff fcfe 	bl	8003c5c <LL_RCC_MSI_EnablePLLMode>
}
 8004260:	bf00      	nop
 8004262:	bd80      	pop	{r7, pc}

08004264 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800426c:	2300      	movs	r3, #0
 800426e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004270:	f7ff fe5b 	bl	8003f2a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004274:	f7fd fe3c 	bl	8001ef0 <HAL_GetTick>
 8004278:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800427a:	e009      	b.n	8004290 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800427c:	f7fd fe38 	bl	8001ef0 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d902      	bls.n	8004290 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	73fb      	strb	r3, [r7, #15]
      break;
 800428e:	e004      	b.n	800429a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004290:	f7ff fe5a 	bl	8003f48 <LL_RCC_PLLSAI1_IsReady>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1f0      	bne.n	800427c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800429a:	7bfb      	ldrb	r3, [r7, #15]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d137      	bne.n	8004310 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80042a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	021b      	lsls	r3, r3, #8
 80042b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80042b4:	4313      	orrs	r3, r2
 80042b6:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80042b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80042ca:	4313      	orrs	r3, r2
 80042cc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80042ce:	f7ff fe1d 	bl	8003f0c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042d2:	f7fd fe0d 	bl	8001ef0 <HAL_GetTick>
 80042d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80042d8:	e009      	b.n	80042ee <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042da:	f7fd fe09 	bl	8001ef0 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d902      	bls.n	80042ee <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	73fb      	strb	r3, [r7, #15]
        break;
 80042ec:	e004      	b.n	80042f8 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80042ee:	f7ff fe2b 	bl	8003f48 <LL_RCC_PLLSAI1_IsReady>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d1f0      	bne.n	80042da <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d108      	bne.n	8004310 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80042fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004302:	691a      	ldr	r2, [r3, #16]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800430c:	4313      	orrs	r3, r2
 800430e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004310:	7bfb      	ldrb	r3, [r7, #15]
}
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b084      	sub	sp, #16
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004322:	2300      	movs	r3, #0
 8004324:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004326:	f7ff fe00 	bl	8003f2a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800432a:	f7fd fde1 	bl	8001ef0 <HAL_GetTick>
 800432e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004330:	e009      	b.n	8004346 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004332:	f7fd fddd 	bl	8001ef0 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d902      	bls.n	8004346 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	73fb      	strb	r3, [r7, #15]
      break;
 8004344:	e004      	b.n	8004350 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004346:	f7ff fdff 	bl	8003f48 <LL_RCC_PLLSAI1_IsReady>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1f0      	bne.n	8004332 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004350:	7bfb      	ldrb	r3, [r7, #15]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d137      	bne.n	80043c6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004356:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	021b      	lsls	r3, r3, #8
 8004366:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800436a:	4313      	orrs	r3, r2
 800436c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800436e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004380:	4313      	orrs	r3, r2
 8004382:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004384:	f7ff fdc2 	bl	8003f0c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004388:	f7fd fdb2 	bl	8001ef0 <HAL_GetTick>
 800438c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800438e:	e009      	b.n	80043a4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004390:	f7fd fdae 	bl	8001ef0 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b02      	cmp	r3, #2
 800439c:	d902      	bls.n	80043a4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	73fb      	strb	r3, [r7, #15]
        break;
 80043a2:	e004      	b.n	80043ae <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80043a4:	f7ff fdd0 	bl	8003f48 <LL_RCC_PLLSAI1_IsReady>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d1f0      	bne.n	8004390 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80043ae:	7bfb      	ldrb	r3, [r7, #15]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d108      	bne.n	80043c6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80043b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043b8:	691a      	ldr	r2, [r3, #16]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80043c2:	4313      	orrs	r3, r2
 80043c4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80043c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043d8:	2300      	movs	r3, #0
 80043da:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80043dc:	f7ff fda5 	bl	8003f2a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80043e0:	f7fd fd86 	bl	8001ef0 <HAL_GetTick>
 80043e4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80043e6:	e009      	b.n	80043fc <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043e8:	f7fd fd82 	bl	8001ef0 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d902      	bls.n	80043fc <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	73fb      	strb	r3, [r7, #15]
      break;
 80043fa:	e004      	b.n	8004406 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80043fc:	f7ff fda4 	bl	8003f48 <LL_RCC_PLLSAI1_IsReady>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1f0      	bne.n	80043e8 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004406:	7bfb      	ldrb	r3, [r7, #15]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d137      	bne.n	800447c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800440c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	021b      	lsls	r3, r3, #8
 800441c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004420:	4313      	orrs	r3, r2
 8004422:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004424:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004436:	4313      	orrs	r3, r2
 8004438:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800443a:	f7ff fd67 	bl	8003f0c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800443e:	f7fd fd57 	bl	8001ef0 <HAL_GetTick>
 8004442:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004444:	e009      	b.n	800445a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004446:	f7fd fd53 	bl	8001ef0 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d902      	bls.n	800445a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	73fb      	strb	r3, [r7, #15]
        break;
 8004458:	e004      	b.n	8004464 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800445a:	f7ff fd75 	bl	8003f48 <LL_RCC_PLLSAI1_IsReady>
 800445e:	4603      	mov	r3, r0
 8004460:	2b01      	cmp	r3, #1
 8004462:	d1f0      	bne.n	8004446 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8004464:	7bfb      	ldrb	r3, [r7, #15]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d108      	bne.n	800447c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800446a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800446e:	691a      	ldr	r2, [r3, #16]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004478:	4313      	orrs	r3, r2
 800447a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800447c:	7bfb      	ldrb	r3, [r7, #15]
}
 800447e:	4618      	mov	r0, r3
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
	...

08004488 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e09f      	b.n	80045da <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d106      	bne.n	80044b4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7fd fad6 	bl	8001a60 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2202      	movs	r2, #2
 80044b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80044bc:	4b49      	ldr	r3, [pc, #292]	@ (80045e4 <HAL_RTC_Init+0x15c>)
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	f003 0310 	and.w	r3, r3, #16
 80044c4:	2b10      	cmp	r3, #16
 80044c6:	d07e      	beq.n	80045c6 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	22ca      	movs	r2, #202	@ 0xca
 80044ce:	625a      	str	r2, [r3, #36]	@ 0x24
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2253      	movs	r2, #83	@ 0x53
 80044d6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 f8ab 	bl	8004634 <RTC_EnterInitMode>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00a      	beq.n	80044fa <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	22ff      	movs	r2, #255	@ 0xff
 80044ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2204      	movs	r2, #4
 80044f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	73fb      	strb	r3, [r7, #15]
 80044f8:	e067      	b.n	80045ca <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	6812      	ldr	r2, [r2, #0]
 8004504:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004508:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800450c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	6899      	ldr	r1, [r3, #8]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	431a      	orrs	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	430a      	orrs	r2, r1
 800452a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	68d2      	ldr	r2, [r2, #12]
 8004534:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6919      	ldr	r1, [r3, #16]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	041a      	lsls	r2, r3, #16
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68da      	ldr	r2, [r3, #12]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004558:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 0203 	bic.w	r2, r2, #3
 8004568:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	69da      	ldr	r2, [r3, #28]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	431a      	orrs	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f003 0320 	and.w	r3, r3, #32
 800458c:	2b00      	cmp	r3, #0
 800458e:	d113      	bne.n	80045b8 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 f829 	bl	80045e8 <HAL_RTC_WaitForSynchro>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00d      	beq.n	80045b8 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	22ff      	movs	r2, #255	@ 0xff
 80045a2:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2204      	movs	r2, #4
 80045a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e010      	b.n	80045da <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	22ff      	movs	r2, #255	@ 0xff
 80045be:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 80045c0:	2300      	movs	r3, #0
 80045c2:	73fb      	strb	r3, [r7, #15]
 80045c4:	e001      	b.n	80045ca <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80045c6:	2300      	movs	r3, #0
 80045c8:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80045ca:	7bfb      	ldrb	r3, [r7, #15]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d103      	bne.n	80045d8 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 80045d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	40002800 	.word	0x40002800

080045e8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68da      	ldr	r2, [r3, #12]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80045fe:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004600:	f7fd fc76 	bl	8001ef0 <HAL_GetTick>
 8004604:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004606:	e009      	b.n	800461c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004608:	f7fd fc72 	bl	8001ef0 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004616:	d901      	bls.n	800461c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e007      	b.n	800462c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	f003 0320 	and.w	r3, r3, #32
 8004626:	2b00      	cmp	r3, #0
 8004628:	d0ee      	beq.n	8004608 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004646:	2b00      	cmp	r3, #0
 8004648:	d119      	bne.n	800467e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f04f 32ff 	mov.w	r2, #4294967295
 8004652:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004654:	f7fd fc4c 	bl	8001ef0 <HAL_GetTick>
 8004658:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800465a:	e009      	b.n	8004670 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800465c:	f7fd fc48 	bl	8001ef0 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800466a:	d901      	bls.n	8004670 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e007      	b.n	8004680 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0ee      	beq.n	800465c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f893 3020 	ldrb.w	r3, [r3, #32]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d101      	bne.n	80046a2 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800469e:	2302      	movs	r3, #2
 80046a0:	e0a8      	b.n	80047f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2202      	movs	r2, #2
 80046ae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	22ca      	movs	r2, #202	@ 0xca
 80046b8:	625a      	str	r2, [r3, #36]	@ 0x24
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2253      	movs	r2, #83	@ 0x53
 80046c0:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d020      	beq.n	8004712 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80046d0:	f7fd fc0e 	bl	8001ef0 <HAL_GetTick>
 80046d4:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80046d6:	e015      	b.n	8004704 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80046d8:	f7fd fc0a 	bl	8001ef0 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80046e6:	d90d      	bls.n	8004704 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	22ff      	movs	r2, #255	@ 0xff
 80046ee:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2203      	movs	r2, #3
 80046f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e077      	b.n	80047f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	f003 0304 	and.w	r3, r3, #4
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1e2      	bne.n	80046d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004720:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	b2da      	uxtb	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8004732:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004734:	f7fd fbdc 	bl	8001ef0 <HAL_GetTick>
 8004738:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800473a:	e015      	b.n	8004768 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800473c:	f7fd fbd8 	bl	8001ef0 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800474a:	d90d      	bls.n	8004768 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	22ff      	movs	r2, #255	@ 0xff
 8004752:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2203      	movs	r2, #3
 8004758:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e045      	b.n	80047f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f003 0304 	and.w	r3, r3, #4
 8004772:	2b00      	cmp	r3, #0
 8004774:	d0e2      	beq.n	800473c <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 0207 	bic.w	r2, r2, #7
 800478c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6899      	ldr	r1, [r3, #8]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	430a      	orrs	r2, r1
 800479c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800479e:	4b17      	ldr	r3, [pc, #92]	@ (80047fc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80047a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047a4:	4a15      	ldr	r2, [pc, #84]	@ (80047fc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80047a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80047aa:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80047ae:	4b13      	ldr	r3, [pc, #76]	@ (80047fc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a12      	ldr	r2, [pc, #72]	@ (80047fc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80047b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80047b8:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047c8:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	689a      	ldr	r2, [r3, #8]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80047d8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	22ff      	movs	r2, #255	@ 0xff
 80047e0:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3718      	adds	r7, #24
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	58000800 	.word	0x58000800

08004800 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e049      	b.n	80048a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d106      	bne.n	800482c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f841 	bl	80048ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2202      	movs	r2, #2
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	3304      	adds	r3, #4
 800483c:	4619      	mov	r1, r3
 800483e:	4610      	mov	r0, r2
 8004840:	f000 f9be 	bl	8004bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b083      	sub	sp, #12
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
	...

080048c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d001      	beq.n	80048dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e036      	b.n	800494a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2202      	movs	r2, #2
 80048e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68da      	ldr	r2, [r3, #12]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f042 0201 	orr.w	r2, r2, #1
 80048f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a17      	ldr	r2, [pc, #92]	@ (8004958 <HAL_TIM_Base_Start_IT+0x94>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d004      	beq.n	8004908 <HAL_TIM_Base_Start_IT+0x44>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004906:	d115      	bne.n	8004934 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689a      	ldr	r2, [r3, #8]
 800490e:	4b13      	ldr	r3, [pc, #76]	@ (800495c <HAL_TIM_Base_Start_IT+0x98>)
 8004910:	4013      	ands	r3, r2
 8004912:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2b06      	cmp	r3, #6
 8004918:	d015      	beq.n	8004946 <HAL_TIM_Base_Start_IT+0x82>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004920:	d011      	beq.n	8004946 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f042 0201 	orr.w	r2, r2, #1
 8004930:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004932:	e008      	b.n	8004946 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 0201 	orr.w	r2, r2, #1
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	e000      	b.n	8004948 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004946:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	40012c00 	.word	0x40012c00
 800495c:	00010007 	.word	0x00010007

08004960 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d020      	beq.n	80049c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f003 0302 	and.w	r3, r3, #2
 8004988:	2b00      	cmp	r3, #0
 800498a:	d01b      	beq.n	80049c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f06f 0202 	mvn.w	r2, #2
 8004994:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	f003 0303 	and.w	r3, r3, #3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 f8e9 	bl	8004b82 <HAL_TIM_IC_CaptureCallback>
 80049b0:	e005      	b.n	80049be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f8db 	bl	8004b6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 f8ec 	bl	8004b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	f003 0304 	and.w	r3, r3, #4
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d020      	beq.n	8004a10 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f003 0304 	and.w	r3, r3, #4
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d01b      	beq.n	8004a10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f06f 0204 	mvn.w	r2, #4
 80049e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2202      	movs	r2, #2
 80049e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f8c3 	bl	8004b82 <HAL_TIM_IC_CaptureCallback>
 80049fc:	e005      	b.n	8004a0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f8b5 	bl	8004b6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 f8c6 	bl	8004b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	f003 0308 	and.w	r3, r3, #8
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d020      	beq.n	8004a5c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f003 0308 	and.w	r3, r3, #8
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d01b      	beq.n	8004a5c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f06f 0208 	mvn.w	r2, #8
 8004a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2204      	movs	r2, #4
 8004a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	69db      	ldr	r3, [r3, #28]
 8004a3a:	f003 0303 	and.w	r3, r3, #3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d003      	beq.n	8004a4a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f89d 	bl	8004b82 <HAL_TIM_IC_CaptureCallback>
 8004a48:	e005      	b.n	8004a56 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f88f 	bl	8004b6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 f8a0 	bl	8004b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	f003 0310 	and.w	r3, r3, #16
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d020      	beq.n	8004aa8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f003 0310 	and.w	r3, r3, #16
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d01b      	beq.n	8004aa8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f06f 0210 	mvn.w	r2, #16
 8004a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2208      	movs	r2, #8
 8004a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	69db      	ldr	r3, [r3, #28]
 8004a86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f877 	bl	8004b82 <HAL_TIM_IC_CaptureCallback>
 8004a94:	e005      	b.n	8004aa2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f869 	bl	8004b6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 f87a 	bl	8004b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00c      	beq.n	8004acc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d007      	beq.n	8004acc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f06f 0201 	mvn.w	r2, #1
 8004ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7fc ff0c 	bl	80018e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d104      	bne.n	8004ae0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00c      	beq.n	8004afa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d007      	beq.n	8004afa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004af2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f8dd 	bl	8004cb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00c      	beq.n	8004b1e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d007      	beq.n	8004b1e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 f8d5 	bl	8004cc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00c      	beq.n	8004b42 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d007      	beq.n	8004b42 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f834 	bl	8004baa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	f003 0320 	and.w	r3, r3, #32
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00c      	beq.n	8004b66 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f003 0320 	and.w	r3, r3, #32
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d007      	beq.n	8004b66 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f06f 0220 	mvn.w	r2, #32
 8004b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 f89d 	bl	8004ca0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b66:	bf00      	nop
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b083      	sub	sp, #12
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b76:	bf00      	nop
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b083      	sub	sp, #12
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b8a:	bf00      	nop
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b083      	sub	sp, #12
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b9e:	bf00      	nop
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b083      	sub	sp, #12
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bb2:	bf00      	nop
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
	...

08004bc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a30      	ldr	r2, [pc, #192]	@ (8004c94 <TIM_Base_SetConfig+0xd4>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d003      	beq.n	8004be0 <TIM_Base_SetConfig+0x20>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bde:	d108      	bne.n	8004bf2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004be6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a27      	ldr	r2, [pc, #156]	@ (8004c94 <TIM_Base_SetConfig+0xd4>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d00b      	beq.n	8004c12 <TIM_Base_SetConfig+0x52>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c00:	d007      	beq.n	8004c12 <TIM_Base_SetConfig+0x52>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a24      	ldr	r2, [pc, #144]	@ (8004c98 <TIM_Base_SetConfig+0xd8>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d003      	beq.n	8004c12 <TIM_Base_SetConfig+0x52>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a23      	ldr	r2, [pc, #140]	@ (8004c9c <TIM_Base_SetConfig+0xdc>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d108      	bne.n	8004c24 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	689a      	ldr	r2, [r3, #8]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a12      	ldr	r2, [pc, #72]	@ (8004c94 <TIM_Base_SetConfig+0xd4>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d007      	beq.n	8004c60 <TIM_Base_SetConfig+0xa0>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a11      	ldr	r2, [pc, #68]	@ (8004c98 <TIM_Base_SetConfig+0xd8>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d003      	beq.n	8004c60 <TIM_Base_SetConfig+0xa0>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a10      	ldr	r2, [pc, #64]	@ (8004c9c <TIM_Base_SetConfig+0xdc>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d103      	bne.n	8004c68 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	691a      	ldr	r2, [r3, #16]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d105      	bne.n	8004c86 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	f023 0201 	bic.w	r2, r3, #1
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	611a      	str	r2, [r3, #16]
  }
}
 8004c86:	bf00      	nop
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	40012c00 	.word	0x40012c00
 8004c98:	40014400 	.word	0x40014400
 8004c9c:	40014800 	.word	0x40014800

08004ca0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <LL_RCC_GetUSARTClockSource>:
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004ce4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ce8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4013      	ands	r3, r2
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <LL_RCC_GetLPUARTClockSource>:
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004d04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d08:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4013      	ands	r3, r2
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e042      	b.n	8004db4 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d106      	bne.n	8004d46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f7fc fec3 	bl	8001acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2224      	movs	r2, #36	@ 0x24
 8004d4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 0201 	bic.w	r2, r2, #1
 8004d5c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d002      	beq.n	8004d6c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 fa50 	bl	800520c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f825 	bl	8004dbc <UART_SetConfig>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d101      	bne.n	8004d7c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e01b      	b.n	8004db4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689a      	ldr	r2, [r3, #8]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f042 0201 	orr.w	r2, r2, #1
 8004daa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 facf 	bl	8005350 <UART_CheckIdleState>
 8004db2:	4603      	mov	r3, r0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3708      	adds	r7, #8
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dc0:	b08c      	sub	sp, #48	@ 0x30
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	69db      	ldr	r3, [r3, #28]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	4baf      	ldr	r3, [pc, #700]	@ (80050a8 <UART_SetConfig+0x2ec>)
 8004dec:	4013      	ands	r3, r2
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	6812      	ldr	r2, [r2, #0]
 8004df2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004df4:	430b      	orrs	r3, r1
 8004df6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	68da      	ldr	r2, [r3, #12]
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4aa4      	ldr	r2, [pc, #656]	@ (80050ac <UART_SetConfig+0x2f0>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d004      	beq.n	8004e28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e24:	4313      	orrs	r3, r2
 8004e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004e32:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	6812      	ldr	r2, [r2, #0]
 8004e3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e3c:	430b      	orrs	r3, r1
 8004e3e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e46:	f023 010f 	bic.w	r1, r3, #15
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a95      	ldr	r2, [pc, #596]	@ (80050b0 <UART_SetConfig+0x2f4>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d125      	bne.n	8004eac <UART_SetConfig+0xf0>
 8004e60:	2003      	movs	r0, #3
 8004e62:	f7ff ff3b 	bl	8004cdc <LL_RCC_GetUSARTClockSource>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b03      	cmp	r3, #3
 8004e6a:	d81b      	bhi.n	8004ea4 <UART_SetConfig+0xe8>
 8004e6c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e74 <UART_SetConfig+0xb8>)
 8004e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e72:	bf00      	nop
 8004e74:	08004e85 	.word	0x08004e85
 8004e78:	08004e95 	.word	0x08004e95
 8004e7c:	08004e8d 	.word	0x08004e8d
 8004e80:	08004e9d 	.word	0x08004e9d
 8004e84:	2301      	movs	r3, #1
 8004e86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e8a:	e042      	b.n	8004f12 <UART_SetConfig+0x156>
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e92:	e03e      	b.n	8004f12 <UART_SetConfig+0x156>
 8004e94:	2304      	movs	r3, #4
 8004e96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e9a:	e03a      	b.n	8004f12 <UART_SetConfig+0x156>
 8004e9c:	2308      	movs	r3, #8
 8004e9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ea2:	e036      	b.n	8004f12 <UART_SetConfig+0x156>
 8004ea4:	2310      	movs	r3, #16
 8004ea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eaa:	e032      	b.n	8004f12 <UART_SetConfig+0x156>
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a7e      	ldr	r2, [pc, #504]	@ (80050ac <UART_SetConfig+0x2f0>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d12a      	bne.n	8004f0c <UART_SetConfig+0x150>
 8004eb6:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8004eba:	f7ff ff1f 	bl	8004cfc <LL_RCC_GetLPUARTClockSource>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ec4:	d01a      	beq.n	8004efc <UART_SetConfig+0x140>
 8004ec6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004eca:	d81b      	bhi.n	8004f04 <UART_SetConfig+0x148>
 8004ecc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ed0:	d00c      	beq.n	8004eec <UART_SetConfig+0x130>
 8004ed2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ed6:	d815      	bhi.n	8004f04 <UART_SetConfig+0x148>
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <UART_SetConfig+0x128>
 8004edc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ee0:	d008      	beq.n	8004ef4 <UART_SetConfig+0x138>
 8004ee2:	e00f      	b.n	8004f04 <UART_SetConfig+0x148>
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eea:	e012      	b.n	8004f12 <UART_SetConfig+0x156>
 8004eec:	2302      	movs	r3, #2
 8004eee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ef2:	e00e      	b.n	8004f12 <UART_SetConfig+0x156>
 8004ef4:	2304      	movs	r3, #4
 8004ef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004efa:	e00a      	b.n	8004f12 <UART_SetConfig+0x156>
 8004efc:	2308      	movs	r3, #8
 8004efe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f02:	e006      	b.n	8004f12 <UART_SetConfig+0x156>
 8004f04:	2310      	movs	r3, #16
 8004f06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f0a:	e002      	b.n	8004f12 <UART_SetConfig+0x156>
 8004f0c:	2310      	movs	r3, #16
 8004f0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a65      	ldr	r2, [pc, #404]	@ (80050ac <UART_SetConfig+0x2f0>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	f040 8097 	bne.w	800504c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f1e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004f22:	2b08      	cmp	r3, #8
 8004f24:	d823      	bhi.n	8004f6e <UART_SetConfig+0x1b2>
 8004f26:	a201      	add	r2, pc, #4	@ (adr r2, 8004f2c <UART_SetConfig+0x170>)
 8004f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2c:	08004f51 	.word	0x08004f51
 8004f30:	08004f6f 	.word	0x08004f6f
 8004f34:	08004f59 	.word	0x08004f59
 8004f38:	08004f6f 	.word	0x08004f6f
 8004f3c:	08004f5f 	.word	0x08004f5f
 8004f40:	08004f6f 	.word	0x08004f6f
 8004f44:	08004f6f 	.word	0x08004f6f
 8004f48:	08004f6f 	.word	0x08004f6f
 8004f4c:	08004f67 	.word	0x08004f67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f50:	f7fe fd4e 	bl	80039f0 <HAL_RCC_GetPCLK1Freq>
 8004f54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f56:	e010      	b.n	8004f7a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f58:	4b56      	ldr	r3, [pc, #344]	@ (80050b4 <UART_SetConfig+0x2f8>)
 8004f5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f5c:	e00d      	b.n	8004f7a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f5e:	f7fe fcc7 	bl	80038f0 <HAL_RCC_GetSysClockFreq>
 8004f62:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f64:	e009      	b.n	8004f7a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f6c:	e005      	b.n	8004f7a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004f78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 812b 	beq.w	80051d8 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f86:	4a4c      	ldr	r2, [pc, #304]	@ (80050b8 <UART_SetConfig+0x2fc>)
 8004f88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f90:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f94:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	005b      	lsls	r3, r3, #1
 8004f9e:	4413      	add	r3, r2
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d305      	bcc.n	8004fb2 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d903      	bls.n	8004fba <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004fb8:	e10e      	b.n	80051d8 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	60bb      	str	r3, [r7, #8]
 8004fc0:	60fa      	str	r2, [r7, #12]
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc6:	4a3c      	ldr	r2, [pc, #240]	@ (80050b8 <UART_SetConfig+0x2fc>)
 8004fc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	2200      	movs	r2, #0
 8004fd0:	603b      	str	r3, [r7, #0]
 8004fd2:	607a      	str	r2, [r7, #4]
 8004fd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fd8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004fdc:	f7fb f8d6 	bl	800018c <__aeabi_uldivmod>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	4610      	mov	r0, r2
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	f04f 0200 	mov.w	r2, #0
 8004fec:	f04f 0300 	mov.w	r3, #0
 8004ff0:	020b      	lsls	r3, r1, #8
 8004ff2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004ff6:	0202      	lsls	r2, r0, #8
 8004ff8:	6979      	ldr	r1, [r7, #20]
 8004ffa:	6849      	ldr	r1, [r1, #4]
 8004ffc:	0849      	lsrs	r1, r1, #1
 8004ffe:	2000      	movs	r0, #0
 8005000:	460c      	mov	r4, r1
 8005002:	4605      	mov	r5, r0
 8005004:	eb12 0804 	adds.w	r8, r2, r4
 8005008:	eb43 0905 	adc.w	r9, r3, r5
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	469a      	mov	sl, r3
 8005014:	4693      	mov	fp, r2
 8005016:	4652      	mov	r2, sl
 8005018:	465b      	mov	r3, fp
 800501a:	4640      	mov	r0, r8
 800501c:	4649      	mov	r1, r9
 800501e:	f7fb f8b5 	bl	800018c <__aeabi_uldivmod>
 8005022:	4602      	mov	r2, r0
 8005024:	460b      	mov	r3, r1
 8005026:	4613      	mov	r3, r2
 8005028:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800502a:	6a3b      	ldr	r3, [r7, #32]
 800502c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005030:	d308      	bcc.n	8005044 <UART_SetConfig+0x288>
 8005032:	6a3b      	ldr	r3, [r7, #32]
 8005034:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005038:	d204      	bcs.n	8005044 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	6a3a      	ldr	r2, [r7, #32]
 8005040:	60da      	str	r2, [r3, #12]
 8005042:	e0c9      	b.n	80051d8 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800504a:	e0c5      	b.n	80051d8 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	69db      	ldr	r3, [r3, #28]
 8005050:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005054:	d16d      	bne.n	8005132 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8005056:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800505a:	3b01      	subs	r3, #1
 800505c:	2b07      	cmp	r3, #7
 800505e:	d82d      	bhi.n	80050bc <UART_SetConfig+0x300>
 8005060:	a201      	add	r2, pc, #4	@ (adr r2, 8005068 <UART_SetConfig+0x2ac>)
 8005062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005066:	bf00      	nop
 8005068:	08005089 	.word	0x08005089
 800506c:	08005091 	.word	0x08005091
 8005070:	080050bd 	.word	0x080050bd
 8005074:	08005097 	.word	0x08005097
 8005078:	080050bd 	.word	0x080050bd
 800507c:	080050bd 	.word	0x080050bd
 8005080:	080050bd 	.word	0x080050bd
 8005084:	0800509f 	.word	0x0800509f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005088:	f7fe fcc8 	bl	8003a1c <HAL_RCC_GetPCLK2Freq>
 800508c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800508e:	e01b      	b.n	80050c8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005090:	4b08      	ldr	r3, [pc, #32]	@ (80050b4 <UART_SetConfig+0x2f8>)
 8005092:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005094:	e018      	b.n	80050c8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005096:	f7fe fc2b 	bl	80038f0 <HAL_RCC_GetSysClockFreq>
 800509a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800509c:	e014      	b.n	80050c8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800509e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80050a4:	e010      	b.n	80050c8 <UART_SetConfig+0x30c>
 80050a6:	bf00      	nop
 80050a8:	cfff69f3 	.word	0xcfff69f3
 80050ac:	40008000 	.word	0x40008000
 80050b0:	40013800 	.word	0x40013800
 80050b4:	00f42400 	.word	0x00f42400
 80050b8:	08008ff8 	.word	0x08008ff8
      default:
        pclk = 0U;
 80050bc:	2300      	movs	r3, #0
 80050be:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80050c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f000 8084 	beq.w	80051d8 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d4:	4a4b      	ldr	r2, [pc, #300]	@ (8005204 <UART_SetConfig+0x448>)
 80050d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050da:	461a      	mov	r2, r3
 80050dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050de:	fbb3 f3f2 	udiv	r3, r3, r2
 80050e2:	005a      	lsls	r2, r3, #1
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	085b      	lsrs	r3, r3, #1
 80050ea:	441a      	add	r2, r3
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050f6:	6a3b      	ldr	r3, [r7, #32]
 80050f8:	2b0f      	cmp	r3, #15
 80050fa:	d916      	bls.n	800512a <UART_SetConfig+0x36e>
 80050fc:	6a3b      	ldr	r3, [r7, #32]
 80050fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005102:	d212      	bcs.n	800512a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005104:	6a3b      	ldr	r3, [r7, #32]
 8005106:	b29b      	uxth	r3, r3
 8005108:	f023 030f 	bic.w	r3, r3, #15
 800510c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800510e:	6a3b      	ldr	r3, [r7, #32]
 8005110:	085b      	lsrs	r3, r3, #1
 8005112:	b29b      	uxth	r3, r3
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	b29a      	uxth	r2, r3
 800511a:	8bfb      	ldrh	r3, [r7, #30]
 800511c:	4313      	orrs	r3, r2
 800511e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	8bfa      	ldrh	r2, [r7, #30]
 8005126:	60da      	str	r2, [r3, #12]
 8005128:	e056      	b.n	80051d8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005130:	e052      	b.n	80051d8 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005132:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005136:	3b01      	subs	r3, #1
 8005138:	2b07      	cmp	r3, #7
 800513a:	d822      	bhi.n	8005182 <UART_SetConfig+0x3c6>
 800513c:	a201      	add	r2, pc, #4	@ (adr r2, 8005144 <UART_SetConfig+0x388>)
 800513e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005142:	bf00      	nop
 8005144:	08005165 	.word	0x08005165
 8005148:	0800516d 	.word	0x0800516d
 800514c:	08005183 	.word	0x08005183
 8005150:	08005173 	.word	0x08005173
 8005154:	08005183 	.word	0x08005183
 8005158:	08005183 	.word	0x08005183
 800515c:	08005183 	.word	0x08005183
 8005160:	0800517b 	.word	0x0800517b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005164:	f7fe fc5a 	bl	8003a1c <HAL_RCC_GetPCLK2Freq>
 8005168:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800516a:	e010      	b.n	800518e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800516c:	4b26      	ldr	r3, [pc, #152]	@ (8005208 <UART_SetConfig+0x44c>)
 800516e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005170:	e00d      	b.n	800518e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005172:	f7fe fbbd 	bl	80038f0 <HAL_RCC_GetSysClockFreq>
 8005176:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005178:	e009      	b.n	800518e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800517a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800517e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005180:	e005      	b.n	800518e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8005182:	2300      	movs	r3, #0
 8005184:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800518c:	bf00      	nop
    }

    if (pclk != 0U)
 800518e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005190:	2b00      	cmp	r3, #0
 8005192:	d021      	beq.n	80051d8 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005198:	4a1a      	ldr	r2, [pc, #104]	@ (8005204 <UART_SetConfig+0x448>)
 800519a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800519e:	461a      	mov	r2, r3
 80051a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	085b      	lsrs	r3, r3, #1
 80051ac:	441a      	add	r2, r3
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051b8:	6a3b      	ldr	r3, [r7, #32]
 80051ba:	2b0f      	cmp	r3, #15
 80051bc:	d909      	bls.n	80051d2 <UART_SetConfig+0x416>
 80051be:	6a3b      	ldr	r3, [r7, #32]
 80051c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051c4:	d205      	bcs.n	80051d2 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80051c6:	6a3b      	ldr	r3, [r7, #32]
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	60da      	str	r2, [r3, #12]
 80051d0:	e002      	b.n	80051d8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	2201      	movs	r2, #1
 80051dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	2200      	movs	r2, #0
 80051ec:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	2200      	movs	r2, #0
 80051f2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80051f4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3730      	adds	r7, #48	@ 0x30
 80051fc:	46bd      	mov	sp, r7
 80051fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005202:	bf00      	nop
 8005204:	08008ff8 	.word	0x08008ff8
 8005208:	00f42400 	.word	0x00f42400

0800520c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005218:	f003 0308 	and.w	r3, r3, #8
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00a      	beq.n	8005236 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00a      	beq.n	8005258 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	430a      	orrs	r2, r1
 8005256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00a      	beq.n	800527a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	430a      	orrs	r2, r1
 8005278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800527e:	f003 0304 	and.w	r3, r3, #4
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00a      	beq.n	800529c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	430a      	orrs	r2, r1
 800529a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a0:	f003 0310 	and.w	r3, r3, #16
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00a      	beq.n	80052be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c2:	f003 0320 	and.w	r3, r3, #32
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00a      	beq.n	80052e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	430a      	orrs	r2, r1
 80052de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d01a      	beq.n	8005322 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	430a      	orrs	r2, r1
 8005300:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005306:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800530a:	d10a      	bne.n	8005322 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005326:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00a      	beq.n	8005344 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	430a      	orrs	r2, r1
 8005342:	605a      	str	r2, [r3, #4]
  }
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b098      	sub	sp, #96	@ 0x60
 8005354:	af02      	add	r7, sp, #8
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005360:	f7fc fdc6 	bl	8001ef0 <HAL_GetTick>
 8005364:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0308 	and.w	r3, r3, #8
 8005370:	2b08      	cmp	r3, #8
 8005372:	d12f      	bne.n	80053d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005374:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005378:	9300      	str	r3, [sp, #0]
 800537a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800537c:	2200      	movs	r2, #0
 800537e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f88e 	bl	80054a4 <UART_WaitOnFlagUntilTimeout>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d022      	beq.n	80053d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005396:	e853 3f00 	ldrex	r3, [r3]
 800539a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800539c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800539e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	461a      	mov	r2, r3
 80053aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80053ae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053b4:	e841 2300 	strex	r3, r2, [r1]
 80053b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1e6      	bne.n	800538e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2220      	movs	r2, #32
 80053c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e063      	b.n	800549c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0304 	and.w	r3, r3, #4
 80053de:	2b04      	cmp	r3, #4
 80053e0:	d149      	bne.n	8005476 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053e2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80053e6:	9300      	str	r3, [sp, #0]
 80053e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053ea:	2200      	movs	r2, #0
 80053ec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f857 	bl	80054a4 <UART_WaitOnFlagUntilTimeout>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d03c      	beq.n	8005476 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005404:	e853 3f00 	ldrex	r3, [r3]
 8005408:	623b      	str	r3, [r7, #32]
   return(result);
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005410:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	461a      	mov	r2, r3
 8005418:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800541a:	633b      	str	r3, [r7, #48]	@ 0x30
 800541c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005420:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005422:	e841 2300 	strex	r3, r2, [r1]
 8005426:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1e6      	bne.n	80053fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	3308      	adds	r3, #8
 8005434:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	e853 3f00 	ldrex	r3, [r3]
 800543c:	60fb      	str	r3, [r7, #12]
   return(result);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f023 0301 	bic.w	r3, r3, #1
 8005444:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	3308      	adds	r3, #8
 800544c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800544e:	61fa      	str	r2, [r7, #28]
 8005450:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005452:	69b9      	ldr	r1, [r7, #24]
 8005454:	69fa      	ldr	r2, [r7, #28]
 8005456:	e841 2300 	strex	r3, r2, [r1]
 800545a:	617b      	str	r3, [r7, #20]
   return(result);
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1e5      	bne.n	800542e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2220      	movs	r2, #32
 8005466:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e012      	b.n	800549c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2220      	movs	r2, #32
 800547a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2220      	movs	r2, #32
 8005482:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3758      	adds	r7, #88	@ 0x58
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	603b      	str	r3, [r7, #0]
 80054b0:	4613      	mov	r3, r2
 80054b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054b4:	e04f      	b.n	8005556 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054bc:	d04b      	beq.n	8005556 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054be:	f7fc fd17 	bl	8001ef0 <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	69ba      	ldr	r2, [r7, #24]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d302      	bcc.n	80054d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e04e      	b.n	8005576 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0304 	and.w	r3, r3, #4
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d037      	beq.n	8005556 <UART_WaitOnFlagUntilTimeout+0xb2>
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	2b80      	cmp	r3, #128	@ 0x80
 80054ea:	d034      	beq.n	8005556 <UART_WaitOnFlagUntilTimeout+0xb2>
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	2b40      	cmp	r3, #64	@ 0x40
 80054f0:	d031      	beq.n	8005556 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	69db      	ldr	r3, [r3, #28]
 80054f8:	f003 0308 	and.w	r3, r3, #8
 80054fc:	2b08      	cmp	r3, #8
 80054fe:	d110      	bne.n	8005522 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2208      	movs	r2, #8
 8005506:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f000 f838 	bl	800557e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2208      	movs	r2, #8
 8005512:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e029      	b.n	8005576 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	69db      	ldr	r3, [r3, #28]
 8005528:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800552c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005530:	d111      	bne.n	8005556 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800553a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	f000 f81e 	bl	800557e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2220      	movs	r2, #32
 8005546:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e00f      	b.n	8005576 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	69da      	ldr	r2, [r3, #28]
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	4013      	ands	r3, r2
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	429a      	cmp	r2, r3
 8005564:	bf0c      	ite	eq
 8005566:	2301      	moveq	r3, #1
 8005568:	2300      	movne	r3, #0
 800556a:	b2db      	uxtb	r3, r3
 800556c:	461a      	mov	r2, r3
 800556e:	79fb      	ldrb	r3, [r7, #7]
 8005570:	429a      	cmp	r2, r3
 8005572:	d0a0      	beq.n	80054b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800557e:	b480      	push	{r7}
 8005580:	b095      	sub	sp, #84	@ 0x54
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800558e:	e853 3f00 	ldrex	r3, [r3]
 8005592:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005596:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800559a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	461a      	mov	r2, r3
 80055a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80055a6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80055aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80055ac:	e841 2300 	strex	r3, r2, [r1]
 80055b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80055b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1e6      	bne.n	8005586 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	3308      	adds	r3, #8
 80055be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c0:	6a3b      	ldr	r3, [r7, #32]
 80055c2:	e853 3f00 	ldrex	r3, [r3]
 80055c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055ce:	f023 0301 	bic.w	r3, r3, #1
 80055d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3308      	adds	r3, #8
 80055da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055e4:	e841 2300 	strex	r3, r2, [r1]
 80055e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1e3      	bne.n	80055b8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d118      	bne.n	800562a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	e853 3f00 	ldrex	r3, [r3]
 8005604:	60bb      	str	r3, [r7, #8]
   return(result);
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	f023 0310 	bic.w	r3, r3, #16
 800560c:	647b      	str	r3, [r7, #68]	@ 0x44
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	461a      	mov	r2, r3
 8005614:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005616:	61bb      	str	r3, [r7, #24]
 8005618:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561a:	6979      	ldr	r1, [r7, #20]
 800561c:	69ba      	ldr	r2, [r7, #24]
 800561e:	e841 2300 	strex	r3, r2, [r1]
 8005622:	613b      	str	r3, [r7, #16]
   return(result);
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1e6      	bne.n	80055f8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2220      	movs	r2, #32
 800562e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800563e:	bf00      	nop
 8005640:	3754      	adds	r7, #84	@ 0x54
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800564a:	b480      	push	{r7}
 800564c:	b085      	sub	sp, #20
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005658:	2b01      	cmp	r3, #1
 800565a:	d101      	bne.n	8005660 <HAL_UARTEx_DisableFifoMode+0x16>
 800565c:	2302      	movs	r3, #2
 800565e:	e027      	b.n	80056b0 <HAL_UARTEx_DisableFifoMode+0x66>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2224      	movs	r2, #36	@ 0x24
 800566c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f022 0201 	bic.w	r2, r2, #1
 8005686:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800568e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2220      	movs	r2, #32
 80056a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3714      	adds	r7, #20
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d101      	bne.n	80056d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80056d0:	2302      	movs	r3, #2
 80056d2:	e02d      	b.n	8005730 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2224      	movs	r2, #36	@ 0x24
 80056e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f022 0201 	bic.w	r2, r2, #1
 80056fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	683a      	ldr	r2, [r7, #0]
 800570c:	430a      	orrs	r2, r1
 800570e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 f84f 	bl	80057b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2220      	movs	r2, #32
 8005722:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005748:	2b01      	cmp	r3, #1
 800574a:	d101      	bne.n	8005750 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800574c:	2302      	movs	r3, #2
 800574e:	e02d      	b.n	80057ac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2224      	movs	r2, #36	@ 0x24
 800575c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f022 0201 	bic.w	r2, r2, #1
 8005776:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	430a      	orrs	r2, r1
 800578a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f811 	bl	80057b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2220      	movs	r2, #32
 800579e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3710      	adds	r7, #16
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d108      	bne.n	80057d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80057d4:	e031      	b.n	800583a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80057d6:	2308      	movs	r3, #8
 80057d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80057da:	2308      	movs	r3, #8
 80057dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	0e5b      	lsrs	r3, r3, #25
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	f003 0307 	and.w	r3, r3, #7
 80057ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	0f5b      	lsrs	r3, r3, #29
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	f003 0307 	and.w	r3, r3, #7
 80057fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057fe:	7bbb      	ldrb	r3, [r7, #14]
 8005800:	7b3a      	ldrb	r2, [r7, #12]
 8005802:	4911      	ldr	r1, [pc, #68]	@ (8005848 <UARTEx_SetNbDataToProcess+0x94>)
 8005804:	5c8a      	ldrb	r2, [r1, r2]
 8005806:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800580a:	7b3a      	ldrb	r2, [r7, #12]
 800580c:	490f      	ldr	r1, [pc, #60]	@ (800584c <UARTEx_SetNbDataToProcess+0x98>)
 800580e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005810:	fb93 f3f2 	sdiv	r3, r3, r2
 8005814:	b29a      	uxth	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800581c:	7bfb      	ldrb	r3, [r7, #15]
 800581e:	7b7a      	ldrb	r2, [r7, #13]
 8005820:	4909      	ldr	r1, [pc, #36]	@ (8005848 <UARTEx_SetNbDataToProcess+0x94>)
 8005822:	5c8a      	ldrb	r2, [r1, r2]
 8005824:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005828:	7b7a      	ldrb	r2, [r7, #13]
 800582a:	4908      	ldr	r1, [pc, #32]	@ (800584c <UARTEx_SetNbDataToProcess+0x98>)
 800582c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800582e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005832:	b29a      	uxth	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800583a:	bf00      	nop
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	08009010 	.word	0x08009010
 800584c:	08009018 	.word	0x08009018

08005850 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005858:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800585c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005864:	b29a      	uxth	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	b29b      	uxth	r3, r3
 800586a:	43db      	mvns	r3, r3
 800586c:	b29b      	uxth	r3, r3
 800586e:	4013      	ands	r3, r2
 8005870:	b29a      	uxth	r2, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3714      	adds	r7, #20
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005886:	b480      	push	{r7}
 8005888:	b085      	sub	sp, #20
 800588a:	af00      	add	r7, sp, #0
 800588c:	60f8      	str	r0, [r7, #12]
 800588e:	1d3b      	adds	r3, r7, #4
 8005890:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2201      	movs	r2, #1
 8005898:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3714      	adds	r7, #20
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr

080058c2 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80058c2:	b580      	push	{r7, lr}
 80058c4:	b088      	sub	sp, #32
 80058c6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80058c8:	2300      	movs	r3, #0
 80058ca:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80058cc:	f107 0308 	add.w	r3, r7, #8
 80058d0:	2218      	movs	r2, #24
 80058d2:	2100      	movs	r1, #0
 80058d4:	4618      	mov	r0, r3
 80058d6:	f001 f92d 	bl	8006b34 <Osal_MemSet>
  rq.ogf = 0x3f;
 80058da:	233f      	movs	r3, #63	@ 0x3f
 80058dc:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80058de:	2381      	movs	r3, #129	@ 0x81
 80058e0:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80058e2:	1dfb      	adds	r3, r7, #7
 80058e4:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80058e6:	2301      	movs	r3, #1
 80058e8:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80058ea:	f107 0308 	add.w	r3, r7, #8
 80058ee:	2100      	movs	r1, #0
 80058f0:	4618      	mov	r0, r3
 80058f2:	f001 fba9 	bl	8007048 <hci_send_req>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	da01      	bge.n	8005900 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80058fc:	23ff      	movs	r3, #255	@ 0xff
 80058fe:	e000      	b.n	8005902 <aci_gap_set_non_discoverable+0x40>
  return status;
 8005900:	79fb      	ldrb	r3, [r7, #7]
}
 8005902:	4618      	mov	r0, r3
 8005904:	3720      	adds	r7, #32
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800590a:	b5b0      	push	{r4, r5, r7, lr}
 800590c:	b0ce      	sub	sp, #312	@ 0x138
 800590e:	af00      	add	r7, sp, #0
 8005910:	4605      	mov	r5, r0
 8005912:	460c      	mov	r4, r1
 8005914:	4610      	mov	r0, r2
 8005916:	4619      	mov	r1, r3
 8005918:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800591c:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8005920:	462a      	mov	r2, r5
 8005922:	701a      	strb	r2, [r3, #0]
 8005924:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005928:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800592c:	4622      	mov	r2, r4
 800592e:	801a      	strh	r2, [r3, #0]
 8005930:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005934:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8005938:	4602      	mov	r2, r0
 800593a:	801a      	strh	r2, [r3, #0]
 800593c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005940:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8005944:	460a      	mov	r2, r1
 8005946:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8005948:	f107 0310 	add.w	r3, r7, #16
 800594c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8005950:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8005954:	3308      	adds	r3, #8
 8005956:	f107 0210 	add.w	r2, r7, #16
 800595a:	4413      	add	r3, r2
 800595c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8005960:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8005964:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8005968:	4413      	add	r3, r2
 800596a:	3309      	adds	r3, #9
 800596c:	f107 0210 	add.w	r2, r7, #16
 8005970:	4413      	add	r3, r2
 8005972:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005976:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800597a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800597e:	2200      	movs	r2, #0
 8005980:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005982:	2300      	movs	r3, #0
 8005984:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8005988:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800598c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005990:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8005994:	7812      	ldrb	r2, [r2, #0]
 8005996:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005998:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800599c:	3301      	adds	r3, #1
 800599e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80059a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80059a6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80059aa:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 80059ae:	8812      	ldrh	r2, [r2, #0]
 80059b0:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80059b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80059b8:	3302      	adds	r3, #2
 80059ba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 80059be:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80059c2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80059c6:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 80059ca:	8812      	ldrh	r2, [r2, #0]
 80059cc:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80059d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80059d4:	3302      	adds	r3, #2
 80059d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80059da:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80059de:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80059e2:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80059e6:	7812      	ldrb	r2, [r2, #0]
 80059e8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80059ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80059ee:	3301      	adds	r3, #1
 80059f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80059f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80059f8:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80059fc:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80059fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005a02:	3301      	adds	r3, #1
 8005a04:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8005a08:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005a0c:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8005a10:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8005a12:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005a16:	3301      	adds	r3, #1
 8005a18:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8005a1c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005a20:	3308      	adds	r3, #8
 8005a22:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8005a26:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f001 f872 	bl	8006b14 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8005a30:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8005a34:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005a38:	4413      	add	r3, r2
 8005a3a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8005a3e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005a42:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8005a46:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8005a48:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8005a52:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005a56:	3301      	adds	r3, #1
 8005a58:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8005a5c:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8005a60:	4618      	mov	r0, r3
 8005a62:	f001 f857 	bl	8006b14 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8005a66:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8005a6a:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005a6e:	4413      	add	r3, r2
 8005a70:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8005a74:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005a78:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8005a7c:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8005a7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005a82:	3302      	adds	r3, #2
 8005a84:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8005a88:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005a8c:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8005a90:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8005a92:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005a96:	3302      	adds	r3, #2
 8005a98:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005a9c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005aa0:	2218      	movs	r2, #24
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f001 f845 	bl	8006b34 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005aaa:	233f      	movs	r3, #63	@ 0x3f
 8005aac:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8005ab0:	2383      	movs	r3, #131	@ 0x83
 8005ab2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005ab6:	f107 0310 	add.w	r3, r7, #16
 8005aba:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005abe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005ac2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005ac6:	f107 030f 	add.w	r3, r7, #15
 8005aca:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005ad4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005ad8:	2100      	movs	r1, #0
 8005ada:	4618      	mov	r0, r3
 8005adc:	f001 fab4 	bl	8007048 <hci_send_req>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	da01      	bge.n	8005aea <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8005ae6:	23ff      	movs	r3, #255	@ 0xff
 8005ae8:	e004      	b.n	8005af4 <aci_gap_set_discoverable+0x1ea>
  return status;
 8005aea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005aee:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005af2:	781b      	ldrb	r3, [r3, #0]
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bdb0      	pop	{r4, r5, r7, pc}

08005afe <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b0cc      	sub	sp, #304	@ 0x130
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	4602      	mov	r2, r0
 8005b06:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005b0a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005b0e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8005b10:	f107 0310 	add.w	r3, r7, #16
 8005b14:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005b18:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005b1c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005b20:	2200      	movs	r2, #0
 8005b22:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005b24:	2300      	movs	r3, #0
 8005b26:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8005b2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005b2e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005b32:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005b36:	7812      	ldrb	r2, [r2, #0]
 8005b38:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005b3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005b3e:	3301      	adds	r3, #1
 8005b40:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005b44:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005b48:	2218      	movs	r2, #24
 8005b4a:	2100      	movs	r1, #0
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f000 fff1 	bl	8006b34 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005b52:	233f      	movs	r3, #63	@ 0x3f
 8005b54:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 8005b58:	2385      	movs	r3, #133	@ 0x85
 8005b5a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005b5e:	f107 0310 	add.w	r3, r7, #16
 8005b62:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005b66:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005b6a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005b6e:	f107 030f 	add.w	r3, r7, #15
 8005b72:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005b76:	2301      	movs	r3, #1
 8005b78:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005b7c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005b80:	2100      	movs	r1, #0
 8005b82:	4618      	mov	r0, r3
 8005b84:	f001 fa60 	bl	8007048 <hci_send_req>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	da01      	bge.n	8005b92 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8005b8e:	23ff      	movs	r3, #255	@ 0xff
 8005b90:	e004      	b.n	8005b9c <aci_gap_set_io_capability+0x9e>
  return status;
 8005b92:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005b96:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005b9a:	781b      	ldrb	r3, [r3, #0]
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8005ba6:	b5b0      	push	{r4, r5, r7, lr}
 8005ba8:	b0cc      	sub	sp, #304	@ 0x130
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	4605      	mov	r5, r0
 8005bae:	460c      	mov	r4, r1
 8005bb0:	4610      	mov	r0, r2
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005bb8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005bbc:	462a      	mov	r2, r5
 8005bbe:	701a      	strb	r2, [r3, #0]
 8005bc0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005bc4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005bc8:	4622      	mov	r2, r4
 8005bca:	701a      	strb	r2, [r3, #0]
 8005bcc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005bd0:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	701a      	strb	r2, [r3, #0]
 8005bd8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005bdc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005be0:	460a      	mov	r2, r1
 8005be2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8005be4:	f107 0310 	add.w	r3, r7, #16
 8005be8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005bec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005bf0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8005bfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005c02:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005c06:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005c0a:	7812      	ldrb	r2, [r2, #0]
 8005c0c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005c0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005c12:	3301      	adds	r3, #1
 8005c14:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8005c18:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005c1c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005c20:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005c24:	7812      	ldrb	r2, [r2, #0]
 8005c26:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005c28:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 8005c32:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005c36:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005c3a:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8005c3e:	7812      	ldrb	r2, [r2, #0]
 8005c40:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005c42:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005c46:	3301      	adds	r3, #1
 8005c48:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8005c4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005c50:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005c54:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8005c58:	7812      	ldrb	r2, [r2, #0]
 8005c5a:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8005c5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005c60:	3301      	adds	r3, #1
 8005c62:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8005c66:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005c6a:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8005c6e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005c70:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005c74:	3301      	adds	r3, #1
 8005c76:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8005c7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005c7e:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8005c82:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005c84:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005c88:	3301      	adds	r3, #1
 8005c8a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8005c8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005c92:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8005c96:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8005c98:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8005ca2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005ca6:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8005caa:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8005cae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005cb2:	3304      	adds	r3, #4
 8005cb4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8005cb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005cbc:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8005cc0:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8005cc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005ccc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005cd0:	2218      	movs	r2, #24
 8005cd2:	2100      	movs	r1, #0
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f000 ff2d 	bl	8006b34 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005cda:	233f      	movs	r3, #63	@ 0x3f
 8005cdc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 8005ce0:	2386      	movs	r3, #134	@ 0x86
 8005ce2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005ce6:	f107 0310 	add.w	r3, r7, #16
 8005cea:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005cee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005cf2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005cf6:	f107 030f 	add.w	r3, r7, #15
 8005cfa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005d04:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005d08:	2100      	movs	r1, #0
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f001 f99c 	bl	8007048 <hci_send_req>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	da01      	bge.n	8005d1a <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8005d16:	23ff      	movs	r3, #255	@ 0xff
 8005d18:	e004      	b.n	8005d24 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8005d1a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005d1e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005d22:	781b      	ldrb	r3, [r3, #0]
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bdb0      	pop	{r4, r5, r7, pc}

08005d2e <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b0cc      	sub	sp, #304	@ 0x130
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	4602      	mov	r2, r0
 8005d36:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005d3a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005d3e:	6019      	str	r1, [r3, #0]
 8005d40:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005d44:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005d48:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8005d4a:	f107 0310 	add.w	r3, r7, #16
 8005d4e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005d52:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005d56:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8005d64:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005d68:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005d6c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005d70:	8812      	ldrh	r2, [r2, #0]
 8005d72:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005d74:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005d78:	3302      	adds	r3, #2
 8005d7a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 8005d7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005d82:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005d86:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8005d8a:	6812      	ldr	r2, [r2, #0]
 8005d8c:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8005d90:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005d94:	3304      	adds	r3, #4
 8005d96:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005d9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005d9e:	2218      	movs	r2, #24
 8005da0:	2100      	movs	r1, #0
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 fec6 	bl	8006b34 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005da8:	233f      	movs	r3, #63	@ 0x3f
 8005daa:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8005dae:	2388      	movs	r3, #136	@ 0x88
 8005db0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005db4:	f107 0310 	add.w	r3, r7, #16
 8005db8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005dbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005dc0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005dc4:	f107 030f 	add.w	r3, r7, #15
 8005dc8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005dd2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005dd6:	2100      	movs	r1, #0
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f001 f935 	bl	8007048 <hci_send_req>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	da01      	bge.n	8005de8 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8005de4:	23ff      	movs	r3, #255	@ 0xff
 8005de6:	e004      	b.n	8005df2 <aci_gap_pass_key_resp+0xc4>
  return status;
 8005de8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005dec:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005df0:	781b      	ldrb	r3, [r3, #0]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8005dfc:	b590      	push	{r4, r7, lr}
 8005dfe:	b0cd      	sub	sp, #308	@ 0x134
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	4604      	mov	r4, r0
 8005e04:	4608      	mov	r0, r1
 8005e06:	4611      	mov	r1, r2
 8005e08:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005e0c:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8005e10:	6013      	str	r3, [r2, #0]
 8005e12:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005e16:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005e1a:	4622      	mov	r2, r4
 8005e1c:	701a      	strb	r2, [r3, #0]
 8005e1e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005e22:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005e26:	4602      	mov	r2, r0
 8005e28:	701a      	strb	r2, [r3, #0]
 8005e2a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005e2e:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8005e32:	460a      	mov	r2, r1
 8005e34:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8005e36:	f107 0310 	add.w	r3, r7, #16
 8005e3a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005e3e:	f107 0308 	add.w	r3, r7, #8
 8005e42:	2207      	movs	r2, #7
 8005e44:	2100      	movs	r1, #0
 8005e46:	4618      	mov	r0, r3
 8005e48:	f000 fe74 	bl	8006b34 <Osal_MemSet>
  int index_input = 0;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 8005e52:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005e56:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005e5a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005e5e:	7812      	ldrb	r2, [r2, #0]
 8005e60:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005e62:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005e66:	3301      	adds	r3, #1
 8005e68:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8005e6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005e70:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005e74:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005e78:	7812      	ldrb	r2, [r2, #0]
 8005e7a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005e7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005e80:	3301      	adds	r3, #1
 8005e82:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8005e86:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005e8a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005e8e:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8005e92:	7812      	ldrb	r2, [r2, #0]
 8005e94:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005e96:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005ea0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005ea4:	2218      	movs	r2, #24
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f000 fe43 	bl	8006b34 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005eae:	233f      	movs	r3, #63	@ 0x3f
 8005eb0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 8005eb4:	238a      	movs	r3, #138	@ 0x8a
 8005eb6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005eba:	f107 0310 	add.w	r3, r7, #16
 8005ebe:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005ec2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005ec6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8005eca:	f107 0308 	add.w	r3, r7, #8
 8005ece:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8005ed2:	2307      	movs	r3, #7
 8005ed4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005ed8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005edc:	2100      	movs	r1, #0
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f001 f8b2 	bl	8007048 <hci_send_req>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	da01      	bge.n	8005eee <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8005eea:	23ff      	movs	r3, #255	@ 0xff
 8005eec:	e02e      	b.n	8005f4c <aci_gap_init+0x150>
  if ( resp.Status )
 8005eee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ef2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d005      	beq.n	8005f08 <aci_gap_init+0x10c>
    return resp.Status;
 8005efc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005f00:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	e021      	b.n	8005f4c <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8005f08:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005f0c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005f10:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005f1a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8005f22:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005f26:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005f2a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8005f34:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8005f36:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005f3a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005f3e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005f48:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd90      	pop	{r4, r7, pc}

08005f56 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b0cc      	sub	sp, #304	@ 0x130
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005f62:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005f66:	6019      	str	r1, [r3, #0]
 8005f68:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005f6c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005f70:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8005f72:	f107 0310 	add.w	r3, r7, #16
 8005f76:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005f7a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005f7e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005f82:	2200      	movs	r2, #0
 8005f84:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005f86:	2300      	movs	r3, #0
 8005f88:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8005f8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005f90:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005f94:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005f98:	7812      	ldrb	r2, [r2, #0]
 8005f9a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005f9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8005fa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005faa:	1c58      	adds	r0, r3, #1
 8005fac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005fb0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005fb4:	781a      	ldrb	r2, [r3, #0]
 8005fb6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005fba:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005fbe:	6819      	ldr	r1, [r3, #0]
 8005fc0:	f000 fda8 	bl	8006b14 <Osal_MemCpy>
  index_input += AdvDataLen;
 8005fc4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005fc8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005fd8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005fdc:	2218      	movs	r2, #24
 8005fde:	2100      	movs	r1, #0
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f000 fda7 	bl	8006b34 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005fe6:	233f      	movs	r3, #63	@ 0x3f
 8005fe8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8005fec:	238e      	movs	r3, #142	@ 0x8e
 8005fee:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005ff2:	f107 0310 	add.w	r3, r7, #16
 8005ff6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005ffa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005ffe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006002:	f107 030f 	add.w	r3, r7, #15
 8006006:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800600a:	2301      	movs	r3, #1
 800600c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006010:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006014:	2100      	movs	r1, #0
 8006016:	4618      	mov	r0, r3
 8006018:	f001 f816 	bl	8007048 <hci_send_req>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	da01      	bge.n	8006026 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8006022:	23ff      	movs	r3, #255	@ 0xff
 8006024:	e004      	b.n	8006030 <aci_gap_update_adv_data+0xda>
  return status;
 8006026:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800602a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800602e:	781b      	ldrb	r3, [r3, #0]
}
 8006030:	4618      	mov	r0, r3
 8006032:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b088      	sub	sp, #32
 800603e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006040:	2300      	movs	r3, #0
 8006042:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006044:	f107 0308 	add.w	r3, r7, #8
 8006048:	2218      	movs	r2, #24
 800604a:	2100      	movs	r1, #0
 800604c:	4618      	mov	r0, r3
 800604e:	f000 fd71 	bl	8006b34 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006052:	233f      	movs	r3, #63	@ 0x3f
 8006054:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8006056:	2392      	movs	r3, #146	@ 0x92
 8006058:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800605a:	1dfb      	adds	r3, r7, #7
 800605c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800605e:	2301      	movs	r3, #1
 8006060:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006062:	f107 0308 	add.w	r3, r7, #8
 8006066:	2100      	movs	r1, #0
 8006068:	4618      	mov	r0, r3
 800606a:	f000 ffed 	bl	8007048 <hci_send_req>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	da01      	bge.n	8006078 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006074:	23ff      	movs	r3, #255	@ 0xff
 8006076:	e000      	b.n	800607a <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8006078:	79fb      	ldrb	r3, [r7, #7]
}
 800607a:	4618      	mov	r0, r3
 800607c:	3720      	adds	r7, #32
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b0cc      	sub	sp, #304	@ 0x130
 8006086:	af00      	add	r7, sp, #0
 8006088:	4602      	mov	r2, r0
 800608a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800608e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006092:	801a      	strh	r2, [r3, #0]
 8006094:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006098:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800609c:	460a      	mov	r2, r1
 800609e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 80060a0:	f107 0310 	add.w	r3, r7, #16
 80060a4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80060a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80060ac:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80060b0:	2200      	movs	r2, #0
 80060b2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80060b4:	2300      	movs	r3, #0
 80060b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80060ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80060be:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80060c2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80060c6:	8812      	ldrh	r2, [r2, #0]
 80060c8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80060ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80060ce:	3302      	adds	r3, #2
 80060d0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 80060d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80060d8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80060dc:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80060e0:	7812      	ldrb	r2, [r2, #0]
 80060e2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80060e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80060e8:	3301      	adds	r3, #1
 80060ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80060ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80060f2:	2218      	movs	r2, #24
 80060f4:	2100      	movs	r1, #0
 80060f6:	4618      	mov	r0, r3
 80060f8:	f000 fd1c 	bl	8006b34 <Osal_MemSet>
  rq.ogf = 0x3f;
 80060fc:	233f      	movs	r3, #63	@ 0x3f
 80060fe:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 8006102:	23a5      	movs	r3, #165	@ 0xa5
 8006104:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006108:	f107 0310 	add.w	r3, r7, #16
 800610c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006110:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006114:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006118:	f107 030f 	add.w	r3, r7, #15
 800611c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006120:	2301      	movs	r3, #1
 8006122:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006126:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800612a:	2100      	movs	r1, #0
 800612c:	4618      	mov	r0, r3
 800612e:	f000 ff8b 	bl	8007048 <hci_send_req>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	da01      	bge.n	800613c <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8006138:	23ff      	movs	r3, #255	@ 0xff
 800613a:	e004      	b.n	8006146 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800613c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006140:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006144:	781b      	ldrb	r3, [r3, #0]
}
 8006146:	4618      	mov	r0, r3
 8006148:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b088      	sub	sp, #32
 8006154:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006156:	2300      	movs	r3, #0
 8006158:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800615a:	f107 0308 	add.w	r3, r7, #8
 800615e:	2218      	movs	r2, #24
 8006160:	2100      	movs	r1, #0
 8006162:	4618      	mov	r0, r3
 8006164:	f000 fce6 	bl	8006b34 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006168:	233f      	movs	r3, #63	@ 0x3f
 800616a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800616c:	f240 1301 	movw	r3, #257	@ 0x101
 8006170:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006172:	1dfb      	adds	r3, r7, #7
 8006174:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006176:	2301      	movs	r3, #1
 8006178:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800617a:	f107 0308 	add.w	r3, r7, #8
 800617e:	2100      	movs	r1, #0
 8006180:	4618      	mov	r0, r3
 8006182:	f000 ff61 	bl	8007048 <hci_send_req>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	da01      	bge.n	8006190 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800618c:	23ff      	movs	r3, #255	@ 0xff
 800618e:	e000      	b.n	8006192 <aci_gatt_init+0x42>
  return status;
 8006190:	79fb      	ldrb	r3, [r7, #7]
}
 8006192:	4618      	mov	r0, r3
 8006194:	3720      	adds	r7, #32
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800619a:	b590      	push	{r4, r7, lr}
 800619c:	b0cf      	sub	sp, #316	@ 0x13c
 800619e:	af00      	add	r7, sp, #0
 80061a0:	4604      	mov	r4, r0
 80061a2:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 80061a6:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 80061aa:	6001      	str	r1, [r0, #0]
 80061ac:	4610      	mov	r0, r2
 80061ae:	4619      	mov	r1, r3
 80061b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80061b4:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80061b8:	4622      	mov	r2, r4
 80061ba:	701a      	strb	r2, [r3, #0]
 80061bc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80061c0:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80061c4:	4602      	mov	r2, r0
 80061c6:	701a      	strb	r2, [r3, #0]
 80061c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80061cc:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80061d0:	460a      	mov	r2, r1
 80061d2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80061d4:	f107 0310 	add.w	r3, r7, #16
 80061d8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80061dc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80061e0:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d00a      	beq.n	8006200 <aci_gatt_add_service+0x66>
 80061ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80061ee:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d101      	bne.n	80061fc <aci_gatt_add_service+0x62>
 80061f8:	2311      	movs	r3, #17
 80061fa:	e002      	b.n	8006202 <aci_gatt_add_service+0x68>
 80061fc:	2301      	movs	r3, #1
 80061fe:	e000      	b.n	8006202 <aci_gatt_add_service+0x68>
 8006200:	2303      	movs	r3, #3
 8006202:	f107 0210 	add.w	r2, r7, #16
 8006206:	4413      	add	r3, r2
 8006208:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800620c:	f107 030c 	add.w	r3, r7, #12
 8006210:	2203      	movs	r2, #3
 8006212:	2100      	movs	r1, #0
 8006214:	4618      	mov	r0, r3
 8006216:	f000 fc8d 	bl	8006b34 <Osal_MemSet>
  int index_input = 0;
 800621a:	2300      	movs	r3, #0
 800621c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8006220:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006224:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006228:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800622c:	7812      	ldrb	r2, [r2, #0]
 800622e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006230:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006234:	3301      	adds	r3, #1
 8006236:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800623a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800623e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d002      	beq.n	800624e <aci_gatt_add_service+0xb4>
 8006248:	2b02      	cmp	r3, #2
 800624a:	d004      	beq.n	8006256 <aci_gatt_add_service+0xbc>
 800624c:	e007      	b.n	800625e <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800624e:	2302      	movs	r3, #2
 8006250:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8006254:	e005      	b.n	8006262 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8006256:	2310      	movs	r3, #16
 8006258:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800625c:	e001      	b.n	8006262 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800625e:	2397      	movs	r3, #151	@ 0x97
 8006260:	e06c      	b.n	800633c <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8006262:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006266:	1c58      	adds	r0, r3, #1
 8006268:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800626c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006270:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8006274:	6819      	ldr	r1, [r3, #0]
 8006276:	f000 fc4d 	bl	8006b14 <Osal_MemCpy>
    index_input += size;
 800627a:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800627e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006282:	4413      	add	r3, r2
 8006284:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8006288:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800628c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006290:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8006294:	7812      	ldrb	r2, [r2, #0]
 8006296:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8006298:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800629c:	3301      	adds	r3, #1
 800629e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 80062a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80062a6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80062aa:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 80062ae:	7812      	ldrb	r2, [r2, #0]
 80062b0:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80062b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80062b6:	3301      	adds	r3, #1
 80062b8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80062bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80062c0:	2218      	movs	r2, #24
 80062c2:	2100      	movs	r1, #0
 80062c4:	4618      	mov	r0, r3
 80062c6:	f000 fc35 	bl	8006b34 <Osal_MemSet>
  rq.ogf = 0x3f;
 80062ca:	233f      	movs	r3, #63	@ 0x3f
 80062cc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 80062d0:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80062d4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80062d8:	f107 0310 	add.w	r3, r7, #16
 80062dc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80062e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80062e4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 80062e8:	f107 030c 	add.w	r3, r7, #12
 80062ec:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 80062f0:	2303      	movs	r3, #3
 80062f2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80062f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80062fa:	2100      	movs	r1, #0
 80062fc:	4618      	mov	r0, r3
 80062fe:	f000 fea3 	bl	8007048 <hci_send_req>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	da01      	bge.n	800630c <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8006308:	23ff      	movs	r3, #255	@ 0xff
 800630a:	e017      	b.n	800633c <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800630c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006310:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d005      	beq.n	8006326 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800631a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800631e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	e00a      	b.n	800633c <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8006326:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800632a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800632e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006332:	b29a      	uxth	r2, r3
 8006334:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8006338:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8006342:	46bd      	mov	sp, r7
 8006344:	bd90      	pop	{r4, r7, pc}

08006346 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8006346:	b590      	push	{r4, r7, lr}
 8006348:	b0d1      	sub	sp, #324	@ 0x144
 800634a:	af00      	add	r7, sp, #0
 800634c:	4604      	mov	r4, r0
 800634e:	4608      	mov	r0, r1
 8006350:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8006354:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8006358:	600a      	str	r2, [r1, #0]
 800635a:	4619      	mov	r1, r3
 800635c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006360:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8006364:	4622      	mov	r2, r4
 8006366:	801a      	strh	r2, [r3, #0]
 8006368:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800636c:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8006370:	4602      	mov	r2, r0
 8006372:	701a      	strb	r2, [r3, #0]
 8006374:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006378:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800637c:	460a      	mov	r2, r1
 800637e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8006380:	f107 0318 	add.w	r3, r7, #24
 8006384:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8006388:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800638c:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	2b01      	cmp	r3, #1
 8006394:	d00a      	beq.n	80063ac <aci_gatt_add_char+0x66>
 8006396:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800639a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d101      	bne.n	80063a8 <aci_gatt_add_char+0x62>
 80063a4:	2313      	movs	r3, #19
 80063a6:	e002      	b.n	80063ae <aci_gatt_add_char+0x68>
 80063a8:	2303      	movs	r3, #3
 80063aa:	e000      	b.n	80063ae <aci_gatt_add_char+0x68>
 80063ac:	2305      	movs	r3, #5
 80063ae:	f107 0218 	add.w	r2, r7, #24
 80063b2:	4413      	add	r3, r2
 80063b4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80063b8:	f107 0314 	add.w	r3, r7, #20
 80063bc:	2203      	movs	r2, #3
 80063be:	2100      	movs	r1, #0
 80063c0:	4618      	mov	r0, r3
 80063c2:	f000 fbb7 	bl	8006b34 <Osal_MemSet>
  int index_input = 0;
 80063c6:	2300      	movs	r3, #0
 80063c8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 80063cc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80063d0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80063d4:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80063d8:	8812      	ldrh	r2, [r2, #0]
 80063da:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80063dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80063e0:	3302      	adds	r3, #2
 80063e2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 80063e6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80063ea:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80063ee:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 80063f2:	7812      	ldrb	r2, [r2, #0]
 80063f4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80063f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80063fa:	3301      	adds	r3, #1
 80063fc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8006400:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006404:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	2b01      	cmp	r3, #1
 800640c:	d002      	beq.n	8006414 <aci_gatt_add_char+0xce>
 800640e:	2b02      	cmp	r3, #2
 8006410:	d004      	beq.n	800641c <aci_gatt_add_char+0xd6>
 8006412:	e007      	b.n	8006424 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8006414:	2302      	movs	r3, #2
 8006416:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800641a:	e005      	b.n	8006428 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800641c:	2310      	movs	r3, #16
 800641e:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8006422:	e001      	b.n	8006428 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8006424:	2397      	movs	r3, #151	@ 0x97
 8006426:	e091      	b.n	800654c <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8006428:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800642c:	1cd8      	adds	r0, r3, #3
 800642e:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8006432:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006436:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800643a:	6819      	ldr	r1, [r3, #0]
 800643c:	f000 fb6a 	bl	8006b14 <Osal_MemCpy>
    index_input += size;
 8006440:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8006444:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8006448:	4413      	add	r3, r2
 800644a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800644e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006452:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8006456:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 800645a:	8812      	ldrh	r2, [r2, #0]
 800645c:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800645e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006462:	3302      	adds	r3, #2
 8006464:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8006468:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800646c:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8006470:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8006472:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006476:	3301      	adds	r3, #1
 8006478:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800647c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006480:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8006484:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8006486:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800648a:	3301      	adds	r3, #1
 800648c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8006490:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006494:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8006498:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800649a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800649e:	3301      	adds	r3, #1
 80064a0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 80064a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80064a8:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 80064ac:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80064ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80064b2:	3301      	adds	r3, #1
 80064b4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 80064b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80064bc:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 80064c0:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80064c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80064c6:	3301      	adds	r3, #1
 80064c8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80064cc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80064d0:	2218      	movs	r2, #24
 80064d2:	2100      	movs	r1, #0
 80064d4:	4618      	mov	r0, r3
 80064d6:	f000 fb2d 	bl	8006b34 <Osal_MemSet>
  rq.ogf = 0x3f;
 80064da:	233f      	movs	r3, #63	@ 0x3f
 80064dc:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 80064e0:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80064e4:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 80064e8:	f107 0318 	add.w	r3, r7, #24
 80064ec:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 80064f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80064f4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 80064f8:	f107 0314 	add.w	r3, r7, #20
 80064fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8006500:	2303      	movs	r3, #3
 8006502:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006506:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800650a:	2100      	movs	r1, #0
 800650c:	4618      	mov	r0, r3
 800650e:	f000 fd9b 	bl	8007048 <hci_send_req>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	da01      	bge.n	800651c <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8006518:	23ff      	movs	r3, #255	@ 0xff
 800651a:	e017      	b.n	800654c <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800651c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006520:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d005      	beq.n	8006536 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800652a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800652e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	e00a      	b.n	800654c <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8006536:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800653a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800653e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006542:	b29a      	uxth	r2, r3
 8006544:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8006548:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8006552:	46bd      	mov	sp, r7
 8006554:	bd90      	pop	{r4, r7, pc}

08006556 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8006556:	b5b0      	push	{r4, r5, r7, lr}
 8006558:	b0cc      	sub	sp, #304	@ 0x130
 800655a:	af00      	add	r7, sp, #0
 800655c:	4605      	mov	r5, r0
 800655e:	460c      	mov	r4, r1
 8006560:	4610      	mov	r0, r2
 8006562:	4619      	mov	r1, r3
 8006564:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006568:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800656c:	462a      	mov	r2, r5
 800656e:	801a      	strh	r2, [r3, #0]
 8006570:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006574:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006578:	4622      	mov	r2, r4
 800657a:	801a      	strh	r2, [r3, #0]
 800657c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006580:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8006584:	4602      	mov	r2, r0
 8006586:	701a      	strb	r2, [r3, #0]
 8006588:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800658c:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8006590:	460a      	mov	r2, r1
 8006592:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8006594:	f107 0310 	add.w	r3, r7, #16
 8006598:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800659c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80065a0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80065a4:	2200      	movs	r2, #0
 80065a6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80065a8:	2300      	movs	r3, #0
 80065aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 80065ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80065b2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80065b6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80065ba:	8812      	ldrh	r2, [r2, #0]
 80065bc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80065be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80065c2:	3302      	adds	r3, #2
 80065c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 80065c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80065cc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80065d0:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80065d4:	8812      	ldrh	r2, [r2, #0]
 80065d6:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80065d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80065dc:	3302      	adds	r3, #2
 80065de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 80065e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80065e6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80065ea:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 80065ee:	7812      	ldrb	r2, [r2, #0]
 80065f0:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80065f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80065f6:	3301      	adds	r3, #1
 80065f8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80065fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006600:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006604:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8006608:	7812      	ldrb	r2, [r2, #0]
 800660a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800660c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006610:	3301      	adds	r3, #1
 8006612:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8006616:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800661a:	1d98      	adds	r0, r3, #6
 800661c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006620:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	461a      	mov	r2, r3
 8006628:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800662c:	f000 fa72 	bl	8006b14 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8006630:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006634:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800663e:	4413      	add	r3, r2
 8006640:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006644:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006648:	2218      	movs	r2, #24
 800664a:	2100      	movs	r1, #0
 800664c:	4618      	mov	r0, r3
 800664e:	f000 fa71 	bl	8006b34 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006652:	233f      	movs	r3, #63	@ 0x3f
 8006654:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8006658:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800665c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006660:	f107 0310 	add.w	r3, r7, #16
 8006664:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006668:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800666c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006670:	f107 030f 	add.w	r3, r7, #15
 8006674:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006678:	2301      	movs	r3, #1
 800667a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800667e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006682:	2100      	movs	r1, #0
 8006684:	4618      	mov	r0, r3
 8006686:	f000 fcdf 	bl	8007048 <hci_send_req>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	da01      	bge.n	8006694 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8006690:	23ff      	movs	r3, #255	@ 0xff
 8006692:	e004      	b.n	800669e <aci_gatt_update_char_value+0x148>
  return status;
 8006694:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006698:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800669c:	781b      	ldrb	r3, [r3, #0]
}
 800669e:	4618      	mov	r0, r3
 80066a0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bdb0      	pop	{r4, r5, r7, pc}

080066a8 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b0cc      	sub	sp, #304	@ 0x130
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	4602      	mov	r2, r0
 80066b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80066b4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80066b8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 80066ba:	f107 0310 	add.w	r3, r7, #16
 80066be:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80066c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80066c6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80066ca:	2200      	movs	r2, #0
 80066cc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80066ce:	2300      	movs	r3, #0
 80066d0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80066d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80066d8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80066dc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80066e0:	8812      	ldrh	r2, [r2, #0]
 80066e2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80066e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80066e8:	3302      	adds	r3, #2
 80066ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80066ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80066f2:	2218      	movs	r2, #24
 80066f4:	2100      	movs	r1, #0
 80066f6:	4618      	mov	r0, r3
 80066f8:	f000 fa1c 	bl	8006b34 <Osal_MemSet>
  rq.ogf = 0x3f;
 80066fc:	233f      	movs	r3, #63	@ 0x3f
 80066fe:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 8006702:	f240 1325 	movw	r3, #293	@ 0x125
 8006706:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800670a:	f107 0310 	add.w	r3, r7, #16
 800670e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006712:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006716:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800671a:	f107 030f 	add.w	r3, r7, #15
 800671e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006722:	2301      	movs	r3, #1
 8006724:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006728:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800672c:	2100      	movs	r1, #0
 800672e:	4618      	mov	r0, r3
 8006730:	f000 fc8a 	bl	8007048 <hci_send_req>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	da01      	bge.n	800673e <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 800673a:	23ff      	movs	r3, #255	@ 0xff
 800673c:	e004      	b.n	8006748 <aci_gatt_confirm_indication+0xa0>
  return status;
 800673e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006742:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006746:	781b      	ldrb	r3, [r3, #0]
}
 8006748:	4618      	mov	r0, r3
 800674a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b0cc      	sub	sp, #304	@ 0x130
 8006756:	af00      	add	r7, sp, #0
 8006758:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800675c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006760:	601a      	str	r2, [r3, #0]
 8006762:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006766:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800676a:	4602      	mov	r2, r0
 800676c:	701a      	strb	r2, [r3, #0]
 800676e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006772:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006776:	460a      	mov	r2, r1
 8006778:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800677a:	f107 0310 	add.w	r3, r7, #16
 800677e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006782:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006786:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800678a:	2200      	movs	r2, #0
 800678c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800678e:	2300      	movs	r3, #0
 8006790:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 8006794:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006798:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800679c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80067a0:	7812      	ldrb	r2, [r2, #0]
 80067a2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80067a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80067a8:	3301      	adds	r3, #1
 80067aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 80067ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80067b2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80067b6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80067ba:	7812      	ldrb	r2, [r2, #0]
 80067bc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80067be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80067c2:	3301      	adds	r3, #1
 80067c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80067c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80067cc:	1c98      	adds	r0, r3, #2
 80067ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80067d2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80067d6:	781a      	ldrb	r2, [r3, #0]
 80067d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80067dc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80067e0:	6819      	ldr	r1, [r3, #0]
 80067e2:	f000 f997 	bl	8006b14 <Osal_MemCpy>
  index_input += Length;
 80067e6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80067ea:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80067f4:	4413      	add	r3, r2
 80067f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80067fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80067fe:	2218      	movs	r2, #24
 8006800:	2100      	movs	r1, #0
 8006802:	4618      	mov	r0, r3
 8006804:	f000 f996 	bl	8006b34 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006808:	233f      	movs	r3, #63	@ 0x3f
 800680a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800680e:	230c      	movs	r3, #12
 8006810:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006814:	f107 0310 	add.w	r3, r7, #16
 8006818:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800681c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006820:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006824:	f107 030f 	add.w	r3, r7, #15
 8006828:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800682c:	2301      	movs	r3, #1
 800682e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006832:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006836:	2100      	movs	r1, #0
 8006838:	4618      	mov	r0, r3
 800683a:	f000 fc05 	bl	8007048 <hci_send_req>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	da01      	bge.n	8006848 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8006844:	23ff      	movs	r3, #255	@ 0xff
 8006846:	e004      	b.n	8006852 <aci_hal_write_config_data+0x100>
  return status;
 8006848:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800684c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006850:	781b      	ldrb	r3, [r3, #0]
}
 8006852:	4618      	mov	r0, r3
 8006854:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b0cc      	sub	sp, #304	@ 0x130
 8006860:	af00      	add	r7, sp, #0
 8006862:	4602      	mov	r2, r0
 8006864:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006868:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800686c:	701a      	strb	r2, [r3, #0]
 800686e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006872:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006876:	460a      	mov	r2, r1
 8006878:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800687a:	f107 0310 	add.w	r3, r7, #16
 800687e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006882:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006886:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800688a:	2200      	movs	r2, #0
 800688c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800688e:	2300      	movs	r3, #0
 8006890:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 8006894:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006898:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800689c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80068a0:	7812      	ldrb	r2, [r2, #0]
 80068a2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80068a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80068a8:	3301      	adds	r3, #1
 80068aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 80068ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80068b2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80068b6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80068ba:	7812      	ldrb	r2, [r2, #0]
 80068bc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80068be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80068c2:	3301      	adds	r3, #1
 80068c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80068c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80068cc:	2218      	movs	r2, #24
 80068ce:	2100      	movs	r1, #0
 80068d0:	4618      	mov	r0, r3
 80068d2:	f000 f92f 	bl	8006b34 <Osal_MemSet>
  rq.ogf = 0x3f;
 80068d6:	233f      	movs	r3, #63	@ 0x3f
 80068d8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 80068dc:	230f      	movs	r3, #15
 80068de:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80068e2:	f107 0310 	add.w	r3, r7, #16
 80068e6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80068ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80068ee:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80068f2:	f107 030f 	add.w	r3, r7, #15
 80068f6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80068fa:	2301      	movs	r3, #1
 80068fc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006900:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006904:	2100      	movs	r1, #0
 8006906:	4618      	mov	r0, r3
 8006908:	f000 fb9e 	bl	8007048 <hci_send_req>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	da01      	bge.n	8006916 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8006912:	23ff      	movs	r3, #255	@ 0xff
 8006914:	e004      	b.n	8006920 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8006916:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800691a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800691e:	781b      	ldrb	r3, [r3, #0]
}
 8006920:	4618      	mov	r0, r3
 8006922:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b0cc      	sub	sp, #304	@ 0x130
 800692e:	af00      	add	r7, sp, #0
 8006930:	4602      	mov	r2, r0
 8006932:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006936:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800693a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800693c:	f107 0310 	add.w	r3, r7, #16
 8006940:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006944:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006948:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800694c:	2200      	movs	r2, #0
 800694e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006950:	2300      	movs	r3, #0
 8006952:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8006956:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800695a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800695e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006962:	8812      	ldrh	r2, [r2, #0]
 8006964:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006966:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800696a:	3302      	adds	r3, #2
 800696c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006970:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006974:	2218      	movs	r2, #24
 8006976:	2100      	movs	r1, #0
 8006978:	4618      	mov	r0, r3
 800697a:	f000 f8db 	bl	8006b34 <Osal_MemSet>
  rq.ogf = 0x3f;
 800697e:	233f      	movs	r3, #63	@ 0x3f
 8006980:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 8006984:	2318      	movs	r3, #24
 8006986:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800698a:	f107 0310 	add.w	r3, r7, #16
 800698e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006992:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006996:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800699a:	f107 030f 	add.w	r3, r7, #15
 800699e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80069a2:	2301      	movs	r3, #1
 80069a4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80069a8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80069ac:	2100      	movs	r1, #0
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 fb4a 	bl	8007048 <hci_send_req>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	da01      	bge.n	80069be <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 80069ba:	23ff      	movs	r3, #255	@ 0xff
 80069bc:	e004      	b.n	80069c8 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 80069be:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80069c2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80069c6:	781b      	ldrb	r3, [r3, #0]
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b088      	sub	sp, #32
 80069d6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80069d8:	2300      	movs	r3, #0
 80069da:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80069dc:	f107 0308 	add.w	r3, r7, #8
 80069e0:	2218      	movs	r2, #24
 80069e2:	2100      	movs	r1, #0
 80069e4:	4618      	mov	r0, r3
 80069e6:	f000 f8a5 	bl	8006b34 <Osal_MemSet>
  rq.ogf = 0x03;
 80069ea:	2303      	movs	r3, #3
 80069ec:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80069ee:	2303      	movs	r3, #3
 80069f0:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80069f2:	1dfb      	adds	r3, r7, #7
 80069f4:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80069f6:	2301      	movs	r3, #1
 80069f8:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80069fa:	f107 0308 	add.w	r3, r7, #8
 80069fe:	2100      	movs	r1, #0
 8006a00:	4618      	mov	r0, r3
 8006a02:	f000 fb21 	bl	8007048 <hci_send_req>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	da01      	bge.n	8006a10 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006a0c:	23ff      	movs	r3, #255	@ 0xff
 8006a0e:	e000      	b.n	8006a12 <hci_reset+0x40>
  return status;
 8006a10:	79fb      	ldrb	r3, [r7, #7]
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3720      	adds	r7, #32
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8006a1a:	b590      	push	{r4, r7, lr}
 8006a1c:	b0cd      	sub	sp, #308	@ 0x134
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	4604      	mov	r4, r0
 8006a22:	4608      	mov	r0, r1
 8006a24:	4611      	mov	r1, r2
 8006a26:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006a2a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006a2e:	4622      	mov	r2, r4
 8006a30:	701a      	strb	r2, [r3, #0]
 8006a32:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006a36:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	701a      	strb	r2, [r3, #0]
 8006a3e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006a42:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8006a46:	460a      	mov	r2, r1
 8006a48:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8006a4a:	f107 0310 	add.w	r3, r7, #16
 8006a4e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006a52:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006a56:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8006a64:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006a68:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006a6c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006a70:	7812      	ldrb	r2, [r2, #0]
 8006a72:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006a74:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006a78:	3301      	adds	r3, #1
 8006a7a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8006a7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006a82:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006a86:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006a8a:	7812      	ldrb	r2, [r2, #0]
 8006a8c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006a8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006a92:	3301      	adds	r3, #1
 8006a94:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 8006a98:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006a9c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006aa0:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8006aa4:	7812      	ldrb	r2, [r2, #0]
 8006aa6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006aa8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006aac:	3301      	adds	r3, #1
 8006aae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006ab2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006ab6:	2218      	movs	r2, #24
 8006ab8:	2100      	movs	r1, #0
 8006aba:	4618      	mov	r0, r3
 8006abc:	f000 f83a 	bl	8006b34 <Osal_MemSet>
  rq.ogf = 0x08;
 8006ac0:	2308      	movs	r3, #8
 8006ac2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 8006ac6:	2331      	movs	r3, #49	@ 0x31
 8006ac8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006acc:	f107 0310 	add.w	r3, r7, #16
 8006ad0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006ad4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006ad8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006adc:	f107 030f 	add.w	r3, r7, #15
 8006ae0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006aea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006aee:	2100      	movs	r1, #0
 8006af0:	4618      	mov	r0, r3
 8006af2:	f000 faa9 	bl	8007048 <hci_send_req>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	da01      	bge.n	8006b00 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8006afc:	23ff      	movs	r3, #255	@ 0xff
 8006afe:	e004      	b.n	8006b0a <hci_le_set_default_phy+0xf0>
  return status;
 8006b00:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006b04:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006b08:	781b      	ldrb	r3, [r3, #0]
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd90      	pop	{r4, r7, pc}

08006b14 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	68b9      	ldr	r1, [r7, #8]
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f002 f91f 	bl	8008d68 <memcpy>
 8006b2a:	4603      	mov	r3, r0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	68b9      	ldr	r1, [r7, #8]
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f002 f8e3 	bl	8008d10 <memset>
 8006b4a:	4603      	mov	r3, r0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3710      	adds	r7, #16
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8006b54:	b480      	push	{r7}
 8006b56:	af00      	add	r7, sp, #0
  return;
 8006b58:	bf00      	nop
}
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8006b62:	b480      	push	{r7}
 8006b64:	af00      	add	r7, sp, #0
  return;
 8006b66:	bf00      	nop
}
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8006b70:	b480      	push	{r7}
 8006b72:	af00      	add	r7, sp, #0
  return;
 8006b74:	bf00      	nop
}
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr

08006b7e <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8006b7e:	b480      	push	{r7}
 8006b80:	af00      	add	r7, sp, #0
  return;
 8006b82:	bf00      	nop
}
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	af00      	add	r7, sp, #0
  return;
 8006b90:	bf00      	nop
}
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr

08006b9a <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	af00      	add	r7, sp, #0
  return;
 8006b9e:	bf00      	nop
}
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8006ba8:	b480      	push	{r7}
 8006baa:	af00      	add	r7, sp, #0
  return;
 8006bac:	bf00      	nop
}
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	af00      	add	r7, sp, #0
  return;
 8006bba:	bf00      	nop
}
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	af00      	add	r7, sp, #0
  return;
 8006bc8:	bf00      	nop
}
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr

08006bd2 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8006bd2:	b480      	push	{r7}
 8006bd4:	af00      	add	r7, sp, #0
  return;
 8006bd6:	bf00      	nop
}
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8006be0:	b480      	push	{r7}
 8006be2:	af00      	add	r7, sp, #0
  return;
 8006be4:	bf00      	nop
}
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr

08006bee <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8006bee:	b480      	push	{r7}
 8006bf0:	af00      	add	r7, sp, #0
  return;
 8006bf2:	bf00      	nop
}
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	af00      	add	r7, sp, #0
  return;
 8006c00:	bf00      	nop
}
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr

08006c0a <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	af00      	add	r7, sp, #0
  return;
 8006c0e:	bf00      	nop
}
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8006c18:	b480      	push	{r7}
 8006c1a:	af00      	add	r7, sp, #0
  return;
 8006c1c:	bf00      	nop
}
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr

08006c26 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8006c26:	b480      	push	{r7}
 8006c28:	af00      	add	r7, sp, #0
  return;
 8006c2a:	bf00      	nop
}
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8006c34:	b480      	push	{r7}
 8006c36:	af00      	add	r7, sp, #0
  return;
 8006c38:	bf00      	nop
}
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
	...

08006c44 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8006c48:	4b04      	ldr	r3, [pc, #16]	@ (8006c5c <SVCCTL_Init+0x18>)
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8006c4e:	4b04      	ldr	r3, [pc, #16]	@ (8006c60 <SVCCTL_Init+0x1c>)
 8006c50:	2200      	movs	r2, #0
 8006c52:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8006c54:	f000 f806 	bl	8006c64 <SVCCTL_SvcInit>

  return;
 8006c58:	bf00      	nop
}
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	20000030 	.word	0x20000030
 8006c60:	20000050 	.word	0x20000050

08006c64 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	af00      	add	r7, sp, #0
  BAS_Init();
 8006c68:	f7ff ff74 	bl	8006b54 <BAS_Init>

  BLS_Init();
 8006c6c:	f7ff ff79 	bl	8006b62 <BLS_Init>

  CRS_STM_Init();
 8006c70:	f7ff ff7e 	bl	8006b70 <CRS_STM_Init>

  DIS_Init();
 8006c74:	f7ff ff83 	bl	8006b7e <DIS_Init>

  EDS_STM_Init();
 8006c78:	f7ff ff88 	bl	8006b8c <EDS_STM_Init>

  HIDS_Init();
 8006c7c:	f7ff ff8d 	bl	8006b9a <HIDS_Init>

  HRS_Init();
 8006c80:	f7ff ff92 	bl	8006ba8 <HRS_Init>

  HTS_Init();
 8006c84:	f7ff ff97 	bl	8006bb6 <HTS_Init>

  IAS_Init();
 8006c88:	f7ff ff9c 	bl	8006bc4 <IAS_Init>

  LLS_Init();
 8006c8c:	f7ff ffa1 	bl	8006bd2 <LLS_Init>

  TPS_Init();
 8006c90:	f7ff ffa6 	bl	8006be0 <TPS_Init>

  MOTENV_STM_Init();
 8006c94:	f7ff ffab 	bl	8006bee <MOTENV_STM_Init>

  P2PS_STM_Init();
 8006c98:	f7ff ffb0 	bl	8006bfc <P2PS_STM_Init>

  ZDD_STM_Init();
 8006c9c:	f7ff ffb5 	bl	8006c0a <ZDD_STM_Init>

  OTAS_STM_Init();
 8006ca0:	f7ff ffba 	bl	8006c18 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8006ca4:	f7ff ffc6 	bl	8006c34 <BVOPUS_STM_Init>

  MESH_Init();
 8006ca8:	f7ff ffbd 	bl	8006c26 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8006cac:	f001 faf4 	bl	8008298 <SVCCTL_InitCustomSvc>
  
  return;
 8006cb0:	bf00      	nop
}
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8006cbc:	4b09      	ldr	r3, [pc, #36]	@ (8006ce4 <SVCCTL_RegisterSvcHandler+0x30>)
 8006cbe:	7f1b      	ldrb	r3, [r3, #28]
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	4a08      	ldr	r2, [pc, #32]	@ (8006ce4 <SVCCTL_RegisterSvcHandler+0x30>)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8006cca:	4b06      	ldr	r3, [pc, #24]	@ (8006ce4 <SVCCTL_RegisterSvcHandler+0x30>)
 8006ccc:	7f1b      	ldrb	r3, [r3, #28]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	b2da      	uxtb	r2, r3
 8006cd2:	4b04      	ldr	r3, [pc, #16]	@ (8006ce4 <SVCCTL_RegisterSvcHandler+0x30>)
 8006cd4:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8006cd6:	bf00      	nop
}
 8006cd8:	370c      	adds	r7, #12
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	20000030 	.word	0x20000030

08006ce8 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b086      	sub	sp, #24
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	2bff      	cmp	r3, #255	@ 0xff
 8006d00:	d125      	bne.n	8006d4e <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	3302      	adds	r3, #2
 8006d06:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	881b      	ldrh	r3, [r3, #0]
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006d12:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006d16:	d118      	bne.n	8006d4a <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8006d18:	2300      	movs	r3, #0
 8006d1a:	757b      	strb	r3, [r7, #21]
 8006d1c:	e00d      	b.n	8006d3a <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8006d1e:	7d7b      	ldrb	r3, [r7, #21]
 8006d20:	4a1a      	ldr	r2, [pc, #104]	@ (8006d8c <SVCCTL_UserEvtRx+0xa4>)
 8006d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	4798      	blx	r3
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8006d2e:	7dfb      	ldrb	r3, [r7, #23]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d108      	bne.n	8006d46 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8006d34:	7d7b      	ldrb	r3, [r7, #21]
 8006d36:	3301      	adds	r3, #1
 8006d38:	757b      	strb	r3, [r7, #21]
 8006d3a:	4b14      	ldr	r3, [pc, #80]	@ (8006d8c <SVCCTL_UserEvtRx+0xa4>)
 8006d3c:	7f1b      	ldrb	r3, [r3, #28]
 8006d3e:	7d7a      	ldrb	r2, [r7, #21]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d3ec      	bcc.n	8006d1e <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8006d44:	e002      	b.n	8006d4c <SVCCTL_UserEvtRx+0x64>
              break;
 8006d46:	bf00      	nop
          break;
 8006d48:	e000      	b.n	8006d4c <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8006d4a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8006d4c:	e000      	b.n	8006d50 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8006d4e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8006d50:	7dfb      	ldrb	r3, [r7, #23]
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d00f      	beq.n	8006d76 <SVCCTL_UserEvtRx+0x8e>
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	dc10      	bgt.n	8006d7c <SVCCTL_UserEvtRx+0x94>
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d002      	beq.n	8006d64 <SVCCTL_UserEvtRx+0x7c>
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d006      	beq.n	8006d70 <SVCCTL_UserEvtRx+0x88>
 8006d62:	e00b      	b.n	8006d7c <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 ff85 	bl	8007c74 <SVCCTL_App_Notification>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	75bb      	strb	r3, [r7, #22]
      break;
 8006d6e:	e008      	b.n	8006d82 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8006d70:	2301      	movs	r3, #1
 8006d72:	75bb      	strb	r3, [r7, #22]
      break;
 8006d74:	e005      	b.n	8006d82 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8006d76:	2300      	movs	r3, #0
 8006d78:	75bb      	strb	r3, [r7, #22]
      break;
 8006d7a:	e002      	b.n	8006d82 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	75bb      	strb	r3, [r7, #22]
      break;
 8006d80:	bf00      	nop
  }

  return (return_status);
 8006d82:	7dbb      	ldrb	r3, [r7, #22]
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3718      	adds	r7, #24
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	20000030 	.word	0x20000030

08006d90 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b088      	sub	sp, #32
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8006d98:	f107 030c 	add.w	r3, r7, #12
 8006d9c:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	212e      	movs	r1, #46	@ 0x2e
 8006da8:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8006dac:	f000 fae8 	bl	8007380 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	330b      	adds	r3, #11
 8006db4:	78db      	ldrb	r3, [r3, #3]
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3720      	adds	r7, #32
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b088      	sub	sp, #32
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8006dc6:	f107 030c 	add.w	r3, r7, #12
 8006dca:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	210f      	movs	r1, #15
 8006dd6:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8006dda:	f000 fad1 	bl	8007380 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	330b      	adds	r3, #11
 8006de2:	78db      	ldrb	r3, [r3, #3]
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3720      	adds	r7, #32
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b088      	sub	sp, #32
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8006df4:	f107 030c 	add.w	r3, r7, #12
 8006df8:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	2110      	movs	r1, #16
 8006e00:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8006e04:	f000 fabc 	bl	8007380 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	330b      	adds	r3, #11
 8006e0c:	78db      	ldrb	r3, [r3, #3]
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3720      	adds	r7, #32
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
	...

08006e18 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b08b      	sub	sp, #44	@ 0x2c
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8006e20:	2300      	movs	r3, #0
 8006e22:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8006e24:	2300      	movs	r3, #0
 8006e26:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8006e30:	2300      	movs	r3, #0
 8006e32:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8006e34:	2300      	movs	r3, #0
 8006e36:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8006e40:	4b4a      	ldr	r3, [pc, #296]	@ (8006f6c <SHCI_GetWirelessFwInfo+0x154>)
 8006e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e44:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006e48:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8006e52:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a44      	ldr	r2, [pc, #272]	@ (8006f70 <SHCI_GetWirelessFwInfo+0x158>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d10f      	bne.n	8006e84 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	695b      	ldr	r3, [r3, #20]
 8006e68:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	699b      	ldr	r3, [r3, #24]
 8006e6e:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	69db      	ldr	r3, [r3, #28]
 8006e74:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	617b      	str	r3, [r7, #20]
 8006e82:	e01a      	b.n	8006eba <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8006e8c:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8006e90:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	695b      	ldr	r3, [r3, #20]
 8006ea0:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8006eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ebc:	0e1b      	lsrs	r3, r3, #24
 8006ebe:	b2da      	uxtb	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec6:	0c1b      	lsrs	r3, r3, #16
 8006ec8:	b2da      	uxtb	r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8006ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed0:	0a1b      	lsrs	r3, r3, #8
 8006ed2:	b2da      	uxtb	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eda:	091b      	lsrs	r3, r3, #4
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	f003 030f 	and.w	r3, r3, #15
 8006ee2:	b2da      	uxtb	r2, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8006ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	f003 030f 	and.w	r3, r3, #15
 8006ef0:	b2da      	uxtb	r2, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8006ef6:	6a3b      	ldr	r3, [r7, #32]
 8006ef8:	0e1b      	lsrs	r3, r3, #24
 8006efa:	b2da      	uxtb	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8006f00:	6a3b      	ldr	r3, [r7, #32]
 8006f02:	0c1b      	lsrs	r3, r3, #16
 8006f04:	b2da      	uxtb	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8006f0a:	6a3b      	ldr	r3, [r7, #32]
 8006f0c:	0a1b      	lsrs	r3, r3, #8
 8006f0e:	b2da      	uxtb	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8006f14:	6a3b      	ldr	r3, [r7, #32]
 8006f16:	b2da      	uxtb	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	b2da      	uxtb	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	0e1b      	lsrs	r3, r3, #24
 8006f28:	b2da      	uxtb	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	0c1b      	lsrs	r3, r3, #16
 8006f32:	b2da      	uxtb	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	0a1b      	lsrs	r3, r3, #8
 8006f3c:	b2da      	uxtb	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	0e1b      	lsrs	r3, r3, #24
 8006f46:	b2da      	uxtb	r2, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	0c1b      	lsrs	r3, r3, #16
 8006f50:	b2da      	uxtb	r2, r3
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	b2da      	uxtb	r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	372c      	adds	r7, #44	@ 0x2c
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr
 8006f6c:	58004000 	.word	0x58004000
 8006f70:	a94656b9 	.word	0xa94656b9

08006f74 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	4a08      	ldr	r2, [pc, #32]	@ (8006fa4 <hci_init+0x30>)
 8006f84:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8006f86:	4a08      	ldr	r2, [pc, #32]	@ (8006fa8 <hci_init+0x34>)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8006f8c:	4806      	ldr	r0, [pc, #24]	@ (8006fa8 <hci_init+0x34>)
 8006f8e:	f000 f979 	bl	8007284 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4618      	mov	r0, r3
 8006f98:	f000 f8da 	bl	8007150 <TlInit>

  return;
 8006f9c:	bf00      	nop
}
 8006f9e:	3708      	adds	r7, #8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	20000580 	.word	0x20000580
 8006fa8:	20000558 	.word	0x20000558

08006fac <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8006fb2:	4822      	ldr	r0, [pc, #136]	@ (800703c <hci_user_evt_proc+0x90>)
 8006fb4:	f000 fd32 	bl	8007a1c <LST_is_empty>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d12b      	bne.n	8007016 <hci_user_evt_proc+0x6a>
 8006fbe:	4b20      	ldr	r3, [pc, #128]	@ (8007040 <hci_user_evt_proc+0x94>)
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d027      	beq.n	8007016 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8006fc6:	f107 030c 	add.w	r3, r7, #12
 8006fca:	4619      	mov	r1, r3
 8006fcc:	481b      	ldr	r0, [pc, #108]	@ (800703c <hci_user_evt_proc+0x90>)
 8006fce:	f000 fdb4 	bl	8007b3a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8006fd2:	4b1c      	ldr	r3, [pc, #112]	@ (8007044 <hci_user_evt_proc+0x98>)
 8006fd4:	69db      	ldr	r3, [r3, #28]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00c      	beq.n	8006ff4 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8006fe2:	4b18      	ldr	r3, [pc, #96]	@ (8007044 <hci_user_evt_proc+0x98>)
 8006fe4:	69db      	ldr	r3, [r3, #28]
 8006fe6:	1d3a      	adds	r2, r7, #4
 8006fe8:	4610      	mov	r0, r2
 8006fea:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8006fec:	793a      	ldrb	r2, [r7, #4]
 8006fee:	4b14      	ldr	r3, [pc, #80]	@ (8007040 <hci_user_evt_proc+0x94>)
 8006ff0:	701a      	strb	r2, [r3, #0]
 8006ff2:	e002      	b.n	8006ffa <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006ff4:	4b12      	ldr	r3, [pc, #72]	@ (8007040 <hci_user_evt_proc+0x94>)
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8006ffa:	4b11      	ldr	r3, [pc, #68]	@ (8007040 <hci_user_evt_proc+0x94>)
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d004      	beq.n	800700c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	4618      	mov	r0, r3
 8007006:	f000 fc0d 	bl	8007824 <TL_MM_EvtDone>
 800700a:	e004      	b.n	8007016 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	4619      	mov	r1, r3
 8007010:	480a      	ldr	r0, [pc, #40]	@ (800703c <hci_user_evt_proc+0x90>)
 8007012:	f000 fd25 	bl	8007a60 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8007016:	4809      	ldr	r0, [pc, #36]	@ (800703c <hci_user_evt_proc+0x90>)
 8007018:	f000 fd00 	bl	8007a1c <LST_is_empty>
 800701c:	4603      	mov	r3, r0
 800701e:	2b00      	cmp	r3, #0
 8007020:	d107      	bne.n	8007032 <hci_user_evt_proc+0x86>
 8007022:	4b07      	ldr	r3, [pc, #28]	@ (8007040 <hci_user_evt_proc+0x94>)
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d003      	beq.n	8007032 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800702a:	4804      	ldr	r0, [pc, #16]	@ (800703c <hci_user_evt_proc+0x90>)
 800702c:	f001 f848 	bl	80080c0 <hci_notify_asynch_evt>
  }


  return;
 8007030:	bf00      	nop
 8007032:	bf00      	nop
}
 8007034:	3710      	adds	r7, #16
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	20000058 	.word	0x20000058
 8007040:	20000064 	.word	0x20000064
 8007044:	20000558 	.word	0x20000558

08007048 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b088      	sub	sp, #32
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	460b      	mov	r3, r1
 8007052:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8007054:	2000      	movs	r0, #0
 8007056:	f000 f8d1 	bl	80071fc <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800705a:	2300      	movs	r3, #0
 800705c:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	885b      	ldrh	r3, [r3, #2]
 8007062:	b21b      	sxth	r3, r3
 8007064:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007068:	b21a      	sxth	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	881b      	ldrh	r3, [r3, #0]
 800706e:	029b      	lsls	r3, r3, #10
 8007070:	b21b      	sxth	r3, r3
 8007072:	4313      	orrs	r3, r2
 8007074:	b21b      	sxth	r3, r3
 8007076:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8007078:	4b33      	ldr	r3, [pc, #204]	@ (8007148 <hci_send_req+0x100>)
 800707a:	2201      	movs	r2, #1
 800707c:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	b2d9      	uxtb	r1, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	689a      	ldr	r2, [r3, #8]
 8007088:	8bbb      	ldrh	r3, [r7, #28]
 800708a:	4618      	mov	r0, r3
 800708c:	f000 f890 	bl	80071b0 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8007090:	e04e      	b.n	8007130 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8007092:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8007096:	f001 f82a 	bl	80080ee <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800709a:	e043      	b.n	8007124 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800709c:	f107 030c 	add.w	r3, r7, #12
 80070a0:	4619      	mov	r1, r3
 80070a2:	482a      	ldr	r0, [pc, #168]	@ (800714c <hci_send_req+0x104>)
 80070a4:	f000 fd49 	bl	8007b3a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	7a5b      	ldrb	r3, [r3, #9]
 80070ac:	2b0f      	cmp	r3, #15
 80070ae:	d114      	bne.n	80070da <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	330b      	adds	r3, #11
 80070b4:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	885b      	ldrh	r3, [r3, #2]
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	8bba      	ldrh	r2, [r7, #28]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d104      	bne.n	80070cc <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	693a      	ldr	r2, [r7, #16]
 80070c8:	7812      	ldrb	r2, [r2, #0]
 80070ca:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	785b      	ldrb	r3, [r3, #1]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d027      	beq.n	8007124 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80070d4:	2301      	movs	r3, #1
 80070d6:	77fb      	strb	r3, [r7, #31]
 80070d8:	e024      	b.n	8007124 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	330b      	adds	r3, #11
 80070de:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	8bba      	ldrh	r2, [r7, #28]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d114      	bne.n	8007118 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	7a9b      	ldrb	r3, [r3, #10]
 80070f2:	3b03      	subs	r3, #3
 80070f4:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	695a      	ldr	r2, [r3, #20]
 80070fa:	7dfb      	ldrb	r3, [r7, #23]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	bfa8      	it	ge
 8007100:	461a      	movge	r2, r3
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6918      	ldr	r0, [r3, #16]
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	1cd9      	adds	r1, r3, #3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	461a      	mov	r2, r3
 8007114:	f001 fe28 	bl	8008d68 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d001      	beq.n	8007124 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8007120:	2301      	movs	r3, #1
 8007122:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8007124:	4809      	ldr	r0, [pc, #36]	@ (800714c <hci_send_req+0x104>)
 8007126:	f000 fc79 	bl	8007a1c <LST_is_empty>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d0b5      	beq.n	800709c <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8007130:	7ffb      	ldrb	r3, [r7, #31]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d0ad      	beq.n	8007092 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8007136:	2001      	movs	r0, #1
 8007138:	f000 f860 	bl	80071fc <NotifyCmdStatus>

  return 0;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	3720      	adds	r7, #32
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	20000584 	.word	0x20000584
 800714c:	20000578 	.word	0x20000578

08007150 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8007158:	480f      	ldr	r0, [pc, #60]	@ (8007198 <TlInit+0x48>)
 800715a:	f000 fc4f 	bl	80079fc <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800715e:	4a0f      	ldr	r2, [pc, #60]	@ (800719c <TlInit+0x4c>)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8007164:	480e      	ldr	r0, [pc, #56]	@ (80071a0 <TlInit+0x50>)
 8007166:	f000 fc49 	bl	80079fc <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800716a:	4b0e      	ldr	r3, [pc, #56]	@ (80071a4 <TlInit+0x54>)
 800716c:	2201      	movs	r2, #1
 800716e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8007170:	4b0d      	ldr	r3, [pc, #52]	@ (80071a8 <TlInit+0x58>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00a      	beq.n	800718e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800717c:	4b0b      	ldr	r3, [pc, #44]	@ (80071ac <TlInit+0x5c>)
 800717e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8007180:	4b09      	ldr	r3, [pc, #36]	@ (80071a8 <TlInit+0x58>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f107 0208 	add.w	r2, r7, #8
 8007188:	4610      	mov	r0, r2
 800718a:	4798      	blx	r3
  }

  return;
 800718c:	bf00      	nop
 800718e:	bf00      	nop
}
 8007190:	3718      	adds	r7, #24
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	20000578 	.word	0x20000578
 800719c:	20000060 	.word	0x20000060
 80071a0:	20000058 	.word	0x20000058
 80071a4:	20000064 	.word	0x20000064
 80071a8:	20000558 	.word	0x20000558
 80071ac:	0800723d 	.word	0x0800723d

080071b0 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	4603      	mov	r3, r0
 80071b8:	603a      	str	r2, [r7, #0]
 80071ba:	80fb      	strh	r3, [r7, #6]
 80071bc:	460b      	mov	r3, r1
 80071be:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80071c0:	4b0c      	ldr	r3, [pc, #48]	@ (80071f4 <SendCmd+0x44>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	88fa      	ldrh	r2, [r7, #6]
 80071c6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80071ca:	4b0a      	ldr	r3, [pc, #40]	@ (80071f4 <SendCmd+0x44>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	797a      	ldrb	r2, [r7, #5]
 80071d0:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80071d2:	4b08      	ldr	r3, [pc, #32]	@ (80071f4 <SendCmd+0x44>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	330c      	adds	r3, #12
 80071d8:	797a      	ldrb	r2, [r7, #5]
 80071da:	6839      	ldr	r1, [r7, #0]
 80071dc:	4618      	mov	r0, r3
 80071de:	f001 fdc3 	bl	8008d68 <memcpy>

  hciContext.io.Send(0,0);
 80071e2:	4b05      	ldr	r3, [pc, #20]	@ (80071f8 <SendCmd+0x48>)
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	2100      	movs	r1, #0
 80071e8:	2000      	movs	r0, #0
 80071ea:	4798      	blx	r3

  return;
 80071ec:	bf00      	nop
}
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	20000060 	.word	0x20000060
 80071f8:	20000558 	.word	0x20000558

080071fc <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	4603      	mov	r3, r0
 8007204:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8007206:	79fb      	ldrb	r3, [r7, #7]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d108      	bne.n	800721e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800720c:	4b0a      	ldr	r3, [pc, #40]	@ (8007238 <NotifyCmdStatus+0x3c>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00d      	beq.n	8007230 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8007214:	4b08      	ldr	r3, [pc, #32]	@ (8007238 <NotifyCmdStatus+0x3c>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2000      	movs	r0, #0
 800721a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800721c:	e008      	b.n	8007230 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800721e:	4b06      	ldr	r3, [pc, #24]	@ (8007238 <NotifyCmdStatus+0x3c>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d004      	beq.n	8007230 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8007226:	4b04      	ldr	r3, [pc, #16]	@ (8007238 <NotifyCmdStatus+0x3c>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2001      	movs	r0, #1
 800722c:	4798      	blx	r3
  return;
 800722e:	bf00      	nop
 8007230:	bf00      	nop
}
 8007232:	3708      	adds	r7, #8
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	20000580 	.word	0x20000580

0800723c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	7a5b      	ldrb	r3, [r3, #9]
 8007248:	2b0f      	cmp	r3, #15
 800724a:	d003      	beq.n	8007254 <TlEvtReceived+0x18>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	7a5b      	ldrb	r3, [r3, #9]
 8007250:	2b0e      	cmp	r3, #14
 8007252:	d107      	bne.n	8007264 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8007254:	6879      	ldr	r1, [r7, #4]
 8007256:	4809      	ldr	r0, [pc, #36]	@ (800727c <TlEvtReceived+0x40>)
 8007258:	f000 fc28 	bl	8007aac <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800725c:	2000      	movs	r0, #0
 800725e:	f000 ff3b 	bl	80080d8 <hci_cmd_resp_release>
 8007262:	e006      	b.n	8007272 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8007264:	6879      	ldr	r1, [r7, #4]
 8007266:	4806      	ldr	r0, [pc, #24]	@ (8007280 <TlEvtReceived+0x44>)
 8007268:	f000 fc20 	bl	8007aac <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800726c:	4804      	ldr	r0, [pc, #16]	@ (8007280 <TlEvtReceived+0x44>)
 800726e:	f000 ff27 	bl	80080c0 <hci_notify_asynch_evt>
  }

  return;
 8007272:	bf00      	nop
}
 8007274:	3708      	adds	r7, #8
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	20000578 	.word	0x20000578
 8007280:	20000058 	.word	0x20000058

08007284 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a05      	ldr	r2, [pc, #20]	@ (80072a4 <hci_register_io_bus+0x20>)
 8007290:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a04      	ldr	r2, [pc, #16]	@ (80072a8 <hci_register_io_bus+0x24>)
 8007296:	611a      	str	r2, [r3, #16]

  return;
 8007298:	bf00      	nop
}
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr
 80072a4:	0800759d 	.word	0x0800759d
 80072a8:	08007605 	.word	0x08007605

080072ac <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	4a08      	ldr	r2, [pc, #32]	@ (80072dc <shci_init+0x30>)
 80072bc:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80072be:	4a08      	ldr	r2, [pc, #32]	@ (80072e0 <shci_init+0x34>)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80072c4:	4806      	ldr	r0, [pc, #24]	@ (80072e0 <shci_init+0x34>)
 80072c6:	f000 f915 	bl	80074f4 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4618      	mov	r0, r3
 80072d0:	f000 f898 	bl	8007404 <TlInit>

  return;
 80072d4:	bf00      	nop
}
 80072d6:	3708      	adds	r7, #8
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	200005a8 	.word	0x200005a8
 80072e0:	20000588 	.word	0x20000588

080072e4 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80072ea:	4822      	ldr	r0, [pc, #136]	@ (8007374 <shci_user_evt_proc+0x90>)
 80072ec:	f000 fb96 	bl	8007a1c <LST_is_empty>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d12b      	bne.n	800734e <shci_user_evt_proc+0x6a>
 80072f6:	4b20      	ldr	r3, [pc, #128]	@ (8007378 <shci_user_evt_proc+0x94>)
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d027      	beq.n	800734e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80072fe:	f107 030c 	add.w	r3, r7, #12
 8007302:	4619      	mov	r1, r3
 8007304:	481b      	ldr	r0, [pc, #108]	@ (8007374 <shci_user_evt_proc+0x90>)
 8007306:	f000 fc18 	bl	8007b3a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800730a:	4b1c      	ldr	r3, [pc, #112]	@ (800737c <shci_user_evt_proc+0x98>)
 800730c:	69db      	ldr	r3, [r3, #28]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00c      	beq.n	800732c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8007316:	2301      	movs	r3, #1
 8007318:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800731a:	4b18      	ldr	r3, [pc, #96]	@ (800737c <shci_user_evt_proc+0x98>)
 800731c:	69db      	ldr	r3, [r3, #28]
 800731e:	1d3a      	adds	r2, r7, #4
 8007320:	4610      	mov	r0, r2
 8007322:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8007324:	793a      	ldrb	r2, [r7, #4]
 8007326:	4b14      	ldr	r3, [pc, #80]	@ (8007378 <shci_user_evt_proc+0x94>)
 8007328:	701a      	strb	r2, [r3, #0]
 800732a:	e002      	b.n	8007332 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800732c:	4b12      	ldr	r3, [pc, #72]	@ (8007378 <shci_user_evt_proc+0x94>)
 800732e:	2201      	movs	r2, #1
 8007330:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8007332:	4b11      	ldr	r3, [pc, #68]	@ (8007378 <shci_user_evt_proc+0x94>)
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d004      	beq.n	8007344 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	4618      	mov	r0, r3
 800733e:	f000 fa71 	bl	8007824 <TL_MM_EvtDone>
 8007342:	e004      	b.n	800734e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	4619      	mov	r1, r3
 8007348:	480a      	ldr	r0, [pc, #40]	@ (8007374 <shci_user_evt_proc+0x90>)
 800734a:	f000 fb89 	bl	8007a60 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800734e:	4809      	ldr	r0, [pc, #36]	@ (8007374 <shci_user_evt_proc+0x90>)
 8007350:	f000 fb64 	bl	8007a1c <LST_is_empty>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d107      	bne.n	800736a <shci_user_evt_proc+0x86>
 800735a:	4b07      	ldr	r3, [pc, #28]	@ (8007378 <shci_user_evt_proc+0x94>)
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d003      	beq.n	800736a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8007362:	4804      	ldr	r0, [pc, #16]	@ (8007374 <shci_user_evt_proc+0x90>)
 8007364:	f7f9 faa5 	bl	80008b2 <shci_notify_asynch_evt>
  }


  return;
 8007368:	bf00      	nop
 800736a:	bf00      	nop
}
 800736c:	3710      	adds	r7, #16
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	20000068 	.word	0x20000068
 8007378:	20000078 	.word	0x20000078
 800737c:	20000588 	.word	0x20000588

08007380 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	60ba      	str	r2, [r7, #8]
 8007388:	607b      	str	r3, [r7, #4]
 800738a:	4603      	mov	r3, r0
 800738c:	81fb      	strh	r3, [r7, #14]
 800738e:	460b      	mov	r3, r1
 8007390:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8007392:	2000      	movs	r0, #0
 8007394:	f000 f868 	bl	8007468 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8007398:	4b17      	ldr	r3, [pc, #92]	@ (80073f8 <shci_send+0x78>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	89fa      	ldrh	r2, [r7, #14]
 800739e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80073a2:	4b15      	ldr	r3, [pc, #84]	@ (80073f8 <shci_send+0x78>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	7b7a      	ldrb	r2, [r7, #13]
 80073a8:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80073aa:	4b13      	ldr	r3, [pc, #76]	@ (80073f8 <shci_send+0x78>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	330c      	adds	r3, #12
 80073b0:	7b7a      	ldrb	r2, [r7, #13]
 80073b2:	68b9      	ldr	r1, [r7, #8]
 80073b4:	4618      	mov	r0, r3
 80073b6:	f001 fcd7 	bl	8008d68 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 80073ba:	4b10      	ldr	r3, [pc, #64]	@ (80073fc <shci_send+0x7c>)
 80073bc:	2201      	movs	r2, #1
 80073be:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 80073c0:	4b0f      	ldr	r3, [pc, #60]	@ (8007400 <shci_send+0x80>)
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	2100      	movs	r1, #0
 80073c6:	2000      	movs	r0, #0
 80073c8:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80073ca:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 80073ce:	f7f9 fa87 	bl	80008e0 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f103 0008 	add.w	r0, r3, #8
 80073d8:	4b07      	ldr	r3, [pc, #28]	@ (80073f8 <shci_send+0x78>)
 80073da:	6819      	ldr	r1, [r3, #0]
 80073dc:	4b06      	ldr	r3, [pc, #24]	@ (80073f8 <shci_send+0x78>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	789b      	ldrb	r3, [r3, #2]
 80073e2:	3303      	adds	r3, #3
 80073e4:	461a      	mov	r2, r3
 80073e6:	f001 fcbf 	bl	8008d68 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80073ea:	2001      	movs	r0, #1
 80073ec:	f000 f83c 	bl	8007468 <Cmd_SetStatus>

  return;
 80073f0:	bf00      	nop
}
 80073f2:	3710      	adds	r7, #16
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}
 80073f8:	20000074 	.word	0x20000074
 80073fc:	200005ac 	.word	0x200005ac
 8007400:	20000588 	.word	0x20000588

08007404 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b086      	sub	sp, #24
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800740c:	4a10      	ldr	r2, [pc, #64]	@ (8007450 <TlInit+0x4c>)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8007412:	4810      	ldr	r0, [pc, #64]	@ (8007454 <TlInit+0x50>)
 8007414:	f000 faf2 	bl	80079fc <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8007418:	2001      	movs	r0, #1
 800741a:	f000 f825 	bl	8007468 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800741e:	4b0e      	ldr	r3, [pc, #56]	@ (8007458 <TlInit+0x54>)
 8007420:	2201      	movs	r2, #1
 8007422:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8007424:	4b0d      	ldr	r3, [pc, #52]	@ (800745c <TlInit+0x58>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d00c      	beq.n	8007446 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8007430:	4b0b      	ldr	r3, [pc, #44]	@ (8007460 <TlInit+0x5c>)
 8007432:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8007434:	4b0b      	ldr	r3, [pc, #44]	@ (8007464 <TlInit+0x60>)
 8007436:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8007438:	4b08      	ldr	r3, [pc, #32]	@ (800745c <TlInit+0x58>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f107 020c 	add.w	r2, r7, #12
 8007440:	4610      	mov	r0, r2
 8007442:	4798      	blx	r3
  }

  return;
 8007444:	bf00      	nop
 8007446:	bf00      	nop
}
 8007448:	3718      	adds	r7, #24
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	20000074 	.word	0x20000074
 8007454:	20000068 	.word	0x20000068
 8007458:	20000078 	.word	0x20000078
 800745c:	20000588 	.word	0x20000588
 8007460:	080074b9 	.word	0x080074b9
 8007464:	080074d1 	.word	0x080074d1

08007468 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	4603      	mov	r3, r0
 8007470:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8007472:	79fb      	ldrb	r3, [r7, #7]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d10b      	bne.n	8007490 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8007478:	4b0d      	ldr	r3, [pc, #52]	@ (80074b0 <Cmd_SetStatus+0x48>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d003      	beq.n	8007488 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8007480:	4b0b      	ldr	r3, [pc, #44]	@ (80074b0 <Cmd_SetStatus+0x48>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2000      	movs	r0, #0
 8007486:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8007488:	4b0a      	ldr	r3, [pc, #40]	@ (80074b4 <Cmd_SetStatus+0x4c>)
 800748a:	2200      	movs	r2, #0
 800748c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800748e:	e00b      	b.n	80074a8 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8007490:	4b08      	ldr	r3, [pc, #32]	@ (80074b4 <Cmd_SetStatus+0x4c>)
 8007492:	2201      	movs	r2, #1
 8007494:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8007496:	4b06      	ldr	r3, [pc, #24]	@ (80074b0 <Cmd_SetStatus+0x48>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d004      	beq.n	80074a8 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800749e:	4b04      	ldr	r3, [pc, #16]	@ (80074b0 <Cmd_SetStatus+0x48>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2001      	movs	r0, #1
 80074a4:	4798      	blx	r3
  return;
 80074a6:	bf00      	nop
 80074a8:	bf00      	nop
}
 80074aa:	3708      	adds	r7, #8
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	200005a8 	.word	0x200005a8
 80074b4:	20000070 	.word	0x20000070

080074b8 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80074c0:	2000      	movs	r0, #0
 80074c2:	f7f9 fa02 	bl	80008ca <shci_cmd_resp_release>

  return;
 80074c6:	bf00      	nop
}
 80074c8:	3708      	adds	r7, #8
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
	...

080074d0 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80074d8:	6879      	ldr	r1, [r7, #4]
 80074da:	4805      	ldr	r0, [pc, #20]	@ (80074f0 <TlUserEvtReceived+0x20>)
 80074dc:	f000 fae6 	bl	8007aac <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80074e0:	4803      	ldr	r0, [pc, #12]	@ (80074f0 <TlUserEvtReceived+0x20>)
 80074e2:	f7f9 f9e6 	bl	80008b2 <shci_notify_asynch_evt>

  return;
 80074e6:	bf00      	nop
}
 80074e8:	3708      	adds	r7, #8
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	20000068 	.word	0x20000068

080074f4 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4a05      	ldr	r2, [pc, #20]	@ (8007514 <shci_register_io_bus+0x20>)
 8007500:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4a04      	ldr	r2, [pc, #16]	@ (8007518 <shci_register_io_bus+0x24>)
 8007506:	611a      	str	r2, [r3, #16]

  return;
 8007508:	bf00      	nop
}
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr
 8007514:	080076b1 	.word	0x080076b1
 8007518:	08007705 	.word	0x08007705

0800751c <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800751c:	b580      	push	{r7, lr}
 800751e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8007520:	f001 f8a8 	bl	8008674 <HW_IPCC_Enable>

  return;
 8007524:	bf00      	nop
}
 8007526:	bd80      	pop	{r7, pc}

08007528 <TL_Init>:


void TL_Init( void )
{
 8007528:	b580      	push	{r7, lr}
 800752a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800752c:	4b10      	ldr	r3, [pc, #64]	@ (8007570 <TL_Init+0x48>)
 800752e:	4a11      	ldr	r2, [pc, #68]	@ (8007574 <TL_Init+0x4c>)
 8007530:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8007532:	4b0f      	ldr	r3, [pc, #60]	@ (8007570 <TL_Init+0x48>)
 8007534:	4a10      	ldr	r2, [pc, #64]	@ (8007578 <TL_Init+0x50>)
 8007536:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8007538:	4b0d      	ldr	r3, [pc, #52]	@ (8007570 <TL_Init+0x48>)
 800753a:	4a10      	ldr	r2, [pc, #64]	@ (800757c <TL_Init+0x54>)
 800753c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800753e:	4b0c      	ldr	r3, [pc, #48]	@ (8007570 <TL_Init+0x48>)
 8007540:	4a0f      	ldr	r2, [pc, #60]	@ (8007580 <TL_Init+0x58>)
 8007542:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8007544:	4b0a      	ldr	r3, [pc, #40]	@ (8007570 <TL_Init+0x48>)
 8007546:	4a0f      	ldr	r2, [pc, #60]	@ (8007584 <TL_Init+0x5c>)
 8007548:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800754a:	4b09      	ldr	r3, [pc, #36]	@ (8007570 <TL_Init+0x48>)
 800754c:	4a0e      	ldr	r2, [pc, #56]	@ (8007588 <TL_Init+0x60>)
 800754e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8007550:	4b07      	ldr	r3, [pc, #28]	@ (8007570 <TL_Init+0x48>)
 8007552:	4a0e      	ldr	r2, [pc, #56]	@ (800758c <TL_Init+0x64>)
 8007554:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8007556:	4b06      	ldr	r3, [pc, #24]	@ (8007570 <TL_Init+0x48>)
 8007558:	4a0d      	ldr	r2, [pc, #52]	@ (8007590 <TL_Init+0x68>)
 800755a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800755c:	4b04      	ldr	r3, [pc, #16]	@ (8007570 <TL_Init+0x48>)
 800755e:	4a0d      	ldr	r2, [pc, #52]	@ (8007594 <TL_Init+0x6c>)
 8007560:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8007562:	4b03      	ldr	r3, [pc, #12]	@ (8007570 <TL_Init+0x48>)
 8007564:	4a0c      	ldr	r2, [pc, #48]	@ (8007598 <TL_Init+0x70>)
 8007566:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8007568:	f001 f898 	bl	800869c <HW_IPCC_Init>

  return;
 800756c:	bf00      	nop
}
 800756e:	bd80      	pop	{r7, pc}
 8007570:	20030000 	.word	0x20030000
 8007574:	20030028 	.word	0x20030028
 8007578:	20030048 	.word	0x20030048
 800757c:	20030058 	.word	0x20030058
 8007580:	20030068 	.word	0x20030068
 8007584:	20030070 	.word	0x20030070
 8007588:	20030078 	.word	0x20030078
 800758c:	20030080 	.word	0x20030080
 8007590:	2003009c 	.word	0x2003009c
 8007594:	200300a0 	.word	0x200300a0
 8007598:	200300ac 	.word	0x200300ac

0800759c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 80075a8:	4811      	ldr	r0, [pc, #68]	@ (80075f0 <TL_BLE_Init+0x54>)
 80075aa:	f000 fa27 	bl	80079fc <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 80075ae:	4b11      	ldr	r3, [pc, #68]	@ (80075f4 <TL_BLE_Init+0x58>)
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	689a      	ldr	r2, [r3, #8]
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	68da      	ldr	r2, [r3, #12]
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	4a0c      	ldr	r2, [pc, #48]	@ (80075f8 <TL_BLE_Init+0x5c>)
 80075c8:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	4a08      	ldr	r2, [pc, #32]	@ (80075f0 <TL_BLE_Init+0x54>)
 80075ce:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 80075d0:	f001 f87a 	bl	80086c8 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a08      	ldr	r2, [pc, #32]	@ (80075fc <TL_BLE_Init+0x60>)
 80075da:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	4a07      	ldr	r2, [pc, #28]	@ (8007600 <TL_BLE_Init+0x64>)
 80075e2:	6013      	str	r3, [r2, #0]

  return 0;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	200300c8 	.word	0x200300c8
 80075f4:	20030000 	.word	0x20030000
 80075f8:	20030a58 	.word	0x20030a58
 80075fc:	200005b8 	.word	0x200005b8
 8007600:	200005bc 	.word	0x200005bc

08007604 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	460b      	mov	r3, r1
 800760e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8007610:	4b09      	ldr	r3, [pc, #36]	@ (8007638 <TL_BLE_SendCmd+0x34>)
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2201      	movs	r2, #1
 8007618:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800761a:	4b07      	ldr	r3, [pc, #28]	@ (8007638 <TL_BLE_SendCmd+0x34>)
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4619      	mov	r1, r3
 8007622:	2001      	movs	r0, #1
 8007624:	f000 f96c 	bl	8007900 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8007628:	f001 f858 	bl	80086dc <HW_IPCC_BLE_SendCmd>

  return 0;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3708      	adds	r7, #8
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	20030000 	.word	0x20030000

0800763c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8007642:	e01c      	b.n	800767e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8007644:	1d3b      	adds	r3, r7, #4
 8007646:	4619      	mov	r1, r3
 8007648:	4812      	ldr	r0, [pc, #72]	@ (8007694 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800764a:	f000 fa76 	bl	8007b3a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	7a5b      	ldrb	r3, [r3, #9]
 8007652:	2b0f      	cmp	r3, #15
 8007654:	d003      	beq.n	800765e <HW_IPCC_BLE_RxEvtNot+0x22>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	7a5b      	ldrb	r3, [r3, #9]
 800765a:	2b0e      	cmp	r3, #14
 800765c:	d105      	bne.n	800766a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	4619      	mov	r1, r3
 8007662:	2002      	movs	r0, #2
 8007664:	f000 f94c 	bl	8007900 <OutputDbgTrace>
 8007668:	e004      	b.n	8007674 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4619      	mov	r1, r3
 800766e:	2003      	movs	r0, #3
 8007670:	f000 f946 	bl	8007900 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8007674:	4b08      	ldr	r3, [pc, #32]	@ (8007698 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	4610      	mov	r0, r2
 800767c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800767e:	4805      	ldr	r0, [pc, #20]	@ (8007694 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8007680:	f000 f9cc 	bl	8007a1c <LST_is_empty>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d0dc      	beq.n	8007644 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800768a:	bf00      	nop
}
 800768c:	3708      	adds	r7, #8
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	200300c8 	.word	0x200300c8
 8007698:	200005b8 	.word	0x200005b8

0800769c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 80076a0:	4b02      	ldr	r3, [pc, #8]	@ (80076ac <HW_IPCC_BLE_AclDataAckNot+0x10>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4798      	blx	r3

  return;
 80076a6:	bf00      	nop
}
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	200005bc 	.word	0x200005bc

080076b0 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 80076bc:	480d      	ldr	r0, [pc, #52]	@ (80076f4 <TL_SYS_Init+0x44>)
 80076be:	f000 f99d 	bl	80079fc <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80076c2:	4b0d      	ldr	r3, [pc, #52]	@ (80076f8 <TL_SYS_Init+0x48>)
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	689a      	ldr	r2, [r3, #8]
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	4a08      	ldr	r2, [pc, #32]	@ (80076f4 <TL_SYS_Init+0x44>)
 80076d4:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80076d6:	f001 f823 	bl	8008720 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a07      	ldr	r2, [pc, #28]	@ (80076fc <TL_SYS_Init+0x4c>)
 80076e0:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	4a06      	ldr	r2, [pc, #24]	@ (8007700 <TL_SYS_Init+0x50>)
 80076e8:	6013      	str	r3, [r2, #0]

  return 0;
 80076ea:	2300      	movs	r3, #0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3710      	adds	r7, #16
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	200300d0 	.word	0x200300d0
 80076f8:	20030000 	.word	0x20030000
 80076fc:	200005c0 	.word	0x200005c0
 8007700:	200005c4 	.word	0x200005c4

08007704 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	460b      	mov	r3, r1
 800770e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8007710:	4b09      	ldr	r3, [pc, #36]	@ (8007738 <TL_SYS_SendCmd+0x34>)
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2210      	movs	r2, #16
 8007718:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800771a:	4b07      	ldr	r3, [pc, #28]	@ (8007738 <TL_SYS_SendCmd+0x34>)
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4619      	mov	r1, r3
 8007722:	2004      	movs	r0, #4
 8007724:	f000 f8ec 	bl	8007900 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8007728:	f001 f804 	bl	8008734 <HW_IPCC_SYS_SendCmd>

  return 0;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3708      	adds	r7, #8
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	20030000 	.word	0x20030000

0800773c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8007740:	4b07      	ldr	r3, [pc, #28]	@ (8007760 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4619      	mov	r1, r3
 8007748:	2005      	movs	r0, #5
 800774a:	f000 f8d9 	bl	8007900 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800774e:	4b05      	ldr	r3, [pc, #20]	@ (8007764 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a03      	ldr	r2, [pc, #12]	@ (8007760 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8007754:	68d2      	ldr	r2, [r2, #12]
 8007756:	6812      	ldr	r2, [r2, #0]
 8007758:	4610      	mov	r0, r2
 800775a:	4798      	blx	r3

  return;
 800775c:	bf00      	nop
}
 800775e:	bd80      	pop	{r7, pc}
 8007760:	20030000 	.word	0x20030000
 8007764:	200005c0 	.word	0x200005c0

08007768 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800776e:	e00e      	b.n	800778e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8007770:	1d3b      	adds	r3, r7, #4
 8007772:	4619      	mov	r1, r3
 8007774:	480b      	ldr	r0, [pc, #44]	@ (80077a4 <HW_IPCC_SYS_EvtNot+0x3c>)
 8007776:	f000 f9e0 	bl	8007b3a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4619      	mov	r1, r3
 800777e:	2006      	movs	r0, #6
 8007780:	f000 f8be 	bl	8007900 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8007784:	4b08      	ldr	r3, [pc, #32]	@ (80077a8 <HW_IPCC_SYS_EvtNot+0x40>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	4610      	mov	r0, r2
 800778c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800778e:	4805      	ldr	r0, [pc, #20]	@ (80077a4 <HW_IPCC_SYS_EvtNot+0x3c>)
 8007790:	f000 f944 	bl	8007a1c <LST_is_empty>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d0ea      	beq.n	8007770 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800779a:	bf00      	nop
}
 800779c:	3708      	adds	r7, #8
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	200300d0 	.word	0x200300d0
 80077a8:	200005c4 	.word	0x200005c4

080077ac <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 80077b4:	4817      	ldr	r0, [pc, #92]	@ (8007814 <TL_MM_Init+0x68>)
 80077b6:	f000 f921 	bl	80079fc <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 80077ba:	4817      	ldr	r0, [pc, #92]	@ (8007818 <TL_MM_Init+0x6c>)
 80077bc:	f000 f91e 	bl	80079fc <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 80077c0:	4b16      	ldr	r3, [pc, #88]	@ (800781c <TL_MM_Init+0x70>)
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	4a16      	ldr	r2, [pc, #88]	@ (8007820 <TL_MM_Init+0x74>)
 80077c6:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80077c8:	4b15      	ldr	r3, [pc, #84]	@ (8007820 <TL_MM_Init+0x74>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	6892      	ldr	r2, [r2, #8]
 80077d0:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80077d2:	4b13      	ldr	r3, [pc, #76]	@ (8007820 <TL_MM_Init+0x74>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	68d2      	ldr	r2, [r2, #12]
 80077da:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80077dc:	4b10      	ldr	r3, [pc, #64]	@ (8007820 <TL_MM_Init+0x74>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a0c      	ldr	r2, [pc, #48]	@ (8007814 <TL_MM_Init+0x68>)
 80077e2:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80077e4:	4b0e      	ldr	r3, [pc, #56]	@ (8007820 <TL_MM_Init+0x74>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	6812      	ldr	r2, [r2, #0]
 80077ec:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80077ee:	4b0c      	ldr	r3, [pc, #48]	@ (8007820 <TL_MM_Init+0x74>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	6852      	ldr	r2, [r2, #4]
 80077f6:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80077f8:	4b09      	ldr	r3, [pc, #36]	@ (8007820 <TL_MM_Init+0x74>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	6912      	ldr	r2, [r2, #16]
 8007800:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8007802:	4b07      	ldr	r3, [pc, #28]	@ (8007820 <TL_MM_Init+0x74>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	6952      	ldr	r2, [r2, #20]
 800780a:	619a      	str	r2, [r3, #24]

  return;
 800780c:	bf00      	nop
}
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	200300b8 	.word	0x200300b8
 8007818:	200005b0 	.word	0x200005b0
 800781c:	20030000 	.word	0x20030000
 8007820:	200005c8 	.word	0x200005c8

08007824 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800782c:	6879      	ldr	r1, [r7, #4]
 800782e:	4807      	ldr	r0, [pc, #28]	@ (800784c <TL_MM_EvtDone+0x28>)
 8007830:	f000 f93c 	bl	8007aac <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8007834:	6879      	ldr	r1, [r7, #4]
 8007836:	2000      	movs	r0, #0
 8007838:	f000 f862 	bl	8007900 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800783c:	4804      	ldr	r0, [pc, #16]	@ (8007850 <TL_MM_EvtDone+0x2c>)
 800783e:	f000 ff9f 	bl	8008780 <HW_IPCC_MM_SendFreeBuf>

  return;
 8007842:	bf00      	nop
}
 8007844:	3708      	adds	r7, #8
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	200005b0 	.word	0x200005b0
 8007850:	08007855 	.word	0x08007855

08007854 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800785a:	e00c      	b.n	8007876 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800785c:	1d3b      	adds	r3, r7, #4
 800785e:	4619      	mov	r1, r3
 8007860:	480a      	ldr	r0, [pc, #40]	@ (800788c <SendFreeBuf+0x38>)
 8007862:	f000 f96a 	bl	8007b3a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8007866:	4b0a      	ldr	r3, [pc, #40]	@ (8007890 <SendFreeBuf+0x3c>)
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	4611      	mov	r1, r2
 8007870:	4618      	mov	r0, r3
 8007872:	f000 f91b 	bl	8007aac <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8007876:	4805      	ldr	r0, [pc, #20]	@ (800788c <SendFreeBuf+0x38>)
 8007878:	f000 f8d0 	bl	8007a1c <LST_is_empty>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d0ec      	beq.n	800785c <SendFreeBuf+0x8>
  }

  return;
 8007882:	bf00      	nop
}
 8007884:	3708      	adds	r7, #8
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	200005b0 	.word	0x200005b0
 8007890:	20030000 	.word	0x20030000

08007894 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8007894:	b580      	push	{r7, lr}
 8007896:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8007898:	4805      	ldr	r0, [pc, #20]	@ (80078b0 <TL_TRACES_Init+0x1c>)
 800789a:	f000 f8af 	bl	80079fc <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800789e:	4b05      	ldr	r3, [pc, #20]	@ (80078b4 <TL_TRACES_Init+0x20>)
 80078a0:	695b      	ldr	r3, [r3, #20]
 80078a2:	4a03      	ldr	r2, [pc, #12]	@ (80078b0 <TL_TRACES_Init+0x1c>)
 80078a4:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80078a6:	f000 ffa1 	bl	80087ec <HW_IPCC_TRACES_Init>

  return;
 80078aa:	bf00      	nop
}
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	200300c0 	.word	0x200300c0
 80078b4:	20030000 	.word	0x20030000

080078b8 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80078be:	e008      	b.n	80078d2 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80078c0:	1d3b      	adds	r3, r7, #4
 80078c2:	4619      	mov	r1, r3
 80078c4:	4808      	ldr	r0, [pc, #32]	@ (80078e8 <HW_IPCC_TRACES_EvtNot+0x30>)
 80078c6:	f000 f938 	bl	8007b3a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4618      	mov	r0, r3
 80078ce:	f000 f80d 	bl	80078ec <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80078d2:	4805      	ldr	r0, [pc, #20]	@ (80078e8 <HW_IPCC_TRACES_EvtNot+0x30>)
 80078d4:	f000 f8a2 	bl	8007a1c <LST_is_empty>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d0f0      	beq.n	80078c0 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80078de:	bf00      	nop
}
 80078e0:	3708      	adds	r7, #8
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	200300c0 	.word	0x200300c0

080078ec <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80078f4:	bf00      	nop
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8007900:	b480      	push	{r7}
 8007902:	b085      	sub	sp, #20
 8007904:	af00      	add	r7, sp, #0
 8007906:	4603      	mov	r3, r0
 8007908:	6039      	str	r1, [r7, #0]
 800790a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800790c:	79fb      	ldrb	r3, [r7, #7]
 800790e:	2b06      	cmp	r3, #6
 8007910:	d845      	bhi.n	800799e <OutputDbgTrace+0x9e>
 8007912:	a201      	add	r2, pc, #4	@ (adr r2, 8007918 <OutputDbgTrace+0x18>)
 8007914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007918:	08007935 	.word	0x08007935
 800791c:	08007959 	.word	0x08007959
 8007920:	0800795f 	.word	0x0800795f
 8007924:	08007973 	.word	0x08007973
 8007928:	0800797f 	.word	0x0800797f
 800792c:	08007985 	.word	0x08007985
 8007930:	08007993 	.word	0x08007993
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	7a5b      	ldrb	r3, [r3, #9]
 800793c:	2bff      	cmp	r3, #255	@ 0xff
 800793e:	d005      	beq.n	800794c <OutputDbgTrace+0x4c>
 8007940:	2bff      	cmp	r3, #255	@ 0xff
 8007942:	dc05      	bgt.n	8007950 <OutputDbgTrace+0x50>
 8007944:	2b0e      	cmp	r3, #14
 8007946:	d005      	beq.n	8007954 <OutputDbgTrace+0x54>
 8007948:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800794a:	e001      	b.n	8007950 <OutputDbgTrace+0x50>
          break;
 800794c:	bf00      	nop
 800794e:	e027      	b.n	80079a0 <OutputDbgTrace+0xa0>
          break;
 8007950:	bf00      	nop
 8007952:	e025      	b.n	80079a0 <OutputDbgTrace+0xa0>
          break;
 8007954:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8007956:	e023      	b.n	80079a0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800795c:	e020      	b.n	80079a0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	7a5b      	ldrb	r3, [r3, #9]
 8007966:	2b0e      	cmp	r3, #14
 8007968:	d001      	beq.n	800796e <OutputDbgTrace+0x6e>
 800796a:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800796c:	e000      	b.n	8007970 <OutputDbgTrace+0x70>
          break;
 800796e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007970:	e016      	b.n	80079a0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	7a5b      	ldrb	r3, [r3, #9]
 800797a:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800797c:	e010      	b.n	80079a0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8007982:	e00d      	b.n	80079a0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	7a5b      	ldrb	r3, [r3, #9]
 800798c:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800798e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007990:	e006      	b.n	80079a0 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	7a5b      	ldrb	r3, [r3, #9]
 800799a:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800799c:	e000      	b.n	80079a0 <OutputDbgTrace+0xa0>

    default:
      break;
 800799e:	bf00      	nop
  }

  return;
 80079a0:	bf00      	nop
}
 80079a2:	3714      	adds	r7, #20
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80079ac:	b480      	push	{r7}
 80079ae:	b085      	sub	sp, #20
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	4603      	mov	r3, r0
 80079b4:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80079b6:	4b0f      	ldr	r3, [pc, #60]	@ (80079f4 <OTP_Read+0x48>)
 80079b8:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80079ba:	e002      	b.n	80079c2 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	3b08      	subs	r3, #8
 80079c0:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	3307      	adds	r3, #7
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	79fa      	ldrb	r2, [r7, #7]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d003      	beq.n	80079d6 <OTP_Read+0x2a>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	4a09      	ldr	r2, [pc, #36]	@ (80079f8 <OTP_Read+0x4c>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d1f2      	bne.n	80079bc <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	3307      	adds	r3, #7
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	79fa      	ldrb	r2, [r7, #7]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d001      	beq.n	80079e6 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80079e2:	2300      	movs	r3, #0
 80079e4:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 80079e6:	68fb      	ldr	r3, [r7, #12]
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3714      	adds	r7, #20
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr
 80079f4:	1fff73f8 	.word	0x1fff73f8
 80079f8:	1fff7000 	.word	0x1fff7000

080079fc <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	605a      	str	r2, [r3, #4]
}
 8007a10:	bf00      	nop
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b087      	sub	sp, #28
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a24:	f3ef 8310 	mrs	r3, PRIMASK
 8007a28:	60fb      	str	r3, [r7, #12]
  return(result);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007a2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007a2e:	b672      	cpsid	i
}
 8007a30:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d102      	bne.n	8007a42 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	75fb      	strb	r3, [r7, #23]
 8007a40:	e001      	b.n	8007a46 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8007a42:	2300      	movs	r3, #0
 8007a44:	75fb      	strb	r3, [r7, #23]
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	f383 8810 	msr	PRIMASK, r3
}
 8007a50:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8007a52:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	371c      	adds	r7, #28
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b087      	sub	sp, #28
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a6a:	f3ef 8310 	mrs	r3, PRIMASK
 8007a6e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007a70:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007a72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007a74:	b672      	cpsid	i
}
 8007a76:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	683a      	ldr	r2, [r7, #0]
 8007a8a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	683a      	ldr	r2, [r7, #0]
 8007a92:	605a      	str	r2, [r3, #4]
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	f383 8810 	msr	PRIMASK, r3
}
 8007a9e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007aa0:	bf00      	nop
 8007aa2:	371c      	adds	r7, #28
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b087      	sub	sp, #28
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ab6:	f3ef 8310 	mrs	r3, PRIMASK
 8007aba:	60fb      	str	r3, [r7, #12]
  return(result);
 8007abc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007abe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007ac0:	b672      	cpsid	i
}
 8007ac2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	685a      	ldr	r2, [r3, #4]
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	683a      	ldr	r2, [r7, #0]
 8007ad6:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	683a      	ldr	r2, [r7, #0]
 8007ade:	601a      	str	r2, [r3, #0]
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	f383 8810 	msr	PRIMASK, r3
}
 8007aea:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007aec:	bf00      	nop
 8007aee:	371c      	adds	r7, #28
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr

08007af8 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b087      	sub	sp, #28
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b00:	f3ef 8310 	mrs	r3, PRIMASK
 8007b04:	60fb      	str	r3, [r7, #12]
  return(result);
 8007b06:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007b08:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007b0a:	b672      	cpsid	i
}
 8007b0c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	6812      	ldr	r2, [r2, #0]
 8007b16:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	6852      	ldr	r2, [r2, #4]
 8007b20:	605a      	str	r2, [r3, #4]
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	f383 8810 	msr	PRIMASK, r3
}
 8007b2c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007b2e:	bf00      	nop
 8007b30:	371c      	adds	r7, #28
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr

08007b3a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b086      	sub	sp, #24
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
 8007b42:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b44:	f3ef 8310 	mrs	r3, PRIMASK
 8007b48:	60fb      	str	r3, [r7, #12]
  return(result);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007b4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007b4e:	b672      	cpsid	i
}
 8007b50:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7ff ffca 	bl	8007af8 <LST_remove_node>
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	f383 8810 	msr	PRIMASK, r3
}
 8007b6e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007b70:	bf00      	nop
 8007b72:	3718      	adds	r7, #24
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8007b7c:	4b03      	ldr	r3, [pc, #12]	@ (8007b8c <LL_FLASH_GetUDN+0x14>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	1fff7580 	.word	0x1fff7580

08007b90 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8007b90:	b480      	push	{r7}
 8007b92:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8007b94:	4b03      	ldr	r3, [pc, #12]	@ (8007ba4 <LL_FLASH_GetDeviceID+0x14>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	b2db      	uxtb	r3, r3
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr
 8007ba4:	1fff7584 	.word	0x1fff7584

08007ba8 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8007bac:	4b03      	ldr	r3, [pc, #12]	@ (8007bbc <LL_FLASH_GetSTCompanyID+0x14>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	0a1b      	lsrs	r3, r3, #8
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr
 8007bbc:	1fff7584 	.word	0x1fff7584

08007bc0 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8007bc0:	b5b0      	push	{r4, r5, r7, lr}
 8007bc2:	b090      	sub	sp, #64	@ 0x40
 8007bc4:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007bc6:	2392      	movs	r3, #146	@ 0x92
 8007bc8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8007bcc:	4b25      	ldr	r3, [pc, #148]	@ (8007c64 <APP_BLE_Init+0xa4>)
 8007bce:	1d3c      	adds	r4, r7, #4
 8007bd0:	461d      	mov	r5, r3
 8007bd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007bd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007bd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007bdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bde:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007be2:	c403      	stmia	r4!, {r0, r1}
 8007be4:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8007be6:	f000 f913 	bl	8007e10 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8007bea:	2101      	movs	r1, #1
 8007bec:	2002      	movs	r0, #2
 8007bee:	f000 fe25 	bl	800883c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8007bf2:	4a1d      	ldr	r2, [pc, #116]	@ (8007c68 <APP_BLE_Init+0xa8>)
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	2002      	movs	r0, #2
 8007bf8:	f000 ff4c 	bl	8008a94 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8007bfc:	1d3b      	adds	r3, r7, #4
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7ff f8c6 	bl	8006d90 <SHCI_C2_BLE_Init>
 8007c04:	4603      	mov	r3, r0
 8007c06:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8007c0a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d001      	beq.n	8007c16 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8007c12:	f7f9 fe76 	bl	8001902 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8007c16:	f000 f911 	bl	8007e3c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8007c1a:	f7ff f813 	bl	8006c44 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007c1e:	4b13      	ldr	r3, [pc, #76]	@ (8007c6c <APP_BLE_Init+0xac>)
 8007c20:	2200      	movs	r2, #0
 8007c22:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8007c26:	4b11      	ldr	r3, [pc, #68]	@ (8007c6c <APP_BLE_Init+0xac>)
 8007c28:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007c2c:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8007c2e:	4a10      	ldr	r2, [pc, #64]	@ (8007c70 <APP_BLE_Init+0xb0>)
 8007c30:	2100      	movs	r1, #0
 8007c32:	2001      	movs	r0, #1
 8007c34:	f000 ff2e 	bl	8008a94 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8007c38:	2006      	movs	r0, #6
 8007c3a:	f7fe fe76 	bl	800692a <aci_hal_set_radio_activity_mask>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8007c44:	f000 fab7 	bl	80081b6 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8007c48:	4b08      	ldr	r3, [pc, #32]	@ (8007c6c <APP_BLE_Init+0xac>)
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8007c4e:	4b07      	ldr	r3, [pc, #28]	@ (8007c6c <APP_BLE_Init+0xac>)
 8007c50:	2200      	movs	r2, #0
 8007c52:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8007c54:	2001      	movs	r0, #1
 8007c56:	f000 f9a5 	bl	8007fa4 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8007c5a:	bf00      	nop
}
 8007c5c:	3740      	adds	r7, #64	@ 0x40
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bdb0      	pop	{r4, r5, r7, pc}
 8007c62:	bf00      	nop
 8007c64:	08008de4 	.word	0x08008de4
 8007c68:	08006fad 	.word	0x08006fad
 8007c6c:	200005d4 	.word	0x200005d4
 8007c70:	0800808d 	.word	0x0800808d

08007c74 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b08a      	sub	sp, #40	@ 0x28
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8007c7c:	2392      	movs	r3, #146	@ 0x92
 8007c7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	3301      	adds	r3, #1
 8007c86:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8007c88:	6a3b      	ldr	r3, [r7, #32]
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	2bff      	cmp	r3, #255	@ 0xff
 8007c8e:	d053      	beq.n	8007d38 <SVCCTL_App_Notification+0xc4>
 8007c90:	2bff      	cmp	r3, #255	@ 0xff
 8007c92:	f300 80af 	bgt.w	8007df4 <SVCCTL_App_Notification+0x180>
 8007c96:	2b05      	cmp	r3, #5
 8007c98:	d002      	beq.n	8007ca0 <SVCCTL_App_Notification+0x2c>
 8007c9a:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c9c:	d020      	beq.n	8007ce0 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8007c9e:	e0a9      	b.n	8007df4 <SVCCTL_App_Notification+0x180>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8007ca0:	6a3b      	ldr	r3, [r7, #32]
 8007ca2:	3302      	adds	r3, #2
 8007ca4:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	4b55      	ldr	r3, [pc, #340]	@ (8007e04 <SVCCTL_App_Notification+0x190>)
 8007cb0:	8adb      	ldrh	r3, [r3, #22]
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d106      	bne.n	8007cc4 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8007cb6:	4b53      	ldr	r3, [pc, #332]	@ (8007e04 <SVCCTL_App_Notification+0x190>)
 8007cb8:	2200      	movs	r2, #0
 8007cba:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007cbc:	4b51      	ldr	r3, [pc, #324]	@ (8007e04 <SVCCTL_App_Notification+0x190>)
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8007cc4:	2001      	movs	r0, #1
 8007cc6:	f000 f96d 	bl	8007fa4 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8007cca:	4b4f      	ldr	r3, [pc, #316]	@ (8007e08 <SVCCTL_App_Notification+0x194>)
 8007ccc:	2201      	movs	r2, #1
 8007cce:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8007cd0:	4b4c      	ldr	r3, [pc, #304]	@ (8007e04 <SVCCTL_App_Notification+0x190>)
 8007cd2:	8ada      	ldrh	r2, [r3, #22]
 8007cd4:	4b4c      	ldr	r3, [pc, #304]	@ (8007e08 <SVCCTL_App_Notification+0x194>)
 8007cd6:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8007cd8:	484b      	ldr	r0, [pc, #300]	@ (8007e08 <SVCCTL_App_Notification+0x194>)
 8007cda:	f000 fa58 	bl	800818e <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8007cde:	e08c      	b.n	8007dfa <SVCCTL_App_Notification+0x186>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8007ce0:	6a3b      	ldr	r3, [r7, #32]
 8007ce2:	3302      	adds	r3, #2
 8007ce4:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d001      	beq.n	8007cf2 <SVCCTL_App_Notification+0x7e>
 8007cee:	2b03      	cmp	r3, #3
          break;
 8007cf0:	e021      	b.n	8007d36 <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8007cf8:	4b42      	ldr	r3, [pc, #264]	@ (8007e04 <SVCCTL_App_Notification+0x190>)
 8007cfa:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007cfe:	2b04      	cmp	r3, #4
 8007d00:	d104      	bne.n	8007d0c <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8007d02:	4b40      	ldr	r3, [pc, #256]	@ (8007e04 <SVCCTL_App_Notification+0x190>)
 8007d04:	2206      	movs	r2, #6
 8007d06:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8007d0a:	e003      	b.n	8007d14 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8007d0c:	4b3d      	ldr	r3, [pc, #244]	@ (8007e04 <SVCCTL_App_Notification+0x190>)
 8007d0e:	2205      	movs	r2, #5
 8007d10:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007d1a:	b29a      	uxth	r2, r3
 8007d1c:	4b39      	ldr	r3, [pc, #228]	@ (8007e04 <SVCCTL_App_Notification+0x190>)
 8007d1e:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8007d20:	4b39      	ldr	r3, [pc, #228]	@ (8007e08 <SVCCTL_App_Notification+0x194>)
 8007d22:	2200      	movs	r2, #0
 8007d24:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8007d26:	4b37      	ldr	r3, [pc, #220]	@ (8007e04 <SVCCTL_App_Notification+0x190>)
 8007d28:	8ada      	ldrh	r2, [r3, #22]
 8007d2a:	4b37      	ldr	r3, [pc, #220]	@ (8007e08 <SVCCTL_App_Notification+0x194>)
 8007d2c:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8007d2e:	4836      	ldr	r0, [pc, #216]	@ (8007e08 <SVCCTL_App_Notification+0x194>)
 8007d30:	f000 fa2d 	bl	800818e <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8007d34:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8007d36:	e060      	b.n	8007dfa <SVCCTL_App_Notification+0x186>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8007d38:	6a3b      	ldr	r3, [r7, #32]
 8007d3a:	3302      	adds	r3, #2
 8007d3c:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	881b      	ldrh	r3, [r3, #0]
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d047      	beq.n	8007ddc <SVCCTL_App_Notification+0x168>
 8007d4c:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8007d50:	4293      	cmp	r3, r2
 8007d52:	dc51      	bgt.n	8007df8 <SVCCTL_App_Notification+0x184>
 8007d54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d58:	d046      	beq.n	8007de8 <SVCCTL_App_Notification+0x174>
 8007d5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d5e:	dc4b      	bgt.n	8007df8 <SVCCTL_App_Notification+0x184>
 8007d60:	2b04      	cmp	r3, #4
 8007d62:	d043      	beq.n	8007dec <SVCCTL_App_Notification+0x178>
 8007d64:	2b04      	cmp	r3, #4
 8007d66:	db47      	blt.n	8007df8 <SVCCTL_App_Notification+0x184>
 8007d68:	f240 420a 	movw	r2, #1034	@ 0x40a
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	dc43      	bgt.n	8007df8 <SVCCTL_App_Notification+0x184>
 8007d70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d74:	dd40      	ble.n	8007df8 <SVCCTL_App_Notification+0x184>
 8007d76:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8007d7a:	2b09      	cmp	r3, #9
 8007d7c:	d83c      	bhi.n	8007df8 <SVCCTL_App_Notification+0x184>
 8007d7e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d84 <SVCCTL_App_Notification+0x110>)
 8007d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d84:	08007dd5 	.word	0x08007dd5
 8007d88:	08007dad 	.word	0x08007dad
 8007d8c:	08007df9 	.word	0x08007df9
 8007d90:	08007df9 	.word	0x08007df9
 8007d94:	08007df9 	.word	0x08007df9
 8007d98:	08007df9 	.word	0x08007df9
 8007d9c:	08007df1 	.word	0x08007df1
 8007da0:	08007df9 	.word	0x08007df9
 8007da4:	08007dc1 	.word	0x08007dc1
 8007da8:	08007df1 	.word	0x08007df1
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8007dac:	4b15      	ldr	r3, [pc, #84]	@ (8007e04 <SVCCTL_App_Notification+0x190>)
 8007dae:	8adb      	ldrh	r3, [r3, #22]
 8007db0:	4916      	ldr	r1, [pc, #88]	@ (8007e0c <SVCCTL_App_Notification+0x198>)
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7fd ffbb 	bl	8005d2e <aci_gap_pass_key_resp>
 8007db8:	4603      	mov	r3, r0
 8007dba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 8007dbe:	e018      	b.n	8007df2 <SVCCTL_App_Notification+0x17e>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8007dc0:	4b10      	ldr	r3, [pc, #64]	@ (8007e04 <SVCCTL_App_Notification+0x190>)
 8007dc2:	8adb      	ldrh	r3, [r3, #22]
 8007dc4:	2101      	movs	r1, #1
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7fe f95b 	bl	8006082 <aci_gap_numeric_comparison_value_confirm_yesno>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 8007dd2:	e00e      	b.n	8007df2 <SVCCTL_App_Notification+0x17e>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	3302      	adds	r3, #2
 8007dd8:	61bb      	str	r3, [r7, #24]
          break;
 8007dda:	e00a      	b.n	8007df2 <SVCCTL_App_Notification+0x17e>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8007ddc:	4b09      	ldr	r3, [pc, #36]	@ (8007e04 <SVCCTL_App_Notification+0x190>)
 8007dde:	8adb      	ldrh	r3, [r3, #22]
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7fe fc61 	bl	80066a8 <aci_gatt_confirm_indication>
        break;
 8007de6:	e004      	b.n	8007df2 <SVCCTL_App_Notification+0x17e>
          break;
 8007de8:	bf00      	nop
 8007dea:	e005      	b.n	8007df8 <SVCCTL_App_Notification+0x184>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8007dec:	bf00      	nop
 8007dee:	e003      	b.n	8007df8 <SVCCTL_App_Notification+0x184>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8007df0:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007df2:	e001      	b.n	8007df8 <SVCCTL_App_Notification+0x184>
      break;
 8007df4:	bf00      	nop
 8007df6:	e000      	b.n	8007dfa <SVCCTL_App_Notification+0x186>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007df8:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8007dfa:	2301      	movs	r3, #1
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3728      	adds	r7, #40	@ 0x28
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	200005d4 	.word	0x200005d4
 8007e08:	20000658 	.word	0x20000658
 8007e0c:	0001b207 	.word	0x0001b207

08007e10 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8007e16:	4b06      	ldr	r3, [pc, #24]	@ (8007e30 <Ble_Tl_Init+0x20>)
 8007e18:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8007e1a:	4b06      	ldr	r3, [pc, #24]	@ (8007e34 <Ble_Tl_Init+0x24>)
 8007e1c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8007e1e:	463b      	mov	r3, r7
 8007e20:	4619      	mov	r1, r3
 8007e22:	4805      	ldr	r0, [pc, #20]	@ (8007e38 <Ble_Tl_Init+0x28>)
 8007e24:	f7ff f8a6 	bl	8006f74 <hci_init>

  return;
 8007e28:	bf00      	nop
}
 8007e2a:	3708      	adds	r7, #8
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	200300d8 	.word	0x200300d8
 8007e34:	0800813d 	.word	0x0800813d
 8007e38:	08008105 	.word	0x08008105

08007e3c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8007e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e3e:	b08d      	sub	sp, #52	@ 0x34
 8007e40:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8007e42:	2300      	movs	r3, #0
 8007e44:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007e46:	2392      	movs	r3, #146	@ 0x92
 8007e48:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8007e4a:	f7fe fdc2 	bl	80069d2 <hci_reset>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8007e52:	f000 f8d7 	bl	8008004 <BleGetBdAddress>
 8007e56:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8007e58:	693a      	ldr	r2, [r7, #16]
 8007e5a:	2106      	movs	r1, #6
 8007e5c:	2000      	movs	r0, #0
 8007e5e:	f7fe fc78 	bl	8006752 <aci_hal_write_config_data>
 8007e62:	4603      	mov	r3, r0
 8007e64:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8007e66:	4a4a      	ldr	r2, [pc, #296]	@ (8007f90 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8007e68:	2110      	movs	r1, #16
 8007e6a:	2018      	movs	r0, #24
 8007e6c:	f7fe fc71 	bl	8006752 <aci_hal_write_config_data>
 8007e70:	4603      	mov	r3, r0
 8007e72:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8007e74:	4a47      	ldr	r2, [pc, #284]	@ (8007f94 <Ble_Hci_Gap_Gatt_Init+0x158>)
 8007e76:	2110      	movs	r1, #16
 8007e78:	2008      	movs	r0, #8
 8007e7a:	f7fe fc6a 	bl	8006752 <aci_hal_write_config_data>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8007e82:	2118      	movs	r1, #24
 8007e84:	2001      	movs	r0, #1
 8007e86:	f7fe fce9 	bl	800685c <aci_hal_set_tx_power_level>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8007e8e:	f7fe f95f 	bl	8006150 <aci_gatt_init>
 8007e92:	4603      	mov	r3, r0
 8007e94:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8007e96:	2300      	movs	r3, #0
 8007e98:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8007e9a:	7bfb      	ldrb	r3, [r7, #15]
 8007e9c:	f043 0301 	orr.w	r3, r3, #1
 8007ea0:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8007ea2:	7bfb      	ldrb	r3, [r7, #15]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d01f      	beq.n	8007ee8 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8007ea8:	4b3b      	ldr	r3, [pc, #236]	@ (8007f98 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8007eaa:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8007eac:	1dba      	adds	r2, r7, #6
 8007eae:	7bf8      	ldrb	r0, [r7, #15]
 8007eb0:	1cbb      	adds	r3, r7, #2
 8007eb2:	9301      	str	r3, [sp, #4]
 8007eb4:	1d3b      	adds	r3, r7, #4
 8007eb6:	9300      	str	r3, [sp, #0]
 8007eb8:	4613      	mov	r3, r2
 8007eba:	2204      	movs	r2, #4
 8007ebc:	2100      	movs	r1, #0
 8007ebe:	f7fd ff9d 	bl	8005dfc <aci_gap_init>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8007ec6:	88fc      	ldrh	r4, [r7, #6]
 8007ec8:	88bd      	ldrh	r5, [r7, #4]
 8007eca:	68b8      	ldr	r0, [r7, #8]
 8007ecc:	f7f8 f956 	bl	800017c <strlen>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	b2da      	uxtb	r2, r3
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	9300      	str	r3, [sp, #0]
 8007ed8:	4613      	mov	r3, r2
 8007eda:	2200      	movs	r2, #0
 8007edc:	4629      	mov	r1, r5
 8007ede:	4620      	mov	r0, r4
 8007ee0:	f7fe fb39 	bl	8006556 <aci_gatt_update_char_value>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8007ee8:	88f8      	ldrh	r0, [r7, #6]
 8007eea:	8879      	ldrh	r1, [r7, #2]
 8007eec:	463b      	mov	r3, r7
 8007eee:	9300      	str	r3, [sp, #0]
 8007ef0:	2302      	movs	r3, #2
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f7fe fb2f 	bl	8006556 <aci_gatt_update_char_value>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8007efc:	2202      	movs	r2, #2
 8007efe:	2102      	movs	r1, #2
 8007f00:	2000      	movs	r0, #0
 8007f02:	f7fe fd8a 	bl	8006a1a <hci_le_set_default_phy>
 8007f06:	4603      	mov	r3, r0
 8007f08:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8007f0a:	4b24      	ldr	r3, [pc, #144]	@ (8007f9c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8007f10:	4b22      	ldr	r3, [pc, #136]	@ (8007f9c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	4618      	mov	r0, r3
 8007f16:	f7fd fdf2 	bl	8005afe <aci_gap_set_io_capability>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8007f1e:	4b1f      	ldr	r3, [pc, #124]	@ (8007f9c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007f20:	2201      	movs	r2, #1
 8007f22:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8007f24:	4b1d      	ldr	r3, [pc, #116]	@ (8007f9c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007f26:	2208      	movs	r2, #8
 8007f28:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8007f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8007f9c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007f2c:	2210      	movs	r2, #16
 8007f2e:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8007f30:	4b1a      	ldr	r3, [pc, #104]	@ (8007f9c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007f32:	2200      	movs	r2, #0
 8007f34:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8007f36:	4b19      	ldr	r3, [pc, #100]	@ (8007f9c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007f38:	4a19      	ldr	r2, [pc, #100]	@ (8007fa0 <Ble_Hci_Gap_Gatt_Init+0x164>)
 8007f3a:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8007f3c:	4b17      	ldr	r3, [pc, #92]	@ (8007f9c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007f3e:	2200      	movs	r2, #0
 8007f40:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8007f42:	4b16      	ldr	r3, [pc, #88]	@ (8007f9c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007f44:	789c      	ldrb	r4, [r3, #2]
 8007f46:	4b15      	ldr	r3, [pc, #84]	@ (8007f9c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007f48:	785d      	ldrb	r5, [r3, #1]
 8007f4a:	4b14      	ldr	r3, [pc, #80]	@ (8007f9c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007f4c:	791b      	ldrb	r3, [r3, #4]
 8007f4e:	4a13      	ldr	r2, [pc, #76]	@ (8007f9c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007f50:	7952      	ldrb	r2, [r2, #5]
 8007f52:	4912      	ldr	r1, [pc, #72]	@ (8007f9c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007f54:	78c9      	ldrb	r1, [r1, #3]
 8007f56:	4811      	ldr	r0, [pc, #68]	@ (8007f9c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007f58:	6880      	ldr	r0, [r0, #8]
 8007f5a:	2600      	movs	r6, #0
 8007f5c:	9604      	str	r6, [sp, #16]
 8007f5e:	9003      	str	r0, [sp, #12]
 8007f60:	9102      	str	r1, [sp, #8]
 8007f62:	9201      	str	r2, [sp, #4]
 8007f64:	9300      	str	r3, [sp, #0]
 8007f66:	2300      	movs	r3, #0
 8007f68:	2201      	movs	r2, #1
 8007f6a:	4629      	mov	r1, r5
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	f7fd fe1a 	bl	8005ba6 <aci_gap_set_authentication_requirement>
 8007f72:	4603      	mov	r3, r0
 8007f74:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8007f76:	4b09      	ldr	r3, [pc, #36]	@ (8007f9c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007f78:	789b      	ldrb	r3, [r3, #2]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d003      	beq.n	8007f86 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8007f7e:	f7fe f85c 	bl	800603a <aci_gap_configure_filter_accept_list>
 8007f82:	4603      	mov	r3, r0
 8007f84:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8007f86:	bf00      	nop
 8007f88:	371c      	adds	r7, #28
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	08009028 	.word	0x08009028
 8007f94:	08009038 	.word	0x08009038
 8007f98:	08008e20 	.word	0x08008e20
 8007f9c:	200005d4 	.word	0x200005d4
 8007fa0:	0001b207 	.word	0x0001b207

08007fa4 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b08c      	sub	sp, #48	@ 0x30
 8007fa8:	af08      	add	r7, sp, #32
 8007faa:	4603      	mov	r3, r0
 8007fac:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007fae:	2392      	movs	r3, #146	@ 0x92
 8007fb0:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8007fb2:	4a12      	ldr	r2, [pc, #72]	@ (8007ffc <Adv_Request+0x58>)
 8007fb4:	79fb      	ldrb	r3, [r7, #7]
 8007fb6:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8007fba:	2300      	movs	r3, #0
 8007fbc:	9306      	str	r3, [sp, #24]
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	9305      	str	r3, [sp, #20]
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	9304      	str	r3, [sp, #16]
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	9303      	str	r3, [sp, #12]
 8007fca:	2300      	movs	r3, #0
 8007fcc:	9302      	str	r3, [sp, #8]
 8007fce:	2300      	movs	r3, #0
 8007fd0:	9301      	str	r3, [sp, #4]
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	9300      	str	r3, [sp, #0]
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	22a0      	movs	r2, #160	@ 0xa0
 8007fda:	2180      	movs	r1, #128	@ 0x80
 8007fdc:	2002      	movs	r0, #2
 8007fde:	f7fd fc94 	bl	800590a <aci_gap_set_discoverable>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8007fe6:	4906      	ldr	r1, [pc, #24]	@ (8008000 <Adv_Request+0x5c>)
 8007fe8:	2012      	movs	r0, #18
 8007fea:	f7fd ffb4 	bl	8005f56 <aci_gap_update_adv_data>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8007ff2:	bf00      	nop
}
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	200005d4 	.word	0x200005d4
 8008000:	20000014 	.word	0x20000014

08008004 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b086      	sub	sp, #24
 8008008:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800800a:	f7ff fdb5 	bl	8007b78 <LL_FLASH_GetUDN>
 800800e:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008016:	d023      	beq.n	8008060 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8008018:	f7ff fdc6 	bl	8007ba8 <LL_FLASH_GetSTCompanyID>
 800801c:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800801e:	f7ff fdb7 	bl	8007b90 <LL_FLASH_GetDeviceID>
 8008022:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	b2da      	uxtb	r2, r3
 8008028:	4b16      	ldr	r3, [pc, #88]	@ (8008084 <BleGetBdAddress+0x80>)
 800802a:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	0a1b      	lsrs	r3, r3, #8
 8008030:	b2da      	uxtb	r2, r3
 8008032:	4b14      	ldr	r3, [pc, #80]	@ (8008084 <BleGetBdAddress+0x80>)
 8008034:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	b2da      	uxtb	r2, r3
 800803a:	4b12      	ldr	r3, [pc, #72]	@ (8008084 <BleGetBdAddress+0x80>)
 800803c:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	b2da      	uxtb	r2, r3
 8008042:	4b10      	ldr	r3, [pc, #64]	@ (8008084 <BleGetBdAddress+0x80>)
 8008044:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	0a1b      	lsrs	r3, r3, #8
 800804a:	b2da      	uxtb	r2, r3
 800804c:	4b0d      	ldr	r3, [pc, #52]	@ (8008084 <BleGetBdAddress+0x80>)
 800804e:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	0c1b      	lsrs	r3, r3, #16
 8008054:	b2da      	uxtb	r2, r3
 8008056:	4b0b      	ldr	r3, [pc, #44]	@ (8008084 <BleGetBdAddress+0x80>)
 8008058:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800805a:	4b0a      	ldr	r3, [pc, #40]	@ (8008084 <BleGetBdAddress+0x80>)
 800805c:	617b      	str	r3, [r7, #20]
 800805e:	e00b      	b.n	8008078 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8008060:	2000      	movs	r0, #0
 8008062:	f7ff fca3 	bl	80079ac <OTP_Read>
 8008066:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d002      	beq.n	8008074 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	617b      	str	r3, [r7, #20]
 8008072:	e001      	b.n	8008078 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8008074:	4b04      	ldr	r3, [pc, #16]	@ (8008088 <BleGetBdAddress+0x84>)
 8008076:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8008078:	697b      	ldr	r3, [r7, #20]
}
 800807a:	4618      	mov	r0, r3
 800807c:	3718      	adds	r7, #24
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	200005cc 	.word	0x200005cc
 8008088:	08009020 	.word	0x08009020

0800808c <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b082      	sub	sp, #8
 8008090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8008092:	4b0a      	ldr	r3, [pc, #40]	@ (80080bc <Adv_Cancel+0x30>)
 8008094:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008098:	2b05      	cmp	r3, #5
 800809a:	d00a      	beq.n	80080b2 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800809c:	2392      	movs	r3, #146	@ 0x92
 800809e:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 80080a0:	f7fd fc0f 	bl	80058c2 <aci_gap_set_non_discoverable>
 80080a4:	4603      	mov	r3, r0
 80080a6:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80080a8:	4b04      	ldr	r3, [pc, #16]	@ (80080bc <Adv_Cancel+0x30>)
 80080aa:	2200      	movs	r2, #0
 80080ac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 80080b0:	bf00      	nop
 80080b2:	bf00      	nop
}
 80080b4:	3708      	adds	r7, #8
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	200005d4 	.word	0x200005d4

080080c0 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80080c8:	2100      	movs	r1, #0
 80080ca:	2002      	movs	r0, #2
 80080cc:	f000 fd04 	bl	8008ad8 <UTIL_SEQ_SetTask>

  return;
 80080d0:	bf00      	nop
}
 80080d2:	3708      	adds	r7, #8
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80080e0:	2001      	movs	r0, #1
 80080e2:	f000 fd65 	bl	8008bb0 <UTIL_SEQ_SetEvt>

  return;
 80080e6:	bf00      	nop
}
 80080e8:	3708      	adds	r7, #8
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b082      	sub	sp, #8
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80080f6:	2001      	movs	r0, #1
 80080f8:	f000 fd7a 	bl	8008bf0 <UTIL_SEQ_WaitEvt>

  return;
 80080fc:	bf00      	nop
}
 80080fe:	3708      	adds	r7, #8
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	3308      	adds	r3, #8
 8008116:	4618      	mov	r0, r3
 8008118:	f7fe fde6 	bl	8006ce8 <SVCCTL_UserEvtRx>
 800811c:	4603      	mov	r3, r0
 800811e:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8008120:	7afb      	ldrb	r3, [r7, #11]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d003      	beq.n	800812e <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2201      	movs	r2, #1
 800812a:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800812c:	e003      	b.n	8008136 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	701a      	strb	r2, [r3, #0]
  return;
 8008134:	bf00      	nop
}
 8008136:	3710      	adds	r7, #16
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	4603      	mov	r3, r0
 8008144:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8008146:	79fb      	ldrb	r3, [r7, #7]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d002      	beq.n	8008152 <BLE_StatusNot+0x16>
 800814c:	2b01      	cmp	r3, #1
 800814e:	d006      	beq.n	800815e <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8008150:	e00b      	b.n	800816a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8008152:	2303      	movs	r3, #3
 8008154:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	f000 fcea 	bl	8008b30 <UTIL_SEQ_PauseTask>
      break;
 800815c:	e005      	b.n	800816a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800815e:	2303      	movs	r3, #3
 8008160:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f000 fd04 	bl	8008b70 <UTIL_SEQ_ResumeTask>
      break;
 8008168:	bf00      	nop
  }

  return;
 800816a:	bf00      	nop
}
 800816c:	3710      	adds	r7, #16
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8008172:	b480      	push	{r7}
 8008174:	b083      	sub	sp, #12
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	2b00      	cmp	r3, #0

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8008180:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8008182:	bf00      	nop
}
 8008184:	370c      	adds	r7, #12
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr

0800818e <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800818e:	b480      	push	{r7}
 8008190:	b083      	sub	sp, #12
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d002      	beq.n	80081a4 <Custom_APP_Notification+0x16>
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d002      	beq.n	80081a8 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 80081a2:	e002      	b.n	80081aa <Custom_APP_Notification+0x1c>
      break;
 80081a4:	bf00      	nop
 80081a6:	e000      	b.n	80081aa <Custom_APP_Notification+0x1c>
      break;
 80081a8:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 80081aa:	bf00      	nop
}
 80081ac:	370c      	adds	r7, #12
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr

080081b6 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 80081b6:	b480      	push	{r7}
 80081b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 80081ba:	bf00      	nop
}
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b08c      	sub	sp, #48	@ 0x30
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 80081cc:	2300      	movs	r3, #0
 80081ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	3301      	adds	r3, #1
 80081d6:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 80081d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	2bff      	cmp	r3, #255	@ 0xff
 80081de:	d154      	bne.n	800828a <Custom_STM_Event_Handler+0xc6>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 80081e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081e2:	3302      	adds	r3, #2
 80081e4:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 80081e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e8:	881b      	ldrh	r3, [r3, #0]
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 80081f0:	2b1a      	cmp	r3, #26
 80081f2:	d848      	bhi.n	8008286 <Custom_STM_Event_Handler+0xc2>
 80081f4:	a201      	add	r2, pc, #4	@ (adr r2, 80081fc <Custom_STM_Event_Handler+0x38>)
 80081f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081fa:	bf00      	nop
 80081fc:	08008287 	.word	0x08008287
 8008200:	08008287 	.word	0x08008287
 8008204:	08008287 	.word	0x08008287
 8008208:	08008287 	.word	0x08008287
 800820c:	08008287 	.word	0x08008287
 8008210:	08008287 	.word	0x08008287
 8008214:	08008287 	.word	0x08008287
 8008218:	08008287 	.word	0x08008287
 800821c:	08008287 	.word	0x08008287
 8008220:	08008287 	.word	0x08008287
 8008224:	08008287 	.word	0x08008287
 8008228:	08008287 	.word	0x08008287
 800822c:	08008287 	.word	0x08008287
 8008230:	08008287 	.word	0x08008287
 8008234:	08008287 	.word	0x08008287
 8008238:	08008287 	.word	0x08008287
 800823c:	08008287 	.word	0x08008287
 8008240:	08008287 	.word	0x08008287
 8008244:	08008287 	.word	0x08008287
 8008248:	08008287 	.word	0x08008287
 800824c:	08008287 	.word	0x08008287
 8008250:	08008287 	.word	0x08008287
 8008254:	08008287 	.word	0x08008287
 8008258:	08008287 	.word	0x08008287
 800825c:	08008287 	.word	0x08008287
 8008260:	08008287 	.word	0x08008287
 8008264:	08008269 	.word	0x08008269
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 8008268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800826a:	3302      	adds	r3, #2
 800826c:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 800826e:	2300      	movs	r3, #0
 8008270:	733b      	strb	r3, [r7, #12]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 8008272:	6a3b      	ldr	r3, [r7, #32]
 8008274:	881b      	ldrh	r3, [r3, #0]
 8008276:	b29b      	uxth	r3, r3
 8008278:	83bb      	strh	r3, [r7, #28]
          Custom_STM_App_Notification(&Notification);
 800827a:	f107 030c 	add.w	r3, r7, #12
 800827e:	4618      	mov	r0, r3
 8008280:	f7ff ff77 	bl	8008172 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 8008284:	e000      	b.n	8008288 <Custom_STM_Event_Handler+0xc4>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8008286:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008288:	e000      	b.n	800828c <Custom_STM_Event_Handler+0xc8>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800828a:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800828c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 8008290:	4618      	mov	r0, r3
 8008292:	3730      	adds	r7, #48	@ 0x30
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b08c      	sub	sp, #48	@ 0x30
 800829c:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800829e:	2392      	movs	r3, #146	@ 0x92
 80082a0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 80082a2:	4835      	ldr	r0, [pc, #212]	@ (8008378 <SVCCTL_InitCustomSvc+0xe0>)
 80082a4:	f7fe fd06 	bl	8006cb4 <SVCCTL_RegisterSvcHandler>
   *                              = 3
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 3;
 80082a8:	2303      	movs	r3, #3
 80082aa:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_A_UUID(uuid.Char_UUID_128);
 80082ac:	238f      	movs	r3, #143	@ 0x8f
 80082ae:	713b      	strb	r3, [r7, #4]
 80082b0:	23e5      	movs	r3, #229	@ 0xe5
 80082b2:	717b      	strb	r3, [r7, #5]
 80082b4:	23b3      	movs	r3, #179	@ 0xb3
 80082b6:	71bb      	strb	r3, [r7, #6]
 80082b8:	23d5      	movs	r3, #213	@ 0xd5
 80082ba:	71fb      	strb	r3, [r7, #7]
 80082bc:	232e      	movs	r3, #46	@ 0x2e
 80082be:	723b      	strb	r3, [r7, #8]
 80082c0:	237f      	movs	r3, #127	@ 0x7f
 80082c2:	727b      	strb	r3, [r7, #9]
 80082c4:	234a      	movs	r3, #74	@ 0x4a
 80082c6:	72bb      	strb	r3, [r7, #10]
 80082c8:	2398      	movs	r3, #152	@ 0x98
 80082ca:	72fb      	strb	r3, [r7, #11]
 80082cc:	232a      	movs	r3, #42	@ 0x2a
 80082ce:	733b      	strb	r3, [r7, #12]
 80082d0:	2348      	movs	r3, #72	@ 0x48
 80082d2:	737b      	strb	r3, [r7, #13]
 80082d4:	237a      	movs	r3, #122	@ 0x7a
 80082d6:	73bb      	strb	r3, [r7, #14]
 80082d8:	23cc      	movs	r3, #204	@ 0xcc
 80082da:	73fb      	strb	r3, [r7, #15]
 80082dc:	2300      	movs	r3, #0
 80082de:	743b      	strb	r3, [r7, #16]
 80082e0:	2300      	movs	r3, #0
 80082e2:	747b      	strb	r3, [r7, #17]
 80082e4:	2300      	movs	r3, #0
 80082e6:	74bb      	strb	r3, [r7, #18]
 80082e8:	2300      	movs	r3, #0
 80082ea:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 80082ec:	7dbb      	ldrb	r3, [r7, #22]
 80082ee:	1d39      	adds	r1, r7, #4
 80082f0:	4a22      	ldr	r2, [pc, #136]	@ (800837c <SVCCTL_InitCustomSvc+0xe4>)
 80082f2:	9200      	str	r2, [sp, #0]
 80082f4:	2201      	movs	r2, #1
 80082f6:	2002      	movs	r0, #2
 80082f8:	f7fd ff4f 	bl	800619a <aci_gatt_add_service>
 80082fc:	4603      	mov	r3, r0
 80082fe:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  c
   */
  COPY_C_UUID(uuid.Char_UUID_128);
 8008300:	2319      	movs	r3, #25
 8008302:	713b      	strb	r3, [r7, #4]
 8008304:	23ed      	movs	r3, #237	@ 0xed
 8008306:	717b      	strb	r3, [r7, #5]
 8008308:	2382      	movs	r3, #130	@ 0x82
 800830a:	71bb      	strb	r3, [r7, #6]
 800830c:	23ae      	movs	r3, #174	@ 0xae
 800830e:	71fb      	strb	r3, [r7, #7]
 8008310:	23ed      	movs	r3, #237	@ 0xed
 8008312:	723b      	strb	r3, [r7, #8]
 8008314:	2321      	movs	r3, #33	@ 0x21
 8008316:	727b      	strb	r3, [r7, #9]
 8008318:	234c      	movs	r3, #76	@ 0x4c
 800831a:	72bb      	strb	r3, [r7, #10]
 800831c:	239d      	movs	r3, #157	@ 0x9d
 800831e:	72fb      	strb	r3, [r7, #11]
 8008320:	2341      	movs	r3, #65	@ 0x41
 8008322:	733b      	strb	r3, [r7, #12]
 8008324:	2345      	movs	r3, #69	@ 0x45
 8008326:	737b      	strb	r3, [r7, #13]
 8008328:	2322      	movs	r3, #34	@ 0x22
 800832a:	73bb      	strb	r3, [r7, #14]
 800832c:	238e      	movs	r3, #142	@ 0x8e
 800832e:	73fb      	strb	r3, [r7, #15]
 8008330:	2300      	movs	r3, #0
 8008332:	743b      	strb	r3, [r7, #16]
 8008334:	2300      	movs	r3, #0
 8008336:	747b      	strb	r3, [r7, #17]
 8008338:	2300      	movs	r3, #0
 800833a:	74bb      	strb	r3, [r7, #18]
 800833c:	2300      	movs	r3, #0
 800833e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomBHdle,
 8008340:	4b0e      	ldr	r3, [pc, #56]	@ (800837c <SVCCTL_InitCustomSvc+0xe4>)
 8008342:	8818      	ldrh	r0, [r3, #0]
 8008344:	4b0e      	ldr	r3, [pc, #56]	@ (8008380 <SVCCTL_InitCustomSvc+0xe8>)
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	4619      	mov	r1, r3
 800834a:	1d3a      	adds	r2, r7, #4
 800834c:	4b0d      	ldr	r3, [pc, #52]	@ (8008384 <SVCCTL_InitCustomSvc+0xec>)
 800834e:	9305      	str	r3, [sp, #20]
 8008350:	2300      	movs	r3, #0
 8008352:	9304      	str	r3, [sp, #16]
 8008354:	2310      	movs	r3, #16
 8008356:	9303      	str	r3, [sp, #12]
 8008358:	2307      	movs	r3, #7
 800835a:	9302      	str	r3, [sp, #8]
 800835c:	2300      	movs	r3, #0
 800835e:	9301      	str	r3, [sp, #4]
 8008360:	2300      	movs	r3, #0
 8008362:	9300      	str	r3, [sp, #0]
 8008364:	460b      	mov	r3, r1
 8008366:	2102      	movs	r1, #2
 8008368:	f7fd ffed 	bl	8006346 <aci_gatt_add_char>
 800836c:	4603      	mov	r3, r0
 800836e:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8008370:	bf00      	nop
}
 8008372:	3718      	adds	r7, #24
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}
 8008378:	080081c5 	.word	0x080081c5
 800837c:	2000065c 	.word	0x2000065c
 8008380:	20000026 	.word	0x20000026
 8008384:	2000065e 	.word	0x2000065e

08008388 <LL_PWR_EnableBootC2>:
{
 8008388:	b480      	push	{r7}
 800838a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800838c:	4b05      	ldr	r3, [pc, #20]	@ (80083a4 <LL_PWR_EnableBootC2+0x1c>)
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	4a04      	ldr	r2, [pc, #16]	@ (80083a4 <LL_PWR_EnableBootC2+0x1c>)
 8008392:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008396:	60d3      	str	r3, [r2, #12]
}
 8008398:	bf00      	nop
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop
 80083a4:	58000400 	.word	0x58000400

080083a8 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80083b0:	4b06      	ldr	r3, [pc, #24]	@ (80083cc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80083b2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80083b6:	4905      	ldr	r1, [pc, #20]	@ (80083cc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4313      	orrs	r3, r2
 80083bc:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 80083c0:	bf00      	nop
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr
 80083cc:	58000800 	.word	0x58000800

080083d0 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80083d8:	4b05      	ldr	r3, [pc, #20]	@ (80083f0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80083da:	6a1a      	ldr	r2, [r3, #32]
 80083dc:	4904      	ldr	r1, [pc, #16]	@ (80083f0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	620b      	str	r3, [r1, #32]
}
 80083e4:	bf00      	nop
 80083e6:	370c      	adds	r7, #12
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr
 80083f0:	58000800 	.word	0x58000800

080083f4 <LL_AHB3_GRP1_EnableClock>:
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80083fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008400:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008402:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4313      	orrs	r3, r2
 800840a:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800840c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008410:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4013      	ands	r3, r2
 8008416:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008418:	68fb      	ldr	r3, [r7, #12]
}
 800841a:	bf00      	nop
 800841c:	3714      	adds	r7, #20
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr

08008426 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8008426:	b480      	push	{r7}
 8008428:	b085      	sub	sp, #20
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800842e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008432:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8008436:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4313      	orrs	r3, r2
 800843e:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8008442:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008446:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4013      	ands	r3, r2
 800844e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008450:	68fb      	ldr	r3, [r7, #12]
}
 8008452:	bf00      	nop
 8008454:	3714      	adds	r7, #20
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr

0800845e <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800845e:	b480      	push	{r7}
 8008460:	b083      	sub	sp, #12
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	601a      	str	r2, [r3, #0]
}
 8008472:	bf00      	nop
 8008474:	370c      	adds	r7, #12
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr

0800847e <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800847e:	b480      	push	{r7}
 8008480:	b083      	sub	sp, #12
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f043 0201 	orr.w	r2, r3, #1
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	601a      	str	r2, [r3, #0]
}
 8008492:	bf00      	nop
 8008494:	370c      	adds	r7, #12
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr

0800849e <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800849e:	b480      	push	{r7}
 80084a0:	b083      	sub	sp, #12
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
 80084a6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	685a      	ldr	r2, [r3, #4]
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	041b      	lsls	r3, r3, #16
 80084b0:	43db      	mvns	r3, r3
 80084b2:	401a      	ands	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	605a      	str	r2, [r3, #4]
}
 80084b8:	bf00      	nop
 80084ba:	370c      	adds	r7, #12
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr

080084c4 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	685a      	ldr	r2, [r3, #4]
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	041b      	lsls	r3, r3, #16
 80084d6:	431a      	orrs	r2, r3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	605a      	str	r2, [r3, #4]
}
 80084dc:	bf00      	nop
 80084de:	370c      	adds	r7, #12
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr

080084e8 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	685a      	ldr	r2, [r3, #4]
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	43db      	mvns	r3, r3
 80084fa:	401a      	ands	r2, r3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	605a      	str	r2, [r3, #4]
}
 8008500:	bf00      	nop
 8008502:	370c      	adds	r7, #12
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	683a      	ldr	r2, [r7, #0]
 800851a:	609a      	str	r2, [r3, #8]
}
 800851c:	bf00      	nop
 800851e:	370c      	adds	r7, #12
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	041a      	lsls	r2, r3, #16
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	609a      	str	r2, [r3, #8]
}
 800853a:	bf00      	nop
 800853c:	370c      	adds	r7, #12
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr

08008546 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8008546:	b480      	push	{r7}
 8008548:	b083      	sub	sp, #12
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
 800854e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	68da      	ldr	r2, [r3, #12]
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	4013      	ands	r3, r2
 8008558:	683a      	ldr	r2, [r7, #0]
 800855a:	429a      	cmp	r2, r3
 800855c:	d101      	bne.n	8008562 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800855e:	2301      	movs	r3, #1
 8008560:	e000      	b.n	8008564 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8008562:	2300      	movs	r3, #0
}
 8008564:	4618      	mov	r0, r3
 8008566:	370c      	adds	r7, #12
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	69da      	ldr	r2, [r3, #28]
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	4013      	ands	r3, r2
 8008582:	683a      	ldr	r2, [r7, #0]
 8008584:	429a      	cmp	r2, r3
 8008586:	d101      	bne.n	800858c <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8008588:	2301      	movs	r3, #1
 800858a:	e000      	b.n	800858e <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	370c      	adds	r7, #12
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr
	...

0800859c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800859c:	b580      	push	{r7, lr}
 800859e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80085a0:	2102      	movs	r1, #2
 80085a2:	4818      	ldr	r0, [pc, #96]	@ (8008604 <HW_IPCC_Rx_Handler+0x68>)
 80085a4:	f7ff ffe4 	bl	8008570 <LL_C2_IPCC_IsActiveFlag_CHx>
 80085a8:	4603      	mov	r3, r0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d008      	beq.n	80085c0 <HW_IPCC_Rx_Handler+0x24>
 80085ae:	4b15      	ldr	r3, [pc, #84]	@ (8008604 <HW_IPCC_Rx_Handler+0x68>)
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	f003 0302 	and.w	r3, r3, #2
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d102      	bne.n	80085c0 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 80085ba:	f000 f8d5 	bl	8008768 <HW_IPCC_SYS_EvtHandler>
 80085be:	e01e      	b.n	80085fe <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80085c0:	2101      	movs	r1, #1
 80085c2:	4810      	ldr	r0, [pc, #64]	@ (8008604 <HW_IPCC_Rx_Handler+0x68>)
 80085c4:	f7ff ffd4 	bl	8008570 <LL_C2_IPCC_IsActiveFlag_CHx>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d008      	beq.n	80085e0 <HW_IPCC_Rx_Handler+0x44>
 80085ce:	4b0d      	ldr	r3, [pc, #52]	@ (8008604 <HW_IPCC_Rx_Handler+0x68>)
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	f003 0301 	and.w	r3, r3, #1
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d102      	bne.n	80085e0 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 80085da:	f000 f889 	bl	80086f0 <HW_IPCC_BLE_EvtHandler>
 80085de:	e00e      	b.n	80085fe <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80085e0:	2108      	movs	r1, #8
 80085e2:	4808      	ldr	r0, [pc, #32]	@ (8008604 <HW_IPCC_Rx_Handler+0x68>)
 80085e4:	f7ff ffc4 	bl	8008570 <LL_C2_IPCC_IsActiveFlag_CHx>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d008      	beq.n	8008600 <HW_IPCC_Rx_Handler+0x64>
 80085ee:	4b05      	ldr	r3, [pc, #20]	@ (8008604 <HW_IPCC_Rx_Handler+0x68>)
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	f003 0308 	and.w	r3, r3, #8
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d102      	bne.n	8008600 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 80085fa:	f000 f901 	bl	8008800 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80085fe:	bf00      	nop
 8008600:	bf00      	nop
}
 8008602:	bd80      	pop	{r7, pc}
 8008604:	58000c00 	.word	0x58000c00

08008608 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8008608:	b580      	push	{r7, lr}
 800860a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800860c:	2102      	movs	r1, #2
 800860e:	4818      	ldr	r0, [pc, #96]	@ (8008670 <HW_IPCC_Tx_Handler+0x68>)
 8008610:	f7ff ff99 	bl	8008546 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d108      	bne.n	800862c <HW_IPCC_Tx_Handler+0x24>
 800861a:	4b15      	ldr	r3, [pc, #84]	@ (8008670 <HW_IPCC_Tx_Handler+0x68>)
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008622:	2b00      	cmp	r3, #0
 8008624:	d102      	bne.n	800862c <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8008626:	f000 f893 	bl	8008750 <HW_IPCC_SYS_CmdEvtHandler>
 800862a:	e01e      	b.n	800866a <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800862c:	2108      	movs	r1, #8
 800862e:	4810      	ldr	r0, [pc, #64]	@ (8008670 <HW_IPCC_Tx_Handler+0x68>)
 8008630:	f7ff ff89 	bl	8008546 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d108      	bne.n	800864c <HW_IPCC_Tx_Handler+0x44>
 800863a:	4b0d      	ldr	r3, [pc, #52]	@ (8008670 <HW_IPCC_Tx_Handler+0x68>)
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008642:	2b00      	cmp	r3, #0
 8008644:	d102      	bne.n	800864c <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8008646:	f000 f8bd 	bl	80087c4 <HW_IPCC_MM_FreeBufHandler>
 800864a:	e00e      	b.n	800866a <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800864c:	2120      	movs	r1, #32
 800864e:	4808      	ldr	r0, [pc, #32]	@ (8008670 <HW_IPCC_Tx_Handler+0x68>)
 8008650:	f7ff ff79 	bl	8008546 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008654:	4603      	mov	r3, r0
 8008656:	2b00      	cmp	r3, #0
 8008658:	d108      	bne.n	800866c <HW_IPCC_Tx_Handler+0x64>
 800865a:	4b05      	ldr	r3, [pc, #20]	@ (8008670 <HW_IPCC_Tx_Handler+0x68>)
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008662:	2b00      	cmp	r3, #0
 8008664:	d102      	bne.n	800866c <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8008666:	f000 f84f 	bl	8008708 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800866a:	bf00      	nop
 800866c:	bf00      	nop
}
 800866e:	bd80      	pop	{r7, pc}
 8008670:	58000c00 	.word	0x58000c00

08008674 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8008674:	b580      	push	{r7, lr}
 8008676:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8008678:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800867c:	f7ff fed3 	bl	8008426 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8008680:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008684:	f7ff fea4 	bl	80083d0 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8008688:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800868c:	f7ff fe8c 	bl	80083a8 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8008690:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8008692:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8008694:	f7ff fe78 	bl	8008388 <LL_PWR_EnableBootC2>

  return;
 8008698:	bf00      	nop
}
 800869a:	bd80      	pop	{r7, pc}

0800869c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800869c:	b580      	push	{r7, lr}
 800869e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80086a0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80086a4:	f7ff fea6 	bl	80083f4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80086a8:	4806      	ldr	r0, [pc, #24]	@ (80086c4 <HW_IPCC_Init+0x28>)
 80086aa:	f7ff fee8 	bl	800847e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80086ae:	4805      	ldr	r0, [pc, #20]	@ (80086c4 <HW_IPCC_Init+0x28>)
 80086b0:	f7ff fed5 	bl	800845e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80086b4:	202c      	movs	r0, #44	@ 0x2c
 80086b6:	f7f9 fd65 	bl	8002184 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80086ba:	202d      	movs	r0, #45	@ 0x2d
 80086bc:	f7f9 fd62 	bl	8002184 <HAL_NVIC_EnableIRQ>

  return;
 80086c0:	bf00      	nop
}
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	58000c00 	.word	0x58000c00

080086c8 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80086cc:	2101      	movs	r1, #1
 80086ce:	4802      	ldr	r0, [pc, #8]	@ (80086d8 <HW_IPCC_BLE_Init+0x10>)
 80086d0:	f7ff ff0a 	bl	80084e8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80086d4:	bf00      	nop
}
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	58000c00 	.word	0x58000c00

080086dc <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80086e0:	2101      	movs	r1, #1
 80086e2:	4802      	ldr	r0, [pc, #8]	@ (80086ec <HW_IPCC_BLE_SendCmd+0x10>)
 80086e4:	f7ff ff20 	bl	8008528 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80086e8:	bf00      	nop
}
 80086ea:	bd80      	pop	{r7, pc}
 80086ec:	58000c00 	.word	0x58000c00

080086f0 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80086f4:	f7fe ffa2 	bl	800763c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80086f8:	2101      	movs	r1, #1
 80086fa:	4802      	ldr	r0, [pc, #8]	@ (8008704 <HW_IPCC_BLE_EvtHandler+0x14>)
 80086fc:	f7ff ff06 	bl	800850c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008700:	bf00      	nop
}
 8008702:	bd80      	pop	{r7, pc}
 8008704:	58000c00 	.word	0x58000c00

08008708 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8008708:	b580      	push	{r7, lr}
 800870a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800870c:	2120      	movs	r1, #32
 800870e:	4803      	ldr	r0, [pc, #12]	@ (800871c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8008710:	f7ff fed8 	bl	80084c4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8008714:	f7fe ffc2 	bl	800769c <HW_IPCC_BLE_AclDataAckNot>

  return;
 8008718:	bf00      	nop
}
 800871a:	bd80      	pop	{r7, pc}
 800871c:	58000c00 	.word	0x58000c00

08008720 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8008720:	b580      	push	{r7, lr}
 8008722:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8008724:	2102      	movs	r1, #2
 8008726:	4802      	ldr	r0, [pc, #8]	@ (8008730 <HW_IPCC_SYS_Init+0x10>)
 8008728:	f7ff fede 	bl	80084e8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800872c:	bf00      	nop
}
 800872e:	bd80      	pop	{r7, pc}
 8008730:	58000c00 	.word	0x58000c00

08008734 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8008734:	b580      	push	{r7, lr}
 8008736:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008738:	2102      	movs	r1, #2
 800873a:	4804      	ldr	r0, [pc, #16]	@ (800874c <HW_IPCC_SYS_SendCmd+0x18>)
 800873c:	f7ff fef4 	bl	8008528 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008740:	2102      	movs	r1, #2
 8008742:	4802      	ldr	r0, [pc, #8]	@ (800874c <HW_IPCC_SYS_SendCmd+0x18>)
 8008744:	f7ff feab 	bl	800849e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8008748:	bf00      	nop
}
 800874a:	bd80      	pop	{r7, pc}
 800874c:	58000c00 	.word	0x58000c00

08008750 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8008750:	b580      	push	{r7, lr}
 8008752:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008754:	2102      	movs	r1, #2
 8008756:	4803      	ldr	r0, [pc, #12]	@ (8008764 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8008758:	f7ff feb4 	bl	80084c4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800875c:	f7fe ffee 	bl	800773c <HW_IPCC_SYS_CmdEvtNot>

  return;
 8008760:	bf00      	nop
}
 8008762:	bd80      	pop	{r7, pc}
 8008764:	58000c00 	.word	0x58000c00

08008768 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8008768:	b580      	push	{r7, lr}
 800876a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800876c:	f7fe fffc 	bl	8007768 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8008770:	2102      	movs	r1, #2
 8008772:	4802      	ldr	r0, [pc, #8]	@ (800877c <HW_IPCC_SYS_EvtHandler+0x14>)
 8008774:	f7ff feca 	bl	800850c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008778:	bf00      	nop
}
 800877a:	bd80      	pop	{r7, pc}
 800877c:	58000c00 	.word	0x58000c00

08008780 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b082      	sub	sp, #8
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8008788:	2108      	movs	r1, #8
 800878a:	480c      	ldr	r0, [pc, #48]	@ (80087bc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800878c:	f7ff fedb 	bl	8008546 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008790:	4603      	mov	r3, r0
 8008792:	2b00      	cmp	r3, #0
 8008794:	d007      	beq.n	80087a6 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8008796:	4a0a      	ldr	r2, [pc, #40]	@ (80087c0 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800879c:	2108      	movs	r1, #8
 800879e:	4807      	ldr	r0, [pc, #28]	@ (80087bc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80087a0:	f7ff fe7d 	bl	800849e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80087a4:	e006      	b.n	80087b4 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80087aa:	2108      	movs	r1, #8
 80087ac:	4803      	ldr	r0, [pc, #12]	@ (80087bc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80087ae:	f7ff febb 	bl	8008528 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80087b2:	bf00      	nop
}
 80087b4:	3708      	adds	r7, #8
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop
 80087bc:	58000c00 	.word	0x58000c00
 80087c0:	20000660 	.word	0x20000660

080087c4 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80087c8:	2108      	movs	r1, #8
 80087ca:	4806      	ldr	r0, [pc, #24]	@ (80087e4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80087cc:	f7ff fe7a 	bl	80084c4 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80087d0:	4b05      	ldr	r3, [pc, #20]	@ (80087e8 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80087d6:	2108      	movs	r1, #8
 80087d8:	4802      	ldr	r0, [pc, #8]	@ (80087e4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80087da:	f7ff fea5 	bl	8008528 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80087de:	bf00      	nop
}
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop
 80087e4:	58000c00 	.word	0x58000c00
 80087e8:	20000660 	.word	0x20000660

080087ec <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80087f0:	2108      	movs	r1, #8
 80087f2:	4802      	ldr	r0, [pc, #8]	@ (80087fc <HW_IPCC_TRACES_Init+0x10>)
 80087f4:	f7ff fe78 	bl	80084e8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80087f8:	bf00      	nop
}
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	58000c00 	.word	0x58000c00

08008800 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8008800:	b580      	push	{r7, lr}
 8008802:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8008804:	f7ff f858 	bl	80078b8 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8008808:	2108      	movs	r1, #8
 800880a:	4802      	ldr	r0, [pc, #8]	@ (8008814 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800880c:	f7ff fe7e 	bl	800850c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008810:	bf00      	nop
}
 8008812:	bd80      	pop	{r7, pc}
 8008814:	58000c00 	.word	0x58000c00

08008818 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8008818:	b480      	push	{r7}
 800881a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800881c:	4b05      	ldr	r3, [pc, #20]	@ (8008834 <UTIL_LPM_Init+0x1c>)
 800881e:	2200      	movs	r2, #0
 8008820:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8008822:	4b05      	ldr	r3, [pc, #20]	@ (8008838 <UTIL_LPM_Init+0x20>)
 8008824:	2200      	movs	r2, #0
 8008826:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8008828:	bf00      	nop
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr
 8008832:	bf00      	nop
 8008834:	20000664 	.word	0x20000664
 8008838:	20000668 	.word	0x20000668

0800883c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800883c:	b480      	push	{r7}
 800883e:	b087      	sub	sp, #28
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	460b      	mov	r3, r1
 8008846:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008848:	f3ef 8310 	mrs	r3, PRIMASK
 800884c:	613b      	str	r3, [r7, #16]
  return(result);
 800884e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8008850:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008852:	b672      	cpsid	i
}
 8008854:	bf00      	nop
  
  switch(state)
 8008856:	78fb      	ldrb	r3, [r7, #3]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d008      	beq.n	800886e <UTIL_LPM_SetOffMode+0x32>
 800885c:	2b01      	cmp	r3, #1
 800885e:	d10e      	bne.n	800887e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8008860:	4b0d      	ldr	r3, [pc, #52]	@ (8008898 <UTIL_LPM_SetOffMode+0x5c>)
 8008862:	681a      	ldr	r2, [r3, #0]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4313      	orrs	r3, r2
 8008868:	4a0b      	ldr	r2, [pc, #44]	@ (8008898 <UTIL_LPM_SetOffMode+0x5c>)
 800886a:	6013      	str	r3, [r2, #0]
      break;
 800886c:	e008      	b.n	8008880 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	43da      	mvns	r2, r3
 8008872:	4b09      	ldr	r3, [pc, #36]	@ (8008898 <UTIL_LPM_SetOffMode+0x5c>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4013      	ands	r3, r2
 8008878:	4a07      	ldr	r2, [pc, #28]	@ (8008898 <UTIL_LPM_SetOffMode+0x5c>)
 800887a:	6013      	str	r3, [r2, #0]
      break;
 800887c:	e000      	b.n	8008880 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800887e:	bf00      	nop
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f383 8810 	msr	PRIMASK, r3
}
 800888a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800888c:	bf00      	nop
 800888e:	371c      	adds	r7, #28
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr
 8008898:	20000668 	.word	0x20000668

0800889c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b090      	sub	sp, #64	@ 0x40
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80088a4:	4b73      	ldr	r3, [pc, #460]	@ (8008a74 <UTIL_SEQ_Run+0x1d8>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 80088aa:	4b72      	ldr	r3, [pc, #456]	@ (8008a74 <UTIL_SEQ_Run+0x1d8>)
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	4013      	ands	r3, r2
 80088b2:	4a70      	ldr	r2, [pc, #448]	@ (8008a74 <UTIL_SEQ_Run+0x1d8>)
 80088b4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 80088b6:	4b70      	ldr	r3, [pc, #448]	@ (8008a78 <UTIL_SEQ_Run+0x1dc>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 80088bc:	4b6f      	ldr	r3, [pc, #444]	@ (8008a7c <UTIL_SEQ_Run+0x1e0>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 80088c2:	4b6f      	ldr	r3, [pc, #444]	@ (8008a80 <UTIL_SEQ_Run+0x1e4>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 80088c8:	4b6e      	ldr	r3, [pc, #440]	@ (8008a84 <UTIL_SEQ_Run+0x1e8>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80088ce:	e08d      	b.n	80089ec <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 80088d0:	2300      	movs	r3, #0
 80088d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80088d4:	e002      	b.n	80088dc <UTIL_SEQ_Run+0x40>
    {
      counter++;
 80088d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088d8:	3301      	adds	r3, #1
 80088da:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80088dc:	4a6a      	ldr	r2, [pc, #424]	@ (8008a88 <UTIL_SEQ_Run+0x1ec>)
 80088de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088e0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80088e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e6:	401a      	ands	r2, r3
 80088e8:	4b62      	ldr	r3, [pc, #392]	@ (8008a74 <UTIL_SEQ_Run+0x1d8>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4013      	ands	r3, r2
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d0f1      	beq.n	80088d6 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 80088f2:	4a65      	ldr	r2, [pc, #404]	@ (8008a88 <UTIL_SEQ_Run+0x1ec>)
 80088f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088f6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80088fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088fc:	401a      	ands	r2, r3
 80088fe:	4b5d      	ldr	r3, [pc, #372]	@ (8008a74 <UTIL_SEQ_Run+0x1d8>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4013      	ands	r3, r2
 8008904:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8008906:	4a60      	ldr	r2, [pc, #384]	@ (8008a88 <UTIL_SEQ_Run+0x1ec>)
 8008908:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800890a:	00db      	lsls	r3, r3, #3
 800890c:	4413      	add	r3, r2
 800890e:	685a      	ldr	r2, [r3, #4]
 8008910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008912:	4013      	ands	r3, r2
 8008914:	2b00      	cmp	r3, #0
 8008916:	d106      	bne.n	8008926 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8008918:	4a5b      	ldr	r2, [pc, #364]	@ (8008a88 <UTIL_SEQ_Run+0x1ec>)
 800891a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800891c:	00db      	lsls	r3, r3, #3
 800891e:	4413      	add	r3, r2
 8008920:	f04f 32ff 	mov.w	r2, #4294967295
 8008924:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8008926:	4a58      	ldr	r2, [pc, #352]	@ (8008a88 <UTIL_SEQ_Run+0x1ec>)
 8008928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800892a:	00db      	lsls	r3, r3, #3
 800892c:	4413      	add	r3, r2
 800892e:	685a      	ldr	r2, [r3, #4]
 8008930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008932:	4013      	ands	r3, r2
 8008934:	4618      	mov	r0, r3
 8008936:	f000 f9b3 	bl	8008ca0 <SEQ_BitPosition>
 800893a:	4603      	mov	r3, r0
 800893c:	461a      	mov	r2, r3
 800893e:	4b53      	ldr	r3, [pc, #332]	@ (8008a8c <UTIL_SEQ_Run+0x1f0>)
 8008940:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8008942:	4a51      	ldr	r2, [pc, #324]	@ (8008a88 <UTIL_SEQ_Run+0x1ec>)
 8008944:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008946:	00db      	lsls	r3, r3, #3
 8008948:	4413      	add	r3, r2
 800894a:	685a      	ldr	r2, [r3, #4]
 800894c:	4b4f      	ldr	r3, [pc, #316]	@ (8008a8c <UTIL_SEQ_Run+0x1f0>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2101      	movs	r1, #1
 8008952:	fa01 f303 	lsl.w	r3, r1, r3
 8008956:	43db      	mvns	r3, r3
 8008958:	401a      	ands	r2, r3
 800895a:	494b      	ldr	r1, [pc, #300]	@ (8008a88 <UTIL_SEQ_Run+0x1ec>)
 800895c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800895e:	00db      	lsls	r3, r3, #3
 8008960:	440b      	add	r3, r1
 8008962:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008964:	f3ef 8310 	mrs	r3, PRIMASK
 8008968:	61bb      	str	r3, [r7, #24]
  return(result);
 800896a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800896c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800896e:	b672      	cpsid	i
}
 8008970:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8008972:	4b46      	ldr	r3, [pc, #280]	@ (8008a8c <UTIL_SEQ_Run+0x1f0>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	2201      	movs	r2, #1
 8008978:	fa02 f303 	lsl.w	r3, r2, r3
 800897c:	43da      	mvns	r2, r3
 800897e:	4b3e      	ldr	r3, [pc, #248]	@ (8008a78 <UTIL_SEQ_Run+0x1dc>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4013      	ands	r3, r2
 8008984:	4a3c      	ldr	r2, [pc, #240]	@ (8008a78 <UTIL_SEQ_Run+0x1dc>)
 8008986:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8008988:	2302      	movs	r3, #2
 800898a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800898c:	e013      	b.n	80089b6 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800898e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008990:	3b01      	subs	r3, #1
 8008992:	4a3d      	ldr	r2, [pc, #244]	@ (8008a88 <UTIL_SEQ_Run+0x1ec>)
 8008994:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8008998:	4b3c      	ldr	r3, [pc, #240]	@ (8008a8c <UTIL_SEQ_Run+0x1f0>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	2201      	movs	r2, #1
 800899e:	fa02 f303 	lsl.w	r3, r2, r3
 80089a2:	43da      	mvns	r2, r3
 80089a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089a6:	3b01      	subs	r3, #1
 80089a8:	400a      	ands	r2, r1
 80089aa:	4937      	ldr	r1, [pc, #220]	@ (8008a88 <UTIL_SEQ_Run+0x1ec>)
 80089ac:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80089b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089b2:	3b01      	subs	r3, #1
 80089b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1e8      	bne.n	800898e <UTIL_SEQ_Run+0xf2>
 80089bc:	6a3b      	ldr	r3, [r7, #32]
 80089be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	f383 8810 	msr	PRIMASK, r3
}
 80089c6:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80089c8:	4b30      	ldr	r3, [pc, #192]	@ (8008a8c <UTIL_SEQ_Run+0x1f0>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a30      	ldr	r2, [pc, #192]	@ (8008a90 <UTIL_SEQ_Run+0x1f4>)
 80089ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089d2:	4798      	blx	r3

    local_taskset = TaskSet;
 80089d4:	4b28      	ldr	r3, [pc, #160]	@ (8008a78 <UTIL_SEQ_Run+0x1dc>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 80089da:	4b28      	ldr	r3, [pc, #160]	@ (8008a7c <UTIL_SEQ_Run+0x1e0>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 80089e0:	4b27      	ldr	r3, [pc, #156]	@ (8008a80 <UTIL_SEQ_Run+0x1e4>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 80089e6:	4b27      	ldr	r3, [pc, #156]	@ (8008a84 <UTIL_SEQ_Run+0x1e8>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80089ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80089ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f0:	401a      	ands	r2, r3
 80089f2:	4b20      	ldr	r3, [pc, #128]	@ (8008a74 <UTIL_SEQ_Run+0x1d8>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4013      	ands	r3, r2
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d005      	beq.n	8008a08 <UTIL_SEQ_Run+0x16c>
 80089fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80089fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a00:	4013      	ands	r3, r2
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f43f af64 	beq.w	80088d0 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8008a08:	4b20      	ldr	r3, [pc, #128]	@ (8008a8c <UTIL_SEQ_Run+0x1f0>)
 8008a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a0e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8008a10:	f000 f938 	bl	8008c84 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a14:	f3ef 8310 	mrs	r3, PRIMASK
 8008a18:	613b      	str	r3, [r7, #16]
  return(result);
 8008a1a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8008a1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8008a1e:	b672      	cpsid	i
}
 8008a20:	bf00      	nop
  local_taskset = TaskSet;
 8008a22:	4b15      	ldr	r3, [pc, #84]	@ (8008a78 <UTIL_SEQ_Run+0x1dc>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8008a28:	4b14      	ldr	r3, [pc, #80]	@ (8008a7c <UTIL_SEQ_Run+0x1e0>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8008a2e:	4b14      	ldr	r3, [pc, #80]	@ (8008a80 <UTIL_SEQ_Run+0x1e4>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8008a34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a38:	401a      	ands	r2, r3
 8008a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8008a74 <UTIL_SEQ_Run+0x1d8>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4013      	ands	r3, r2
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d107      	bne.n	8008a54 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8008a44:	4b0f      	ldr	r3, [pc, #60]	@ (8008a84 <UTIL_SEQ_Run+0x1e8>)
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a4a:	4013      	ands	r3, r2
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d101      	bne.n	8008a54 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8008a50:	f7f7 ff1b 	bl	800088a <UTIL_SEQ_Idle>
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f383 8810 	msr	PRIMASK, r3
}
 8008a5e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8008a60:	f000 f917 	bl	8008c92 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8008a64:	4a03      	ldr	r2, [pc, #12]	@ (8008a74 <UTIL_SEQ_Run+0x1d8>)
 8008a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a68:	6013      	str	r3, [r2, #0]

  return;
 8008a6a:	bf00      	nop
}
 8008a6c:	3740      	adds	r7, #64	@ 0x40
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	2000002c 	.word	0x2000002c
 8008a78:	2000066c 	.word	0x2000066c
 8008a7c:	20000670 	.word	0x20000670
 8008a80:	20000028 	.word	0x20000028
 8008a84:	20000674 	.word	0x20000674
 8008a88:	200006fc 	.word	0x200006fc
 8008a8c:	20000678 	.word	0x20000678
 8008a90:	2000067c 	.word	0x2000067c

08008a94 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b088      	sub	sp, #32
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	60b9      	str	r1, [r7, #8]
 8008a9e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008aa0:	f3ef 8310 	mrs	r3, PRIMASK
 8008aa4:	617b      	str	r3, [r7, #20]
  return(result);
 8008aa6:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8008aa8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8008aaa:	b672      	cpsid	i
}
 8008aac:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8008aae:	68f8      	ldr	r0, [r7, #12]
 8008ab0:	f000 f8f6 	bl	8008ca0 <SEQ_BitPosition>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	4a06      	ldr	r2, [pc, #24]	@ (8008ad4 <UTIL_SEQ_RegTask+0x40>)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	f383 8810 	msr	PRIMASK, r3
}
 8008aca:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8008acc:	bf00      	nop
}
 8008ace:	3720      	adds	r7, #32
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	2000067c 	.word	0x2000067c

08008ad8 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b087      	sub	sp, #28
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8008ae6:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008aea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008aec:	b672      	cpsid	i
}
 8008aee:	bf00      	nop

  TaskSet |= TaskId_bm;
 8008af0:	4b0d      	ldr	r3, [pc, #52]	@ (8008b28 <UTIL_SEQ_SetTask+0x50>)
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	4313      	orrs	r3, r2
 8008af8:	4a0b      	ldr	r2, [pc, #44]	@ (8008b28 <UTIL_SEQ_SetTask+0x50>)
 8008afa:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8008afc:	4a0b      	ldr	r2, [pc, #44]	@ (8008b2c <UTIL_SEQ_SetTask+0x54>)
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	431a      	orrs	r2, r3
 8008b08:	4908      	ldr	r1, [pc, #32]	@ (8008b2c <UTIL_SEQ_SetTask+0x54>)
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	f383 8810 	msr	PRIMASK, r3
}
 8008b1a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008b1c:	bf00      	nop
}
 8008b1e:	371c      	adds	r7, #28
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr
 8008b28:	2000066c 	.word	0x2000066c
 8008b2c:	200006fc 	.word	0x200006fc

08008b30 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8008b30:	b480      	push	{r7}
 8008b32:	b087      	sub	sp, #28
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b38:	f3ef 8310 	mrs	r3, PRIMASK
 8008b3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008b40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b42:	b672      	cpsid	i
}
 8008b44:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	43da      	mvns	r2, r3
 8008b4a:	4b08      	ldr	r3, [pc, #32]	@ (8008b6c <UTIL_SEQ_PauseTask+0x3c>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4013      	ands	r3, r2
 8008b50:	4a06      	ldr	r2, [pc, #24]	@ (8008b6c <UTIL_SEQ_PauseTask+0x3c>)
 8008b52:	6013      	str	r3, [r2, #0]
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	f383 8810 	msr	PRIMASK, r3
}
 8008b5e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008b60:	bf00      	nop
}
 8008b62:	371c      	adds	r7, #28
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr
 8008b6c:	20000028 	.word	0x20000028

08008b70 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8008b70:	b480      	push	{r7}
 8008b72:	b087      	sub	sp, #28
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b78:	f3ef 8310 	mrs	r3, PRIMASK
 8008b7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008b80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b82:	b672      	cpsid	i
}
 8008b84:	bf00      	nop

  TaskMask |= TaskId_bm;
 8008b86:	4b09      	ldr	r3, [pc, #36]	@ (8008bac <UTIL_SEQ_ResumeTask+0x3c>)
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	4a07      	ldr	r2, [pc, #28]	@ (8008bac <UTIL_SEQ_ResumeTask+0x3c>)
 8008b90:	6013      	str	r3, [r2, #0]
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	f383 8810 	msr	PRIMASK, r3
}
 8008b9c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008b9e:	bf00      	nop
}
 8008ba0:	371c      	adds	r7, #28
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr
 8008baa:	bf00      	nop
 8008bac:	20000028 	.word	0x20000028

08008bb0 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b087      	sub	sp, #28
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bb8:	f3ef 8310 	mrs	r3, PRIMASK
 8008bbc:	60fb      	str	r3, [r7, #12]
  return(result);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008bc0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008bc2:	b672      	cpsid	i
}
 8008bc4:	bf00      	nop

  EvtSet |= EvtId_bm;
 8008bc6:	4b09      	ldr	r3, [pc, #36]	@ (8008bec <UTIL_SEQ_SetEvt+0x3c>)
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	4a07      	ldr	r2, [pc, #28]	@ (8008bec <UTIL_SEQ_SetEvt+0x3c>)
 8008bd0:	6013      	str	r3, [r2, #0]
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	f383 8810 	msr	PRIMASK, r3
}
 8008bdc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008bde:	bf00      	nop
}
 8008be0:	371c      	adds	r7, #28
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr
 8008bea:	bf00      	nop
 8008bec:	20000670 	.word	0x20000670

08008bf0 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b088      	sub	sp, #32
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8008bf8:	4b1f      	ldr	r3, [pc, #124]	@ (8008c78 <UTIL_SEQ_WaitEvt+0x88>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8008bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8008c78 <UTIL_SEQ_WaitEvt+0x88>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c06:	d102      	bne.n	8008c0e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	61fb      	str	r3, [r7, #28]
 8008c0c:	e005      	b.n	8008c1a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8008c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8008c78 <UTIL_SEQ_WaitEvt+0x88>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	2201      	movs	r2, #1
 8008c14:	fa02 f303 	lsl.w	r3, r2, r3
 8008c18:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8008c1a:	4b18      	ldr	r3, [pc, #96]	@ (8008c7c <UTIL_SEQ_WaitEvt+0x8c>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8008c20:	4a16      	ldr	r2, [pc, #88]	@ (8008c7c <UTIL_SEQ_WaitEvt+0x8c>)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8008c26:	e003      	b.n	8008c30 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8008c28:	6879      	ldr	r1, [r7, #4]
 8008c2a:	69f8      	ldr	r0, [r7, #28]
 8008c2c:	f7f7 fe34 	bl	8000898 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8008c30:	4b13      	ldr	r3, [pc, #76]	@ (8008c80 <UTIL_SEQ_WaitEvt+0x90>)
 8008c32:	681a      	ldr	r2, [r3, #0]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4013      	ands	r3, r2
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d0f5      	beq.n	8008c28 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8008c3c:	4a0e      	ldr	r2, [pc, #56]	@ (8008c78 <UTIL_SEQ_WaitEvt+0x88>)
 8008c3e:	69bb      	ldr	r3, [r7, #24]
 8008c40:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c42:	f3ef 8310 	mrs	r3, PRIMASK
 8008c46:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c48:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008c4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008c4c:	b672      	cpsid	i
}
 8008c4e:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	43da      	mvns	r2, r3
 8008c54:	4b0a      	ldr	r3, [pc, #40]	@ (8008c80 <UTIL_SEQ_WaitEvt+0x90>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4013      	ands	r3, r2
 8008c5a:	4a09      	ldr	r2, [pc, #36]	@ (8008c80 <UTIL_SEQ_WaitEvt+0x90>)
 8008c5c:	6013      	str	r3, [r2, #0]
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f383 8810 	msr	PRIMASK, r3
}
 8008c68:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8008c6a:	4a04      	ldr	r2, [pc, #16]	@ (8008c7c <UTIL_SEQ_WaitEvt+0x8c>)
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	6013      	str	r3, [r2, #0]
  return;
 8008c70:	bf00      	nop
}
 8008c72:	3720      	adds	r7, #32
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	20000678 	.word	0x20000678
 8008c7c:	20000674 	.word	0x20000674
 8008c80:	20000670 	.word	0x20000670

08008c84 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8008c84:	b480      	push	{r7}
 8008c86:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8008c88:	bf00      	nop
}
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr

08008c92 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8008c92:	b480      	push	{r7}
 8008c94:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8008c96:	bf00      	nop
}
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b085      	sub	sp, #20
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cb6:	d204      	bcs.n	8008cc2 <SEQ_BitPosition+0x22>
 8008cb8:	2310      	movs	r3, #16
 8008cba:	73fb      	strb	r3, [r7, #15]
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	041b      	lsls	r3, r3, #16
 8008cc0:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008cc8:	d205      	bcs.n	8008cd6 <SEQ_BitPosition+0x36>
 8008cca:	7bfb      	ldrb	r3, [r7, #15]
 8008ccc:	3308      	adds	r3, #8
 8008cce:	73fb      	strb	r3, [r7, #15]
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	021b      	lsls	r3, r3, #8
 8008cd4:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008cdc:	d205      	bcs.n	8008cea <SEQ_BitPosition+0x4a>
 8008cde:	7bfb      	ldrb	r3, [r7, #15]
 8008ce0:	3304      	adds	r3, #4
 8008ce2:	73fb      	strb	r3, [r7, #15]
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	011b      	lsls	r3, r3, #4
 8008ce8:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	0f1b      	lsrs	r3, r3, #28
 8008cee:	4a07      	ldr	r2, [pc, #28]	@ (8008d0c <SEQ_BitPosition+0x6c>)
 8008cf0:	5cd2      	ldrb	r2, [r2, r3]
 8008cf2:	7bfb      	ldrb	r3, [r7, #15]
 8008cf4:	4413      	add	r3, r2
 8008cf6:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8008cf8:	7bfb      	ldrb	r3, [r7, #15]
 8008cfa:	f1c3 031f 	rsb	r3, r3, #31
 8008cfe:	b2db      	uxtb	r3, r3
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3714      	adds	r7, #20
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr
 8008d0c:	08009048 	.word	0x08009048

08008d10 <memset>:
 8008d10:	4402      	add	r2, r0
 8008d12:	4603      	mov	r3, r0
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d100      	bne.n	8008d1a <memset+0xa>
 8008d18:	4770      	bx	lr
 8008d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8008d1e:	e7f9      	b.n	8008d14 <memset+0x4>

08008d20 <__libc_init_array>:
 8008d20:	b570      	push	{r4, r5, r6, lr}
 8008d22:	4d0d      	ldr	r5, [pc, #52]	@ (8008d58 <__libc_init_array+0x38>)
 8008d24:	4c0d      	ldr	r4, [pc, #52]	@ (8008d5c <__libc_init_array+0x3c>)
 8008d26:	1b64      	subs	r4, r4, r5
 8008d28:	10a4      	asrs	r4, r4, #2
 8008d2a:	2600      	movs	r6, #0
 8008d2c:	42a6      	cmp	r6, r4
 8008d2e:	d109      	bne.n	8008d44 <__libc_init_array+0x24>
 8008d30:	4d0b      	ldr	r5, [pc, #44]	@ (8008d60 <__libc_init_array+0x40>)
 8008d32:	4c0c      	ldr	r4, [pc, #48]	@ (8008d64 <__libc_init_array+0x44>)
 8008d34:	f000 f826 	bl	8008d84 <_init>
 8008d38:	1b64      	subs	r4, r4, r5
 8008d3a:	10a4      	asrs	r4, r4, #2
 8008d3c:	2600      	movs	r6, #0
 8008d3e:	42a6      	cmp	r6, r4
 8008d40:	d105      	bne.n	8008d4e <__libc_init_array+0x2e>
 8008d42:	bd70      	pop	{r4, r5, r6, pc}
 8008d44:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d48:	4798      	blx	r3
 8008d4a:	3601      	adds	r6, #1
 8008d4c:	e7ee      	b.n	8008d2c <__libc_init_array+0xc>
 8008d4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d52:	4798      	blx	r3
 8008d54:	3601      	adds	r6, #1
 8008d56:	e7f2      	b.n	8008d3e <__libc_init_array+0x1e>
 8008d58:	08009060 	.word	0x08009060
 8008d5c:	08009060 	.word	0x08009060
 8008d60:	08009060 	.word	0x08009060
 8008d64:	08009064 	.word	0x08009064

08008d68 <memcpy>:
 8008d68:	440a      	add	r2, r1
 8008d6a:	4291      	cmp	r1, r2
 8008d6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d70:	d100      	bne.n	8008d74 <memcpy+0xc>
 8008d72:	4770      	bx	lr
 8008d74:	b510      	push	{r4, lr}
 8008d76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d7e:	4291      	cmp	r1, r2
 8008d80:	d1f9      	bne.n	8008d76 <memcpy+0xe>
 8008d82:	bd10      	pop	{r4, pc}

08008d84 <_init>:
 8008d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d86:	bf00      	nop
 8008d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d8a:	bc08      	pop	{r3}
 8008d8c:	469e      	mov	lr, r3
 8008d8e:	4770      	bx	lr

08008d90 <_fini>:
 8008d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d92:	bf00      	nop
 8008d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d96:	bc08      	pop	{r3}
 8008d98:	469e      	mov	lr, r3
 8008d9a:	4770      	bx	lr
